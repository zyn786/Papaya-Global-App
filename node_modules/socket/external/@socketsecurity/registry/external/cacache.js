'use strict'

const require$$0 = require('events')
const require$$1 = require('stream')
const require$$2 = require('string_decoder')
const require$$0$1 = require('events')
const require$$1$1 = require('stream')
const require$$2$1 = require('string_decoder')
const require$$0$2 = require('crypto')
const require$$0$5 = require('fs/promises')
const require$$0$3 = require('path')
const require$$0$4 = require('util')
const require$$1$2 = require('os')
const require$$4 = require('url')
const require$$2$2 = require('fs')
const require$$2$3 = require('url')
const require$$1$3 = require('path')
const require$$4$1 = require('fs')
const require$$5 = require('fs/promises')

const lib$5 = { exports: {} }

const get = { exports: {} }

const minipassCollect = { exports: {} }

const commonjs$7 = {}

let hasRequiredCommonjs$7
function requireCommonjs$7() {
  if (hasRequiredCommonjs$7) {
    return commonjs$7
  }
  hasRequiredCommonjs$7 = 1
  ;(function (exports) {
    const __importDefault =
      (this && this.__importDefault) ||
      function (mod) {
        return mod && mod.__esModule
          ? mod
          : {
              default: mod
            }
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Minipass =
      exports.isWritable =
      exports.isReadable =
      exports.isStream =
        void 0
    const proc =
      typeof process === 'object' && process
        ? process
        : {
            stdout: null,
            stderr: null
          }
    const node_events_1 = require$$0
    const node_stream_1 = __importDefault(require$$1)
    const node_string_decoder_1 = require$$2
    /**
     * Return true if the argument is a Minipass stream, Node stream, or something
     * else that Minipass can interact with.
     */
    const isStream = s =>
      !!s &&
      typeof s === 'object' &&
      (s instanceof Minipass ||
        s instanceof node_stream_1.default ||
        (0, exports.isReadable)(s) ||
        (0, exports.isWritable)(s))
    exports.isStream = isStream
    /**
     * Return true if the argument is a valid {@link Minipass.Readable}
     */
    const isReadable = s =>
      !!s &&
      typeof s === 'object' &&
      s instanceof node_events_1.EventEmitter &&
      typeof s.pipe === 'function' &&
      // node core Writable streams have a pipe() method, but it throws
      s.pipe !== node_stream_1.default.Writable.prototype.pipe
    exports.isReadable = isReadable
    /**
     * Return true if the argument is a valid {@link Minipass.Writable}
     */
    const isWritable = s =>
      !!s &&
      typeof s === 'object' &&
      s instanceof node_events_1.EventEmitter &&
      typeof s.write === 'function' &&
      typeof s.end === 'function'
    exports.isWritable = isWritable
    const EOF = Symbol('EOF')
    const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
    const EMITTED_END = Symbol('emittedEnd')
    const EMITTING_END = Symbol('emittingEnd')
    const EMITTED_ERROR = Symbol('emittedError')
    const CLOSED = Symbol('closed')
    const READ = Symbol('read')
    const FLUSH = Symbol('flush')
    const FLUSHCHUNK = Symbol('flushChunk')
    const ENCODING = Symbol('encoding')
    const DECODER = Symbol('decoder')
    const FLOWING = Symbol('flowing')
    const PAUSED = Symbol('paused')
    const RESUME = Symbol('resume')
    const BUFFER = Symbol('buffer')
    const PIPES = Symbol('pipes')
    const BUFFERLENGTH = Symbol('bufferLength')
    const BUFFERPUSH = Symbol('bufferPush')
    const BUFFERSHIFT = Symbol('bufferShift')
    const OBJECTMODE = Symbol('objectMode')
    // internal event when stream is destroyed
    const DESTROYED = Symbol('destroyed')
    // internal event when stream has an error
    const ERROR = Symbol('error')
    const EMITDATA = Symbol('emitData')
    const EMITEND = Symbol('emitEnd')
    const EMITEND2 = Symbol('emitEnd2')
    const ASYNC = Symbol('async')
    const ABORT = Symbol('abort')
    const ABORTED = Symbol('aborted')
    const SIGNAL = Symbol('signal')
    const DATALISTENERS = Symbol('dataListeners')
    const DISCARDED = Symbol('discarded')
    const defer = fn => Promise.resolve().then(fn)
    const nodefer = fn => fn()
    const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
    const isArrayBufferLike = b =>
      b instanceof ArrayBuffer ||
      (!!b &&
        typeof b === 'object' &&
        b.constructor &&
        b.constructor.name === 'ArrayBuffer' &&
        b.byteLength >= 0)
    const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
    /**
     * Internal class representing a pipe to a destination stream.
     *
     * @internal
     */
    class Pipe {
      src
      dest
      opts
      ondrain
      constructor(src, dest, opts) {
        this.src = src
        this.dest = dest
        this.opts = opts
        this.ondrain = () => src[RESUME]()
        this.dest.on('drain', this.ondrain)
      }
      unpipe() {
        this.dest.removeListener('drain', this.ondrain)
      }
      // only here for the prototype
      /* c8 ignore start */
      proxyErrors(_er) {}
      /* c8 ignore stop */
      end() {
        this.unpipe()
        if (this.opts.end) {
          this.dest.end()
        }
      }
    }
    /**
     * Internal class representing a pipe to a destination stream where
     * errors are proxied.
     *
     * @internal
     */
    class PipeProxyErrors extends Pipe {
      unpipe() {
        this.src.removeListener('error', this.proxyErrors)
        super.unpipe()
      }
      constructor(src, dest, opts) {
        super(src, dest, opts)
        this.proxyErrors = er => dest.emit('error', er)
        src.on('error', this.proxyErrors)
      }
    }
    const isObjectModeOptions = o => !!o.objectMode
    const isEncodingOptions = o =>
      !o.objectMode && !!o.encoding && o.encoding !== 'buffer'
    /**
     * Main export, the Minipass class
     *
     * `RType` is the type of data emitted, defaults to Buffer
     *
     * `WType` is the type of data to be written, if RType is buffer or string,
     * then any {@link Minipass.ContiguousData} is allowed.
     *
     * `Events` is the set of event handler signatures that this object
     * will emit, see {@link Minipass.Events}
     */
    class Minipass extends node_events_1.EventEmitter {
      [FLOWING] = false;
      [PAUSED] = false;
      [PIPES] = [];
      [BUFFER] = [];
      [OBJECTMODE];
      [ENCODING];
      [ASYNC];
      [DECODER];
      [EOF] = false;
      [EMITTED_END] = false;
      [EMITTING_END] = false;
      [CLOSED] = false;
      [EMITTED_ERROR] = null;
      [BUFFERLENGTH] = 0;
      [DESTROYED] = false;
      [SIGNAL];
      [ABORTED] = false;
      [DATALISTENERS] = 0;
      [DISCARDED] = false
      /**
       * true if the stream can be written
       */
      writable = true
      /**
       * true if the stream can be read
       */
      readable = true
      /**
       * If `RType` is Buffer, then options do not need to be provided.
       * Otherwise, an options object must be provided to specify either
       * {@link Minipass.SharedOptions.objectMode} or
       * {@link Minipass.SharedOptions.encoding}, as appropriate.
       */
      constructor(...args) {
        const options = args[0] || {}
        super()
        if (options.objectMode && typeof options.encoding === 'string') {
          throw new TypeError(
            'Encoding and objectMode may not be used together'
          )
        }
        if (isObjectModeOptions(options)) {
          this[OBJECTMODE] = true
          this[ENCODING] = null
        } else if (isEncodingOptions(options)) {
          this[ENCODING] = options.encoding
          this[OBJECTMODE] = false
        } else {
          this[OBJECTMODE] = false
          this[ENCODING] = null
        }
        this[ASYNC] = !!options.async
        this[DECODER] = this[ENCODING]
          ? new node_string_decoder_1.StringDecoder(this[ENCODING])
          : null
        //@ts-ignore - private option for debugging and testing
        if (options && options.debugExposeBuffer === true) {
          Object.defineProperty(this, 'buffer', {
            get: () => this[BUFFER]
          })
        }
        //@ts-ignore - private option for debugging and testing
        if (options && options.debugExposePipes === true) {
          Object.defineProperty(this, 'pipes', {
            get: () => this[PIPES]
          })
        }
        const { signal } = options
        if (signal) {
          this[SIGNAL] = signal
          if (signal.aborted) {
            this[ABORT]()
          } else {
            signal.addEventListener('abort', () => this[ABORT]())
          }
        }
      }
      /**
       * The amount of data stored in the buffer waiting to be read.
       *
       * For Buffer strings, this will be the total byte length.
       * For string encoding streams, this will be the string character length,
       * according to JavaScript's `string.length` logic.
       * For objectMode streams, this is a count of the items waiting to be
       * emitted.
       */
      get bufferLength() {
        return this[BUFFERLENGTH]
      }
      /**
       * The `BufferEncoding` currently in use, or `null`
       */
      get encoding() {
        return this[ENCODING]
      }
      /**
       * @deprecated - This is a read only property
       */
      set encoding(_enc) {
        throw new Error('Encoding must be set at instantiation time')
      }
      /**
       * @deprecated - Encoding may only be set at instantiation time
       */
      setEncoding(_enc) {
        throw new Error('Encoding must be set at instantiation time')
      }
      /**
       * True if this is an objectMode stream
       */
      get objectMode() {
        return this[OBJECTMODE]
      }
      /**
       * @deprecated - This is a read-only property
       */
      set objectMode(_om) {
        throw new Error('objectMode must be set at instantiation time')
      }
      /**
       * true if this is an async stream
       */
      get ['async']() {
        return this[ASYNC]
      }
      /**
       * Set to true to make this stream async.
       *
       * Once set, it cannot be unset, as this would potentially cause incorrect
       * behavior.  Ie, a sync stream can be made async, but an async stream
       * cannot be safely made sync.
       */
      set ['async'](a) {
        this[ASYNC] = this[ASYNC] || !!a
      }
      // drop everything and get out of the flow completely
      [ABORT]() {
        this[ABORTED] = true
        this.emit('abort', this[SIGNAL]?.reason)
        this.destroy(this[SIGNAL]?.reason)
      }
      /**
       * True if the stream has been aborted.
       */
      get aborted() {
        return this[ABORTED]
      }
      /**
       * No-op setter. Stream aborted status is set via the AbortSignal provided
       * in the constructor options.
       */
      set aborted(_) {}
      write(chunk, encoding, cb) {
        if (this[ABORTED]) {
          return false
        }
        if (this[EOF]) {
          throw new Error('write after end')
        }
        if (this[DESTROYED]) {
          this.emit(
            'error',
            Object.assign(
              new Error('Cannot call write after a stream was destroyed'),
              {
                code: 'ERR_STREAM_DESTROYED'
              }
            )
          )
          return true
        }
        if (typeof encoding === 'function') {
          cb = encoding
          encoding = 'utf8'
        }
        if (!encoding) {
          encoding = 'utf8'
        }
        const fn = this[ASYNC] ? defer : nodefer
        // convert array buffers and typed array views into buffers
        // at some point in the future, we may want to do the opposite!
        // leave strings and buffers as-is
        // anything is only allowed if in object mode, so throw
        if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
          if (isArrayBufferView(chunk)) {
            //@ts-ignore - sinful unsafe type changing
            chunk = Buffer.from(
              chunk.buffer,
              chunk.byteOffset,
              chunk.byteLength
            )
          } else if (isArrayBufferLike(chunk)) {
            //@ts-ignore - sinful unsafe type changing
            chunk = Buffer.from(chunk)
          } else if (typeof chunk !== 'string') {
            throw new Error(
              'Non-contiguous data written to non-objectMode stream'
            )
          }
        }
        // handle object mode up front, since it's simpler
        // this yields better performance, fewer checks later.
        if (this[OBJECTMODE]) {
          // maybe impossible?
          /* c8 ignore start */
          if (this[FLOWING] && this[BUFFERLENGTH] !== 0) {
            this[FLUSH](true)
          }
          /* c8 ignore stop */
          if (this[FLOWING]) {
            this.emit('data', chunk)
          } else {
            this[BUFFERPUSH](chunk)
          }
          if (this[BUFFERLENGTH] !== 0) {
            this.emit('readable')
          }
          if (cb) {
            fn(cb)
          }
          return this[FLOWING]
        }
        // at this point the chunk is a buffer or string
        // don't buffer it up or send it to the decoder
        if (!chunk.length) {
          if (this[BUFFERLENGTH] !== 0) {
            this.emit('readable')
          }
          if (cb) {
            fn(cb)
          }
          return this[FLOWING]
        }
        // fast-path writing strings of same encoding to a stream with
        // an empty buffer, skipping the buffer/decoder dance
        if (
          typeof chunk === 'string' &&
          // unless it is a string already ready for us to use
          !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)
        ) {
          //@ts-ignore - sinful unsafe type change
          chunk = Buffer.from(chunk, encoding)
        }
        if (Buffer.isBuffer(chunk) && this[ENCODING]) {
          //@ts-ignore - sinful unsafe type change
          chunk = this[DECODER].write(chunk)
        }
        // Note: flushing CAN potentially switch us into not-flowing mode
        if (this[FLOWING] && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this[FLOWING]) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this[FLOWING]
      }
      /**
       * Low-level explicit read method.
       *
       * In objectMode, the argument is ignored, and one item is returned if
       * available.
       *
       * `n` is the number of bytes (or in the case of encoding streams,
       * characters) to consume. If `n` is not provided, then the entire buffer
       * is returned, or `null` is returned if no data is available.
       *
       * If `n` is greater that the amount of data in the internal buffer,
       * then `null` is returned.
       */
      read(n) {
        if (this[DESTROYED]) {
          return null
        }
        this[DISCARDED] = false
        if (
          this[BUFFERLENGTH] === 0 ||
          n === 0 ||
          (n && n > this[BUFFERLENGTH])
        ) {
          this[MAYBE_EMIT_END]()
          return null
        }
        if (this[OBJECTMODE]) {
          n = null
        }
        if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {
          // not object mode, so if we have an encoding, then RType is string
          // otherwise, must be Buffer
          this[BUFFER] = [
            this[ENCODING]
              ? this[BUFFER].join('')
              : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])
          ]
        }
        const ret = this[READ](n || null, this[BUFFER][0])
        this[MAYBE_EMIT_END]()
        return ret
      }
      [READ](n, chunk) {
        if (this[OBJECTMODE]) {
          this[BUFFERSHIFT]()
        } else {
          const c = chunk
          if (n === c.length || n === null) {
            this[BUFFERSHIFT]()
          } else if (typeof c === 'string') {
            this[BUFFER][0] = c.slice(n)
            chunk = c.slice(0, n)
            this[BUFFERLENGTH] -= n
          } else {
            this[BUFFER][0] = c.subarray(n)
            chunk = c.subarray(0, n)
            this[BUFFERLENGTH] -= n
          }
        }
        this.emit('data', chunk)
        if (!this[BUFFER].length && !this[EOF]) {
          this.emit('drain')
        }
        return chunk
      }
      end(chunk, encoding, cb) {
        if (typeof chunk === 'function') {
          cb = chunk
          chunk = undefined
        }
        if (typeof encoding === 'function') {
          cb = encoding
          encoding = 'utf8'
        }
        if (chunk !== undefined) {
          this.write(chunk, encoding)
        }
        if (cb) {
          this.once('end', cb)
        }
        this[EOF] = true
        this.writable = false
        // if we haven't written anything, then go ahead and emit,
        // even if we're not reading.
        // we'll re-emit if a new 'end' listener is added anyway.
        // This makes MP more suitable to write-only use cases.
        if (this[FLOWING] || !this[PAUSED]) {
          this[MAYBE_EMIT_END]()
        }
        return this
      }
      // don't let the internal resume be overwritten
      [RESUME]() {
        if (this[DESTROYED]) {
          return
        }
        if (!this[DATALISTENERS] && !this[PIPES].length) {
          this[DISCARDED] = true
        }
        this[PAUSED] = false
        this[FLOWING] = true
        this.emit('resume')
        if (this[BUFFER].length) {
          this[FLUSH]()
        } else if (this[EOF]) {
          this[MAYBE_EMIT_END]()
        } else {
          this.emit('drain')
        }
      }
      /**
       * Resume the stream if it is currently in a paused state
       *
       * If called when there are no pipe destinations or `data` event listeners,
       * this will place the stream in a "discarded" state, where all data will
       * be thrown away. The discarded state is removed if a pipe destination or
       * data handler is added, if pause() is called, or if any synchronous or
       * asynchronous iteration is started.
       */
      resume() {
        return this[RESUME]()
      }
      /**
       * Pause the stream
       */
      pause() {
        this[FLOWING] = false
        this[PAUSED] = true
        this[DISCARDED] = false
      }
      /**
       * true if the stream has been forcibly destroyed
       */
      get destroyed() {
        return this[DESTROYED]
      }
      /**
       * true if the stream is currently in a flowing state, meaning that
       * any writes will be immediately emitted.
       */
      get flowing() {
        return this[FLOWING]
      }
      /**
       * true if the stream is currently in a paused state
       */
      get paused() {
        return this[PAUSED]
      }
      [BUFFERPUSH](chunk) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] += 1
        } else {
          this[BUFFERLENGTH] += chunk.length
        }
        this[BUFFER].push(chunk)
      }
      [BUFFERSHIFT]() {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this[BUFFER][0].length
        }
        return this[BUFFER].shift()
      }
      [FLUSH](noDrain = false) {
        do {} while (
          this[FLUSHCHUNK](this[BUFFERSHIFT]()) &&
          this[BUFFER].length
        )
        if (!noDrain && !this[BUFFER].length && !this[EOF]) {
          this.emit('drain')
        }
      }
      [FLUSHCHUNK](chunk) {
        this.emit('data', chunk)
        return this[FLOWING]
      }
      /**
       * Pipe all data emitted by this stream into the destination provided.
       *
       * Triggers the flow of data.
       */
      pipe(dest, opts) {
        if (this[DESTROYED]) {
          return dest
        }
        this[DISCARDED] = false
        const ended = this[EMITTED_END]
        opts = opts || {}
        if (dest === proc.stdout || dest === proc.stderr) {
          opts.end = false
        } else {
          opts.end = opts.end !== false
        }
        opts.proxyErrors = !!opts.proxyErrors
        // piping an ended stream ends immediately
        if (ended) {
          if (opts.end) {
            dest.end()
          }
        } else {
          // "as" here just ignores the WType, which pipes don't care about,
          // since they're only consuming from us, and writing to the dest
          this[PIPES].push(
            !opts.proxyErrors
              ? new Pipe(this, dest, opts)
              : new PipeProxyErrors(this, dest, opts)
          )
          if (this[ASYNC]) {
            defer(() => this[RESUME]())
          } else {
            this[RESUME]()
          }
        }
        return dest
      }
      /**
       * Fully unhook a piped destination stream.
       *
       * If the destination stream was the only consumer of this stream (ie,
       * there are no other piped destinations or `'data'` event listeners)
       * then the flow of data will stop until there is another consumer or
       * {@link Minipass#resume} is explicitly called.
       */
      unpipe(dest) {
        const p = this[PIPES].find(p => p.dest === dest)
        if (p) {
          if (this[PIPES].length === 1) {
            if (this[FLOWING] && this[DATALISTENERS] === 0) {
              this[FLOWING] = false
            }
            this[PIPES] = []
          } else {
            this[PIPES].splice(this[PIPES].indexOf(p), 1)
          }
          p.unpipe()
        }
      }
      /**
       * Alias for {@link Minipass#on}
       */
      addListener(ev, handler) {
        return this.on(ev, handler)
      }
      /**
       * Mostly identical to `EventEmitter.on`, with the following
       * behavior differences to prevent data loss and unnecessary hangs:
       *
       * - Adding a 'data' event handler will trigger the flow of data
       *
       * - Adding a 'readable' event handler when there is data waiting to be read
       *   will cause 'readable' to be emitted immediately.
       *
       * - Adding an 'endish' event handler ('end', 'finish', etc.) which has
       *   already passed will cause the event to be emitted immediately and all
       *   handlers removed.
       *
       * - Adding an 'error' event handler after an error has been emitted will
       *   cause the event to be re-emitted immediately with the error previously
       *   raised.
       */
      on(ev, handler) {
        const ret = super.on(ev, handler)
        if (ev === 'data') {
          this[DISCARDED] = false
          this[DATALISTENERS]++
          if (!this[PIPES].length && !this[FLOWING]) {
            this[RESUME]()
          }
        } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
          super.emit('readable')
        } else if (isEndish(ev) && this[EMITTED_END]) {
          super.emit(ev)
          this.removeAllListeners(ev)
        } else if (ev === 'error' && this[EMITTED_ERROR]) {
          const h = handler
          if (this[ASYNC]) {
            defer(() => h.call(this, this[EMITTED_ERROR]))
          } else {
            h.call(this, this[EMITTED_ERROR])
          }
        }
        return ret
      }
      /**
       * Alias for {@link Minipass#off}
       */
      removeListener(ev, handler) {
        return this.off(ev, handler)
      }
      /**
       * Mostly identical to `EventEmitter.off`
       *
       * If a 'data' event handler is removed, and it was the last consumer
       * (ie, there are no pipe destinations or other 'data' event listeners),
       * then the flow of data will stop until there is another consumer or
       * {@link Minipass#resume} is explicitly called.
       */
      off(ev, handler) {
        const ret = super.off(ev, handler)
        // if we previously had listeners, and now we don't, and we don't
        // have any pipes, then stop the flow, unless it's been explicitly
        // put in a discarded flowing state via stream.resume().
        if (ev === 'data') {
          this[DATALISTENERS] = this.listeners('data').length
          if (
            this[DATALISTENERS] === 0 &&
            !this[DISCARDED] &&
            !this[PIPES].length
          ) {
            this[FLOWING] = false
          }
        }
        return ret
      }
      /**
       * Mostly identical to `EventEmitter.removeAllListeners`
       *
       * If all 'data' event handlers are removed, and they were the last consumer
       * (ie, there are no pipe destinations), then the flow of data will stop
       * until there is another consumer or {@link Minipass#resume} is explicitly
       * called.
       */
      removeAllListeners(ev) {
        const ret = super.removeAllListeners(ev)
        if (ev === 'data' || ev === undefined) {
          this[DATALISTENERS] = 0
          if (!this[DISCARDED] && !this[PIPES].length) {
            this[FLOWING] = false
          }
        }
        return ret
      }
      /**
       * true if the 'end' event has been emitted
       */
      get emittedEnd() {
        return this[EMITTED_END]
      }
      [MAYBE_EMIT_END]() {
        if (
          !this[EMITTING_END] &&
          !this[EMITTED_END] &&
          !this[DESTROYED] &&
          this[BUFFER].length === 0 &&
          this[EOF]
        ) {
          this[EMITTING_END] = true
          this.emit('end')
          this.emit('prefinish')
          this.emit('finish')
          if (this[CLOSED]) {
            this.emit('close')
          }
          this[EMITTING_END] = false
        }
      }
      /**
       * Mostly identical to `EventEmitter.emit`, with the following
       * behavior differences to prevent data loss and unnecessary hangs:
       *
       * If the stream has been destroyed, and the event is something other
       * than 'close' or 'error', then `false` is returned and no handlers
       * are called.
       *
       * If the event is 'end', and has already been emitted, then the event
       * is ignored. If the stream is in a paused or non-flowing state, then
       * the event will be deferred until data flow resumes. If the stream is
       * async, then handlers will be called on the next tick rather than
       * immediately.
       *
       * If the event is 'close', and 'end' has not yet been emitted, then
       * the event will be deferred until after 'end' is emitted.
       *
       * If the event is 'error', and an AbortSignal was provided for the stream,
       * and there are no listeners, then the event is ignored, matching the
       * behavior of node core streams in the presense of an AbortSignal.
       *
       * If the event is 'finish' or 'prefinish', then all listeners will be
       * removed after emitting the event, to prevent double-firing.
       */
      emit(ev, ...args) {
        const data = args[0]
        // error and close are only events allowed after calling destroy()
        if (
          ev !== 'error' &&
          ev !== 'close' &&
          ev !== DESTROYED &&
          this[DESTROYED]
        ) {
          return false
        } else if (ev === 'data') {
          return !this[OBJECTMODE] && !data
            ? false
            : this[ASYNC]
              ? (defer(() => this[EMITDATA](data)), true)
              : this[EMITDATA](data)
        } else if (ev === 'end') {
          return this[EMITEND]()
        } else if (ev === 'close') {
          this[CLOSED] = true
          // don't emit close before 'end' and 'finish'
          if (!this[EMITTED_END] && !this[DESTROYED]) {
            return false
          }
          const ret = super.emit('close')
          this.removeAllListeners('close')
          return ret
        } else if (ev === 'error') {
          this[EMITTED_ERROR] = data
          super.emit(ERROR, data)
          const ret =
            !this[SIGNAL] || this.listeners('error').length
              ? super.emit('error', data)
              : false
          this[MAYBE_EMIT_END]()
          return ret
        } else if (ev === 'resume') {
          const ret = super.emit('resume')
          this[MAYBE_EMIT_END]()
          return ret
        } else if (ev === 'finish' || ev === 'prefinish') {
          const ret = super.emit(ev)
          this.removeAllListeners(ev)
          return ret
        }
        // Some other unknown event
        const ret = super.emit(ev, ...args)
        this[MAYBE_EMIT_END]()
        return ret
      }
      [EMITDATA](data) {
        for (const p of this[PIPES]) {
          if (p.dest.write(data) === false) {
            this.pause()
          }
        }
        const ret = this[DISCARDED] ? false : super.emit('data', data)
        this[MAYBE_EMIT_END]()
        return ret
      }
      [EMITEND]() {
        if (this[EMITTED_END]) {
          return false
        }
        this[EMITTED_END] = true
        this.readable = false
        return this[ASYNC]
          ? (defer(() => this[EMITEND2]()), true)
          : this[EMITEND2]()
      }
      [EMITEND2]() {
        if (this[DECODER]) {
          const data = this[DECODER].end()
          if (data) {
            for (const p of this[PIPES]) {
              p.dest.write(data)
            }
            if (!this[DISCARDED]) {
              super.emit('data', data)
            }
          }
        }
        for (const p of this[PIPES]) {
          p.end()
        }
        const ret = super.emit('end')
        this.removeAllListeners('end')
        return ret
      }
      /**
       * Return a Promise that resolves to an array of all emitted data once
       * the stream ends.
       */
      async collect() {
        const buf = Object.assign([], {
          dataLength: 0
        })
        if (!this[OBJECTMODE]) {
          buf.dataLength = 0
        }
        // set the promise first, in case an error is raised
        // by triggering the flow here.
        const p = this.promise()
        this.on('data', c => {
          buf.push(c)
          if (!this[OBJECTMODE]) {
            buf.dataLength += c.length
          }
        })
        await p
        return buf
      }
      /**
       * Return a Promise that resolves to the concatenation of all emitted data
       * once the stream ends.
       *
       * Not allowed on objectMode streams.
       */
      async concat() {
        if (this[OBJECTMODE]) {
          throw new Error('cannot concat in objectMode')
        }
        const buf = await this.collect()
        return this[ENCODING]
          ? buf.join('')
          : Buffer.concat(buf, buf.dataLength)
      }
      /**
       * Return a void Promise that resolves once the stream ends.
       */
      async promise() {
        return new Promise((resolve, reject) => {
          this.on(DESTROYED, () => reject(new Error('stream destroyed')))
          this.on('error', er => reject(er))
          this.on('end', () => resolve())
        })
      }
      /**
       * Asynchronous `for await of` iteration.
       *
       * This will continue emitting all chunks until the stream terminates.
       */
      [Symbol.asyncIterator]() {
        // set this up front, in case the consumer doesn't call next()
        // right away.
        this[DISCARDED] = false
        let stopped = false
        const stop = async () => {
          this.pause()
          stopped = true
          return {
            value: undefined,
            done: true
          }
        }
        const next = () => {
          if (stopped) {
            return stop()
          }
          const res = this.read()
          if (res !== null) {
            return Promise.resolve({
              done: false,
              value: res
            })
          }
          if (this[EOF]) {
            return stop()
          }
          let resolve
          let reject
          const onerr = er => {
            this.off('data', ondata)
            this.off('end', onend)
            this.off(DESTROYED, ondestroy)
            stop()
            reject(er)
          }
          const ondata = value => {
            this.off('error', onerr)
            this.off('end', onend)
            this.off(DESTROYED, ondestroy)
            this.pause()
            resolve({
              value,
              done: !!this[EOF]
            })
          }
          const onend = () => {
            this.off('error', onerr)
            this.off('data', ondata)
            this.off(DESTROYED, ondestroy)
            stop()
            resolve({
              done: true,
              value: undefined
            })
          }
          const ondestroy = () => onerr(new Error('stream destroyed'))
          return new Promise((res, rej) => {
            reject = rej
            resolve = res
            this.once(DESTROYED, ondestroy)
            this.once('error', onerr)
            this.once('end', onend)
            this.once('data', ondata)
          })
        }
        return {
          next,
          throw: stop,
          return: stop,
          [Symbol.asyncIterator]() {
            return this
          }
        }
      }
      /**
       * Synchronous `for of` iteration.
       *
       * The iteration will terminate when the internal buffer runs out, even
       * if the stream has not yet terminated.
       */
      [Symbol.iterator]() {
        // set this up front, in case the consumer doesn't call next()
        // right away.
        this[DISCARDED] = false
        let stopped = false
        const stop = () => {
          this.pause()
          this.off(ERROR, stop)
          this.off(DESTROYED, stop)
          this.off('end', stop)
          stopped = true
          return {
            done: true,
            value: undefined
          }
        }
        const next = () => {
          if (stopped) {
            return stop()
          }
          const value = this.read()
          return value === null
            ? stop()
            : {
                done: false,
                value
              }
        }
        this.once('end', stop)
        this.once(ERROR, stop)
        this.once(DESTROYED, stop)
        return {
          next,
          throw: stop,
          return: stop,
          [Symbol.iterator]() {
            return this
          }
        }
      }
      /**
       * Destroy a stream, preventing it from being used for any further purpose.
       *
       * If the stream has a `close()` method, then it will be called on
       * destruction.
       *
       * After destruction, any attempt to write data, read data, or emit most
       * events will be ignored.
       *
       * If an error argument is provided, then it will be emitted in an
       * 'error' event.
       */
      destroy(er) {
        if (this[DESTROYED]) {
          if (er) {
            this.emit('error', er)
          } else {
            this.emit(DESTROYED)
          }
          return this
        }
        this[DESTROYED] = true
        this[DISCARDED] = true
        // throw away all buffered data, it's never coming out
        this[BUFFER].length = 0
        this[BUFFERLENGTH] = 0
        const wc = this
        if (typeof wc.close === 'function' && !this[CLOSED]) {
          wc.close()
        }
        if (er) {
          this.emit('error', er)
        }
        // if no error to emit, still reject pending promises
        else {
          this.emit(DESTROYED)
        }
        return this
      }
      /**
       * Alias for {@link isStream}
       *
       * Former export location, maintained for backwards compatibility.
       *
       * @deprecated
       */
      static get isStream() {
        return exports.isStream
      }
    }
    exports.Minipass = Minipass
  })(commonjs$7)
  return commonjs$7
}

let hasRequiredMinipassCollect
function requireMinipassCollect() {
  if (hasRequiredMinipassCollect) {
    return minipassCollect.exports
  }
  hasRequiredMinipassCollect = 1
  const { Minipass } = requireCommonjs$7()
  const _data = Symbol('_data')
  const _length = Symbol('_length')
  class Collect extends Minipass {
    constructor(options) {
      super(options)
      this[_data] = []
      this[_length] = 0
    }
    write(chunk, encoding, cb) {
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding)
      this[_data].push(c)
      this[_length] += c.length
      if (cb) {
        cb()
      }
      return true
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      const result = Buffer.concat(this[_data], this[_length])
      super.write(result)
      return super.end(cb)
    }
  }
  minipassCollect.exports = Collect

  // it would be possible to DRY this a bit by doing something like
  // this.collector = new Collect() and listening on its data event,
  // but it's not much code, and we may as well save the extra obj
  class CollectPassThrough extends Minipass {
    constructor(options) {
      super(options)
      this[_data] = []
      this[_length] = 0
    }
    write(chunk, encoding, cb) {
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding)
      this[_data].push(c)
      this[_length] += c.length
      return super.write(chunk, encoding, cb)
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      const result = Buffer.concat(this[_data], this[_length])
      this.emit('collect', result)
      return super.end(cb)
    }
  }
  minipassCollect.exports.PassThrough = CollectPassThrough
  return minipassCollect.exports
}

let minipass$1
let hasRequiredMinipass$1
function requireMinipass$1() {
  if (hasRequiredMinipass$1) {
    return minipass$1
  }
  hasRequiredMinipass$1 = 1
  const proc =
    typeof process === 'object' && process
      ? process
      : {
          stdout: null,
          stderr: null
        }
  const EE = require$$0$1
  const Stream = require$$1$1
  const SD = require$$2$1.StringDecoder
  const EOF = Symbol('EOF')
  const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
  const EMITTED_END = Symbol('emittedEnd')
  const EMITTING_END = Symbol('emittingEnd')
  const EMITTED_ERROR = Symbol('emittedError')
  const CLOSED = Symbol('closed')
  const READ = Symbol('read')
  const FLUSH = Symbol('flush')
  const FLUSHCHUNK = Symbol('flushChunk')
  const ENCODING = Symbol('encoding')
  const DECODER = Symbol('decoder')
  const FLOWING = Symbol('flowing')
  const PAUSED = Symbol('paused')
  const RESUME = Symbol('resume')
  const BUFFERLENGTH = Symbol('bufferLength')
  const BUFFERPUSH = Symbol('bufferPush')
  const BUFFERSHIFT = Symbol('bufferShift')
  const OBJECTMODE = Symbol('objectMode')
  const DESTROYED = Symbol('destroyed')
  const EMITDATA = Symbol('emitData')
  const EMITEND = Symbol('emitEnd')
  const EMITEND2 = Symbol('emitEnd2')
  const ASYNC = Symbol('async')
  const defer = fn => Promise.resolve().then(fn)

  // TODO remove when Node v8 support drops
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'
  const ASYNCITERATOR =
    (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')
  const ITERATOR =
    (doIter && Symbol.iterator) || Symbol('iterator not implemented')

  // events that mean 'the stream is over'
  // these are treated specially, and re-emitted
  // if they are listened for after emitting.
  const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
  const isArrayBuffer = b =>
    b instanceof ArrayBuffer ||
    (typeof b === 'object' &&
      b.constructor &&
      b.constructor.name === 'ArrayBuffer' &&
      b.byteLength >= 0)
  const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
  class Pipe {
    constructor(src, dest, opts) {
      this.src = src
      this.dest = dest
      this.opts = opts
      this.ondrain = () => src[RESUME]()
      dest.on('drain', this.ondrain)
    }
    unpipe() {
      this.dest.removeListener('drain', this.ondrain)
    }
    // istanbul ignore next - only here for the prototype
    proxyErrors() {}
    end() {
      this.unpipe()
      if (this.opts.end) {
        this.dest.end()
      }
    }
  }
  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener('error', this.proxyErrors)
      super.unpipe()
    }
    constructor(src, dest, opts) {
      super(src, dest, opts)
      this.proxyErrors = er => dest.emit('error', er)
      src.on('error', this.proxyErrors)
    }
  }
  minipass$1 = class Minipass extends Stream {
    constructor(options) {
      super()
      this[FLOWING] = false
      // whether we're explicitly paused
      this[PAUSED] = false
      this.pipes = []
      this.buffer = []
      this[OBJECTMODE] = (options && options.objectMode) || false
      if (this[OBJECTMODE]) {
        this[ENCODING] = null
      } else {
        this[ENCODING] = (options && options.encoding) || null
      }
      if (this[ENCODING] === 'buffer') {
        this[ENCODING] = null
      }
      this[ASYNC] = (options && !!options.async) || false
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null
      this[EOF] = false
      this[EMITTED_END] = false
      this[EMITTING_END] = false
      this[CLOSED] = false
      this[EMITTED_ERROR] = null
      this.writable = true
      this.readable = true
      this[BUFFERLENGTH] = 0
      this[DESTROYED] = false
    }
    get bufferLength() {
      return this[BUFFERLENGTH]
    }
    get encoding() {
      return this[ENCODING]
    }
    set encoding(enc) {
      if (this[OBJECTMODE]) {
        throw new Error('cannot set encoding in objectMode')
      }
      if (
        this[ENCODING] &&
        enc !== this[ENCODING] &&
        ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])
      ) {
        throw new Error('cannot change encoding')
      }
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null
        if (this.buffer.length) {
          this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))
        }
      }
      this[ENCODING] = enc
    }
    setEncoding(enc) {
      this.encoding = enc
    }
    get objectMode() {
      return this[OBJECTMODE]
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om
    }
    get ['async']() {
      return this[ASYNC]
    }
    set ['async'](a) {
      this[ASYNC] = this[ASYNC] || !!a
    }
    write(chunk, encoding, cb) {
      if (this[EOF]) {
        throw new Error('write after end')
      }
      if (this[DESTROYED]) {
        this.emit(
          'error',
          Object.assign(
            new Error('Cannot call write after a stream was destroyed'),
            {
              code: 'ERR_STREAM_DESTROYED'
            }
          )
        )
        return true
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const fn = this[ASYNC] ? defer : f => f()

      // convert array buffers and typed array views into buffers
      // at some point in the future, we may want to do the opposite!
      // leave strings and buffers as-is
      // anything else switches us into object mode
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)
        } else if (isArrayBuffer(chunk)) {
          chunk = Buffer.from(chunk)
        } else if (typeof chunk !== 'string') {
          // use the setter so we throw if we have encoding set
          this.objectMode = true
        }
      }

      // handle object mode up front, since it's simpler
      // this yields better performance, fewer checks later.
      if (this[OBJECTMODE]) {
        /* istanbul ignore if - maybe impossible? */
        if (this.flowing && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this.flowing) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // at this point the chunk is a buffer or string
      // don't buffer it up or send it to the decoder
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // fast-path writing strings of same encoding to a stream with
      // an empty buffer, skipping the buffer/decoder dance
      if (
        typeof chunk === 'string' &&
        // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)
      ) {
        chunk = Buffer.from(chunk, encoding)
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk)
      }

      // Note: flushing CAN potentially switch us into not-flowing mode
      if (this.flowing && this[BUFFERLENGTH] !== 0) {
        this[FLUSH](true)
      }
      if (this.flowing) {
        this.emit('data', chunk)
      } else {
        this[BUFFERPUSH](chunk)
      }
      if (this[BUFFERLENGTH] !== 0) {
        this.emit('readable')
      }
      if (cb) {
        fn(cb)
      }
      return this.flowing
    }
    read(n) {
      if (this[DESTROYED]) {
        return null
      }
      if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]()
        return null
      }
      if (this[OBJECTMODE]) {
        n = null
      }
      if (this.buffer.length > 1 && !this[OBJECTMODE]) {
        if (this.encoding) {
          this.buffer = [this.buffer.join('')]
        } else {
          this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]
        }
      }
      const ret = this[READ](n || null, this.buffer[0])
      this[MAYBE_EMIT_END]()
      return ret
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null) {
        this[BUFFERSHIFT]()
      } else {
        this.buffer[0] = chunk.slice(n)
        chunk = chunk.slice(0, n)
        this[BUFFERLENGTH] -= n
      }
      this.emit('data', chunk)
      if (!this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
      return chunk
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      if (cb) {
        this.once('end', cb)
      }
      this[EOF] = true
      this.writable = false

      // if we haven't written anything, then go ahead and emit,
      // even if we're not reading.
      // we'll re-emit if a new 'end' listener is added anyway.
      // This makes MP more suitable to write-only use cases.
      if (this.flowing || !this[PAUSED]) {
        this[MAYBE_EMIT_END]()
      }
      return this
    }

    // don't let the internal resume be overwritten
    [RESUME]() {
      if (this[DESTROYED]) {
        return
      }
      this[PAUSED] = false
      this[FLOWING] = true
      this.emit('resume')
      if (this.buffer.length) {
        this[FLUSH]()
      } else if (this[EOF]) {
        this[MAYBE_EMIT_END]()
      } else {
        this.emit('drain')
      }
    }
    resume() {
      return this[RESUME]()
    }
    pause() {
      this[FLOWING] = false
      this[PAUSED] = true
    }
    get destroyed() {
      return this[DESTROYED]
    }
    get flowing() {
      return this[FLOWING]
    }
    get paused() {
      return this[PAUSED]
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] += 1
      } else {
        this[BUFFERLENGTH] += chunk.length
      }
      this.buffer.push(chunk)
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this.buffer[0].length
        }
      }
      return this.buffer.shift()
    }
    [FLUSH](noDrain) {
      do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))
      if (!noDrain && !this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit('data', chunk), this.flowing) : false
    }
    pipe(dest, opts) {
      if (this[DESTROYED]) {
        return
      }
      const ended = this[EMITTED_END]
      opts = opts || {}
      if (dest === proc.stdout || dest === proc.stderr) {
        opts.end = false
      } else {
        opts.end = opts.end !== false
      }
      opts.proxyErrors = !!opts.proxyErrors

      // piping an ended stream ends immediately
      if (ended) {
        if (opts.end) {
          dest.end()
        }
      } else {
        this.pipes.push(
          !opts.proxyErrors
            ? new Pipe(this, dest, opts)
            : new PipeProxyErrors(this, dest, opts)
        )
        if (this[ASYNC]) {
          defer(() => this[RESUME]())
        } else {
          this[RESUME]()
        }
      }
      return dest
    }
    unpipe(dest) {
      const p = this.pipes.find(p => p.dest === dest)
      if (p) {
        this.pipes.splice(this.pipes.indexOf(p), 1)
        p.unpipe()
      }
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'data' && !this.pipes.length && !this.flowing) {
        this[RESUME]()
      } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
        super.emit('readable')
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev)
        this.removeAllListeners(ev)
      } else if (ev === 'error' && this[EMITTED_ERROR]) {
        if (this[ASYNC]) {
          defer(() => fn.call(this, this[EMITTED_ERROR]))
        } else {
          fn.call(this, this[EMITTED_ERROR])
        }
      }
      return ret
    }
    get emittedEnd() {
      return this[EMITTED_END]
    }
    [MAYBE_EMIT_END]() {
      if (
        !this[EMITTING_END] &&
        !this[EMITTED_END] &&
        !this[DESTROYED] &&
        this.buffer.length === 0 &&
        this[EOF]
      ) {
        this[EMITTING_END] = true
        this.emit('end')
        this.emit('prefinish')
        this.emit('finish')
        if (this[CLOSED]) {
          this.emit('close')
        }
        this[EMITTING_END] = false
      }
    }
    emit(ev, data, ...extra) {
      // error and close are only events allowed after calling destroy()
      if (
        ev !== 'error' &&
        ev !== 'close' &&
        ev !== DESTROYED &&
        this[DESTROYED]
      ) {
        return
      } else if (ev === 'data') {
        return !data
          ? false
          : this[ASYNC]
            ? defer(() => this[EMITDATA](data))
            : this[EMITDATA](data)
      } else if (ev === 'end') {
        return this[EMITEND]()
      } else if (ev === 'close') {
        this[CLOSED] = true
        // don't emit close before 'end' and 'finish'
        if (!this[EMITTED_END] && !this[DESTROYED]) {
          return
        }
        const ret = super.emit('close')
        this.removeAllListeners('close')
        return ret
      } else if (ev === 'error') {
        this[EMITTED_ERROR] = data
        const ret = super.emit('error', data)
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'resume') {
        const ret = super.emit('resume')
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'finish' || ev === 'prefinish') {
        const ret = super.emit(ev)
        this.removeAllListeners(ev)
        return ret
      }

      // Some other unknown event
      const ret = super.emit(ev, data, ...extra)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITDATA](data) {
      for (const p of this.pipes) {
        if (p.dest.write(data) === false) {
          this.pause()
        }
      }
      const ret = super.emit('data', data)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITEND]() {
      if (this[EMITTED_END]) {
        return
      }
      this[EMITTED_END] = true
      this.readable = false
      if (this[ASYNC]) {
        defer(() => this[EMITEND2]())
      } else {
        this[EMITEND2]()
      }
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end()
        if (data) {
          for (const p of this.pipes) {
            p.dest.write(data)
          }
          super.emit('data', data)
        }
      }
      for (const p of this.pipes) {
        p.end()
      }
      const ret = super.emit('end')
      this.removeAllListeners('end')
      return ret
    }

    // const all = await stream.collect()
    collect() {
      const buf = []
      if (!this[OBJECTMODE]) {
        buf.dataLength = 0
      }
      // set the promise first, in case an error is raised
      // by triggering the flow here.
      const p = this.promise()
      this.on('data', c => {
        buf.push(c)
        if (!this[OBJECTMODE]) {
          buf.dataLength += c.length
        }
      })
      return p.then(() => buf)
    }

    // const data = await stream.concat()
    concat() {
      return this[OBJECTMODE]
        ? Promise.reject(new Error('cannot concat in objectMode'))
        : this.collect().then(buf =>
            this[OBJECTMODE]
              ? Promise.reject(new Error('cannot concat in objectMode'))
              : this[ENCODING]
                ? buf.join('')
                : Buffer.concat(buf, buf.dataLength)
          )
    }

    // stream.promise().then(() => done, er => emitted error)
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error('stream destroyed')))
        this.on('error', er => reject(er))
        this.on('end', () => resolve())
      })
    }

    // for await (let chunk of stream)
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read()
        if (res !== null) {
          return Promise.resolve({
            done: false,
            value: res
          })
        }
        if (this[EOF]) {
          return Promise.resolve({
            done: true
          })
        }
        let resolve = null
        let reject = null
        const onerr = er => {
          this.removeListener('data', ondata)
          this.removeListener('end', onend)
          reject(er)
        }
        const ondata = value => {
          this.removeListener('error', onerr)
          this.removeListener('end', onend)
          this.pause()
          resolve({
            value: value,
            done: !!this[EOF]
          })
        }
        const onend = () => {
          this.removeListener('error', onerr)
          this.removeListener('data', ondata)
          resolve({
            done: true
          })
        }
        const ondestroy = () => onerr(new Error('stream destroyed'))
        return new Promise((res, rej) => {
          reject = rej
          resolve = res
          this.once(DESTROYED, ondestroy)
          this.once('error', onerr)
          this.once('end', onend)
          this.once('data', ondata)
        })
      }
      return {
        next
      }
    }

    // for (let chunk of stream)
    [ITERATOR]() {
      const next = () => {
        const value = this.read()
        const done = value === null
        return {
          value,
          done
        }
      }
      return {
        next
      }
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er) {
          this.emit('error', er)
        } else {
          this.emit(DESTROYED)
        }
        return this
      }
      this[DESTROYED] = true

      // throw away all buffered data, it's never coming out
      this.buffer.length = 0
      this[BUFFERLENGTH] = 0
      if (typeof this.close === 'function' && !this[CLOSED]) {
        this.close()
      }
      if (er) {
        this.emit('error', er)
      }
      // if no error to emit, still reject pending promises
      else {
        this.emit(DESTROYED)
      }
      return this
    }
    static isStream(s) {
      return (
        !!s &&
        (s instanceof Minipass ||
          s instanceof Stream ||
          (s instanceof EE &&
            (typeof s.pipe === 'function' ||
              // readable
              (typeof s.write === 'function' && typeof s.end === 'function')))) // writable
      )
    }
  }
  return minipass$1
}

let minipassPipeline
let hasRequiredMinipassPipeline
function requireMinipassPipeline() {
  if (hasRequiredMinipassPipeline) {
    return minipassPipeline
  }
  hasRequiredMinipassPipeline = 1
  const Minipass = requireMinipass$1()
  const EE = require$$0$1
  const isStream = s =>
    s &&
    s instanceof EE &&
    (typeof s.pipe === 'function' ||
      // readable
      (typeof s.write === 'function' && typeof s.end === 'function')) // writable
  const _head = Symbol('_head')
  const _tail = Symbol('_tail')
  const _linkStreams = Symbol('_linkStreams')
  const _setHead = Symbol('_setHead')
  const _setTail = Symbol('_setTail')
  const _onError = Symbol('_onError')
  const _onData = Symbol('_onData')
  const _onEnd = Symbol('_onEnd')
  const _onDrain = Symbol('_onDrain')
  const _streams = Symbol('_streams')
  class Pipeline extends Minipass {
    constructor(opts, ...streams) {
      if (isStream(opts)) {
        streams.unshift(opts)
        opts = {}
      }
      super(opts)
      this[_streams] = []
      if (streams.length) {
        this.push(...streams)
      }
    }
    [_linkStreams](streams) {
      // reduce takes (left,right), and we return right to make it the
      // new left value.
      return streams.reduce((src, dest) => {
        src.on('error', er => dest.emit('error', er))
        src.pipe(dest)
        return dest
      })
    }
    push(...streams) {
      this[_streams].push(...streams)
      if (this[_tail]) {
        streams.unshift(this[_tail])
      }
      const linkRet = this[_linkStreams](streams)
      this[_setTail](linkRet)
      if (!this[_head]) {
        this[_setHead](streams[0])
      }
    }
    unshift(...streams) {
      this[_streams].unshift(...streams)
      if (this[_head]) {
        streams.push(this[_head])
      }
      const linkRet = this[_linkStreams](streams)
      this[_setHead](streams[0])
      if (!this[_tail]) {
        this[_setTail](linkRet)
      }
    }
    destroy(er) {
      // set fire to the whole thing.
      this[_streams].forEach(
        s => typeof s.destroy === 'function' && s.destroy()
      )
      return super.destroy(er)
    }

    // readable interface -> tail
    [_setTail](stream) {
      this[_tail] = stream
      stream.on('error', er => this[_onError](stream, er))
      stream.on('data', chunk => this[_onData](stream, chunk))
      stream.on('end', () => this[_onEnd](stream))
      stream.on('finish', () => this[_onEnd](stream))
    }

    // errors proxied down the pipeline
    // they're considered part of the "read" interface
    [_onError](stream, er) {
      if (stream === this[_tail]) {
        this.emit('error', er)
      }
    }
    [_onData](stream, chunk) {
      if (stream === this[_tail]) {
        super.write(chunk)
      }
    }
    [_onEnd](stream) {
      if (stream === this[_tail]) {
        super.end()
      }
    }
    pause() {
      super.pause()
      return this[_tail] && this[_tail].pause && this[_tail].pause()
    }

    // NB: Minipass calls its internal private [RESUME] method during
    // pipe drains, to avoid hazards where stream.resume() is overridden.
    // Thus, we need to listen to the resume *event*, not override the
    // resume() method, and proxy *that* to the tail.
    emit(ev, ...args) {
      if (ev === 'resume' && this[_tail] && this[_tail].resume) {
        this[_tail].resume()
      }
      return super.emit(ev, ...args)
    }

    // writable interface -> head
    [_setHead](stream) {
      this[_head] = stream
      stream.on('drain', () => this[_onDrain](stream))
    }
    [_onDrain](stream) {
      if (stream === this[_head]) {
        this.emit('drain')
      }
    }
    write(chunk, enc, cb) {
      return (
        this[_head].write(chunk, enc, cb) &&
        (this.flowing || this.buffer.length === 0)
      )
    }
    end(chunk, enc, cb) {
      this[_head].end(chunk, enc, cb)
      return this
    }
  }
  minipassPipeline = Pipeline
  return minipassPipeline
}

const entryIndex = {}

const lib$4 = {}

let hasRequiredLib$5
function requireLib$5() {
  if (hasRequiredLib$5) {
    return lib$4
  }
  hasRequiredLib$5 = 1
  const crypto = require$$0$2
  const { Minipass } = requireCommonjs$7()
  const SPEC_ALGORITHMS = ['sha512', 'sha384', 'sha256']
  const DEFAULT_ALGORITHMS = ['sha512']

  // TODO: this should really be a hardcoded list of algorithms we support,
  // rather than [a-z0-9].
  const BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i
  const SRI_REGEX = /^([a-z0-9]+)-([^?]+)([?\S*]*)$/
  const STRICT_SRI_REGEX =
    /^([a-z0-9]+)-([A-Za-z0-9+/=]{44,88})(\?[\x21-\x7E]*)?$/
  const VCHAR_REGEX = /^[\x21-\x7E]+$/
  const getOptString = options =>
    options?.length ? `?${options.join('?')}` : ''
  class IntegrityStream extends Minipass {
    #emittedIntegrity
    #emittedSize
    #emittedVerified
    constructor(opts) {
      super()
      this.size = 0
      this.opts = opts

      // may be overridden later, but set now for class consistency
      this.#getOptions()

      // options used for calculating stream.  can't be changed.
      if (opts?.algorithms) {
        this.algorithms = [...opts.algorithms]
      } else {
        this.algorithms = [...DEFAULT_ALGORITHMS]
      }
      if (
        this.algorithm !== null &&
        !this.algorithms.includes(this.algorithm)
      ) {
        this.algorithms.push(this.algorithm)
      }
      this.hashes = this.algorithms.map(crypto.createHash)
    }
    #getOptions() {
      // For verification
      this.sri = this.opts?.integrity
        ? parse(this.opts?.integrity, this.opts)
        : null
      this.expectedSize = this.opts?.size
      if (!this.sri) {
        this.algorithm = null
      } else if (this.sri.isHash) {
        this.goodSri = true
        this.algorithm = this.sri.algorithm
      } else {
        this.goodSri = !this.sri.isEmpty()
        this.algorithm = this.sri.pickAlgorithm(this.opts)
      }
      this.digests = this.goodSri ? this.sri[this.algorithm] : null
      this.optString = getOptString(this.opts?.options)
    }
    on(ev, handler) {
      if (ev === 'size' && this.#emittedSize) {
        return handler(this.#emittedSize)
      }
      if (ev === 'integrity' && this.#emittedIntegrity) {
        return handler(this.#emittedIntegrity)
      }
      if (ev === 'verified' && this.#emittedVerified) {
        return handler(this.#emittedVerified)
      }
      return super.on(ev, handler)
    }
    emit(ev, data) {
      if (ev === 'end') {
        this.#onEnd()
      }
      return super.emit(ev, data)
    }
    write(data) {
      this.size += data.length
      this.hashes.forEach(h => h.update(data))
      return super.write(data)
    }
    #onEnd() {
      if (!this.goodSri) {
        this.#getOptions()
      }
      const newSri = parse(
        this.hashes
          .map((h, i) => {
            return `${this.algorithms[i]}-${h.digest('base64')}${this.optString}`
          })
          .join(' '),
        this.opts
      )
      // Integrity verification mode
      const match = this.goodSri && newSri.match(this.sri, this.opts)
      if (
        typeof this.expectedSize === 'number' &&
        this.size !== this.expectedSize
      ) {
        /* eslint-disable-next-line max-len */
        const err = new Error(
          `stream size mismatch when checking ${this.sri}.\n  Wanted: ${this.expectedSize}\n  Found: ${this.size}`
        )
        err.code = 'EBADSIZE'
        err.found = this.size
        err.expected = this.expectedSize
        err.sri = this.sri
        this.emit('error', err)
      } else if (this.sri && !match) {
        /* eslint-disable-next-line max-len */
        const err = new Error(
          `${this.sri} integrity checksum failed when using ${this.algorithm}: wanted ${this.digests} but got ${newSri}. (${this.size} bytes)`
        )
        err.code = 'EINTEGRITY'
        err.found = newSri
        err.expected = this.digests
        err.algorithm = this.algorithm
        err.sri = this.sri
        this.emit('error', err)
      } else {
        this.#emittedSize = this.size
        this.emit('size', this.size)
        this.#emittedIntegrity = newSri
        this.emit('integrity', newSri)
        if (match) {
          this.#emittedVerified = match
          this.emit('verified', match)
        }
      }
    }
  }
  class Hash {
    get isHash() {
      return true
    }
    constructor(hash, opts) {
      const strict = opts?.strict
      this.source = hash.trim()

      // set default values so that we make V8 happy to
      // always see a familiar object template.
      this.digest = ''
      this.algorithm = ''
      this.options = []

      // 3.1. Integrity metadata (called "Hash" by ssri)
      // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description
      const match = this.source.match(strict ? STRICT_SRI_REGEX : SRI_REGEX)
      if (!match) {
        return
      }
      if (strict && !SPEC_ALGORITHMS.includes(match[1])) {
        return
      }
      this.algorithm = match[1]
      this.digest = match[2]
      const rawOpts = match[3]
      if (rawOpts) {
        this.options = rawOpts.slice(1).split('?')
      }
    }
    hexDigest() {
      return this.digest && Buffer.from(this.digest, 'base64').toString('hex')
    }
    toJSON() {
      return this.toString()
    }
    match(integrity, opts) {
      const other = parse(integrity, opts)
      if (!other) {
        return false
      }
      if (other.isIntegrity) {
        const algo = other.pickAlgorithm(opts, [this.algorithm])
        if (!algo) {
          return false
        }
        const foundHash = other[algo].find(hash => hash.digest === this.digest)
        if (foundHash) {
          return foundHash
        }
        return false
      }
      return other.digest === this.digest ? other : false
    }
    toString(opts) {
      if (opts?.strict) {
        // Strict mode enforces the standard as close to the foot of the
        // letter as it can.
        if (
          !(
            // The spec has very restricted productions for algorithms.
            // https://www.w3.org/TR/CSP2/#source-list-syntax
            (
              SPEC_ALGORITHMS.includes(this.algorithm) &&
              // Usually, if someone insists on using a "different" base64, we
              // leave it as-is, since there's multiple standards, and the
              // specified is not a URL-safe variant.
              // https://www.w3.org/TR/CSP2/#base64_value
              this.digest.match(BASE64_REGEX) &&
              // Option syntax is strictly visual chars.
              // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression
              // https://tools.ietf.org/html/rfc5234#appendix-B.1
              this.options.every(opt => opt.match(VCHAR_REGEX))
            )
          )
        ) {
          return ''
        }
      }
      return `${this.algorithm}-${this.digest}${getOptString(this.options)}`
    }
  }
  function integrityHashToString(toString, sep, opts, hashes) {
    const toStringIsNotEmpty = toString !== ''
    let shouldAddFirstSep = false
    let complement = ''
    const lastIndex = hashes.length - 1
    for (let i = 0; i < lastIndex; i++) {
      const hashString = Hash.prototype.toString.call(hashes[i], opts)
      if (hashString) {
        shouldAddFirstSep = true
        complement += hashString
        complement += sep
      }
    }
    const finalHashString = Hash.prototype.toString.call(
      hashes[lastIndex],
      opts
    )
    if (finalHashString) {
      shouldAddFirstSep = true
      complement += finalHashString
    }
    if (toStringIsNotEmpty && shouldAddFirstSep) {
      return toString + sep + complement
    }
    return toString + complement
  }
  class Integrity {
    get isIntegrity() {
      return true
    }
    toJSON() {
      return this.toString()
    }
    isEmpty() {
      return Object.keys(this).length === 0
    }
    toString(opts) {
      let sep = opts?.sep || ' '
      let toString = ''
      if (opts?.strict) {
        // Entries must be separated by whitespace, according to spec.
        sep = sep.replace(/\S+/g, ' ')
        for (const hash of SPEC_ALGORITHMS) {
          if (this[hash]) {
            toString = integrityHashToString(toString, sep, opts, this[hash])
          }
        }
      } else {
        for (const hash of Object.keys(this)) {
          toString = integrityHashToString(toString, sep, opts, this[hash])
        }
      }
      return toString
    }
    concat(integrity, opts) {
      const other =
        typeof integrity === 'string' ? integrity : stringify(integrity, opts)
      return parse(`${this.toString(opts)} ${other}`, opts)
    }
    hexDigest() {
      return parse(this, {
        single: true
      }).hexDigest()
    }

    // add additional hashes to an integrity value, but prevent
    // *changing* an existing integrity hash.
    merge(integrity, opts) {
      const other = parse(integrity, opts)
      for (const algo in other) {
        if (this[algo]) {
          if (
            !this[algo].find(hash =>
              other[algo].find(otherhash => hash.digest === otherhash.digest)
            )
          ) {
            throw new Error('hashes do not match, cannot update integrity')
          }
        } else {
          this[algo] = other[algo]
        }
      }
    }
    match(integrity, opts) {
      const other = parse(integrity, opts)
      if (!other) {
        return false
      }
      const algo = other.pickAlgorithm(opts, Object.keys(this))
      return (
        (!!algo &&
          this[algo] &&
          other[algo] &&
          this[algo].find(hash =>
            other[algo].find(otherhash => hash.digest === otherhash.digest)
          )) ||
        false
      )
    }

    // Pick the highest priority algorithm present, optionally also limited to a
    // set of hashes found in another integrity.  When limiting it may return
    // nothing.
    pickAlgorithm(opts, hashes) {
      const pickAlgorithm = opts?.pickAlgorithm || getPrioritizedHash
      const keys = Object.keys(this).filter(k => {
        if (hashes?.length) {
          return hashes.includes(k)
        }
        return true
      })
      if (keys.length) {
        return keys.reduce((acc, algo) => pickAlgorithm(acc, algo) || acc)
      }
      // no intersection between this and hashes,
      return null
    }
  }
  lib$4.parse = parse
  function parse(sri, opts) {
    if (!sri) {
      return null
    }
    if (typeof sri === 'string') {
      return _parse(sri, opts)
    } else if (sri.algorithm && sri.digest) {
      const fullSri = new Integrity()
      fullSri[sri.algorithm] = [sri]
      return _parse(stringify(fullSri, opts), opts)
    } else {
      return _parse(stringify(sri, opts), opts)
    }
  }
  function _parse(integrity, opts) {
    // 3.4.3. Parse metadata
    // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
    if (opts?.single) {
      return new Hash(integrity, opts)
    }
    const hashes = integrity
      .trim()
      .split(/\s+/)
      .reduce((acc, string) => {
        const hash = new Hash(string, opts)
        if (hash.algorithm && hash.digest) {
          const algo = hash.algorithm
          if (!acc[algo]) {
            acc[algo] = []
          }
          acc[algo].push(hash)
        }
        return acc
      }, new Integrity())
    return hashes.isEmpty() ? null : hashes
  }
  lib$4.stringify = stringify
  function stringify(obj, opts) {
    if (obj.algorithm && obj.digest) {
      return Hash.prototype.toString.call(obj, opts)
    } else if (typeof obj === 'string') {
      return stringify(parse(obj, opts), opts)
    } else {
      return Integrity.prototype.toString.call(obj, opts)
    }
  }
  lib$4.fromHex = fromHex
  function fromHex(hexDigest, algorithm, opts) {
    const optString = getOptString(opts?.options)
    return parse(
      `${algorithm}-${Buffer.from(hexDigest, 'hex').toString('base64')}${optString}`,
      opts
    )
  }
  lib$4.fromData = fromData
  function fromData(data, opts) {
    const algorithms = opts?.algorithms || [...DEFAULT_ALGORITHMS]
    const optString = getOptString(opts?.options)
    return algorithms.reduce((acc, algo) => {
      const digest = crypto.createHash(algo).update(data).digest('base64')
      const hash = new Hash(`${algo}-${digest}${optString}`, opts)
      /* istanbul ignore else - it would be VERY strange if the string we
       * just calculated with an algo did not have an algo or digest.
       */
      if (hash.algorithm && hash.digest) {
        const hashAlgo = hash.algorithm
        if (!acc[hashAlgo]) {
          acc[hashAlgo] = []
        }
        acc[hashAlgo].push(hash)
      }
      return acc
    }, new Integrity())
  }
  lib$4.fromStream = fromStream
  function fromStream(stream, opts) {
    const istream = integrityStream(opts)
    return new Promise((resolve, reject) => {
      stream.pipe(istream)
      stream.on('error', reject)
      istream.on('error', reject)
      let sri
      istream.on('integrity', s => {
        sri = s
      })
      istream.on('end', () => resolve(sri))
      istream.resume()
    })
  }
  lib$4.checkData = checkData
  function checkData(data, sri, opts) {
    sri = parse(sri, opts)
    if (!sri || !Object.keys(sri).length) {
      if (opts?.error) {
        throw Object.assign(
          new Error('No valid integrity hashes to check against'),
          {
            code: 'EINTEGRITY'
          }
        )
      } else {
        return false
      }
    }
    const algorithm = sri.pickAlgorithm(opts)
    const digest = crypto.createHash(algorithm).update(data).digest('base64')
    const newSri = parse({
      algorithm,
      digest
    })
    const match = newSri.match(sri, opts)
    opts = opts || {}
    if (match || !opts.error) {
      return match
    } else if (typeof opts.size === 'number' && data.length !== opts.size) {
      /* eslint-disable-next-line max-len */
      const err = new Error(
        `data size mismatch when checking ${sri}.\n  Wanted: ${opts.size}\n  Found: ${data.length}`
      )
      err.code = 'EBADSIZE'
      err.found = data.length
      err.expected = opts.size
      err.sri = sri
      throw err
    } else {
      /* eslint-disable-next-line max-len */
      const err = new Error(
        `Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`
      )
      err.code = 'EINTEGRITY'
      err.found = newSri
      err.expected = sri
      err.algorithm = algorithm
      err.sri = sri
      throw err
    }
  }
  lib$4.checkStream = checkStream
  function checkStream(stream, sri, opts) {
    opts = opts || Object.create(null)
    opts.integrity = sri
    sri = parse(sri, opts)
    if (!sri || !Object.keys(sri).length) {
      return Promise.reject(
        Object.assign(new Error('No valid integrity hashes to check against'), {
          code: 'EINTEGRITY'
        })
      )
    }
    const checker = integrityStream(opts)
    return new Promise((resolve, reject) => {
      stream.pipe(checker)
      stream.on('error', reject)
      checker.on('error', reject)
      let verified
      checker.on('verified', s => {
        verified = s
      })
      checker.on('end', () => resolve(verified))
      checker.resume()
    })
  }
  lib$4.integrityStream = integrityStream
  function integrityStream(opts = Object.create(null)) {
    return new IntegrityStream(opts)
  }
  lib$4.create = createIntegrity
  function createIntegrity(opts) {
    const algorithms = opts?.algorithms || [...DEFAULT_ALGORITHMS]
    const optString = getOptString(opts?.options)
    const hashes = algorithms.map(crypto.createHash)
    return {
      update: function (chunk, enc) {
        hashes.forEach(h => h.update(chunk, enc))
        return this
      },
      digest: function () {
        const integrity = algorithms.reduce((acc, algo) => {
          const digest = hashes.shift().digest('base64')
          const hash = new Hash(`${algo}-${digest}${optString}`, opts)
          /* istanbul ignore else - it would be VERY strange if the hash we
           * just calculated with an algo did not have an algo or digest.
           */
          if (hash.algorithm && hash.digest) {
            const hashAlgo = hash.algorithm
            if (!acc[hashAlgo]) {
              acc[hashAlgo] = []
            }
            acc[hashAlgo].push(hash)
          }
          return acc
        }, new Integrity())
        return integrity
      }
    }
  }
  const NODE_HASHES = crypto.getHashes()

  // This is a Best Effort™ at a reasonable priority for hash algos
  const DEFAULT_PRIORITY = [
    'md5',
    'whirlpool',
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    // TODO - it's unclear _which_ of these Node will actually use as its name
    //        for the algorithm, so we guesswork it based on the OpenSSL names.
    'sha3',
    'sha3-256',
    'sha3-384',
    'sha3-512',
    'sha3_256',
    'sha3_384',
    'sha3_512'
  ].filter(algo => NODE_HASHES.includes(algo))
  function getPrioritizedHash(algo1, algo2) {
    /* eslint-disable-next-line max-len */
    return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >=
      DEFAULT_PRIORITY.indexOf(algo2.toLowerCase())
      ? algo1
      : algo2
  }
  return lib$4
}

const imurmurhash = { exports: {} }

/**
 * @preserve
 * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
 *
 * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
 * @see http://github.com/homebrewing/brauhaus-diff
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 */
let hasRequiredImurmurhash
function requireImurmurhash() {
  if (hasRequiredImurmurhash) {
    return imurmurhash.exports
  }
  hasRequiredImurmurhash = 1
  ;(function (module) {
    ;(function () {
      let cache

      // Call this function without `new` to use the cached object (good for
      // single-threaded environments), or with `new` to create a new object.
      //
      // @param {string} key A UTF-16 or ASCII string
      // @param {number} seed An optional positive integer
      // @return {object} A MurmurHash3 object for incremental hashing
      function MurmurHash3(key, seed) {
        const m = this instanceof MurmurHash3 ? this : cache
        m.reset(seed)
        if (typeof key === 'string' && key.length > 0) {
          m.hash(key)
        }
        if (m !== this) {
          return m
        }
      }

      // Incrementally add a string to this hash
      //
      // @param {string} key A UTF-16 or ASCII string
      // @return {object} this
      MurmurHash3.prototype.hash = function (key) {
        let h1, k1, i, top, len
        len = key.length
        this.len += len
        k1 = this.k1
        i = 0
        switch (this.rem) {
          case 0:
            k1 ^= len > i ? key.charCodeAt(i++) & 0xffff : 0
          case 1:
            k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0
          case 2:
            k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0
          case 3:
            k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0
            k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0
        }
        this.rem = (len + this.rem) & 3 // & 3 is same as % 4
        len -= this.rem
        if (len > 0) {
          h1 = this.h1
          while (1) {
            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff
            k1 = (k1 << 15) | (k1 >>> 17)
            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff
            h1 ^= k1
            h1 = (h1 << 13) | (h1 >>> 19)
            h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff
            if (i >= len) {
              break
            }
            k1 =
              (key.charCodeAt(i++) & 0xffff) ^
              ((key.charCodeAt(i++) & 0xffff) << 8) ^
              ((key.charCodeAt(i++) & 0xffff) << 16)
            top = key.charCodeAt(i++)
            k1 ^= ((top & 0xff) << 24) ^ ((top & 0xff00) >> 8)
          }
          k1 = 0
          switch (this.rem) {
            case 3:
              k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16
            case 2:
              k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8
            case 1:
              k1 ^= key.charCodeAt(i) & 0xffff
          }
          this.h1 = h1
        }
        this.k1 = k1
        return this
      }

      // Get the result of this hash
      //
      // @return {number} The 32-bit hash
      MurmurHash3.prototype.result = function () {
        let k1, h1
        k1 = this.k1
        h1 = this.h1
        if (k1 > 0) {
          k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff
          k1 = (k1 << 15) | (k1 >>> 17)
          k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff
          h1 ^= k1
        }
        h1 ^= this.len
        h1 ^= h1 >>> 16
        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff
        h1 ^= h1 >>> 13
        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff
        h1 ^= h1 >>> 16
        return h1 >>> 0
      }

      // Reset the hash object for reuse
      //
      // @param {number} seed An optional positive integer
      MurmurHash3.prototype.reset = function (seed) {
        this.h1 = typeof seed === 'number' ? seed : 0
        this.rem = this.k1 = this.len = 0
        return this
      }

      // A cached object to use. This can be safely used if you're in a single-
      // threaded environment, otherwise you need to create new hashes to use.
      cache = new MurmurHash3()
      {
        module.exports = MurmurHash3
      }
    })()
  })(imurmurhash)
  return imurmurhash.exports
}

let lib$3
let hasRequiredLib$4
function requireLib$4() {
  if (hasRequiredLib$4) {
    return lib$3
  }
  hasRequiredLib$4 = 1
  const MurmurHash3 = requireImurmurhash()
  lib$3 = function (uniq) {
    if (uniq) {
      const hash = new MurmurHash3(uniq)
      return ('00000000' + hash.result().toString(16)).slice(-8)
    } else {
      return (Math.random().toString(16) + '0000000').slice(2, 10)
    }
  }
  return lib$3
}

let lib$2
let hasRequiredLib$3
function requireLib$3() {
  if (hasRequiredLib$3) {
    return lib$2
  }
  hasRequiredLib$3 = 1
  const path = require$$0$3
  const uniqueSlug = requireLib$4()
  lib$2 = function (filepath, prefix, uniq) {
    return path.join(filepath, (prefix ? prefix + '-' : '') + uniqueSlug(uniq))
  }
  return lib$2
}

const path = { exports: {} }

const require$$8 = {
  'cache-version': {
    content: '2',
    index: '5'
  }
}

let hashToSegments_1
let hasRequiredHashToSegments
function requireHashToSegments() {
  if (hasRequiredHashToSegments) {
    return hashToSegments_1
  }
  hasRequiredHashToSegments = 1
  hashToSegments_1 = hashToSegments
  function hashToSegments(hash) {
    return [hash.slice(0, 2), hash.slice(2, 4), hash.slice(4)]
  }
  return hashToSegments_1
}

let hasRequiredPath
function requirePath() {
  if (hasRequiredPath) {
    return path.exports
  }
  hasRequiredPath = 1
  const contentVer = require$$8['cache-version'].content
  const hashToSegments = requireHashToSegments()
  const path$1 = require$$0$3
  const ssri = requireLib$5()

  // Current format of content file path:
  //
  // sha512-BaSE64Hex= ->
  // ~/.my-cache/content-v2/sha512/ba/da/55deadbeefc0ffee
  //
  path.exports = contentPath
  function contentPath(cache, integrity) {
    const sri = ssri.parse(integrity, {
      single: true
    })
    // contentPath is the *strongest* algo given
    return path$1.join(
      contentDir(cache),
      sri.algorithm,
      ...hashToSegments(sri.hexDigest())
    )
  }
  path.exports.contentDir = contentDir
  function contentDir(cache) {
    return path$1.join(cache, `content-v${contentVer}`)
  }
  return path.exports
}

let getOptions_1
let hasRequiredGetOptions
function requireGetOptions() {
  if (hasRequiredGetOptions) {
    return getOptions_1
  }
  hasRequiredGetOptions = 1
  // given an input that may or may not be an object, return an object that has
  // a copy of every defined property listed in 'copy'. if the input is not an
  // object, assign it to the property named by 'wrap'
  const getOptions = (input, { copy, wrap }) => {
    const result = {}
    if (input && typeof input === 'object') {
      for (const prop of copy) {
        if (input[prop] !== undefined) {
          result[prop] = input[prop]
        }
      }
    } else {
      result[wrap] = input
    }
    return result
  }
  getOptions_1 = getOptions
  return getOptions_1
}

const re = { exports: {} }

let constants
let hasRequiredConstants
function requireConstants() {
  if (hasRequiredConstants) {
    return constants
  }
  hasRequiredConstants = 1

  // Note: this is the semver.org version of the spec that it implements
  // Not necessarily the package version of this code.
  const SEMVER_SPEC_VERSION = '2.0.0'
  const MAX_LENGTH = 256
  const MAX_SAFE_INTEGER =
    Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991

  // Max safe segment length for coercion.
  const MAX_SAFE_COMPONENT_LENGTH = 16

  // Max safe length for a build identifier. The max length minus 6 characters for
  // the shortest version with a build 0.0.0+BUILD.
  const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6
  const RELEASE_TYPES = [
    'major',
    'premajor',
    'minor',
    'preminor',
    'patch',
    'prepatch',
    'prerelease'
  ]
  constants = {
    MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 0b001,
    FLAG_LOOSE: 0b010
  }
  return constants
}

let debug_1
let hasRequiredDebug
function requireDebug() {
  if (hasRequiredDebug) {
    return debug_1
  }
  hasRequiredDebug = 1
  const debug =
    typeof process === 'object' &&
    process.env &&
    process.env.NODE_DEBUG &&
    /\bsemver\b/i.test(process.env.NODE_DEBUG)
      ? (...args) => console.error('SEMVER', ...args)
      : () => {}
  debug_1 = debug
  return debug_1
}

let hasRequiredRe
function requireRe() {
  if (hasRequiredRe) {
    return re.exports
  }
  hasRequiredRe = 1
  ;(function (module, exports) {
    const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } =
      requireConstants()
    const debug = requireDebug()
    exports = module.exports = {}

    // The actual regexps go on exports.re
    const re = (exports.re = [])
    const safeRe = (exports.safeRe = [])
    const src = (exports.src = [])
    const safeSrc = (exports.safeSrc = [])
    const t = (exports.t = {})
    let R = 0
    const LETTERDASHNUMBER = '[a-zA-Z0-9-]'

    // Replace some greedy regex tokens to prevent regex dos issues. These regex are
    // used internally via the safeRe object since all inputs in this library get
    // normalized first to trim and collapse all extra whitespace. The original
    // regexes are exported for userland consumption and lower level usage. A
    // future breaking change could export the safer regex only with a note that
    // all input should have extra whitespace removed.
    const safeRegexReplacements = [
      ['\\s', 1],
      ['\\d', MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ]
    const makeSafeRegex = value => {
      for (const [token, max] of safeRegexReplacements) {
        value = value
          .split(`${token}*`)
          .join(`${token}{0,${max}}`)
          .split(`${token}+`)
          .join(`${token}{1,${max}}`)
      }
      return value
    }
    const createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value)
      const index = R++
      debug(name, index, value)
      t[name] = index
      src[index] = value
      safeSrc[index] = safe
      re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
      safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)
    }

    // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.

    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.

    createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
    createToken('NUMERICIDENTIFIERLOOSE', '\\d+')

    // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.

    createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)

    // ## Main Version
    // Three dot-separated numeric identifiers.

    createToken(
      'MAINVERSION',
      `(${src[t.NUMERICIDENTIFIER]})\\.` +
        `(${src[t.NUMERICIDENTIFIER]})\\.` +
        `(${src[t.NUMERICIDENTIFIER]})`
    )
    createToken(
      'MAINVERSIONLOOSE',
      `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
        `(${src[t.NUMERICIDENTIFIERLOOSE]})`
    )

    // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.
    // Non-numberic identifiers include numberic identifiers but can be longer.
    // Therefore non-numberic identifiers must go first.

    createToken(
      'PRERELEASEIDENTIFIER',
      `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIER]})`
    )
    createToken(
      'PRERELEASEIDENTIFIERLOOSE',
      `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIERLOOSE]})`
    )

    // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.

    createToken(
      'PRERELEASE',
      `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`
    )
    createToken(
      'PRERELEASELOOSE',
      `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`
    )

    // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.

    createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)

    // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.

    createToken(
      'BUILD',
      `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`
    )

    // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.

    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.

    createToken(
      'FULLPLAIN',
      `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`
    )
    createToken('FULL', `^${src[t.FULLPLAIN]}$`)

    // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.
    createToken(
      'LOOSEPLAIN',
      `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`
    )
    createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)
    createToken('GTLT', '((?:<|>)?=?)')

    // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.
    createToken(
      'XRANGEIDENTIFIERLOOSE',
      `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`
    )
    createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)
    createToken(
      'XRANGEPLAIN',
      `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
        `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
        `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
        `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` +
        `)?)?`
    )
    createToken(
      'XRANGEPLAINLOOSE',
      `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
        `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` +
        `)?)?`
    )
    createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
    createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

    // Coercion.
    // Extract anything that could conceivably be a part of a valid semver
    createToken(
      'COERCEPLAIN',
      `${'(^|[^\\d])' + '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
        `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
        `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`
    )
    createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`)
    createToken(
      'COERCEFULL',
      src[t.COERCEPLAIN] +
        `(?:${src[t.PRERELEASE]})?` +
        `(?:${src[t.BUILD]})?` +
        `(?:$|[^\\d])`
    )
    createToken('COERCERTL', src[t.COERCE], true)
    createToken('COERCERTLFULL', src[t.COERCEFULL], true)

    // Tilde ranges.
    // Meaning is "reasonably at or greater than"
    createToken('LONETILDE', '(?:~>?)')
    createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
    exports.tildeTrimReplace = '$1~'
    createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
    createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

    // Caret ranges.
    // Meaning is "at least and backwards compatible with"
    createToken('LONECARET', '(?:\\^)')
    createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
    exports.caretTrimReplace = '$1^'
    createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
    createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

    // A simple gt/lt/eq thing, or just "" to indicate "any version"
    createToken(
      'COMPARATORLOOSE',
      `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`
    )
    createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

    // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`
    createToken(
      'COMPARATORTRIM',
      `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`,
      true
    )
    exports.comparatorTrimReplace = '$1$2$3'

    // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.
    createToken(
      'HYPHENRANGE',
      `^\\s*(${src[t.XRANGEPLAIN]})` +
        `\\s+-\\s+` +
        `(${src[t.XRANGEPLAIN]})` +
        `\\s*$`
    )
    createToken(
      'HYPHENRANGELOOSE',
      `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
        `\\s+-\\s+` +
        `(${src[t.XRANGEPLAINLOOSE]})` +
        `\\s*$`
    )

    // Star ranges basically just allow anything at all.
    createToken('STAR', '(<|>)?=?\\s*\\*')
    // >=0.0.0 is like a star
    createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$')
    createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$')
  })(re, re.exports)
  return re.exports
}

let parseOptions_1
let hasRequiredParseOptions
function requireParseOptions() {
  if (hasRequiredParseOptions) {
    return parseOptions_1
  }
  hasRequiredParseOptions = 1

  // parse out just the options we care about
  const looseOption = Object.freeze({
    loose: true
  })
  const emptyOpts = Object.freeze({})
  const parseOptions = options => {
    if (!options) {
      return emptyOpts
    }
    if (typeof options !== 'object') {
      return looseOption
    }
    return options
  }
  parseOptions_1 = parseOptions
  return parseOptions_1
}

let identifiers
let hasRequiredIdentifiers
function requireIdentifiers() {
  if (hasRequiredIdentifiers) {
    return identifiers
  }
  hasRequiredIdentifiers = 1
  const numeric = /^[0-9]+$/
  const compareIdentifiers = (a, b) => {
    const anum = numeric.test(a)
    const bnum = numeric.test(b)
    if (anum && bnum) {
      a = +a
      b = +b
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1
  }
  const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)
  identifiers = {
    compareIdentifiers,
    rcompareIdentifiers
  }
  return identifiers
}

let semver$1
let hasRequiredSemver$1
function requireSemver$1() {
  if (hasRequiredSemver$1) {
    return semver$1
  }
  hasRequiredSemver$1 = 1
  const debug = requireDebug()
  const { MAX_LENGTH, MAX_SAFE_INTEGER } = requireConstants()
  const { safeRe: re, t } = requireRe()
  const parseOptions = requireParseOptions()
  const { compareIdentifiers } = requireIdentifiers()
  class SemVer {
    constructor(version, options) {
      options = parseOptions(options)
      if (version instanceof SemVer) {
        if (
          version.loose === !!options.loose &&
          version.includePrerelease === !!options.includePrerelease
        ) {
          return version
        } else {
          version = version.version
        }
      } else if (typeof version !== 'string') {
        throw new TypeError(
          `Invalid version. Must be a string. Got type "${typeof version}".`
        )
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError(`version is longer than ${MAX_LENGTH} characters`)
      }
      debug('SemVer', version, options)
      this.options = options
      this.loose = !!options.loose
      // this isn't actually relevant for versions, but keep it so that we
      // don't run into trouble passing this.options around.
      this.includePrerelease = !!options.includePrerelease
      const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])
      if (!m) {
        throw new TypeError(`Invalid Version: ${version}`)
      }
      this.raw = version

      // these are actually numbers
      this.major = +m[1]
      this.minor = +m[2]
      this.patch = +m[3]
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError('Invalid major version')
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError('Invalid minor version')
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError('Invalid patch version')
      }

      // numberify any prerelease numeric ids
      if (!m[4]) {
        this.prerelease = []
      } else {
        this.prerelease = m[4].split('.').map(id => {
          if (/^[0-9]+$/.test(id)) {
            const num = +id
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num
            }
          }
          return id
        })
      }
      this.build = m[5] ? m[5].split('.') : []
      this.format()
    }
    format() {
      this.version = `${this.major}.${this.minor}.${this.patch}`
      if (this.prerelease.length) {
        this.version += `-${this.prerelease.join('.')}`
      }
      return this.version
    }
    toString() {
      return this.version
    }
    compare(other) {
      debug('SemVer.compare', this.version, this.options, other)
      if (!(other instanceof SemVer)) {
        if (typeof other === 'string' && other === this.version) {
          return 0
        }
        other = new SemVer(other, this.options)
      }
      if (other.version === this.version) {
        return 0
      }
      return this.compareMain(other) || this.comparePre(other)
    }
    compareMain(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }
      return (
        compareIdentifiers(this.major, other.major) ||
        compareIdentifiers(this.minor, other.minor) ||
        compareIdentifiers(this.patch, other.patch)
      )
    }
    comparePre(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }

      // NOT having a prerelease is > having one
      if (this.prerelease.length && !other.prerelease.length) {
        return -1
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0
      }
      let i = 0
      do {
        const a = this.prerelease[i]
        const b = other.prerelease[i]
        debug('prerelease compare', i, a, b)
        if (a === undefined && b === undefined) {
          return 0
        } else if (b === undefined) {
          return 1
        } else if (a === undefined) {
          return -1
        } else if (a === b) {
          continue
        } else {
          return compareIdentifiers(a, b)
        }
      } while (++i)
    }
    compareBuild(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }
      let i = 0
      do {
        const a = this.build[i]
        const b = other.build[i]
        debug('build compare', i, a, b)
        if (a === undefined && b === undefined) {
          return 0
        } else if (b === undefined) {
          return 1
        } else if (a === undefined) {
          return -1
        } else if (a === b) {
          continue
        } else {
          return compareIdentifiers(a, b)
        }
      } while (++i)
    }

    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
      if (release.startsWith('pre')) {
        if (!identifier && identifierBase === false) {
          throw new Error('invalid increment argument: identifier is empty')
        }
        // Avoid an invalid semver results
        if (identifier) {
          const match = `-${identifier}`.match(
            this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE]
          )
          if (!match || match[1] !== identifier) {
            throw new Error(`invalid identifier: ${identifier}`)
          }
        }
      }
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0
          this.patch = 0
          this.minor = 0
          this.major++
          this.inc('pre', identifier, identifierBase)
          break
        case 'preminor':
          this.prerelease.length = 0
          this.patch = 0
          this.minor++
          this.inc('pre', identifier, identifierBase)
          break
        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0
          this.inc('patch', identifier, identifierBase)
          this.inc('pre', identifier, identifierBase)
          break
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.
        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier, identifierBase)
          }
          this.inc('pre', identifier, identifierBase)
          break
        case 'release':
          if (this.prerelease.length === 0) {
            throw new Error(`version ${this.raw} is not a prerelease`)
          }
          this.prerelease.length = 0
          break
        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (
            this.minor !== 0 ||
            this.patch !== 0 ||
            this.prerelease.length === 0
          ) {
            this.major++
          }
          this.minor = 0
          this.patch = 0
          this.prerelease = []
          break
        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++
          }
          this.patch = 0
          this.prerelease = []
          break
        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++
          }
          this.prerelease = []
          break
        // This probably shouldn't be used publicly.
        // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
        case 'pre': {
          const base = Number(identifierBase) ? 1 : 0
          if (this.prerelease.length === 0) {
            this.prerelease = [base]
          } else {
            let i = this.prerelease.length
            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++
                i = -2
              }
            }
            if (i === -1) {
              // didn't increment anything
              if (
                identifier === this.prerelease.join('.') &&
                identifierBase === false
              ) {
                throw new Error(
                  'invalid increment argument: identifier already exists'
                )
              }
              this.prerelease.push(base)
            }
          }
          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            let prerelease = [identifier, base]
            if (identifierBase === false) {
              prerelease = [identifier]
            }
            if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = prerelease
              }
            } else {
              this.prerelease = prerelease
            }
          }
          break
        }
        default:
          throw new Error(`invalid increment argument: ${release}`)
      }
      this.raw = this.format()
      if (this.build.length) {
        this.raw += `+${this.build.join('.')}`
      }
      return this
    }
  }
  semver$1 = SemVer
  return semver$1
}

let parse_1
let hasRequiredParse
function requireParse() {
  if (hasRequiredParse) {
    return parse_1
  }
  hasRequiredParse = 1
  const SemVer = requireSemver$1()
  const parse = (version, options, throwErrors = false) => {
    if (version instanceof SemVer) {
      return version
    }
    try {
      return new SemVer(version, options)
    } catch (er) {
      if (!throwErrors) {
        return null
      }
      throw er
    }
  }
  parse_1 = parse
  return parse_1
}

let valid_1
let hasRequiredValid$1
function requireValid$1() {
  if (hasRequiredValid$1) {
    return valid_1
  }
  hasRequiredValid$1 = 1
  const parse = requireParse()
  const valid = (version, options) => {
    const v = parse(version, options)
    return v ? v.version : null
  }
  valid_1 = valid
  return valid_1
}

let clean_1
let hasRequiredClean
function requireClean() {
  if (hasRequiredClean) {
    return clean_1
  }
  hasRequiredClean = 1
  const parse = requireParse()
  const clean = (version, options) => {
    const s = parse(version.trim().replace(/^[=v]+/, ''), options)
    return s ? s.version : null
  }
  clean_1 = clean
  return clean_1
}

let inc_1
let hasRequiredInc
function requireInc() {
  if (hasRequiredInc) {
    return inc_1
  }
  hasRequiredInc = 1
  const SemVer = requireSemver$1()
  const inc = (version, release, options, identifier, identifierBase) => {
    if (typeof options === 'string') {
      identifierBase = identifier
      identifier = options
      options = undefined
    }
    try {
      return new SemVer(
        version instanceof SemVer ? version.version : version,
        options
      ).inc(release, identifier, identifierBase).version
    } catch (er) {
      return null
    }
  }
  inc_1 = inc
  return inc_1
}

let diff_1
let hasRequiredDiff
function requireDiff() {
  if (hasRequiredDiff) {
    return diff_1
  }
  hasRequiredDiff = 1
  const parse = requireParse()
  const diff = (version1, version2) => {
    const v1 = parse(version1, null, true)
    const v2 = parse(version2, null, true)
    const comparison = v1.compare(v2)
    if (comparison === 0) {
      return null
    }
    const v1Higher = comparison > 0
    const highVersion = v1Higher ? v1 : v2
    const lowVersion = v1Higher ? v2 : v1
    const highHasPre = !!highVersion.prerelease.length
    const lowHasPre = !!lowVersion.prerelease.length
    if (lowHasPre && !highHasPre) {
      // Going from prerelease -> no prerelease requires some special casing

      // If the low version has only a major, then it will always be a major
      // Some examples:
      // 1.0.0-1 -> 1.0.0
      // 1.0.0-1 -> 1.1.1
      // 1.0.0-1 -> 2.0.0
      if (!lowVersion.patch && !lowVersion.minor) {
        return 'major'
      }

      // If the main part has no difference
      if (lowVersion.compareMain(highVersion) === 0) {
        if (lowVersion.minor && !lowVersion.patch) {
          return 'minor'
        }
        return 'patch'
      }
    }

    // add the `pre` prefix if we are going to a prerelease version
    const prefix = highHasPre ? 'pre' : ''
    if (v1.major !== v2.major) {
      return prefix + 'major'
    }
    if (v1.minor !== v2.minor) {
      return prefix + 'minor'
    }
    if (v1.patch !== v2.patch) {
      return prefix + 'patch'
    }

    // high and low are preleases
    return 'prerelease'
  }
  diff_1 = diff
  return diff_1
}

let major_1
let hasRequiredMajor
function requireMajor() {
  if (hasRequiredMajor) {
    return major_1
  }
  hasRequiredMajor = 1
  const SemVer = requireSemver$1()
  const major = (a, loose) => new SemVer(a, loose).major
  major_1 = major
  return major_1
}

let minor_1
let hasRequiredMinor
function requireMinor() {
  if (hasRequiredMinor) {
    return minor_1
  }
  hasRequiredMinor = 1
  const SemVer = requireSemver$1()
  const minor = (a, loose) => new SemVer(a, loose).minor
  minor_1 = minor
  return minor_1
}

let patch_1
let hasRequiredPatch
function requirePatch() {
  if (hasRequiredPatch) {
    return patch_1
  }
  hasRequiredPatch = 1
  const SemVer = requireSemver$1()
  const patch = (a, loose) => new SemVer(a, loose).patch
  patch_1 = patch
  return patch_1
}

let prerelease_1
let hasRequiredPrerelease
function requirePrerelease() {
  if (hasRequiredPrerelease) {
    return prerelease_1
  }
  hasRequiredPrerelease = 1
  const parse = requireParse()
  const prerelease = (version, options) => {
    const parsed = parse(version, options)
    return parsed && parsed.prerelease.length ? parsed.prerelease : null
  }
  prerelease_1 = prerelease
  return prerelease_1
}

let compare_1
let hasRequiredCompare
function requireCompare() {
  if (hasRequiredCompare) {
    return compare_1
  }
  hasRequiredCompare = 1
  const SemVer = requireSemver$1()
  const compare = (a, b, loose) =>
    new SemVer(a, loose).compare(new SemVer(b, loose))
  compare_1 = compare
  return compare_1
}

let rcompare_1
let hasRequiredRcompare
function requireRcompare() {
  if (hasRequiredRcompare) {
    return rcompare_1
  }
  hasRequiredRcompare = 1
  const compare = requireCompare()
  const rcompare = (a, b, loose) => compare(b, a, loose)
  rcompare_1 = rcompare
  return rcompare_1
}

let compareLoose_1
let hasRequiredCompareLoose
function requireCompareLoose() {
  if (hasRequiredCompareLoose) {
    return compareLoose_1
  }
  hasRequiredCompareLoose = 1
  const compare = requireCompare()
  const compareLoose = (a, b) => compare(a, b, true)
  compareLoose_1 = compareLoose
  return compareLoose_1
}

let compareBuild_1
let hasRequiredCompareBuild
function requireCompareBuild() {
  if (hasRequiredCompareBuild) {
    return compareBuild_1
  }
  hasRequiredCompareBuild = 1
  const SemVer = requireSemver$1()
  const compareBuild = (a, b, loose) => {
    const versionA = new SemVer(a, loose)
    const versionB = new SemVer(b, loose)
    return versionA.compare(versionB) || versionA.compareBuild(versionB)
  }
  compareBuild_1 = compareBuild
  return compareBuild_1
}

let sort_1
let hasRequiredSort
function requireSort() {
  if (hasRequiredSort) {
    return sort_1
  }
  hasRequiredSort = 1
  const compareBuild = requireCompareBuild()
  const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
  sort_1 = sort
  return sort_1
}

let rsort_1
let hasRequiredRsort
function requireRsort() {
  if (hasRequiredRsort) {
    return rsort_1
  }
  hasRequiredRsort = 1
  const compareBuild = requireCompareBuild()
  const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
  rsort_1 = rsort
  return rsort_1
}

let gt_1
let hasRequiredGt
function requireGt() {
  if (hasRequiredGt) {
    return gt_1
  }
  hasRequiredGt = 1
  const compare = requireCompare()
  const gt = (a, b, loose) => compare(a, b, loose) > 0
  gt_1 = gt
  return gt_1
}

let lt_1
let hasRequiredLt
function requireLt() {
  if (hasRequiredLt) {
    return lt_1
  }
  hasRequiredLt = 1
  const compare = requireCompare()
  const lt = (a, b, loose) => compare(a, b, loose) < 0
  lt_1 = lt
  return lt_1
}

let eq_1
let hasRequiredEq
function requireEq() {
  if (hasRequiredEq) {
    return eq_1
  }
  hasRequiredEq = 1
  const compare = requireCompare()
  const eq = (a, b, loose) => compare(a, b, loose) === 0
  eq_1 = eq
  return eq_1
}

let neq_1
let hasRequiredNeq
function requireNeq() {
  if (hasRequiredNeq) {
    return neq_1
  }
  hasRequiredNeq = 1
  const compare = requireCompare()
  const neq = (a, b, loose) => compare(a, b, loose) !== 0
  neq_1 = neq
  return neq_1
}

let gte_1
let hasRequiredGte
function requireGte() {
  if (hasRequiredGte) {
    return gte_1
  }
  hasRequiredGte = 1
  const compare = requireCompare()
  const gte = (a, b, loose) => compare(a, b, loose) >= 0
  gte_1 = gte
  return gte_1
}

let lte_1
let hasRequiredLte
function requireLte() {
  if (hasRequiredLte) {
    return lte_1
  }
  hasRequiredLte = 1
  const compare = requireCompare()
  const lte = (a, b, loose) => compare(a, b, loose) <= 0
  lte_1 = lte
  return lte_1
}

let cmp_1
let hasRequiredCmp
function requireCmp() {
  if (hasRequiredCmp) {
    return cmp_1
  }
  hasRequiredCmp = 1
  const eq = requireEq()
  const neq = requireNeq()
  const gt = requireGt()
  const gte = requireGte()
  const lt = requireLt()
  const lte = requireLte()
  const cmp = (a, op, b, loose) => {
    switch (op) {
      case '===':
        if (typeof a === 'object') {
          a = a.version
        }
        if (typeof b === 'object') {
          b = b.version
        }
        return a === b
      case '!==':
        if (typeof a === 'object') {
          a = a.version
        }
        if (typeof b === 'object') {
          b = b.version
        }
        return a !== b
      case '':
      case '=':
      case '==':
        return eq(a, b, loose)
      case '!=':
        return neq(a, b, loose)
      case '>':
        return gt(a, b, loose)
      case '>=':
        return gte(a, b, loose)
      case '<':
        return lt(a, b, loose)
      case '<=':
        return lte(a, b, loose)
      default:
        throw new TypeError(`Invalid operator: ${op}`)
    }
  }
  cmp_1 = cmp
  return cmp_1
}

let coerce_1
let hasRequiredCoerce
function requireCoerce() {
  if (hasRequiredCoerce) {
    return coerce_1
  }
  hasRequiredCoerce = 1
  const SemVer = requireSemver$1()
  const parse = requireParse()
  const { safeRe: re, t } = requireRe()
  const coerce = (version, options) => {
    if (version instanceof SemVer) {
      return version
    }
    if (typeof version === 'number') {
      version = String(version)
    }
    if (typeof version !== 'string') {
      return null
    }
    options = options || {}
    let match = null
    if (!options.rtl) {
      match = version.match(
        options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]
      )
    } else {
      // Find the right-most coercible string that does not share
      // a terminus with a more left-ward coercible string.
      // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
      // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
      //
      // Walk through the string checking with a /g regexp
      // Manually set the index so as to pick up overlapping matches.
      // Stop when we get a match that ends at the string end, since no
      // coercible string can be more right-ward without the same terminus.
      const coerceRtlRegex = options.includePrerelease
        ? re[t.COERCERTLFULL]
        : re[t.COERCERTL]
      let next
      while (
        (next = coerceRtlRegex.exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
      ) {
        if (
          !match ||
          next.index + next[0].length !== match.index + match[0].length
        ) {
          match = next
        }
        coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length
      }
      // leave it in a clean state
      coerceRtlRegex.lastIndex = -1
    }
    if (match === null) {
      return null
    }
    const major = match[2]
    const minor = match[3] || '0'
    const patch = match[4] || '0'
    const prerelease =
      options.includePrerelease && match[5] ? `-${match[5]}` : ''
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''
    return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)
  }
  coerce_1 = coerce
  return coerce_1
}

let lrucache
let hasRequiredLrucache
function requireLrucache() {
  if (hasRequiredLrucache) {
    return lrucache
  }
  hasRequiredLrucache = 1
  class LRUCache {
    constructor() {
      this.max = 1000
      this.map = new Map()
    }
    get(key) {
      const value = this.map.get(key)
      if (value === undefined) {
        return undefined
      } else {
        // Remove the key from the map and add it to the end
        this.map.delete(key)
        this.map.set(key, value)
        return value
      }
    }
    delete(key) {
      return this.map.delete(key)
    }
    set(key, value) {
      const deleted = this.delete(key)
      if (!deleted && value !== undefined) {
        // If cache is full, delete the least recently used item
        if (this.map.size >= this.max) {
          const firstKey = this.map.keys().next().value
          this.delete(firstKey)
        }
        this.map.set(key, value)
      }
      return this
    }
  }
  lrucache = LRUCache
  return lrucache
}

let range
let hasRequiredRange
function requireRange() {
  if (hasRequiredRange) {
    return range
  }
  hasRequiredRange = 1
  const SPACE_CHARACTERS = /\s+/g

  // hoisted class for cyclic dependency
  class Range {
    constructor(range, options) {
      options = parseOptions(options)
      if (range instanceof Range) {
        if (
          range.loose === !!options.loose &&
          range.includePrerelease === !!options.includePrerelease
        ) {
          return range
        } else {
          return new Range(range.raw, options)
        }
      }
      if (range instanceof Comparator) {
        // just put it in the set and return
        this.raw = range.value
        this.set = [[range]]
        this.formatted = undefined
        return this
      }
      this.options = options
      this.loose = !!options.loose
      this.includePrerelease = !!options.includePrerelease

      // First reduce all whitespace as much as possible so we do not have to rely
      // on potentially slow regexes like \s*. This is then stored and used for
      // future error messages as well.
      this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')

      // First, split on ||
      this.set = this.raw
        .split('||')
        // map the range to a 2d array of comparators
        .map(r => this.parseRange(r.trim()))
        // throw out any comparator lists that are empty
        // this generally means that it was not a valid range, which is allowed
        // in loose mode, but will still throw if the WHOLE range is invalid.
        .filter(c => c.length)
      if (!this.set.length) {
        throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
      }

      // if we have any that are not the null set, throw out null sets.
      if (this.set.length > 1) {
        // keep the first one, in case they're all null sets
        const first = this.set[0]
        this.set = this.set.filter(c => !isNullSet(c[0]))
        if (this.set.length === 0) {
          this.set = [first]
        } else if (this.set.length > 1) {
          // if we have any that are *, then the range is just *
          for (const c of this.set) {
            if (c.length === 1 && isAny(c[0])) {
              this.set = [c]
              break
            }
          }
        }
      }
      this.formatted = undefined
    }
    get range() {
      if (this.formatted === undefined) {
        this.formatted = ''
        for (let i = 0; i < this.set.length; i++) {
          if (i > 0) {
            this.formatted += '||'
          }
          const comps = this.set[i]
          for (let k = 0; k < comps.length; k++) {
            if (k > 0) {
              this.formatted += ' '
            }
            this.formatted += comps[k].toString().trim()
          }
        }
      }
      return this.formatted
    }
    format() {
      return this.range
    }
    toString() {
      return this.range
    }
    parseRange(range) {
      // memoize range parsing for performance.
      // this is a very hot path, and fully deterministic.
      const memoOpts =
        (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
        (this.options.loose && FLAG_LOOSE)
      const memoKey = memoOpts + ':' + range
      const cached = cache.get(memoKey)
      if (cached) {
        return cached
      }
      const loose = this.options.loose
      // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
      const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
      range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
      debug('hyphen replace', range)

      // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
      debug('comparator trim', range)

      // `~ 1.2.3` => `~1.2.3`
      range = range.replace(re[t.TILDETRIM], tildeTrimReplace)
      debug('tilde trim', range)

      // `^ 1.2.3` => `^1.2.3`
      range = range.replace(re[t.CARETTRIM], caretTrimReplace)
      debug('caret trim', range)

      // At this point, the range is completely trimmed and
      // ready to be split into comparators.

      let rangeList = range
        .split(' ')
        .map(comp => parseComparator(comp, this.options))
        .join(' ')
        .split(/\s+/)
        // >=0.0.0 is equivalent to *
        .map(comp => replaceGTE0(comp, this.options))
      if (loose) {
        // in loose mode, throw out any that are not valid comparators
        rangeList = rangeList.filter(comp => {
          debug('loose invalid filter', comp, this.options)
          return !!comp.match(re[t.COMPARATORLOOSE])
        })
      }
      debug('range list', rangeList)

      // if any comparators are the null set, then replace with JUST null set
      // if more than one comparator, remove any * comparators
      // also, don't include the same comparator more than once
      const rangeMap = new Map()
      const comparators = rangeList.map(
        comp => new Comparator(comp, this.options)
      )
      for (const comp of comparators) {
        if (isNullSet(comp)) {
          return [comp]
        }
        rangeMap.set(comp.value, comp)
      }
      if (rangeMap.size > 1 && rangeMap.has('')) {
        rangeMap.delete('')
      }
      const result = [...rangeMap.values()]
      cache.set(memoKey, result)
      return result
    }
    intersects(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError('a Range is required')
      }
      return this.set.some(thisComparators => {
        return (
          isSatisfiable(thisComparators, options) &&
          range.set.some(rangeComparators => {
            return (
              isSatisfiable(rangeComparators, options) &&
              thisComparators.every(thisComparator => {
                return rangeComparators.every(rangeComparator => {
                  return thisComparator.intersects(rangeComparator, options)
                })
              })
            )
          })
        )
      })
    }

    // if ANY of the sets match ALL of its comparators, then pass
    test(version) {
      if (!version) {
        return false
      }
      if (typeof version === 'string') {
        try {
          version = new SemVer(version, this.options)
        } catch (er) {
          return false
        }
      }
      for (let i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true
        }
      }
      return false
    }
  }
  range = Range
  const LRU = requireLrucache()
  const cache = new LRU()
  const parseOptions = requireParseOptions()
  const Comparator = requireComparator()
  const debug = requireDebug()
  const SemVer = requireSemver$1()
  const {
    safeRe: re,
    t,
    comparatorTrimReplace,
    tildeTrimReplace,
    caretTrimReplace
  } = requireRe()
  const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = requireConstants()
  const isNullSet = c => c.value === '<0.0.0-0'
  const isAny = c => c.value === ''

  // take a set of comparators and determine whether there
  // exists a version which can satisfy it
  const isSatisfiable = (comparators, options) => {
    let result = true
    const remainingComparators = comparators.slice()
    let testComparator = remainingComparators.pop()
    while (result && remainingComparators.length) {
      result = remainingComparators.every(otherComparator => {
        return testComparator.intersects(otherComparator, options)
      })
      testComparator = remainingComparators.pop()
    }
    return result
  }

  // comprised of xranges, tildes, stars, and gtlt's at this point.
  // already replaced the hyphen ranges
  // turn into a set of JUST comparators.
  const parseComparator = (comp, options) => {
    debug('comp', comp, options)
    comp = replaceCarets(comp, options)
    debug('caret', comp)
    comp = replaceTildes(comp, options)
    debug('tildes', comp)
    comp = replaceXRanges(comp, options)
    debug('xrange', comp)
    comp = replaceStars(comp, options)
    debug('stars', comp)
    return comp
  }
  const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

  // ~, ~> --> * (any, kinda silly)
  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
  // ~0.0.1 --> >=0.0.1 <0.1.0-0
  const replaceTildes = (comp, options) => {
    return comp
      .trim()
      .split(/\s+/)
      .map(c => replaceTilde(c, options))
      .join(' ')
  }
  const replaceTilde = (comp, options) => {
    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
    return comp.replace(r, (_, M, m, p, pr) => {
      debug('tilde', comp, _, M, m, p, pr)
      let ret
      if (isX(M)) {
        ret = ''
      } else if (isX(m)) {
        ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
      } else if (isX(p)) {
        // ~1.2 == >=1.2.0 <1.3.0-0
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
      } else if (pr) {
        debug('replaceTilde pr', pr)
        ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`
      } else {
        // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`
      }
      debug('tilde return', ret)
      return ret
    })
  }

  // ^ --> * (any, kinda silly)
  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
  // ^1.2.3 --> >=1.2.3 <2.0.0-0
  // ^1.2.0 --> >=1.2.0 <2.0.0-0
  // ^0.0.1 --> >=0.0.1 <0.0.2-0
  // ^0.1.0 --> >=0.1.0 <0.2.0-0
  const replaceCarets = (comp, options) => {
    return comp
      .trim()
      .split(/\s+/)
      .map(c => replaceCaret(c, options))
      .join(' ')
  }
  const replaceCaret = (comp, options) => {
    debug('caret', comp, options)
    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
    const z = options.includePrerelease ? '-0' : ''
    return comp.replace(r, (_, M, m, p, pr) => {
      debug('caret', comp, _, M, m, p, pr)
      let ret
      if (isX(M)) {
        ret = ''
      } else if (isX(m)) {
        ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
      } else if (isX(p)) {
        if (M === '0') {
          ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
        } else {
          ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
        }
      } else if (pr) {
        debug('replaceCaret pr', pr)
        if (M === '0') {
          if (m === '0') {
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`
          }
        } else {
          ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`
        }
      } else {
        debug('no pr')
        if (M === '0') {
          if (m === '0') {
            ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`
          } else {
            ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`
          }
        } else {
          ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`
        }
      }
      debug('caret return', ret)
      return ret
    })
  }
  const replaceXRanges = (comp, options) => {
    debug('replaceXRanges', comp, options)
    return comp
      .split(/\s+/)
      .map(c => replaceXRange(c, options))
      .join(' ')
  }
  const replaceXRange = (comp, options) => {
    comp = comp.trim()
    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
    return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
      debug('xRange', comp, ret, gtlt, M, m, p, pr)
      const xM = isX(M)
      const xm = xM || isX(m)
      const xp = xm || isX(p)
      const anyX = xp
      if (gtlt === '=' && anyX) {
        gtlt = ''
      }

      // if we're including prereleases in the match, then we need
      // to fix this to -0, the lowest possible prerelease value
      pr = options.includePrerelease ? '-0' : ''
      if (xM) {
        if (gtlt === '>' || gtlt === '<') {
          // nothing is allowed
          ret = '<0.0.0-0'
        } else {
          // nothing is forbidden
          ret = '*'
        }
      } else if (gtlt && anyX) {
        // we know patch is an x, because we have any x at all.
        // replace X with 0
        if (xm) {
          m = 0
        }
        p = 0
        if (gtlt === '>') {
          // >1 => >=2.0.0
          // >1.2 => >=1.3.0
          gtlt = '>='
          if (xm) {
            M = +M + 1
            m = 0
            p = 0
          } else {
            m = +m + 1
            p = 0
          }
        } else if (gtlt === '<=') {
          // <=0.7.x is actually <0.8.0, since any 0.7.x should
          // pass.  Similarly, <=7.x is actually <8.0.0, etc.
          gtlt = '<'
          if (xm) {
            M = +M + 1
          } else {
            m = +m + 1
          }
        }
        if (gtlt === '<') {
          pr = '-0'
        }
        ret = `${gtlt + M}.${m}.${p}${pr}`
      } else if (xm) {
        ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
      } else if (xp) {
        ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`
      }
      debug('xRange return', ret)
      return ret
    })
  }

  // Because * is AND-ed with everything else in the comparator,
  // and '' means "any version", just remove the *s entirely.
  const replaceStars = (comp, options) => {
    debug('replaceStars', comp, options)
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[t.STAR], '')
  }
  const replaceGTE0 = (comp, options) => {
    debug('replaceGTE0', comp, options)
    return comp
      .trim()
      .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
  }

  // This function is passed to string.replace(re[t.HYPHENRANGE])
  // M, m, patch, prerelease, build
  // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
  // 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
  // 1.2 - 3.4 => >=1.2.0 <3.5.0-0
  // TODO build?
  const hyphenReplace =
    incPr => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = ''
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? '-0' : ''}`
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
      } else if (fpr) {
        from = `>=${from}`
      } else {
        from = `>=${from}${incPr ? '-0' : ''}`
      }
      if (isX(tM)) {
        to = ''
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`
      } else {
        to = `<=${to}`
      }
      return `${from} ${to}`.trim()
    }
  const testSet = (set, version, options) => {
    for (let i = 0; i < set.length; i++) {
      if (!set[i].test(version)) {
        return false
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      // Find the set of versions that are allowed to have prereleases
      // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
      // That should allow `1.2.3-pr.2` to pass.
      // However, `1.2.4-alpha.notready` should NOT be allowed,
      // even though it's within the range set by the comparators.
      for (let i = 0; i < set.length; i++) {
        debug(set[i].semver)
        if (set[i].semver === Comparator.ANY) {
          continue
        }
        if (set[i].semver.prerelease.length > 0) {
          const allowed = set[i].semver
          if (
            allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch
          ) {
            return true
          }
        }
      }

      // Version has a -pre, but it's not one of the ones we like.
      return false
    }
    return true
  }
  return range
}

let comparator
let hasRequiredComparator
function requireComparator() {
  if (hasRequiredComparator) {
    return comparator
  }
  hasRequiredComparator = 1
  const ANY = Symbol('SemVer ANY')
  // hoisted class for cyclic dependency
  class Comparator {
    static get ANY() {
      return ANY
    }
    constructor(comp, options) {
      options = parseOptions(options)
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp
        } else {
          comp = comp.value
        }
      }
      comp = comp.trim().split(/\s+/).join(' ')
      debug('comparator', comp, options)
      this.options = options
      this.loose = !!options.loose
      this.parse(comp)
      if (this.semver === ANY) {
        this.value = ''
      } else {
        this.value = this.operator + this.semver.version
      }
      debug('comp', this)
    }
    parse(comp) {
      const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
      const m = comp.match(r)
      if (!m) {
        throw new TypeError(`Invalid comparator: ${comp}`)
      }
      this.operator = m[1] !== undefined ? m[1] : ''
      if (this.operator === '=') {
        this.operator = ''
      }

      // if it literally is just '>' or '' then allow anything.
      if (!m[2]) {
        this.semver = ANY
      } else {
        this.semver = new SemVer(m[2], this.options.loose)
      }
    }
    toString() {
      return this.value
    }
    test(version) {
      debug('Comparator.test', version, this.options.loose)
      if (this.semver === ANY || version === ANY) {
        return true
      }
      if (typeof version === 'string') {
        try {
          version = new SemVer(version, this.options)
        } catch (er) {
          return false
        }
      }
      return cmp(version, this.operator, this.semver, this.options)
    }
    intersects(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError('a Comparator is required')
      }
      if (this.operator === '') {
        if (this.value === '') {
          return true
        }
        return new Range(comp.value, options).test(this.value)
      } else if (comp.operator === '') {
        if (comp.value === '') {
          return true
        }
        return new Range(this.value, options).test(comp.semver)
      }
      options = parseOptions(options)

      // Special cases where nothing can possibly be lower
      if (
        options.includePrerelease &&
        (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')
      ) {
        return false
      }
      if (
        !options.includePrerelease &&
        (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))
      ) {
        return false
      }

      // Same direction increasing (> or >=)
      if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
        return true
      }
      // Same direction decreasing (< or <=)
      if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
        return true
      }
      // same SemVer and both sides are inclusive (<= or >=)
      if (
        this.semver.version === comp.semver.version &&
        this.operator.includes('=') &&
        comp.operator.includes('=')
      ) {
        return true
      }
      // opposite directions less than
      if (
        cmp(this.semver, '<', comp.semver, options) &&
        this.operator.startsWith('>') &&
        comp.operator.startsWith('<')
      ) {
        return true
      }
      // opposite directions greater than
      if (
        cmp(this.semver, '>', comp.semver, options) &&
        this.operator.startsWith('<') &&
        comp.operator.startsWith('>')
      ) {
        return true
      }
      return false
    }
  }
  comparator = Comparator
  const parseOptions = requireParseOptions()
  const { safeRe: re, t } = requireRe()
  const cmp = requireCmp()
  const debug = requireDebug()
  const SemVer = requireSemver$1()
  const Range = requireRange()
  return comparator
}

let satisfies_1
let hasRequiredSatisfies
function requireSatisfies() {
  if (hasRequiredSatisfies) {
    return satisfies_1
  }
  hasRequiredSatisfies = 1
  const Range = requireRange()
  const satisfies = (version, range, options) => {
    try {
      range = new Range(range, options)
    } catch (er) {
      return false
    }
    return range.test(version)
  }
  satisfies_1 = satisfies
  return satisfies_1
}

let toComparators_1
let hasRequiredToComparators
function requireToComparators() {
  if (hasRequiredToComparators) {
    return toComparators_1
  }
  hasRequiredToComparators = 1
  const Range = requireRange()

  // Mostly just for testing and legacy API reasons
  const toComparators = (range, options) =>
    new Range(range, options).set.map(comp =>
      comp
        .map(c => c.value)
        .join(' ')
        .trim()
        .split(' ')
    )
  toComparators_1 = toComparators
  return toComparators_1
}

let maxSatisfying_1
let hasRequiredMaxSatisfying
function requireMaxSatisfying() {
  if (hasRequiredMaxSatisfying) {
    return maxSatisfying_1
  }
  hasRequiredMaxSatisfying = 1
  const SemVer = requireSemver$1()
  const Range = requireRange()
  const maxSatisfying = (versions, range, options) => {
    let max = null
    let maxSV = null
    let rangeObj = null
    try {
      rangeObj = new Range(range, options)
    } catch (er) {
      return null
    }
    versions.forEach(v => {
      if (rangeObj.test(v)) {
        // satisfies(v, range, options)
        if (!max || maxSV.compare(v) === -1) {
          // compare(max, v, true)
          max = v
          maxSV = new SemVer(max, options)
        }
      }
    })
    return max
  }
  maxSatisfying_1 = maxSatisfying
  return maxSatisfying_1
}

let minSatisfying_1
let hasRequiredMinSatisfying
function requireMinSatisfying() {
  if (hasRequiredMinSatisfying) {
    return minSatisfying_1
  }
  hasRequiredMinSatisfying = 1
  const SemVer = requireSemver$1()
  const Range = requireRange()
  const minSatisfying = (versions, range, options) => {
    let min = null
    let minSV = null
    let rangeObj = null
    try {
      rangeObj = new Range(range, options)
    } catch (er) {
      return null
    }
    versions.forEach(v => {
      if (rangeObj.test(v)) {
        // satisfies(v, range, options)
        if (!min || minSV.compare(v) === 1) {
          // compare(min, v, true)
          min = v
          minSV = new SemVer(min, options)
        }
      }
    })
    return min
  }
  minSatisfying_1 = minSatisfying
  return minSatisfying_1
}

let minVersion_1
let hasRequiredMinVersion
function requireMinVersion() {
  if (hasRequiredMinVersion) {
    return minVersion_1
  }
  hasRequiredMinVersion = 1
  const SemVer = requireSemver$1()
  const Range = requireRange()
  const gt = requireGt()
  const minVersion = (range, loose) => {
    range = new Range(range, loose)
    let minver = new SemVer('0.0.0')
    if (range.test(minver)) {
      return minver
    }
    minver = new SemVer('0.0.0-0')
    if (range.test(minver)) {
      return minver
    }
    minver = null
    for (let i = 0; i < range.set.length; ++i) {
      const comparators = range.set[i]
      let setMin = null
      comparators.forEach(comparator => {
        // Clone to avoid manipulating the comparator's semver object.
        const compver = new SemVer(comparator.semver.version)
        switch (comparator.operator) {
          case '>':
            if (compver.prerelease.length === 0) {
              compver.patch++
            } else {
              compver.prerelease.push(0)
            }
            compver.raw = compver.format()
          /* fallthrough */
          case '':
          case '>=':
            if (!setMin || gt(compver, setMin)) {
              setMin = compver
            }
            break
          case '<':
          case '<=':
            /* Ignore maximum versions */
            break
          /* istanbul ignore next */
          default:
            throw new Error(`Unexpected operation: ${comparator.operator}`)
        }
      })
      if (setMin && (!minver || gt(minver, setMin))) {
        minver = setMin
      }
    }
    if (minver && range.test(minver)) {
      return minver
    }
    return null
  }
  minVersion_1 = minVersion
  return minVersion_1
}

let valid
let hasRequiredValid
function requireValid() {
  if (hasRequiredValid) {
    return valid
  }
  hasRequiredValid = 1
  const Range = requireRange()
  const validRange = (range, options) => {
    try {
      // Return '*' instead of '' so that truthiness works.
      // This will throw if it's invalid anyway
      return new Range(range, options).range || '*'
    } catch (er) {
      return null
    }
  }
  valid = validRange
  return valid
}

let outside_1
let hasRequiredOutside
function requireOutside() {
  if (hasRequiredOutside) {
    return outside_1
  }
  hasRequiredOutside = 1
  const SemVer = requireSemver$1()
  const Comparator = requireComparator()
  const { ANY } = Comparator
  const Range = requireRange()
  const satisfies = requireSatisfies()
  const gt = requireGt()
  const lt = requireLt()
  const lte = requireLte()
  const gte = requireGte()
  const outside = (version, range, hilo, options) => {
    version = new SemVer(version, options)
    range = new Range(range, options)
    let gtfn, ltefn, ltfn, comp, ecomp
    switch (hilo) {
      case '>':
        gtfn = gt
        ltefn = lte
        ltfn = lt
        comp = '>'
        ecomp = '>='
        break
      case '<':
        gtfn = lt
        ltefn = gte
        ltfn = gt
        comp = '<'
        ecomp = '<='
        break
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"')
    }

    // If it satisfies the range it is not outside
    if (satisfies(version, range, options)) {
      return false
    }

    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.

    for (let i = 0; i < range.set.length; ++i) {
      const comparators = range.set[i]
      let high = null
      let low = null
      comparators.forEach(comparator => {
        if (comparator.semver === ANY) {
          comparator = new Comparator('>=0.0.0')
        }
        high = high || comparator
        low = low || comparator
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator
        }
      })

      // If the edge version comparator has a operator then our version
      // isn't outside it
      if (high.operator === comp || high.operator === ecomp) {
        return false
      }

      // If the lowest version comparator has an operator and our version
      // is less than it then it isn't higher than the range
      if (
        (!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)
      ) {
        return false
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false
      }
    }
    return true
  }
  outside_1 = outside
  return outside_1
}

let gtr_1
let hasRequiredGtr
function requireGtr() {
  if (hasRequiredGtr) {
    return gtr_1
  }
  hasRequiredGtr = 1

  // Determine if version is greater than all the versions possible in the range.
  const outside = requireOutside()
  const gtr = (version, range, options) => outside(version, range, '>', options)
  gtr_1 = gtr
  return gtr_1
}

let ltr_1
let hasRequiredLtr
function requireLtr() {
  if (hasRequiredLtr) {
    return ltr_1
  }
  hasRequiredLtr = 1
  const outside = requireOutside()
  // Determine if version is less than all the versions possible in the range
  const ltr = (version, range, options) => outside(version, range, '<', options)
  ltr_1 = ltr
  return ltr_1
}

let intersects_1
let hasRequiredIntersects
function requireIntersects() {
  if (hasRequiredIntersects) {
    return intersects_1
  }
  hasRequiredIntersects = 1
  const Range = requireRange()
  const intersects = (r1, r2, options) => {
    r1 = new Range(r1, options)
    r2 = new Range(r2, options)
    return r1.intersects(r2, options)
  }
  intersects_1 = intersects
  return intersects_1
}

let simplify
let hasRequiredSimplify
function requireSimplify() {
  if (hasRequiredSimplify) {
    return simplify
  }
  hasRequiredSimplify = 1

  // given a set of versions and a range, create a "simplified" range
  // that includes the same versions that the original range does
  // If the original range is shorter than the simplified one, return that.
  const satisfies = requireSatisfies()
  const compare = requireCompare()
  simplify = (versions, range, options) => {
    const set = []
    let first = null
    let prev = null
    const v = versions.sort((a, b) => compare(a, b, options))
    for (const version of v) {
      const included = satisfies(version, range, options)
      if (included) {
        prev = version
        if (!first) {
          first = version
        }
      } else {
        if (prev) {
          set.push([first, prev])
        }
        prev = null
        first = null
      }
    }
    if (first) {
      set.push([first, null])
    }
    const ranges = []
    for (const [min, max] of set) {
      if (min === max) {
        ranges.push(min)
      } else if (!max && min === v[0]) {
        ranges.push('*')
      } else if (!max) {
        ranges.push(`>=${min}`)
      } else if (min === v[0]) {
        ranges.push(`<=${max}`)
      } else {
        ranges.push(`${min} - ${max}`)
      }
    }
    const simplified = ranges.join(' || ')
    const original = typeof range.raw === 'string' ? range.raw : String(range)
    return simplified.length < original.length ? simplified : range
  }
  return simplify
}

let subset_1
let hasRequiredSubset
function requireSubset() {
  if (hasRequiredSubset) {
    return subset_1
  }
  hasRequiredSubset = 1
  const Range = requireRange()
  const Comparator = requireComparator()
  const { ANY } = Comparator
  const satisfies = requireSatisfies()
  const compare = requireCompare()

  // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
  // - Every simple range `r1, r2, ...` is a null set, OR
  // - Every simple range `r1, r2, ...` which is not a null set is a subset of
  //   some `R1, R2, ...`
  //
  // Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
  // - If c is only the ANY comparator
  //   - If C is only the ANY comparator, return true
  //   - Else if in prerelease mode, return false
  //   - else replace c with `[>=0.0.0]`
  // - If C is only the ANY comparator
  //   - if in prerelease mode, return true
  //   - else replace C with `[>=0.0.0]`
  // - Let EQ be the set of = comparators in c
  // - If EQ is more than one, return true (null set)
  // - Let GT be the highest > or >= comparator in c
  // - Let LT be the lowest < or <= comparator in c
  // - If GT and LT, and GT.semver > LT.semver, return true (null set)
  // - If any C is a = range, and GT or LT are set, return false
  // - If EQ
  //   - If GT, and EQ does not satisfy GT, return true (null set)
  //   - If LT, and EQ does not satisfy LT, return true (null set)
  //   - If EQ satisfies every C, return true
  //   - Else return false
  // - If GT
  //   - If GT.semver is lower than any > or >= comp in C, return false
  //   - If GT is >=, and GT.semver does not satisfy every C, return false
  //   - If GT.semver has a prerelease, and not in prerelease mode
  //     - If no C has a prerelease and the GT.semver tuple, return false
  // - If LT
  //   - If LT.semver is greater than any < or <= comp in C, return false
  //   - If LT is <=, and LT.semver does not satisfy every C, return false
  //   - If GT.semver has a prerelease, and not in prerelease mode
  //     - If no C has a prerelease and the LT.semver tuple, return false
  // - Else return true

  const subset = (sub, dom, options = {}) => {
    if (sub === dom) {
      return true
    }
    sub = new Range(sub, options)
    dom = new Range(dom, options)
    let sawNonNull = false
    OUTER: for (const simpleSub of sub.set) {
      for (const simpleDom of dom.set) {
        const isSub = simpleSubset(simpleSub, simpleDom, options)
        sawNonNull = sawNonNull || isSub !== null
        if (isSub) {
          continue OUTER
        }
      }
      // the null set is a subset of everything, but null simple ranges in
      // a complex range should be ignored.  so if we saw a non-null range,
      // then we know this isn't a subset, but if EVERY simple range was null,
      // then it is a subset.
      if (sawNonNull) {
        return false
      }
    }
    return true
  }
  const minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]
  const minimumVersion = [new Comparator('>=0.0.0')]
  const simpleSubset = (sub, dom, options) => {
    if (sub === dom) {
      return true
    }
    if (sub.length === 1 && sub[0].semver === ANY) {
      if (dom.length === 1 && dom[0].semver === ANY) {
        return true
      } else if (options.includePrerelease) {
        sub = minimumVersionWithPreRelease
      } else {
        sub = minimumVersion
      }
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
      if (options.includePrerelease) {
        return true
      } else {
        dom = minimumVersion
      }
    }
    const eqSet = new Set()
    let gt, lt
    for (const c of sub) {
      if (c.operator === '>' || c.operator === '>=') {
        gt = higherGT(gt, c, options)
      } else if (c.operator === '<' || c.operator === '<=') {
        lt = lowerLT(lt, c, options)
      } else {
        eqSet.add(c.semver)
      }
    }
    if (eqSet.size > 1) {
      return null
    }
    let gtltComp
    if (gt && lt) {
      gtltComp = compare(gt.semver, lt.semver, options)
      if (gtltComp > 0) {
        return null
      } else if (
        gtltComp === 0 &&
        (gt.operator !== '>=' || lt.operator !== '<=')
      ) {
        return null
      }
    }

    // will iterate one or zero times
    for (const eq of eqSet) {
      if (gt && !satisfies(eq, String(gt), options)) {
        return null
      }
      if (lt && !satisfies(eq, String(lt), options)) {
        return null
      }
      for (const c of dom) {
        if (!satisfies(eq, String(c), options)) {
          return false
        }
      }
      return true
    }
    let higher, lower
    let hasDomLT, hasDomGT
    // if the subset has a prerelease, we need a comparator in the superset
    // with the same tuple and a prerelease, or it's not a subset
    let needDomLTPre =
      lt && !options.includePrerelease && lt.semver.prerelease.length
        ? lt.semver
        : false
    let needDomGTPre =
      gt && !options.includePrerelease && gt.semver.prerelease.length
        ? gt.semver
        : false
    // exception: <1.2.3-0 is the same as <1.2.3
    if (
      needDomLTPre &&
      needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' &&
      needDomLTPre.prerelease[0] === 0
    ) {
      needDomLTPre = false
    }
    for (const c of dom) {
      hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='
      hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='
      if (gt) {
        if (needDomGTPre) {
          if (
            c.semver.prerelease &&
            c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch
          ) {
            needDomGTPre = false
          }
        }
        if (c.operator === '>' || c.operator === '>=') {
          higher = higherGT(gt, c, options)
          if (higher === c && higher !== gt) {
            return false
          }
        } else if (
          gt.operator === '>=' &&
          !satisfies(gt.semver, String(c), options)
        ) {
          return false
        }
      }
      if (lt) {
        if (needDomLTPre) {
          if (
            c.semver.prerelease &&
            c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch
          ) {
            needDomLTPre = false
          }
        }
        if (c.operator === '<' || c.operator === '<=') {
          lower = lowerLT(lt, c, options)
          if (lower === c && lower !== lt) {
            return false
          }
        } else if (
          lt.operator === '<=' &&
          !satisfies(lt.semver, String(c), options)
        ) {
          return false
        }
      }
      if (!c.operator && (lt || gt) && gtltComp !== 0) {
        return false
      }
    }

    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
    if (gt && hasDomLT && !lt && gtltComp !== 0) {
      return false
    }
    if (lt && hasDomGT && !gt && gtltComp !== 0) {
      return false
    }

    // we needed a prerelease range in a specific tuple, but didn't get one
    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
    // because it includes prereleases in the 1.2.3 tuple
    if (needDomGTPre || needDomLTPre) {
      return false
    }
    return true
  }

  // >=1.2.3 is lower than >1.2.3
  const higherGT = (a, b, options) => {
    if (!a) {
      return b
    }
    const comp = compare(a.semver, b.semver, options)
    return comp > 0
      ? a
      : comp < 0
        ? b
        : b.operator === '>' && a.operator === '>='
          ? b
          : a
  }

  // <=1.2.3 is higher than <1.2.3
  const lowerLT = (a, b, options) => {
    if (!a) {
      return b
    }
    const comp = compare(a.semver, b.semver, options)
    return comp < 0
      ? a
      : comp > 0
        ? b
        : b.operator === '<' && a.operator === '<='
          ? b
          : a
  }
  subset_1 = subset
  return subset_1
}

let semver
let hasRequiredSemver
function requireSemver() {
  if (hasRequiredSemver) {
    return semver
  }
  hasRequiredSemver = 1

  // just pre-load all the stuff that index.js lazily exports
  const internalRe = requireRe()
  const constants = requireConstants()
  const SemVer = requireSemver$1()
  const identifiers = requireIdentifiers()
  const parse = requireParse()
  const valid = requireValid$1()
  const clean = requireClean()
  const inc = requireInc()
  const diff = requireDiff()
  const major = requireMajor()
  const minor = requireMinor()
  const patch = requirePatch()
  const prerelease = requirePrerelease()
  const compare = requireCompare()
  const rcompare = requireRcompare()
  const compareLoose = requireCompareLoose()
  const compareBuild = requireCompareBuild()
  const sort = requireSort()
  const rsort = requireRsort()
  const gt = requireGt()
  const lt = requireLt()
  const eq = requireEq()
  const neq = requireNeq()
  const gte = requireGte()
  const lte = requireLte()
  const cmp = requireCmp()
  const coerce = requireCoerce()
  const Comparator = requireComparator()
  const Range = requireRange()
  const satisfies = requireSatisfies()
  const toComparators = requireToComparators()
  const maxSatisfying = requireMaxSatisfying()
  const minSatisfying = requireMinSatisfying()
  const minVersion = requireMinVersion()
  const validRange = requireValid()
  const outside = requireOutside()
  const gtr = requireGtr()
  const ltr = requireLtr()
  const intersects = requireIntersects()
  const simplifyRange = requireSimplify()
  const subset = requireSubset()
  semver = {
    parse,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
  }
  return semver
}

let node
let hasRequiredNode
function requireNode() {
  if (hasRequiredNode) {
    return node
  }
  hasRequiredNode = 1
  const semver = requireSemver()
  const satisfies = range => {
    return semver.satisfies(process.version, range, {
      includePrerelease: true
    })
  }
  node = {
    satisfies
  }
  return node
}

const errors = { exports: {} }

let hasRequiredErrors
function requireErrors() {
  if (hasRequiredErrors) {
    return errors.exports
  }
  hasRequiredErrors = 1
  ;(function (module) {
    const { inspect } = require$$0$4

    // adapted from node's internal/errors
    // https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js

    // close copy of node's internal SystemError class.
    class SystemError {
      constructor(code, prefix, context) {
        // XXX context.code is undefined in all constructors used in cp/polyfill
        // that may be a bug copied from node, maybe the constructor should use
        // `code` not `errno`?  nodejs/node#41104
        let message =
          `${prefix}: ${context.syscall} returned ` +
          `${context.code} (${context.message})`
        if (context.path !== undefined) {
          message += ` ${context.path}`
        }
        if (context.dest !== undefined) {
          message += ` => ${context.dest}`
        }
        this.code = code
        Object.defineProperties(this, {
          name: {
            value: 'SystemError',
            enumerable: false,
            writable: true,
            configurable: true
          },
          message: {
            value: message,
            enumerable: false,
            writable: true,
            configurable: true
          },
          info: {
            value: context,
            enumerable: true,
            configurable: true,
            writable: false
          },
          errno: {
            get() {
              return context.errno
            },
            set(value) {
              context.errno = value
            },
            enumerable: true,
            configurable: true
          },
          syscall: {
            get() {
              return context.syscall
            },
            set(value) {
              context.syscall = value
            },
            enumerable: true,
            configurable: true
          }
        })
        if (context.path !== undefined) {
          Object.defineProperty(this, 'path', {
            get() {
              return context.path
            },
            set(value) {
              context.path = value
            },
            enumerable: true,
            configurable: true
          })
        }
        if (context.dest !== undefined) {
          Object.defineProperty(this, 'dest', {
            get() {
              return context.dest
            },
            set(value) {
              context.dest = value
            },
            enumerable: true,
            configurable: true
          })
        }
      }
      toString() {
        return `${this.name} [${this.code}]: ${this.message}`
      }
      [Symbol.for('nodejs.util.inspect.custom')](_recurseTimes, ctx) {
        return inspect(this, {
          ...ctx,
          getters: true,
          customInspect: false
        })
      }
    }
    function E(code, message) {
      module.exports[code] = class NodeError extends SystemError {
        constructor(ctx) {
          super(code, message, ctx)
        }
      }
    }
    E(
      'ERR_FS_CP_DIR_TO_NON_DIR',
      'Cannot overwrite directory with non-directory'
    )
    E('ERR_FS_CP_EEXIST', 'Target already exists')
    E('ERR_FS_CP_EINVAL', 'Invalid src or dest')
    E('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe')
    E(
      'ERR_FS_CP_NON_DIR_TO_DIR',
      'Cannot overwrite non-directory with directory'
    )
    E('ERR_FS_CP_SOCKET', 'Cannot copy a socket file')
    E(
      'ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY',
      'Cannot overwrite symlink in subdirectory of self'
    )
    E('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type')
    E('ERR_FS_EISDIR', 'Path is a directory')
    module.exports.ERR_INVALID_ARG_TYPE = class ERR_INVALID_ARG_TYPE extends (
      Error
    ) {
      constructor(name, expected, actual) {
        super()
        this.code = 'ERR_INVALID_ARG_TYPE'
        this.message = `The ${name} argument must be ${expected}. Received ${typeof actual}`
      }
    }
  })(errors)
  return errors.exports
}

let polyfill
let hasRequiredPolyfill
function requirePolyfill() {
  if (hasRequiredPolyfill) {
    return polyfill
  }
  hasRequiredPolyfill = 1
  const {
    ERR_FS_CP_DIR_TO_NON_DIR,
    ERR_FS_CP_EEXIST,
    ERR_FS_CP_EINVAL,
    ERR_FS_CP_FIFO_PIPE,
    ERR_FS_CP_NON_DIR_TO_DIR,
    ERR_FS_CP_SOCKET,
    ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY,
    ERR_FS_CP_UNKNOWN,
    ERR_FS_EISDIR,
    ERR_INVALID_ARG_TYPE
  } = requireErrors()
  const {
    constants: {
      errno: { EEXIST, EISDIR, EINVAL, ENOTDIR }
    }
  } = require$$1$2
  const {
    chmod,
    copyFile,
    lstat,
    mkdir,
    readdir,
    readlink,
    stat,
    symlink,
    unlink,
    utimes
  } = require$$0$5
  const { dirname, isAbsolute, join, parse, resolve, sep, toNamespacedPath } =
    require$$0$3
  const { fileURLToPath } = require$$4
  const defaultOptions = {
    dereference: false,
    errorOnExist: false,
    filter: undefined,
    force: true,
    preserveTimestamps: false,
    recursive: false
  }
  async function cp(src, dest, opts) {
    if (opts != null && typeof opts !== 'object') {
      throw new ERR_INVALID_ARG_TYPE('options', ['Object'], opts)
    }
    return cpFn(
      toNamespacedPath(getValidatedPath(src)),
      toNamespacedPath(getValidatedPath(dest)),
      {
        ...defaultOptions,
        ...opts
      }
    )
  }
  function getValidatedPath(fileURLOrPath) {
    const path =
      fileURLOrPath != null && fileURLOrPath.href && fileURLOrPath.origin
        ? fileURLToPath(fileURLOrPath)
        : fileURLOrPath
    return path
  }
  async function cpFn(src, dest, opts) {
    // Warn about using preserveTimestamps on 32-bit node
    // istanbul ignore next
    if (opts.preserveTimestamps && process.arch === 'ia32') {
      const warning =
        'Using the preserveTimestamps option in 32-bit ' +
        'node is not recommended'
      process.emitWarning(warning, 'TimestampPrecisionWarning')
    }
    const stats = await checkPaths(src, dest, opts)
    const { srcStat, destStat } = stats
    await checkParentPaths(src, srcStat, dest)
    if (opts.filter) {
      return handleFilter(checkParentDir, destStat, src, dest, opts)
    }
    return checkParentDir(destStat, src, dest, opts)
  }
  async function checkPaths(src, dest, opts) {
    const { 0: srcStat, 1: destStat } = await getStats(src, dest, opts)
    if (destStat) {
      if (areIdentical(srcStat, destStat)) {
        throw new ERR_FS_CP_EINVAL({
          message: 'src and dest cannot be the same',
          path: dest,
          syscall: 'cp',
          errno: EINVAL
        })
      }
      if (srcStat.isDirectory() && !destStat.isDirectory()) {
        throw new ERR_FS_CP_DIR_TO_NON_DIR({
          message:
            `cannot overwrite directory ${src} ` + `with non-directory ${dest}`,
          path: dest,
          syscall: 'cp',
          errno: EISDIR
        })
      }
      if (!srcStat.isDirectory() && destStat.isDirectory()) {
        throw new ERR_FS_CP_NON_DIR_TO_DIR({
          message:
            `cannot overwrite non-directory ${src} ` + `with directory ${dest}`,
          path: dest,
          syscall: 'cp',
          errno: ENOTDIR
        })
      }
    }
    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
      throw new ERR_FS_CP_EINVAL({
        message: `cannot copy ${src} to a subdirectory of self ${dest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    return {
      srcStat,
      destStat
    }
  }
  function areIdentical(srcStat, destStat) {
    return (
      destStat.ino &&
      destStat.dev &&
      destStat.ino === srcStat.ino &&
      destStat.dev === srcStat.dev
    )
  }
  function getStats(src, dest, opts) {
    const statFunc = opts.dereference
      ? file =>
          stat(file, {
            bigint: true
          })
      : file =>
          lstat(file, {
            bigint: true
          })
    return Promise.all([
      statFunc(src),
      statFunc(dest).catch(err => {
        // istanbul ignore next: unsure how to cover.
        if (err.code === 'ENOENT') {
          return null
        }
        // istanbul ignore next: unsure how to cover.
        throw err
      })
    ])
  }
  async function checkParentDir(destStat, src, dest, opts) {
    const destParent = dirname(dest)
    const dirExists = await pathExists(destParent)
    if (dirExists) {
      return getStatsForCopy(destStat, src, dest, opts)
    }
    await mkdir(destParent, {
      recursive: true
    })
    return getStatsForCopy(destStat, src, dest, opts)
  }
  function pathExists(dest) {
    return stat(dest).then(
      () => true,
      // istanbul ignore next: not sure when this would occur
      err => (err.code === 'ENOENT' ? false : Promise.reject(err))
    )
  }

  // Recursively check if dest parent is a subdirectory of src.
  // It works for all file types including symlinks since it
  // checks the src and dest inodes. It starts from the deepest
  // parent and stops once it reaches the src parent or the root path.
  async function checkParentPaths(src, srcStat, dest) {
    const srcParent = resolve(dirname(src))
    const destParent = resolve(dirname(dest))
    if (destParent === srcParent || destParent === parse(destParent).root) {
      return
    }
    let destStat
    try {
      destStat = await stat(destParent, {
        bigint: true
      })
    } catch (err) {
      // istanbul ignore else: not sure when this would occur
      if (err.code === 'ENOENT') {
        return
      }
      // istanbul ignore next: not sure when this would occur
      throw err
    }
    if (areIdentical(srcStat, destStat)) {
      throw new ERR_FS_CP_EINVAL({
        message: `cannot copy ${src} to a subdirectory of self ${dest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    return checkParentPaths(src, srcStat, destParent)
  }
  const normalizePathToArray = path => resolve(path).split(sep).filter(Boolean)

  // Return true if dest is a subdir of src, otherwise false.
  // It only checks the path strings.
  function isSrcSubdir(src, dest) {
    const srcArr = normalizePathToArray(src)
    const destArr = normalizePathToArray(dest)
    return srcArr.every((cur, i) => destArr[i] === cur)
  }
  async function handleFilter(onInclude, destStat, src, dest, opts, cb) {
    const include = await opts.filter(src, dest)
    if (include) {
      return onInclude(destStat, src, dest, opts, cb)
    }
  }
  function startCopy(destStat, src, dest, opts) {
    if (opts.filter) {
      return handleFilter(getStatsForCopy, destStat, src, dest, opts)
    }
    return getStatsForCopy(destStat, src, dest, opts)
  }
  async function getStatsForCopy(destStat, src, dest, opts) {
    const statFn = opts.dereference ? stat : lstat
    const srcStat = await statFn(src)
    // istanbul ignore else: can't portably test FIFO
    if (srcStat.isDirectory() && opts.recursive) {
      return onDir(srcStat, destStat, src, dest, opts)
    } else if (srcStat.isDirectory()) {
      throw new ERR_FS_EISDIR({
        message: `${src} is a directory (not copied)`,
        path: src,
        syscall: 'cp',
        errno: EINVAL
      })
    } else if (
      srcStat.isFile() ||
      srcStat.isCharacterDevice() ||
      srcStat.isBlockDevice()
    ) {
      return onFile(srcStat, destStat, src, dest, opts)
    } else if (srcStat.isSymbolicLink()) {
      return onLink(destStat, src, dest)
    } else if (srcStat.isSocket()) {
      throw new ERR_FS_CP_SOCKET({
        message: `cannot copy a socket file: ${dest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    } else if (srcStat.isFIFO()) {
      throw new ERR_FS_CP_FIFO_PIPE({
        message: `cannot copy a FIFO pipe: ${dest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    // istanbul ignore next: should be unreachable
    throw new ERR_FS_CP_UNKNOWN({
      message: `cannot copy an unknown file type: ${dest}`,
      path: dest,
      syscall: 'cp',
      errno: EINVAL
    })
  }
  function onFile(srcStat, destStat, src, dest, opts) {
    if (!destStat) {
      return _copyFile(srcStat, src, dest, opts)
    }
    return mayCopyFile(srcStat, src, dest, opts)
  }
  async function mayCopyFile(srcStat, src, dest, opts) {
    if (opts.force) {
      await unlink(dest)
      return _copyFile(srcStat, src, dest, opts)
    } else if (opts.errorOnExist) {
      throw new ERR_FS_CP_EEXIST({
        message: `${dest} already exists`,
        path: dest,
        syscall: 'cp',
        errno: EEXIST
      })
    }
  }
  async function _copyFile(srcStat, src, dest, opts) {
    await copyFile(src, dest)
    if (opts.preserveTimestamps) {
      return handleTimestampsAndMode(srcStat.mode, src, dest)
    }
    return setDestMode(dest, srcStat.mode)
  }
  async function handleTimestampsAndMode(srcMode, src, dest) {
    // Make sure the file is writable before setting the timestamp
    // otherwise open fails with EPERM when invoked with 'r+'
    // (through utimes call)
    if (fileIsNotWritable(srcMode)) {
      await makeFileWritable(dest, srcMode)
      return setDestTimestampsAndMode(srcMode, src, dest)
    }
    return setDestTimestampsAndMode(srcMode, src, dest)
  }
  function fileIsNotWritable(srcMode) {
    return (srcMode & 0o200) === 0
  }
  function makeFileWritable(dest, srcMode) {
    return setDestMode(dest, srcMode | 0o200)
  }
  async function setDestTimestampsAndMode(srcMode, src, dest) {
    await setDestTimestamps(src, dest)
    return setDestMode(dest, srcMode)
  }
  function setDestMode(dest, srcMode) {
    return chmod(dest, srcMode)
  }
  async function setDestTimestamps(src, dest) {
    // The initial srcStat.atime cannot be trusted
    // because it is modified by the read(2) system call
    // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
    const updatedSrcStat = await stat(src)
    return utimes(dest, updatedSrcStat.atime, updatedSrcStat.mtime)
  }
  function onDir(srcStat, destStat, src, dest, opts) {
    if (!destStat) {
      return mkDirAndCopy(srcStat.mode, src, dest, opts)
    }
    return copyDir(src, dest, opts)
  }
  async function mkDirAndCopy(srcMode, src, dest, opts) {
    await mkdir(dest)
    await copyDir(src, dest, opts)
    return setDestMode(dest, srcMode)
  }
  async function copyDir(src, dest, opts) {
    const dir = await readdir(src)
    for (let i = 0; i < dir.length; i++) {
      const item = dir[i]
      const srcItem = join(src, item)
      const destItem = join(dest, item)
      const { destStat } = await checkPaths(srcItem, destItem, opts)
      await startCopy(destStat, srcItem, destItem, opts)
    }
  }
  async function onLink(destStat, src, dest) {
    let resolvedSrc = await readlink(src)
    if (!isAbsolute(resolvedSrc)) {
      resolvedSrc = resolve(dirname(src), resolvedSrc)
    }
    if (!destStat) {
      return symlink(resolvedSrc, dest)
    }
    let resolvedDest
    try {
      resolvedDest = await readlink(dest)
    } catch (err) {
      // Dest exists and is a regular file or directory,
      // Windows may throw UNKNOWN error. If dest already exists,
      // fs throws error anyway, so no need to guard against it here.
      // istanbul ignore next: can only test on windows
      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') {
        return symlink(resolvedSrc, dest)
      }
      // istanbul ignore next: should not be possible
      throw err
    }
    if (!isAbsolute(resolvedDest)) {
      resolvedDest = resolve(dirname(dest), resolvedDest)
    }
    if (isSrcSubdir(resolvedSrc, resolvedDest)) {
      throw new ERR_FS_CP_EINVAL({
        message:
          `cannot copy ${resolvedSrc} to a subdirectory of self ` +
          `${resolvedDest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    // Do not copy if src is a subdir of dest since unlinking
    // dest in this case would result in removing src contents
    // and therefore a broken symlink would be created.
    const srcStat = await stat(src)
    if (srcStat.isDirectory() && isSrcSubdir(resolvedDest, resolvedSrc)) {
      throw new ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY({
        message: `cannot overwrite ${resolvedDest} with ${resolvedSrc}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    return copyLink(resolvedSrc, dest)
  }
  async function copyLink(resolvedSrc, dest) {
    await unlink(dest)
    return symlink(resolvedSrc, dest)
  }
  polyfill = cp
  return polyfill
}

let cp_1
let hasRequiredCp
function requireCp() {
  if (hasRequiredCp) {
    return cp_1
  }
  hasRequiredCp = 1
  const fs = require$$0$5
  const getOptions = requireGetOptions()
  const node = requireNode()
  const polyfill = requirePolyfill()

  // node 16.7.0 added fs.cp
  const useNative = node.satisfies('>=16.7.0')
  const cp = async (src, dest, opts) => {
    const options = getOptions(opts, {
      copy: [
        'dereference',
        'errorOnExist',
        'filter',
        'force',
        'preserveTimestamps',
        'recursive'
      ]
    })

    // the polyfill is tested separately from this module, no need to hack
    // process.version to try to trigger it just for coverage
    // istanbul ignore next
    return useNative ? fs.cp(src, dest, options) : polyfill(src, dest, options)
  }
  cp_1 = cp
  return cp_1
}

let withTempDir_1
let hasRequiredWithTempDir
function requireWithTempDir() {
  if (hasRequiredWithTempDir) {
    return withTempDir_1
  }
  hasRequiredWithTempDir = 1
  const { join, sep } = require$$0$3
  const getOptions = requireGetOptions()
  const { mkdir, mkdtemp, rm } = require$$0$5

  // create a temp directory, ensure its permissions match its parent, then call
  // the supplied function passing it the path to the directory. clean up after
  // the function finishes, whether it throws or not
  const withTempDir = async (root, fn, opts) => {
    const options = getOptions(opts, {
      copy: ['tmpPrefix']
    })
    // create the directory
    await mkdir(root, {
      recursive: true
    })
    const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''))
    let err
    let result
    try {
      result = await fn(target)
    } catch (_err) {
      err = _err
    }
    try {
      await rm(target, {
        force: true,
        recursive: true
      })
    } catch {
      // ignore errors
    }
    if (err) {
      throw err
    }
    return result
  }
  withTempDir_1 = withTempDir
  return withTempDir_1
}

let readdirScoped_1
let hasRequiredReaddirScoped
function requireReaddirScoped() {
  if (hasRequiredReaddirScoped) {
    return readdirScoped_1
  }
  hasRequiredReaddirScoped = 1
  const { readdir } = require$$0$5
  const { join } = require$$0$3
  const readdirScoped = async dir => {
    const results = []
    for (const item of await readdir(dir)) {
      if (item.startsWith('@')) {
        for (const scopedItem of await readdir(join(dir, item))) {
          results.push(join(item, scopedItem))
        }
      } else {
        results.push(item)
      }
    }
    return results
  }
  readdirScoped_1 = readdirScoped
  return readdirScoped_1
}

let moveFile_1
let hasRequiredMoveFile
function requireMoveFile() {
  if (hasRequiredMoveFile) {
    return moveFile_1
  }
  hasRequiredMoveFile = 1
  const { dirname, join, resolve, relative, isAbsolute } = require$$0$3
  const fs = require$$0$5
  const pathExists = async path => {
    try {
      await fs.access(path)
      return true
    } catch (er) {
      return er.code !== 'ENOENT'
    }
  }
  const moveFile = async (
    source,
    destination,
    options = {},
    root = true,
    symlinks = []
  ) => {
    if (!source || !destination) {
      throw new TypeError('`source` and `destination` file required')
    }
    options = {
      overwrite: true,
      ...options
    }
    if (!options.overwrite && (await pathExists(destination))) {
      throw new Error(`The destination file exists: ${destination}`)
    }
    await fs.mkdir(dirname(destination), {
      recursive: true
    })
    try {
      await fs.rename(source, destination)
    } catch (error) {
      if (error.code === 'EXDEV' || error.code === 'EPERM') {
        const sourceStat = await fs.lstat(source)
        if (sourceStat.isDirectory()) {
          const files = await fs.readdir(source)
          await Promise.all(
            files.map(file =>
              moveFile(
                join(source, file),
                join(destination, file),
                options,
                false,
                symlinks
              )
            )
          )
        } else if (sourceStat.isSymbolicLink()) {
          symlinks.push({
            source,
            destination
          })
        } else {
          await fs.copyFile(source, destination)
        }
      } else {
        throw error
      }
    }
    if (root) {
      await Promise.all(
        symlinks.map(
          async ({ source: symSource, destination: symDestination }) => {
            let target = await fs.readlink(symSource)
            // junction symlinks in windows will be absolute paths, so we need to
            // make sure they point to the symlink destination
            if (isAbsolute(target)) {
              target = resolve(symDestination, relative(symSource, target))
            }
            // try to determine what the actual file is so we can create the correct
            // type of symlink in windows
            let targetStat = 'file'
            try {
              targetStat = await fs.stat(resolve(dirname(symSource), target))
              if (targetStat.isDirectory()) {
                targetStat = 'junction'
              }
            } catch {
              // targetStat remains 'file'
            }
            await fs.symlink(target, symDestination, targetStat)
          }
        )
      )
      await fs.rm(source, {
        recursive: true,
        force: true
      })
    }
  }
  moveFile_1 = moveFile
  return moveFile_1
}

let lib$1
let hasRequiredLib$2
function requireLib$2() {
  if (hasRequiredLib$2) {
    return lib$1
  }
  hasRequiredLib$2 = 1
  const cp = requireCp()
  const withTempDir = requireWithTempDir()
  const readdirScoped = requireReaddirScoped()
  const moveFile = requireMoveFile()
  lib$1 = {
    cp,
    withTempDir,
    readdirScoped,
    moveFile
  }
  return lib$1
}

let hasRequiredEntryIndex
function requireEntryIndex() {
  if (hasRequiredEntryIndex) {
    return entryIndex
  }
  hasRequiredEntryIndex = 1
  const crypto = require$$0$2
  const { appendFile, mkdir, readFile, readdir, rm, writeFile } = require$$0$5
  const { Minipass } = requireCommonjs$7()
  const path = require$$0$3
  const ssri = requireLib$5()
  const uniqueFilename = requireLib$3()
  const contentPath = requirePath()
  const hashToSegments = requireHashToSegments()
  const indexV = require$$8['cache-version'].index
  const { moveFile } = requireLib$2()
  const lsStreamConcurrency = 5
  entryIndex.NotFoundError = class NotFoundError extends Error {
    constructor(cache, key) {
      super(`No cache entry for ${key} found in ${cache}`)
      this.code = 'ENOENT'
      this.cache = cache
      this.key = key
    }
  }
  entryIndex.compact = compact
  async function compact(cache, key, matchFn, opts = {}) {
    const bucket = bucketPath(cache, key)
    const entries = await bucketEntries(bucket)
    const newEntries = []
    // we loop backwards because the bottom-most result is the newest
    // since we add new entries with appendFile
    for (let i = entries.length - 1; i >= 0; --i) {
      const entry = entries[i]
      // a null integrity could mean either a delete was appended
      // or the user has simply stored an index that does not map
      // to any content. we determine if the user wants to keep the
      // null integrity based on the validateEntry function passed in options.
      // if the integrity is null and no validateEntry is provided, we break
      // as we consider the null integrity to be a deletion of everything
      // that came before it.
      if (entry.integrity === null && !opts.validateEntry) {
        break
      }

      // if this entry is valid, and it is either the first entry or
      // the newEntries array doesn't already include an entry that
      // matches this one based on the provided matchFn, then we add
      // it to the beginning of our list
      if (
        (!opts.validateEntry || opts.validateEntry(entry) === true) &&
        (newEntries.length === 0 ||
          !newEntries.find(oldEntry => matchFn(oldEntry, entry)))
      ) {
        newEntries.unshift(entry)
      }
    }
    const newIndex =
      '\n' +
      newEntries
        .map(entry => {
          const stringified = JSON.stringify(entry)
          const hash = hashEntry(stringified)
          return `${hash}\t${stringified}`
        })
        .join('\n')
    const setup = async () => {
      const target = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)
      await mkdir(path.dirname(target), {
        recursive: true
      })
      return {
        target,
        moved: false
      }
    }
    const teardown = async tmp => {
      if (!tmp.moved) {
        return rm(tmp.target, {
          recursive: true,
          force: true
        })
      }
    }
    const write = async tmp => {
      await writeFile(tmp.target, newIndex, {
        flag: 'wx'
      })
      await mkdir(path.dirname(bucket), {
        recursive: true
      })
      // we use @npmcli/move-file directly here because we
      // want to overwrite the existing file
      await moveFile(tmp.target, bucket)
      tmp.moved = true
    }

    // write the file atomically
    const tmp = await setup()
    try {
      await write(tmp)
    } finally {
      await teardown(tmp)
    }

    // we reverse the list we generated such that the newest
    // entries come first in order to make looping through them easier
    // the true passed to formatEntry tells it to keep null
    // integrity values, if they made it this far it's because
    // validateEntry returned true, and as such we should return it
    return newEntries.reverse().map(entry => formatEntry(cache, entry, true))
  }
  entryIndex.insert = insert
  async function insert(cache, key, integrity, opts = {}) {
    const { metadata, size, time } = opts
    const bucket = bucketPath(cache, key)
    const entry = {
      key,
      integrity: integrity && ssri.stringify(integrity),
      time: time || Date.now(),
      size,
      metadata
    }
    try {
      await mkdir(path.dirname(bucket), {
        recursive: true
      })
      const stringified = JSON.stringify(entry)
      // NOTE - Cleverness ahoy!
      //
      // This works because it's tremendously unlikely for an entry to corrupt
      // another while still preserving the string length of the JSON in
      // question. So, we just slap the length in there and verify it on read.
      //
      // Thanks to @isaacs for the whiteboarding session that ended up with
      // this.
      await appendFile(bucket, `\n${hashEntry(stringified)}\t${stringified}`)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return undefined
      }
      throw err
    }
    return formatEntry(cache, entry)
  }
  entryIndex.find = find
  async function find(cache, key) {
    const bucket = bucketPath(cache, key)
    try {
      const entries = await bucketEntries(bucket)
      return entries.reduce((latest, next) => {
        if (next && next.key === key) {
          return formatEntry(cache, next)
        } else {
          return latest
        }
      }, null)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return null
      } else {
        throw err
      }
    }
  }
  entryIndex.delete = del
  function del(cache, key, opts = {}) {
    if (!opts.removeFully) {
      return insert(cache, key, null, opts)
    }
    const bucket = bucketPath(cache, key)
    return rm(bucket, {
      recursive: true,
      force: true
    })
  }
  entryIndex.lsStream = lsStream
  function lsStream(cache) {
    const indexDir = bucketDir(cache)
    const stream = new Minipass({
      objectMode: true
    })

    // Set all this up to run on the stream and then just return the stream
    Promise.resolve()
      .then(async () => {
        const { default: pMap } = await Promise.resolve().then(function () {
          return index
        })
        const buckets = await readdirOrEmpty(indexDir)
        await pMap(
          buckets,
          async bucket => {
            const bucketPath = path.join(indexDir, bucket)
            const subbuckets = await readdirOrEmpty(bucketPath)
            await pMap(
              subbuckets,
              async subbucket => {
                const subbucketPath = path.join(bucketPath, subbucket)

                // "/cachename/<bucket 0xFF>/<bucket 0xFF>./*"
                const subbucketEntries = await readdirOrEmpty(subbucketPath)
                await pMap(
                  subbucketEntries,
                  async entry => {
                    const entryPath = path.join(subbucketPath, entry)
                    try {
                      const entries = await bucketEntries(entryPath)
                      // using a Map here prevents duplicate keys from showing up
                      // twice, I guess?
                      const reduced = entries.reduce((acc, entry) => {
                        acc.set(entry.key, entry)
                        return acc
                      }, new Map())
                      // reduced is a map of key => entry
                      for (const entry of reduced.values()) {
                        const formatted = formatEntry(cache, entry)
                        if (formatted) {
                          stream.write(formatted)
                        }
                      }
                    } catch (err) {
                      if (err.code === 'ENOENT') {
                        return undefined
                      }
                      throw err
                    }
                  },
                  {
                    concurrency: lsStreamConcurrency
                  }
                )
              },
              {
                concurrency: lsStreamConcurrency
              }
            )
          },
          {
            concurrency: lsStreamConcurrency
          }
        )
        stream.end()
        return stream
      })
      .catch(err => stream.emit('error', err))
    return stream
  }
  entryIndex.ls = ls
  async function ls(cache) {
    const entries = await lsStream(cache).collect()
    return entries.reduce((acc, xs) => {
      acc[xs.key] = xs
      return acc
    }, {})
  }
  entryIndex.bucketEntries = bucketEntries
  async function bucketEntries(bucket, filter) {
    const data = await readFile(bucket, 'utf8')
    return _bucketEntries(data)
  }
  function _bucketEntries(data) {
    const entries = []
    data.split('\n').forEach(entry => {
      if (!entry) {
        return
      }
      const pieces = entry.split('\t')
      if (!pieces[1] || hashEntry(pieces[1]) !== pieces[0]) {
        // Hash is no good! Corruption or malice? Doesn't matter!
        // EJECT EJECT
        return
      }
      let obj
      try {
        obj = JSON.parse(pieces[1])
      } catch (_) {
        // eslint-ignore-next-line no-empty-block
      }
      // coverage disabled here, no need to test with an entry that parses to something falsey
      // istanbul ignore else
      if (obj) {
        entries.push(obj)
      }
    })
    return entries
  }
  entryIndex.bucketDir = bucketDir
  function bucketDir(cache) {
    return path.join(cache, `index-v${indexV}`)
  }
  entryIndex.bucketPath = bucketPath
  function bucketPath(cache, key) {
    const hashed = hashKey(key)
    return path.join.apply(
      path,
      [bucketDir(cache)].concat(hashToSegments(hashed))
    )
  }
  entryIndex.hashKey = hashKey
  function hashKey(key) {
    return hash(key, 'sha256')
  }
  entryIndex.hashEntry = hashEntry
  function hashEntry(str) {
    return hash(str, 'sha1')
  }
  function hash(str, digest) {
    return crypto.createHash(digest).update(str).digest('hex')
  }
  function formatEntry(cache, entry, keepAll) {
    // Treat null digests as deletions. They'll shadow any previous entries.
    if (!entry.integrity && !keepAll) {
      return null
    }
    return {
      key: entry.key,
      integrity: entry.integrity,
      path: entry.integrity ? contentPath(cache, entry.integrity) : undefined,
      size: entry.size,
      time: entry.time,
      metadata: entry.metadata
    }
  }
  function readdirOrEmpty(dir) {
    return readdir(dir).catch(err => {
      if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
        return []
      }
      throw err
    })
  }
  return entryIndex
}

const memoization = { exports: {} }

const commonjs$6 = {}

let hasRequiredCommonjs$6
function requireCommonjs$6() {
  if (hasRequiredCommonjs$6) {
    return commonjs$6
  }
  hasRequiredCommonjs$6 = 1
  /**
   * @module LRUCache
   */
  Object.defineProperty(commonjs$6, '__esModule', {
    value: true
  })
  commonjs$6.LRUCache = void 0
  const perf =
    typeof performance === 'object' &&
    performance &&
    typeof performance.now === 'function'
      ? performance
      : Date
  const warned = new Set()
  /* c8 ignore start */
  const PROCESS = typeof process === 'object' && !!process ? process : {}
  /* c8 ignore start */
  const emitWarning = (msg, type, code, fn) => {
    typeof PROCESS.emitWarning === 'function'
      ? PROCESS.emitWarning(msg, type, code, fn)
      : console.error(`[${code}] ${type}: ${msg}`)
  }
  let AC = globalThis.AbortController
  let AS = globalThis.AbortSignal
  /* c8 ignore start */
  if (typeof AC === 'undefined') {
    //@ts-ignore
    AS = class AbortSignal {
      onabort
      _onabort = []
      reason
      aborted = false
      addEventListener(_, fn) {
        this._onabort.push(fn)
      }
    }
    //@ts-ignore
    AC = class AbortController {
      constructor() {
        warnACPolyfill()
      }
      signal = new AS()
      abort(reason) {
        if (this.signal.aborted) {
          return
        }
        //@ts-ignore
        this.signal.reason = reason
        //@ts-ignore
        this.signal.aborted = true
        //@ts-ignore
        for (const fn of this.signal._onabort) {
          fn(reason)
        }
        this.signal.onabort?.(reason)
      }
    }
    let printACPolyfillWarning =
      PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'
    const warnACPolyfill = () => {
      if (!printACPolyfillWarning) {
        return
      }
      printACPolyfillWarning = false
      emitWarning(
        'AbortController is not defined. If using lru-cache in ' +
          'node 14, load an AbortController polyfill from the ' +
          '`node-abort-controller` package. A minimal polyfill is ' +
          'provided for use by LRUCache.fetch(), but it should not be ' +
          'relied upon in other contexts (eg, passing it to other APIs that ' +
          'use AbortController/AbortSignal might have undesirable effects). ' +
          'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',
        'NO_ABORT_CONTROLLER',
        'ENOTSUP',
        warnACPolyfill
      )
    }
  }
  /* c8 ignore stop */
  const shouldWarn = code => !warned.has(code)
  const isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)
  /* c8 ignore start */
  // This is a little bit ridiculous, tbh.
  // The maximum array length is 2^32-1 or thereabouts on most JS impls.
  // And well before that point, you're caching the entire world, I mean,
  // that's ~32GB of just integers for the next/prev links, plus whatever
  // else to hold that many keys and values.  Just filling the memory with
  // zeroes at init time is brutal when you get that big.
  // But why not be complete?
  // Maybe in the future, these limits will have expanded.
  const getUintArray = max =>
    !isPosInt(max)
      ? null
      : max <= Math.pow(2, 8)
        ? Uint8Array
        : max <= Math.pow(2, 16)
          ? Uint16Array
          : max <= Math.pow(2, 32)
            ? Uint32Array
            : max <= Number.MAX_SAFE_INTEGER
              ? ZeroArray
              : null
  /* c8 ignore stop */
  class ZeroArray extends Array {
    constructor(size) {
      super(size)
      this.fill(0)
    }
  }
  class Stack {
    heap
    length
    // private constructor
    static #constructing = false
    static create(max) {
      const HeapCls = getUintArray(max)
      if (!HeapCls) {
        return []
      }
      Stack.#constructing = true
      const s = new Stack(max, HeapCls)
      Stack.#constructing = false
      return s
    }
    constructor(max, HeapCls) {
      /* c8 ignore start */
      if (!Stack.#constructing) {
        throw new TypeError('instantiate Stack using Stack.create(n)')
      }
      /* c8 ignore stop */
      this.heap = new HeapCls(max)
      this.length = 0
    }
    push(n) {
      this.heap[this.length++] = n
    }
    pop() {
      return this.heap[--this.length]
    }
  }
  /**
   * Default export, the thing you're using this module to get.
   *
   * The `K` and `V` types define the key and value types, respectively. The
   * optional `FC` type defines the type of the `context` object passed to
   * `cache.fetch()` and `cache.memo()`.
   *
   * Keys and values **must not** be `null` or `undefined`.
   *
   * All properties from the options object (with the exception of `max`,
   * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are
   * added as normal public members. (The listed options are read-only getters.)
   *
   * Changing any of these will alter the defaults for subsequent method calls.
   */
  class LRUCache {
    // options that cannot be changed without disaster
    #max
    #maxSize
    #dispose
    #onInsert
    #disposeAfter
    #fetchMethod
    #memoMethod
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    ttl
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    ttlResolution
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    ttlAutopurge
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    updateAgeOnGet
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    updateAgeOnHas
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    allowStale
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    noDisposeOnSet
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    noUpdateTTL
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    maxEntrySize
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    sizeCalculation
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    noDeleteOnFetchRejection
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    noDeleteOnStaleGet
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    allowStaleOnFetchAbort
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    allowStaleOnFetchRejection
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    ignoreFetchAbort
    // computed properties
    #size
    #calculatedSize
    #keyMap
    #keyList
    #valList
    #next
    #prev
    #head
    #tail
    #free
    #disposed
    #sizes
    #starts
    #ttls
    #hasDispose
    #hasFetchMethod
    #hasDisposeAfter
    #hasOnInsert
    /**
     * Do not call this method unless you need to inspect the
     * inner workings of the cache.  If anything returned by this
     * object is modified in any way, strange breakage may occur.
     *
     * These fields are private for a reason!
     *
     * @internal
     */
    static unsafeExposeInternals(c) {
      return {
        // properties
        starts: c.#starts,
        ttls: c.#ttls,
        sizes: c.#sizes,
        keyMap: c.#keyMap,
        keyList: c.#keyList,
        valList: c.#valList,
        next: c.#next,
        prev: c.#prev,
        get head() {
          return c.#head
        },
        get tail() {
          return c.#tail
        },
        free: c.#free,
        // methods
        isBackgroundFetch: p => c.#isBackgroundFetch(p),
        backgroundFetch: (k, index, options, context) =>
          c.#backgroundFetch(k, index, options, context),
        moveToTail: index => c.#moveToTail(index),
        indexes: options => c.#indexes(options),
        rindexes: options => c.#rindexes(options),
        isStale: index => c.#isStale(index)
      }
    }
    // Protected read-only members
    /**
     * {@link LRUCache.OptionsBase.max} (read-only)
     */
    get max() {
      return this.#max
    }
    /**
     * {@link LRUCache.OptionsBase.maxSize} (read-only)
     */
    get maxSize() {
      return this.#maxSize
    }
    /**
     * The total computed size of items in the cache (read-only)
     */
    get calculatedSize() {
      return this.#calculatedSize
    }
    /**
     * The number of items stored in the cache (read-only)
     */
    get size() {
      return this.#size
    }
    /**
     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
     */
    get fetchMethod() {
      return this.#fetchMethod
    }
    get memoMethod() {
      return this.#memoMethod
    }
    /**
     * {@link LRUCache.OptionsBase.dispose} (read-only)
     */
    get dispose() {
      return this.#dispose
    }
    /**
     * {@link LRUCache.OptionsBase.onInsert} (read-only)
     */
    get onInsert() {
      return this.#onInsert
    }
    /**
     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
     */
    get disposeAfter() {
      return this.#disposeAfter
    }
    constructor(options) {
      const {
        max = 0,
        ttl,
        ttlResolution = 1,
        ttlAutopurge,
        updateAgeOnGet,
        updateAgeOnHas,
        allowStale,
        dispose,
        onInsert,
        disposeAfter,
        noDisposeOnSet,
        noUpdateTTL,
        maxSize = 0,
        maxEntrySize = 0,
        sizeCalculation,
        fetchMethod,
        memoMethod,
        noDeleteOnFetchRejection,
        noDeleteOnStaleGet,
        allowStaleOnFetchRejection,
        allowStaleOnFetchAbort,
        ignoreFetchAbort
      } = options
      if (max !== 0 && !isPosInt(max)) {
        throw new TypeError('max option must be a nonnegative integer')
      }
      const UintArray = max ? getUintArray(max) : Array
      if (!UintArray) {
        throw new Error('invalid max value: ' + max)
      }
      this.#max = max
      this.#maxSize = maxSize
      this.maxEntrySize = maxEntrySize || this.#maxSize
      this.sizeCalculation = sizeCalculation
      if (this.sizeCalculation) {
        if (!this.#maxSize && !this.maxEntrySize) {
          throw new TypeError(
            'cannot set sizeCalculation without setting maxSize or maxEntrySize'
          )
        }
        if (typeof this.sizeCalculation !== 'function') {
          throw new TypeError('sizeCalculation set to non-function')
        }
      }
      if (memoMethod !== undefined && typeof memoMethod !== 'function') {
        throw new TypeError('memoMethod must be a function if defined')
      }
      this.#memoMethod = memoMethod
      if (fetchMethod !== undefined && typeof fetchMethod !== 'function') {
        throw new TypeError('fetchMethod must be a function if specified')
      }
      this.#fetchMethod = fetchMethod
      this.#hasFetchMethod = !!fetchMethod
      this.#keyMap = new Map()
      this.#keyList = new Array(max).fill(undefined)
      this.#valList = new Array(max).fill(undefined)
      this.#next = new UintArray(max)
      this.#prev = new UintArray(max)
      this.#head = 0
      this.#tail = 0
      this.#free = Stack.create(max)
      this.#size = 0
      this.#calculatedSize = 0
      if (typeof dispose === 'function') {
        this.#dispose = dispose
      }
      if (typeof onInsert === 'function') {
        this.#onInsert = onInsert
      }
      if (typeof disposeAfter === 'function') {
        this.#disposeAfter = disposeAfter
        this.#disposed = []
      } else {
        this.#disposeAfter = undefined
        this.#disposed = undefined
      }
      this.#hasDispose = !!this.#dispose
      this.#hasOnInsert = !!this.#onInsert
      this.#hasDisposeAfter = !!this.#disposeAfter
      this.noDisposeOnSet = !!noDisposeOnSet
      this.noUpdateTTL = !!noUpdateTTL
      this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection
      this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection
      this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort
      this.ignoreFetchAbort = !!ignoreFetchAbort
      // NB: maxEntrySize is set to maxSize if it's set
      if (this.maxEntrySize !== 0) {
        if (this.#maxSize !== 0) {
          if (!isPosInt(this.#maxSize)) {
            throw new TypeError(
              'maxSize must be a positive integer if specified'
            )
          }
        }
        if (!isPosInt(this.maxEntrySize)) {
          throw new TypeError(
            'maxEntrySize must be a positive integer if specified'
          )
        }
        this.#initializeSizeTracking()
      }
      this.allowStale = !!allowStale
      this.noDeleteOnStaleGet = !!noDeleteOnStaleGet
      this.updateAgeOnGet = !!updateAgeOnGet
      this.updateAgeOnHas = !!updateAgeOnHas
      this.ttlResolution =
        isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1
      this.ttlAutopurge = !!ttlAutopurge
      this.ttl = ttl || 0
      if (this.ttl) {
        if (!isPosInt(this.ttl)) {
          throw new TypeError('ttl must be a positive integer if specified')
        }
        this.#initializeTTLTracking()
      }
      // do not allow completely unbounded caches
      if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
        throw new TypeError('At least one of max, maxSize, or ttl is required')
      }
      if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
        const code = 'LRU_CACHE_UNBOUNDED'
        if (shouldWarn(code)) {
          warned.add(code)
          const msg =
            'TTL caching without ttlAutopurge, max, or maxSize can ' +
            'result in unbounded memory consumption.'
          emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)
        }
      }
    }
    /**
     * Return the number of ms left in the item's TTL. If item is not in cache,
     * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
     */
    getRemainingTTL(key) {
      return this.#keyMap.has(key) ? Infinity : 0
    }
    #initializeTTLTracking() {
      const ttls = new ZeroArray(this.#max)
      const starts = new ZeroArray(this.#max)
      this.#ttls = ttls
      this.#starts = starts
      this.#setItemTTL = (index, ttl, start = perf.now()) => {
        starts[index] = ttl !== 0 ? start : 0
        ttls[index] = ttl
        if (ttl !== 0 && this.ttlAutopurge) {
          const t = setTimeout(() => {
            if (this.#isStale(index)) {
              this.#delete(this.#keyList[index], 'expire')
            }
          }, ttl + 1)
          // unref() not supported on all platforms
          /* c8 ignore start */
          if (t.unref) {
            t.unref()
          }
          /* c8 ignore stop */
        }
      }
      this.#updateItemAge = index => {
        starts[index] = ttls[index] !== 0 ? perf.now() : 0
      }
      this.#statusTTL = (status, index) => {
        if (ttls[index]) {
          const ttl = ttls[index]
          const start = starts[index]
          /* c8 ignore next */
          if (!ttl || !start) {
            return
          }
          status.ttl = ttl
          status.start = start
          status.now = cachedNow || getNow()
          const age = status.now - start
          status.remainingTTL = ttl - age
        }
      }
      // debounce calls to perf.now() to 1s so we're not hitting
      // that costly call repeatedly.
      let cachedNow = 0
      const getNow = () => {
        const n = perf.now()
        if (this.ttlResolution > 0) {
          cachedNow = n
          const t = setTimeout(() => (cachedNow = 0), this.ttlResolution)
          // not available on all platforms
          /* c8 ignore start */
          if (t.unref) {
            t.unref()
          }
          /* c8 ignore stop */
        }
        return n
      }
      this.getRemainingTTL = key => {
        const index = this.#keyMap.get(key)
        if (index === undefined) {
          return 0
        }
        const ttl = ttls[index]
        const start = starts[index]
        if (!ttl || !start) {
          return Infinity
        }
        const age = (cachedNow || getNow()) - start
        return ttl - age
      }
      this.#isStale = index => {
        const s = starts[index]
        const t = ttls[index]
        return !!t && !!s && (cachedNow || getNow()) - s > t
      }
    }
    // conditionally set private methods related to TTL
    #updateItemAge = () => {}
    #statusTTL = () => {}
    #setItemTTL = () => {}
    /* c8 ignore stop */
    #isStale = () => false
    #initializeSizeTracking() {
      const sizes = new ZeroArray(this.#max)
      this.#calculatedSize = 0
      this.#sizes = sizes
      this.#removeItemSize = index => {
        this.#calculatedSize -= sizes[index]
        sizes[index] = 0
      }
      this.#requireSize = (k, v, size, sizeCalculation) => {
        // provisionally accept background fetches.
        // actual value size will be checked when they return.
        if (this.#isBackgroundFetch(v)) {
          return 0
        }
        if (!isPosInt(size)) {
          if (sizeCalculation) {
            if (typeof sizeCalculation !== 'function') {
              throw new TypeError('sizeCalculation must be a function')
            }
            size = sizeCalculation(v, k)
            if (!isPosInt(size)) {
              throw new TypeError(
                'sizeCalculation return invalid (expect positive integer)'
              )
            }
          } else {
            throw new TypeError(
              'invalid size value (must be positive integer). ' +
                'When maxSize or maxEntrySize is used, sizeCalculation ' +
                'or size must be set.'
            )
          }
        }
        return size
      }
      this.#addItemSize = (index, size, status) => {
        sizes[index] = size
        if (this.#maxSize) {
          const maxSize = this.#maxSize - sizes[index]
          while (this.#calculatedSize > maxSize) {
            this.#evict(true)
          }
        }
        this.#calculatedSize += sizes[index]
        if (status) {
          status.entrySize = size
          status.totalCalculatedSize = this.#calculatedSize
        }
      }
    }
    #removeItemSize = _i => {}
    #addItemSize = (_i, _s, _st) => {}
    #requireSize = (_k, _v, size, sizeCalculation) => {
      if (size || sizeCalculation) {
        throw new TypeError(
          'cannot set size without setting maxSize or maxEntrySize on cache'
        )
      }
      return 0
    };
    *#indexes({ allowStale = this.allowStale } = {}) {
      if (this.#size) {
        for (let i = this.#tail; true; ) {
          if (!this.#isValidIndex(i)) {
            break
          }
          if (allowStale || !this.#isStale(i)) {
            yield i
          }
          if (i === this.#head) {
            break
          } else {
            i = this.#prev[i]
          }
        }
      }
    }
    *#rindexes({ allowStale = this.allowStale } = {}) {
      if (this.#size) {
        for (let i = this.#head; true; ) {
          if (!this.#isValidIndex(i)) {
            break
          }
          if (allowStale || !this.#isStale(i)) {
            yield i
          }
          if (i === this.#tail) {
            break
          } else {
            i = this.#next[i]
          }
        }
      }
    }
    #isValidIndex(index) {
      return (
        index !== undefined && this.#keyMap.get(this.#keyList[index]) === index
      )
    }
    /**
     * Return a generator yielding `[key, value]` pairs,
     * in order from most recently used to least recently used.
     */
    *entries() {
      for (const i of this.#indexes()) {
        if (
          this.#valList[i] !== undefined &&
          this.#keyList[i] !== undefined &&
          !this.#isBackgroundFetch(this.#valList[i])
        ) {
          yield [this.#keyList[i], this.#valList[i]]
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.entries}
     *
     * Return a generator yielding `[key, value]` pairs,
     * in order from least recently used to most recently used.
     */
    *rentries() {
      for (const i of this.#rindexes()) {
        if (
          this.#valList[i] !== undefined &&
          this.#keyList[i] !== undefined &&
          !this.#isBackgroundFetch(this.#valList[i])
        ) {
          yield [this.#keyList[i], this.#valList[i]]
        }
      }
    }
    /**
     * Return a generator yielding the keys in the cache,
     * in order from most recently used to least recently used.
     */
    *keys() {
      for (const i of this.#indexes()) {
        const k = this.#keyList[i]
        if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield k
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.keys}
     *
     * Return a generator yielding the keys in the cache,
     * in order from least recently used to most recently used.
     */
    *rkeys() {
      for (const i of this.#rindexes()) {
        const k = this.#keyList[i]
        if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield k
        }
      }
    }
    /**
     * Return a generator yielding the values in the cache,
     * in order from most recently used to least recently used.
     */
    *values() {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield this.#valList[i]
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.values}
     *
     * Return a generator yielding the values in the cache,
     * in order from least recently used to most recently used.
     */
    *rvalues() {
      for (const i of this.#rindexes()) {
        const v = this.#valList[i]
        if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield this.#valList[i]
        }
      }
    }
    /**
     * Iterating over the cache itself yields the same results as
     * {@link LRUCache.entries}
     */
    [Symbol.iterator]() {
      return this.entries()
    }
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    [Symbol.toStringTag] = 'LRUCache'
    /**
     * Find a value for which the supplied fn method returns a truthy value,
     * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
     */
    find(fn, getOptions = {}) {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        if (fn(value, this.#keyList[i], this)) {
          return this.get(this.#keyList[i], getOptions)
        }
      }
    }
    /**
     * Call the supplied function on each item in the cache, in order from most
     * recently used to least recently used.
     *
     * `fn` is called as `fn(value, key, cache)`.
     *
     * If `thisp` is provided, function will be called in the `this`-context of
     * the provided object, or the cache if no `thisp` object is provided.
     *
     * Does not update age or recenty of use, or iterate over stale values.
     */
    forEach(fn, thisp = this) {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        fn.call(thisp, value, this.#keyList[i], this)
      }
    }
    /**
     * The same as {@link LRUCache.forEach} but items are iterated over in
     * reverse order.  (ie, less recently used items are iterated over first.)
     */
    rforEach(fn, thisp = this) {
      for (const i of this.#rindexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        fn.call(thisp, value, this.#keyList[i], this)
      }
    }
    /**
     * Delete any stale entries. Returns true if anything was removed,
     * false otherwise.
     */
    purgeStale() {
      let deleted = false
      for (const i of this.#rindexes({
        allowStale: true
      })) {
        if (this.#isStale(i)) {
          this.#delete(this.#keyList[i], 'expire')
          deleted = true
        }
      }
      return deleted
    }
    /**
     * Get the extended info about a given entry, to get its value, size, and
     * TTL info simultaneously. Returns `undefined` if the key is not present.
     *
     * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
     * serialization, the `start` value is always the current timestamp, and the
     * `ttl` is a calculated remaining time to live (negative if expired).
     *
     * Always returns stale values, if their info is found in the cache, so be
     * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
     * if relevant.
     */
    info(key) {
      const i = this.#keyMap.get(key)
      if (i === undefined) {
        return undefined
      }
      const v = this.#valList[i]
      const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
      if (value === undefined) {
        return undefined
      }
      const entry = {
        value
      }
      if (this.#ttls && this.#starts) {
        const ttl = this.#ttls[i]
        const start = this.#starts[i]
        if (ttl && start) {
          const remain = ttl - (perf.now() - start)
          entry.ttl = remain
          entry.start = Date.now()
        }
      }
      if (this.#sizes) {
        entry.size = this.#sizes[i]
      }
      return entry
    }
    /**
     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
     * passed to {@link LRUCache#load}.
     *
     * The `start` fields are calculated relative to a portable `Date.now()`
     * timestamp, even if `performance.now()` is available.
     *
     * Stale entries are always included in the `dump`, even if
     * {@link LRUCache.OptionsBase.allowStale} is false.
     *
     * Note: this returns an actual array, not a generator, so it can be more
     * easily passed around.
     */
    dump() {
      const arr = []
      for (const i of this.#indexes({
        allowStale: true
      })) {
        const key = this.#keyList[i]
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined || key === undefined) {
          continue
        }
        const entry = {
          value
        }
        if (this.#ttls && this.#starts) {
          entry.ttl = this.#ttls[i]
          // always dump the start relative to a portable timestamp
          // it's ok for this to be a bit slow, it's a rare operation.
          const age = perf.now() - this.#starts[i]
          entry.start = Math.floor(Date.now() - age)
        }
        if (this.#sizes) {
          entry.size = this.#sizes[i]
        }
        arr.unshift([key, entry])
      }
      return arr
    }
    /**
     * Reset the cache and load in the items in entries in the order listed.
     *
     * The shape of the resulting cache may be different if the same options are
     * not used in both caches.
     *
     * The `start` fields are assumed to be calculated relative to a portable
     * `Date.now()` timestamp, even if `performance.now()` is available.
     */
    load(arr) {
      this.clear()
      for (const [key, entry] of arr) {
        if (entry.start) {
          // entry.start is a portable timestamp, but we may be using
          // node's performance.now(), so calculate the offset, so that
          // we get the intended remaining TTL, no matter how long it's
          // been on ice.
          //
          // it's ok for this to be a bit slow, it's a rare operation.
          const age = Date.now() - entry.start
          entry.start = perf.now() - age
        }
        this.set(key, entry.value, entry)
      }
    }
    /**
     * Add a value to the cache.
     *
     * Note: if `undefined` is specified as a value, this is an alias for
     * {@link LRUCache#delete}
     *
     * Fields on the {@link LRUCache.SetOptions} options param will override
     * their corresponding values in the constructor options for the scope
     * of this single `set()` operation.
     *
     * If `start` is provided, then that will set the effective start
     * time for the TTL calculation. Note that this must be a previous
     * value of `performance.now()` if supported, or a previous value of
     * `Date.now()` if not.
     *
     * Options object may also include `size`, which will prevent
     * calling the `sizeCalculation` function and just use the specified
     * number if it is a positive integer, and `noDisposeOnSet` which
     * will prevent calling a `dispose` function in the case of
     * overwrites.
     *
     * If the `size` (or return value of `sizeCalculation`) for a given
     * entry is greater than `maxEntrySize`, then the item will not be
     * added to the cache.
     *
     * Will update the recency of the entry.
     *
     * If the value is `undefined`, then this is an alias for
     * `cache.delete(key)`. `undefined` is never stored in the cache.
     */
    set(k, v, setOptions = {}) {
      if (v === undefined) {
        this.delete(k)
        return this
      }
      const {
        ttl = this.ttl,
        start,
        noDisposeOnSet = this.noDisposeOnSet,
        sizeCalculation = this.sizeCalculation,
        status
      } = setOptions
      let { noUpdateTTL = this.noUpdateTTL } = setOptions
      const size = this.#requireSize(
        k,
        v,
        setOptions.size || 0,
        sizeCalculation
      )
      // if the item doesn't fit, don't do anything
      // NB: maxEntrySize set to maxSize by default
      if (this.maxEntrySize && size > this.maxEntrySize) {
        if (status) {
          status.set = 'miss'
          status.maxEntrySizeExceeded = true
        }
        // have to delete, in case something is there already.
        this.#delete(k, 'set')
        return this
      }
      let index = this.#size === 0 ? undefined : this.#keyMap.get(k)
      if (index === undefined) {
        // addition
        index =
          this.#size === 0
            ? this.#tail
            : this.#free.length !== 0
              ? this.#free.pop()
              : this.#size === this.#max
                ? this.#evict(false)
                : this.#size
        this.#keyList[index] = k
        this.#valList[index] = v
        this.#keyMap.set(k, index)
        this.#next[this.#tail] = index
        this.#prev[index] = this.#tail
        this.#tail = index
        this.#size++
        this.#addItemSize(index, size, status)
        if (status) {
          status.set = 'add'
        }
        noUpdateTTL = false
        if (this.#hasOnInsert) {
          this.#onInsert?.(v, k, 'add')
        }
      } else {
        // update
        this.#moveToTail(index)
        const oldVal = this.#valList[index]
        if (v !== oldVal) {
          if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
            oldVal.__abortController.abort(new Error('replaced'))
            const { __staleWhileFetching: s } = oldVal
            if (s !== undefined && !noDisposeOnSet) {
              if (this.#hasDispose) {
                this.#dispose?.(s, k, 'set')
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([s, k, 'set'])
              }
            }
          } else if (!noDisposeOnSet) {
            if (this.#hasDispose) {
              this.#dispose?.(oldVal, k, 'set')
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([oldVal, k, 'set'])
            }
          }
          this.#removeItemSize(index)
          this.#addItemSize(index, size, status)
          this.#valList[index] = v
          if (status) {
            status.set = 'replace'
            const oldValue =
              oldVal && this.#isBackgroundFetch(oldVal)
                ? oldVal.__staleWhileFetching
                : oldVal
            if (oldValue !== undefined) {
              status.oldValue = oldValue
            }
          }
        } else if (status) {
          status.set = 'update'
        }
        if (this.#hasOnInsert) {
          this.onInsert?.(v, k, v === oldVal ? 'update' : 'replace')
        }
      }
      if (ttl !== 0 && !this.#ttls) {
        this.#initializeTTLTracking()
      }
      if (this.#ttls) {
        if (!noUpdateTTL) {
          this.#setItemTTL(index, ttl, start)
        }
        if (status) {
          this.#statusTTL(status, index)
        }
      }
      if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
      return this
    }
    /**
     * Evict the least recently used item, returning its value or
     * `undefined` if cache is empty.
     */
    pop() {
      try {
        while (this.#size) {
          const val = this.#valList[this.#head]
          this.#evict(true)
          if (this.#isBackgroundFetch(val)) {
            if (val.__staleWhileFetching) {
              return val.__staleWhileFetching
            }
          } else if (val !== undefined) {
            return val
          }
        }
      } finally {
        if (this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed
          let task
          while ((task = dt?.shift())) {
            this.#disposeAfter?.(...task)
          }
        }
      }
    }
    #evict(free) {
      const head = this.#head
      const k = this.#keyList[head]
      const v = this.#valList[head]
      if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
        v.__abortController.abort(new Error('evicted'))
      } else if (this.#hasDispose || this.#hasDisposeAfter) {
        if (this.#hasDispose) {
          this.#dispose?.(v, k, 'evict')
        }
        if (this.#hasDisposeAfter) {
          this.#disposed?.push([v, k, 'evict'])
        }
      }
      this.#removeItemSize(head)
      // if we aren't about to use the index, then null these out
      if (free) {
        this.#keyList[head] = undefined
        this.#valList[head] = undefined
        this.#free.push(head)
      }
      if (this.#size === 1) {
        this.#head = this.#tail = 0
        this.#free.length = 0
      } else {
        this.#head = this.#next[head]
      }
      this.#keyMap.delete(k)
      this.#size--
      return head
    }
    /**
     * Check if a key is in the cache, without updating the recency of use.
     * Will return false if the item is stale, even though it is technically
     * in the cache.
     *
     * Check if a key is in the cache, without updating the recency of
     * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
     * to `true` in either the options or the constructor.
     *
     * Will return `false` if the item is stale, even though it is technically in
     * the cache. The difference can be determined (if it matters) by using a
     * `status` argument, and inspecting the `has` field.
     *
     * Will not update item age unless
     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
     */
    has(k, hasOptions = {}) {
      const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions
      const index = this.#keyMap.get(k)
      if (index !== undefined) {
        const v = this.#valList[index]
        if (
          this.#isBackgroundFetch(v) &&
          v.__staleWhileFetching === undefined
        ) {
          return false
        }
        if (!this.#isStale(index)) {
          if (updateAgeOnHas) {
            this.#updateItemAge(index)
          }
          if (status) {
            status.has = 'hit'
            this.#statusTTL(status, index)
          }
          return true
        } else if (status) {
          status.has = 'stale'
          this.#statusTTL(status, index)
        }
      } else if (status) {
        status.has = 'miss'
      }
      return false
    }
    /**
     * Like {@link LRUCache#get} but doesn't update recency or delete stale
     * items.
     *
     * Returns `undefined` if the item is stale, unless
     * {@link LRUCache.OptionsBase.allowStale} is set.
     */
    peek(k, peekOptions = {}) {
      const { allowStale = this.allowStale } = peekOptions
      const index = this.#keyMap.get(k)
      if (index === undefined || (!allowStale && this.#isStale(index))) {
        return
      }
      const v = this.#valList[index]
      // either stale and allowed, or forcing a refresh of non-stale value
      return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
    }
    #backgroundFetch(k, index, options, context) {
      const v = index === undefined ? undefined : this.#valList[index]
      if (this.#isBackgroundFetch(v)) {
        return v
      }
      const ac = new AC()
      const { signal } = options
      // when/if our AC signals, then stop listening to theirs.
      signal?.addEventListener('abort', () => ac.abort(signal.reason), {
        signal: ac.signal
      })
      const fetchOpts = {
        signal: ac.signal,
        options,
        context
      }
      const cb = (v, updateCache = false) => {
        const { aborted } = ac.signal
        const ignoreAbort = options.ignoreFetchAbort && v !== undefined
        if (options.status) {
          if (aborted && !updateCache) {
            options.status.fetchAborted = true
            options.status.fetchError = ac.signal.reason
            if (ignoreAbort) {
              options.status.fetchAbortIgnored = true
            }
          } else {
            options.status.fetchResolved = true
          }
        }
        if (aborted && !ignoreAbort && !updateCache) {
          return fetchFail(ac.signal.reason)
        }
        // either we didn't abort, and are still here, or we did, and ignored
        const bf = p
        if (this.#valList[index] === p) {
          if (v === undefined) {
            if (bf.__staleWhileFetching) {
              this.#valList[index] = bf.__staleWhileFetching
            } else {
              this.#delete(k, 'fetch')
            }
          } else {
            if (options.status) {
              options.status.fetchUpdated = true
            }
            this.set(k, v, fetchOpts.options)
          }
        }
        return v
      }
      const eb = er => {
        if (options.status) {
          options.status.fetchRejected = true
          options.status.fetchError = er
        }
        return fetchFail(er)
      }
      const fetchFail = er => {
        const { aborted } = ac.signal
        const allowStaleAborted = aborted && options.allowStaleOnFetchAbort
        const allowStale =
          allowStaleAborted || options.allowStaleOnFetchRejection
        const noDelete = allowStale || options.noDeleteOnFetchRejection
        const bf = p
        if (this.#valList[index] === p) {
          // if we allow stale on fetch rejections, then we need to ensure that
          // the stale value is not removed from the cache when the fetch fails.
          const del = !noDelete || bf.__staleWhileFetching === undefined
          if (del) {
            this.#delete(k, 'fetch')
          } else if (!allowStaleAborted) {
            // still replace the *promise* with the stale value,
            // since we are done with the promise at this point.
            // leave it untouched if we're still waiting for an
            // aborted background fetch that hasn't yet returned.
            this.#valList[index] = bf.__staleWhileFetching
          }
        }
        if (allowStale) {
          if (options.status && bf.__staleWhileFetching !== undefined) {
            options.status.returnedStale = true
          }
          return bf.__staleWhileFetching
        } else if (bf.__returned === bf) {
          throw er
        }
      }
      const pcall = (res, rej) => {
        const fmp = this.#fetchMethod?.(k, v, fetchOpts)
        if (fmp && fmp instanceof Promise) {
          fmp.then(v => res(v === undefined ? undefined : v), rej)
        }
        // ignored, we go until we finish, regardless.
        // defer check until we are actually aborting,
        // so fetchMethod can override.
        ac.signal.addEventListener('abort', () => {
          if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
            res(undefined)
            // when it eventually resolves, update the cache.
            if (options.allowStaleOnFetchAbort) {
              res = v => cb(v, true)
            }
          }
        })
      }
      if (options.status) {
        options.status.fetchDispatched = true
      }
      const p = new Promise(pcall).then(cb, eb)
      const bf = Object.assign(p, {
        __abortController: ac,
        __staleWhileFetching: v,
        __returned: undefined
      })
      if (index === undefined) {
        // internal, don't expose status.
        this.set(k, bf, {
          ...fetchOpts.options,
          status: undefined
        })
        index = this.#keyMap.get(k)
      } else {
        this.#valList[index] = bf
      }
      return bf
    }
    #isBackgroundFetch(p) {
      if (!this.#hasFetchMethod) {
        return false
      }
      const b = p
      return (
        !!b &&
        b instanceof Promise &&
        b.hasOwnProperty('__staleWhileFetching') &&
        b.__abortController instanceof AC
      )
    }
    async fetch(k, fetchOptions = {}) {
      const {
        // get options
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        // set options
        ttl = this.ttl,
        noDisposeOnSet = this.noDisposeOnSet,
        size = 0,
        sizeCalculation = this.sizeCalculation,
        noUpdateTTL = this.noUpdateTTL,
        // fetch exclusive options
        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
        allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
        ignoreFetchAbort = this.ignoreFetchAbort,
        allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
        context,
        forceRefresh = false,
        status,
        signal
      } = fetchOptions
      if (!this.#hasFetchMethod) {
        if (status) {
          status.fetch = 'get'
        }
        return this.get(k, {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          status
        })
      }
      const options = {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        ttl,
        noDisposeOnSet,
        size,
        sizeCalculation,
        noUpdateTTL,
        noDeleteOnFetchRejection,
        allowStaleOnFetchRejection,
        allowStaleOnFetchAbort,
        ignoreFetchAbort,
        status,
        signal
      }
      let index = this.#keyMap.get(k)
      if (index === undefined) {
        if (status) {
          status.fetch = 'miss'
        }
        const p = this.#backgroundFetch(k, index, options, context)
        return (p.__returned = p)
      } else {
        // in cache, maybe already fetching
        const v = this.#valList[index]
        if (this.#isBackgroundFetch(v)) {
          const stale = allowStale && v.__staleWhileFetching !== undefined
          if (status) {
            status.fetch = 'inflight'
            if (stale) {
              status.returnedStale = true
            }
          }
          return stale ? v.__staleWhileFetching : (v.__returned = v)
        }
        // if we force a refresh, that means do NOT serve the cached value,
        // unless we are already in the process of refreshing the cache.
        const isStale = this.#isStale(index)
        if (!forceRefresh && !isStale) {
          if (status) {
            status.fetch = 'hit'
          }
          this.#moveToTail(index)
          if (updateAgeOnGet) {
            this.#updateItemAge(index)
          }
          if (status) {
            this.#statusTTL(status, index)
          }
          return v
        }
        // ok, it is stale or a forced refresh, and not already fetching.
        // refresh the cache.
        const p = this.#backgroundFetch(k, index, options, context)
        const hasStale = p.__staleWhileFetching !== undefined
        const staleVal = hasStale && allowStale
        if (status) {
          status.fetch = isStale ? 'stale' : 'refresh'
          if (staleVal && isStale) {
            status.returnedStale = true
          }
        }
        return staleVal ? p.__staleWhileFetching : (p.__returned = p)
      }
    }
    async forceFetch(k, fetchOptions = {}) {
      const v = await this.fetch(k, fetchOptions)
      if (v === undefined) {
        throw new Error('fetch() returned undefined')
      }
      return v
    }
    memo(k, memoOptions = {}) {
      const memoMethod = this.#memoMethod
      if (!memoMethod) {
        throw new Error('no memoMethod provided to constructor')
      }
      const { context, forceRefresh, ...options } = memoOptions
      const v = this.get(k, options)
      if (!forceRefresh && v !== undefined) {
        return v
      }
      const vv = memoMethod(k, v, {
        options,
        context
      })
      this.set(k, vv, options)
      return vv
    }
    /**
     * Return a value from the cache. Will update the recency of the cache
     * entry found.
     *
     * If the key is not found, get() will return `undefined`.
     */
    get(k, getOptions = {}) {
      const {
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        status
      } = getOptions
      const index = this.#keyMap.get(k)
      if (index !== undefined) {
        const value = this.#valList[index]
        const fetching = this.#isBackgroundFetch(value)
        if (status) {
          this.#statusTTL(status, index)
        }
        if (this.#isStale(index)) {
          if (status) {
            status.get = 'stale'
          }
          // delete only if not an in-flight background fetch
          if (!fetching) {
            if (!noDeleteOnStaleGet) {
              this.#delete(k, 'expire')
            }
            if (status && allowStale) {
              status.returnedStale = true
            }
            return allowStale ? value : undefined
          } else {
            if (
              status &&
              allowStale &&
              value.__staleWhileFetching !== undefined
            ) {
              status.returnedStale = true
            }
            return allowStale ? value.__staleWhileFetching : undefined
          }
        } else {
          if (status) {
            status.get = 'hit'
          }
          // if we're currently fetching it, we don't actually have it yet
          // it's not stale, which means this isn't a staleWhileRefetching.
          // If it's not stale, and fetching, AND has a __staleWhileFetching
          // value, then that means the user fetched with {forceRefresh:true},
          // so it's safe to return that value.
          if (fetching) {
            return value.__staleWhileFetching
          }
          this.#moveToTail(index)
          if (updateAgeOnGet) {
            this.#updateItemAge(index)
          }
          return value
        }
      } else if (status) {
        status.get = 'miss'
      }
    }
    #connect(p, n) {
      this.#prev[n] = p
      this.#next[p] = n
    }
    #moveToTail(index) {
      // if tail already, nothing to do
      // if head, move head to next[index]
      // else
      //   move next[prev[index]] to next[index] (head has no prev)
      //   move prev[next[index]] to prev[index]
      // prev[index] = tail
      // next[tail] = index
      // tail = index
      if (index !== this.#tail) {
        if (index === this.#head) {
          this.#head = this.#next[index]
        } else {
          this.#connect(this.#prev[index], this.#next[index])
        }
        this.#connect(this.#tail, index)
        this.#tail = index
      }
    }
    /**
     * Deletes a key out of the cache.
     *
     * Returns true if the key was deleted, false otherwise.
     */
    delete(k) {
      return this.#delete(k, 'delete')
    }
    #delete(k, reason) {
      let deleted = false
      if (this.#size !== 0) {
        const index = this.#keyMap.get(k)
        if (index !== undefined) {
          deleted = true
          if (this.#size === 1) {
            this.#clear(reason)
          } else {
            this.#removeItemSize(index)
            const v = this.#valList[index]
            if (this.#isBackgroundFetch(v)) {
              v.__abortController.abort(new Error('deleted'))
            } else if (this.#hasDispose || this.#hasDisposeAfter) {
              if (this.#hasDispose) {
                this.#dispose?.(v, k, reason)
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([v, k, reason])
              }
            }
            this.#keyMap.delete(k)
            this.#keyList[index] = undefined
            this.#valList[index] = undefined
            if (index === this.#tail) {
              this.#tail = this.#prev[index]
            } else if (index === this.#head) {
              this.#head = this.#next[index]
            } else {
              const pi = this.#prev[index]
              this.#next[pi] = this.#next[index]
              const ni = this.#next[index]
              this.#prev[ni] = this.#prev[index]
            }
            this.#size--
            this.#free.push(index)
          }
        }
      }
      if (this.#hasDisposeAfter && this.#disposed?.length) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
      return deleted
    }
    /**
     * Clear the cache entirely, throwing away all values.
     */
    clear() {
      return this.#clear('delete')
    }
    #clear(reason) {
      for (const index of this.#rindexes({
        allowStale: true
      })) {
        const v = this.#valList[index]
        if (this.#isBackgroundFetch(v)) {
          v.__abortController.abort(new Error('deleted'))
        } else {
          const k = this.#keyList[index]
          if (this.#hasDispose) {
            this.#dispose?.(v, k, reason)
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([v, k, reason])
          }
        }
      }
      this.#keyMap.clear()
      this.#valList.fill(undefined)
      this.#keyList.fill(undefined)
      if (this.#ttls && this.#starts) {
        this.#ttls.fill(0)
        this.#starts.fill(0)
      }
      if (this.#sizes) {
        this.#sizes.fill(0)
      }
      this.#head = 0
      this.#tail = 0
      this.#free.length = 0
      this.#calculatedSize = 0
      this.#size = 0
      if (this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
    }
  }
  commonjs$6.LRUCache = LRUCache
  return commonjs$6
}

let hasRequiredMemoization
function requireMemoization() {
  if (hasRequiredMemoization) {
    return memoization.exports
  }
  hasRequiredMemoization = 1
  ;(function (module) {
    const { LRUCache } = /*@__PURE__*/ requireCommonjs$6()
    const MEMOIZED = new LRUCache({
      max: 500,
      maxSize: 50 * 1024 * 1024,
      // 50MB
      ttl: 3 * 60 * 1000,
      // 3 minutes
      sizeCalculation: (entry, key) =>
        key.startsWith('key:') ? entry.data.length : entry.length
    })
    module.exports.clearMemoized = clearMemoized
    function clearMemoized() {
      const old = {}
      MEMOIZED.forEach((v, k) => {
        old[k] = v
      })
      MEMOIZED.clear()
      return old
    }
    module.exports.put = put
    function put(cache, entry, data, opts) {
      pickMem(opts).set(`key:${cache}:${entry.key}`, {
        entry,
        data
      })
      putDigest(cache, entry.integrity, data, opts)
    }
    module.exports.put.byDigest = putDigest
    function putDigest(cache, integrity, data, opts) {
      pickMem(opts).set(`digest:${cache}:${integrity}`, data)
    }
    module.exports.get = get
    function get(cache, key, opts) {
      return pickMem(opts).get(`key:${cache}:${key}`)
    }
    module.exports.get.byDigest = getDigest
    function getDigest(cache, integrity, opts) {
      return pickMem(opts).get(`digest:${cache}:${integrity}`)
    }
    class ObjProxy {
      constructor(obj) {
        this.obj = obj
      }
      get(key) {
        return this.obj[key]
      }
      set(key, val) {
        this.obj[key] = val
      }
    }
    function pickMem(opts) {
      if (!opts || !opts.memoize) {
        return MEMOIZED
      } else if (opts.memoize.get && opts.memoize.set) {
        return opts.memoize
      } else if (typeof opts.memoize === 'object') {
        return new ObjProxy(opts.memoize)
      } else {
        return MEMOIZED
      }
    }
  })(memoization)
  return memoization.exports
}

const read = { exports: {} }

const lib = {}

let hasRequiredLib$1
function requireLib$1() {
  if (hasRequiredLib$1) {
    return lib
  }
  hasRequiredLib$1 = 1
  const { Minipass } = requireCommonjs$7()
  const EE = require$$0$1.EventEmitter
  const fs = require$$2$2
  const writev = fs.writev
  const _autoClose = Symbol('_autoClose')
  const _close = Symbol('_close')
  const _ended = Symbol('_ended')
  const _fd = Symbol('_fd')
  const _finished = Symbol('_finished')
  const _flags = Symbol('_flags')
  const _flush = Symbol('_flush')
  const _handleChunk = Symbol('_handleChunk')
  const _makeBuf = Symbol('_makeBuf')
  const _mode = Symbol('_mode')
  const _needDrain = Symbol('_needDrain')
  const _onerror = Symbol('_onerror')
  const _onopen = Symbol('_onopen')
  const _onread = Symbol('_onread')
  const _onwrite = Symbol('_onwrite')
  const _open = Symbol('_open')
  const _path = Symbol('_path')
  const _pos = Symbol('_pos')
  const _queue = Symbol('_queue')
  const _read = Symbol('_read')
  const _readSize = Symbol('_readSize')
  const _reading = Symbol('_reading')
  const _remain = Symbol('_remain')
  const _size = Symbol('_size')
  const _write = Symbol('_write')
  const _writing = Symbol('_writing')
  const _defaultFlag = Symbol('_defaultFlag')
  const _errored = Symbol('_errored')
  class ReadStream extends Minipass {
    constructor(path, opt) {
      opt = opt || {}
      super(opt)
      this.readable = true
      this.writable = false
      if (typeof path !== 'string') {
        throw new TypeError('path must be a string')
      }
      this[_errored] = false
      this[_fd] = typeof opt.fd === 'number' ? opt.fd : null
      this[_path] = path
      this[_readSize] = opt.readSize || 16 * 1024 * 1024
      this[_reading] = false
      this[_size] = typeof opt.size === 'number' ? opt.size : Infinity
      this[_remain] = this[_size]
      this[_autoClose] =
        typeof opt.autoClose === 'boolean' ? opt.autoClose : true
      if (typeof this[_fd] === 'number') {
        this[_read]()
      } else {
        this[_open]()
      }
    }
    get fd() {
      return this[_fd]
    }
    get path() {
      return this[_path]
    }
    write() {
      throw new TypeError('this is a readable stream')
    }
    end() {
      throw new TypeError('this is a readable stream')
    }
    [_open]() {
      fs.open(this[_path], 'r', (er, fd) => this[_onopen](er, fd))
    }
    [_onopen](er, fd) {
      if (er) {
        this[_onerror](er)
      } else {
        this[_fd] = fd
        this.emit('open', fd)
        this[_read]()
      }
    }
    [_makeBuf]() {
      return Buffer.allocUnsafe(Math.min(this[_readSize], this[_remain]))
    }
    [_read]() {
      if (!this[_reading]) {
        this[_reading] = true
        const buf = this[_makeBuf]()
        /* istanbul ignore if */
        if (buf.length === 0) {
          return process.nextTick(() => this[_onread](null, 0, buf))
        }
        fs.read(this[_fd], buf, 0, buf.length, null, (er, br, b) =>
          this[_onread](er, br, b)
        )
      }
    }
    [_onread](er, br, buf) {
      this[_reading] = false
      if (er) {
        this[_onerror](er)
      } else if (this[_handleChunk](br, buf)) {
        this[_read]()
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.close(fd, er => (er ? this.emit('error', er) : this.emit('close')))
      }
    }
    [_onerror](er) {
      this[_reading] = true
      this[_close]()
      this.emit('error', er)
    }
    [_handleChunk](br, buf) {
      let ret = false
      // no effect if infinite
      this[_remain] -= br
      if (br > 0) {
        ret = super.write(br < buf.length ? buf.slice(0, br) : buf)
      }
      if (br === 0 || this[_remain] <= 0) {
        ret = false
        this[_close]()
        super.end()
      }
      return ret
    }
    emit(ev, data) {
      switch (ev) {
        case 'prefinish':
        case 'finish':
          break
        case 'drain':
          if (typeof this[_fd] === 'number') {
            this[_read]()
          }
          break
        case 'error':
          if (this[_errored]) {
            return
          }
          this[_errored] = true
          return super.emit(ev, data)
        default:
          return super.emit(ev, data)
      }
    }
  }
  class ReadStreamSync extends ReadStream {
    [_open]() {
      let threw = true
      try {
        this[_onopen](null, fs.openSync(this[_path], 'r'))
        threw = false
      } finally {
        if (threw) {
          this[_close]()
        }
      }
    }
    [_read]() {
      let threw = true
      try {
        if (!this[_reading]) {
          this[_reading] = true
          do {
            const buf = this[_makeBuf]()
            /* istanbul ignore next */
            const br =
              buf.length === 0
                ? 0
                : fs.readSync(this[_fd], buf, 0, buf.length, null)
            if (!this[_handleChunk](br, buf)) {
              break
            }
          } while (true)
          this[_reading] = false
        }
        threw = false
      } finally {
        if (threw) {
          this[_close]()
        }
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.closeSync(fd)
        this.emit('close')
      }
    }
  }
  class WriteStream extends EE {
    constructor(path, opt) {
      opt = opt || {}
      super(opt)
      this.readable = false
      this.writable = true
      this[_errored] = false
      this[_writing] = false
      this[_ended] = false
      this[_needDrain] = false
      this[_queue] = []
      this[_path] = path
      this[_fd] = typeof opt.fd === 'number' ? opt.fd : null
      this[_mode] = opt.mode === undefined ? 0o666 : opt.mode
      this[_pos] = typeof opt.start === 'number' ? opt.start : null
      this[_autoClose] =
        typeof opt.autoClose === 'boolean' ? opt.autoClose : true

      // truncating makes no sense when writing into the middle
      const defaultFlag = this[_pos] !== null ? 'r+' : 'w'
      this[_defaultFlag] = opt.flags === undefined
      this[_flags] = this[_defaultFlag] ? defaultFlag : opt.flags
      if (this[_fd] === null) {
        this[_open]()
      }
    }
    emit(ev, data) {
      if (ev === 'error') {
        if (this[_errored]) {
          return
        }
        this[_errored] = true
      }
      return super.emit(ev, data)
    }
    get fd() {
      return this[_fd]
    }
    get path() {
      return this[_path]
    }
    [_onerror](er) {
      this[_close]()
      this[_writing] = true
      this.emit('error', er)
    }
    [_open]() {
      fs.open(this[_path], this[_flags], this[_mode], (er, fd) =>
        this[_onopen](er, fd)
      )
    }
    [_onopen](er, fd) {
      if (
        this[_defaultFlag] &&
        this[_flags] === 'r+' &&
        er &&
        er.code === 'ENOENT'
      ) {
        this[_flags] = 'w'
        this[_open]()
      } else if (er) {
        this[_onerror](er)
      } else {
        this[_fd] = fd
        this.emit('open', fd)
        if (!this[_writing]) {
          this[_flush]()
        }
      }
    }
    end(buf, enc) {
      if (buf) {
        this.write(buf, enc)
      }
      this[_ended] = true

      // synthetic after-write logic, where drain/finish live
      if (
        !this[_writing] &&
        !this[_queue].length &&
        typeof this[_fd] === 'number'
      ) {
        this[_onwrite](null, 0)
      }
      return this
    }
    write(buf, enc) {
      if (typeof buf === 'string') {
        buf = Buffer.from(buf, enc)
      }
      if (this[_ended]) {
        this.emit('error', new Error('write() after end()'))
        return false
      }
      if (this[_fd] === null || this[_writing] || this[_queue].length) {
        this[_queue].push(buf)
        this[_needDrain] = true
        return false
      }
      this[_writing] = true
      this[_write](buf)
      return true
    }
    [_write](buf) {
      fs.write(this[_fd], buf, 0, buf.length, this[_pos], (er, bw) =>
        this[_onwrite](er, bw)
      )
    }
    [_onwrite](er, bw) {
      if (er) {
        this[_onerror](er)
      } else {
        if (this[_pos] !== null) {
          this[_pos] += bw
        }
        if (this[_queue].length) {
          this[_flush]()
        } else {
          this[_writing] = false
          if (this[_ended] && !this[_finished]) {
            this[_finished] = true
            this[_close]()
            this.emit('finish')
          } else if (this[_needDrain]) {
            this[_needDrain] = false
            this.emit('drain')
          }
        }
      }
    }
    [_flush]() {
      if (this[_queue].length === 0) {
        if (this[_ended]) {
          this[_onwrite](null, 0)
        }
      } else if (this[_queue].length === 1) {
        this[_write](this[_queue].pop())
      } else {
        const iovec = this[_queue]
        this[_queue] = []
        writev(this[_fd], iovec, this[_pos], (er, bw) => this[_onwrite](er, bw))
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.close(fd, er => (er ? this.emit('error', er) : this.emit('close')))
      }
    }
  }
  class WriteStreamSync extends WriteStream {
    [_open]() {
      let fd
      // only wrap in a try{} block if we know we'll retry, to avoid
      // the rethrow obscuring the error's source frame in most cases.
      if (this[_defaultFlag] && this[_flags] === 'r+') {
        try {
          fd = fs.openSync(this[_path], this[_flags], this[_mode])
        } catch (er) {
          if (er.code === 'ENOENT') {
            this[_flags] = 'w'
            return this[_open]()
          } else {
            throw er
          }
        }
      } else {
        fd = fs.openSync(this[_path], this[_flags], this[_mode])
      }
      this[_onopen](null, fd)
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.closeSync(fd)
        this.emit('close')
      }
    }
    [_write](buf) {
      // throw the original, but try to close if it fails
      let threw = true
      try {
        this[_onwrite](
          null,
          fs.writeSync(this[_fd], buf, 0, buf.length, this[_pos])
        )
        threw = false
      } finally {
        if (threw) {
          try {
            this[_close]()
          } catch {
            // ok error
          }
        }
      }
    }
  }
  lib.ReadStream = ReadStream
  lib.ReadStreamSync = ReadStreamSync
  lib.WriteStream = WriteStream
  lib.WriteStreamSync = WriteStreamSync
  return lib
}

let hasRequiredRead
function requireRead() {
  if (hasRequiredRead) {
    return read.exports
  }
  hasRequiredRead = 1
  const fs = require$$0$5
  const fsm = requireLib$1()
  const ssri = requireLib$5()
  const contentPath = requirePath()
  const Pipeline = requireMinipassPipeline()
  read.exports = read$1
  const MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024
  async function read$1(cache, integrity, opts = {}) {
    const { size } = opts
    const { stat, cpath, sri } = await withContentSri(
      cache,
      integrity,
      async (cpath, sri) => {
        // get size
        const stat = size
          ? {
              size
            }
          : await fs.stat(cpath)
        return {
          stat,
          cpath,
          sri
        }
      }
    )
    if (stat.size > MAX_SINGLE_READ_SIZE) {
      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()
    }
    const data = await fs.readFile(cpath, {
      encoding: null
    })
    if (stat.size !== data.length) {
      throw sizeError(stat.size, data.length)
    }
    if (!ssri.checkData(data, sri)) {
      throw integrityError(sri, cpath)
    }
    return data
  }
  const readPipeline = (cpath, size, sri, stream) => {
    stream.push(
      new fsm.ReadStream(cpath, {
        size,
        readSize: MAX_SINGLE_READ_SIZE
      }),
      ssri.integrityStream({
        integrity: sri,
        size
      })
    )
    return stream
  }
  read.exports.stream = readStream
  read.exports.readStream = readStream
  function readStream(cache, integrity, opts = {}) {
    const { size } = opts
    const stream = new Pipeline()
    // Set all this up to run on the stream and then just return the stream
    Promise.resolve()
      .then(async () => {
        const { stat, cpath, sri } = await withContentSri(
          cache,
          integrity,
          async (cpath, sri) => {
            // get size
            const stat = size
              ? {
                  size
                }
              : await fs.stat(cpath)
            return {
              stat,
              cpath,
              sri
            }
          }
        )
        return readPipeline(cpath, stat.size, sri, stream)
      })
      .catch(err => stream.emit('error', err))
    return stream
  }
  read.exports.copy = copy
  function copy(cache, integrity, dest) {
    return withContentSri(cache, integrity, cpath => {
      return fs.copyFile(cpath, dest)
    })
  }
  read.exports.hasContent = hasContent
  async function hasContent(cache, integrity) {
    if (!integrity) {
      return false
    }
    try {
      return await withContentSri(cache, integrity, async (cpath, sri) => {
        const stat = await fs.stat(cpath)
        return {
          size: stat.size,
          sri,
          stat
        }
      })
    } catch (err) {
      if (err.code === 'ENOENT') {
        return false
      }
      if (err.code === 'EPERM') {
        /* istanbul ignore else */
        if (process.platform !== 'win32') {
          throw err
        } else {
          return false
        }
      }
    }
  }
  async function withContentSri(cache, integrity, fn) {
    const sri = ssri.parse(integrity)
    // If `integrity` has multiple entries, pick the first digest
    // with available local data.
    const algo = sri.pickAlgorithm()
    const digests = sri[algo]
    if (digests.length <= 1) {
      const cpath = contentPath(cache, digests[0])
      return fn(cpath, digests[0])
    } else {
      // Can't use race here because a generic error can happen before
      // a ENOENT error, and can happen before a valid result
      const results = await Promise.all(
        digests.map(async meta => {
          try {
            return await withContentSri(cache, meta, fn)
          } catch (err) {
            if (err.code === 'ENOENT') {
              return Object.assign(
                new Error('No matching content found for ' + sri.toString()),
                {
                  code: 'ENOENT'
                }
              )
            }
            return err
          }
        })
      )
      // Return the first non error if it is found
      const result = results.find(r => !(r instanceof Error))
      if (result) {
        return result
      }

      // Throw the No matching content found error
      const enoentError = results.find(r => r.code === 'ENOENT')
      if (enoentError) {
        throw enoentError
      }

      // Throw generic error
      throw results.find(r => r instanceof Error)
    }
  }
  function sizeError(expected, found) {
    /* eslint-disable-next-line max-len */
    const err = new Error(
      `Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`
    )
    err.expected = expected
    err.found = found
    err.code = 'EBADSIZE'
    return err
  }
  function integrityError(sri, path) {
    const err = new Error(`Integrity verification failed for ${sri} (${path})`)
    err.code = 'EINTEGRITY'
    err.sri = sri
    err.path = path
    return err
  }
  return read.exports
}

let hasRequiredGet
function requireGet() {
  if (hasRequiredGet) {
    return get.exports
  }
  hasRequiredGet = 1
  ;(function (module) {
    const Collect = requireMinipassCollect()
    const { Minipass } = requireCommonjs$7()
    const Pipeline = requireMinipassPipeline()
    const index = requireEntryIndex()
    const memo = requireMemoization()
    const read = requireRead()
    async function getData(cache, key, opts = {}) {
      const { integrity, memoize, size } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return {
          metadata: memoized.entry.metadata,
          data: memoized.data,
          integrity: memoized.entry.integrity,
          size: memoized.entry.size
        }
      }
      const entry = await index.find(cache, key, opts)
      if (!entry) {
        throw new index.NotFoundError(cache, key)
      }
      const data = await read(cache, entry.integrity, {
        integrity,
        size
      })
      if (memoize) {
        memo.put(cache, entry, data, opts)
      }
      return {
        data,
        metadata: entry.metadata,
        size: entry.size,
        integrity: entry.integrity
      }
    }
    module.exports = getData
    async function getDataByDigest(cache, key, opts = {}) {
      const { integrity, memoize, size } = opts
      const memoized = memo.get.byDigest(cache, key, opts)
      if (memoized && memoize !== false) {
        return memoized
      }
      const res = await read(cache, key, {
        integrity,
        size
      })
      if (memoize) {
        memo.put.byDigest(cache, key, res, opts)
      }
      return res
    }
    module.exports.byDigest = getDataByDigest
    const getMemoizedStream = memoized => {
      const stream = new Minipass()
      stream.on('newListener', function (ev, cb) {
        ev === 'metadata' && cb(memoized.entry.metadata)
        ev === 'integrity' && cb(memoized.entry.integrity)
        ev === 'size' && cb(memoized.entry.size)
      })
      stream.end(memoized.data)
      return stream
    }
    function getStream(cache, key, opts = {}) {
      const { memoize, size } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return getMemoizedStream(memoized)
      }
      const stream = new Pipeline()
      // Set all this up to run on the stream and then just return the stream
      Promise.resolve()
        .then(async () => {
          const entry = await index.find(cache, key)
          if (!entry) {
            throw new index.NotFoundError(cache, key)
          }
          stream.emit('metadata', entry.metadata)
          stream.emit('integrity', entry.integrity)
          stream.emit('size', entry.size)
          stream.on('newListener', function (ev, cb) {
            ev === 'metadata' && cb(entry.metadata)
            ev === 'integrity' && cb(entry.integrity)
            ev === 'size' && cb(entry.size)
          })
          const src = read.readStream(cache, entry.integrity, {
            ...opts,
            size: typeof size !== 'number' ? entry.size : size
          })
          if (memoize) {
            const memoStream = new Collect.PassThrough()
            memoStream.on('collect', data => memo.put(cache, entry, data, opts))
            stream.unshift(memoStream)
          }
          stream.unshift(src)
          return stream
        })
        .catch(err => stream.emit('error', err))
      return stream
    }
    module.exports.stream = getStream
    function getStreamDigest(cache, integrity, opts = {}) {
      const { memoize } = opts
      const memoized = memo.get.byDigest(cache, integrity, opts)
      if (memoized && memoize !== false) {
        const stream = new Minipass()
        stream.end(memoized)
        return stream
      } else {
        const stream = read.readStream(cache, integrity, opts)
        if (!memoize) {
          return stream
        }
        const memoStream = new Collect.PassThrough()
        memoStream.on('collect', data =>
          memo.put.byDigest(cache, integrity, data, opts)
        )
        return new Pipeline(stream, memoStream)
      }
    }
    module.exports.stream.byDigest = getStreamDigest
    function info(cache, key, opts = {}) {
      const { memoize } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return Promise.resolve(memoized.entry)
      } else {
        return index.find(cache, key)
      }
    }
    module.exports.info = info
    async function copy(cache, key, dest, opts = {}) {
      const entry = await index.find(cache, key, opts)
      if (!entry) {
        throw new index.NotFoundError(cache, key)
      }
      await read.copy(cache, entry.integrity, dest, opts)
      return {
        metadata: entry.metadata,
        size: entry.size,
        integrity: entry.integrity
      }
    }
    module.exports.copy = copy
    async function copyByDigest(cache, key, dest, opts = {}) {
      await read.copy(cache, key, dest, opts)
      return key
    }
    module.exports.copy.byDigest = copyByDigest
    module.exports.hasContent = read.hasContent
  })(get)
  return get.exports
}

const put = { exports: {} }

const write = { exports: {} }

let minipass
let hasRequiredMinipass
function requireMinipass() {
  if (hasRequiredMinipass) {
    return minipass
  }
  hasRequiredMinipass = 1
  const proc =
    typeof process === 'object' && process
      ? process
      : {
          stdout: null,
          stderr: null
        }
  const EE = require$$0$1
  const Stream = require$$1$1
  const SD = require$$2$1.StringDecoder
  const EOF = Symbol('EOF')
  const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
  const EMITTED_END = Symbol('emittedEnd')
  const EMITTING_END = Symbol('emittingEnd')
  const EMITTED_ERROR = Symbol('emittedError')
  const CLOSED = Symbol('closed')
  const READ = Symbol('read')
  const FLUSH = Symbol('flush')
  const FLUSHCHUNK = Symbol('flushChunk')
  const ENCODING = Symbol('encoding')
  const DECODER = Symbol('decoder')
  const FLOWING = Symbol('flowing')
  const PAUSED = Symbol('paused')
  const RESUME = Symbol('resume')
  const BUFFERLENGTH = Symbol('bufferLength')
  const BUFFERPUSH = Symbol('bufferPush')
  const BUFFERSHIFT = Symbol('bufferShift')
  const OBJECTMODE = Symbol('objectMode')
  const DESTROYED = Symbol('destroyed')
  const EMITDATA = Symbol('emitData')
  const EMITEND = Symbol('emitEnd')
  const EMITEND2 = Symbol('emitEnd2')
  const ASYNC = Symbol('async')
  const defer = fn => Promise.resolve().then(fn)

  // TODO remove when Node v8 support drops
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'
  const ASYNCITERATOR =
    (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')
  const ITERATOR =
    (doIter && Symbol.iterator) || Symbol('iterator not implemented')

  // events that mean 'the stream is over'
  // these are treated specially, and re-emitted
  // if they are listened for after emitting.
  const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
  const isArrayBuffer = b =>
    b instanceof ArrayBuffer ||
    (typeof b === 'object' &&
      b.constructor &&
      b.constructor.name === 'ArrayBuffer' &&
      b.byteLength >= 0)
  const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
  class Pipe {
    constructor(src, dest, opts) {
      this.src = src
      this.dest = dest
      this.opts = opts
      this.ondrain = () => src[RESUME]()
      dest.on('drain', this.ondrain)
    }
    unpipe() {
      this.dest.removeListener('drain', this.ondrain)
    }
    // istanbul ignore next - only here for the prototype
    proxyErrors() {}
    end() {
      this.unpipe()
      if (this.opts.end) {
        this.dest.end()
      }
    }
  }
  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener('error', this.proxyErrors)
      super.unpipe()
    }
    constructor(src, dest, opts) {
      super(src, dest, opts)
      this.proxyErrors = er => dest.emit('error', er)
      src.on('error', this.proxyErrors)
    }
  }
  minipass = class Minipass extends Stream {
    constructor(options) {
      super()
      this[FLOWING] = false
      // whether we're explicitly paused
      this[PAUSED] = false
      this.pipes = []
      this.buffer = []
      this[OBJECTMODE] = (options && options.objectMode) || false
      if (this[OBJECTMODE]) {
        this[ENCODING] = null
      } else {
        this[ENCODING] = (options && options.encoding) || null
      }
      if (this[ENCODING] === 'buffer') {
        this[ENCODING] = null
      }
      this[ASYNC] = (options && !!options.async) || false
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null
      this[EOF] = false
      this[EMITTED_END] = false
      this[EMITTING_END] = false
      this[CLOSED] = false
      this[EMITTED_ERROR] = null
      this.writable = true
      this.readable = true
      this[BUFFERLENGTH] = 0
      this[DESTROYED] = false
    }
    get bufferLength() {
      return this[BUFFERLENGTH]
    }
    get encoding() {
      return this[ENCODING]
    }
    set encoding(enc) {
      if (this[OBJECTMODE]) {
        throw new Error('cannot set encoding in objectMode')
      }
      if (
        this[ENCODING] &&
        enc !== this[ENCODING] &&
        ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])
      ) {
        throw new Error('cannot change encoding')
      }
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null
        if (this.buffer.length) {
          this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))
        }
      }
      this[ENCODING] = enc
    }
    setEncoding(enc) {
      this.encoding = enc
    }
    get objectMode() {
      return this[OBJECTMODE]
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om
    }
    get ['async']() {
      return this[ASYNC]
    }
    set ['async'](a) {
      this[ASYNC] = this[ASYNC] || !!a
    }
    write(chunk, encoding, cb) {
      if (this[EOF]) {
        throw new Error('write after end')
      }
      if (this[DESTROYED]) {
        this.emit(
          'error',
          Object.assign(
            new Error('Cannot call write after a stream was destroyed'),
            {
              code: 'ERR_STREAM_DESTROYED'
            }
          )
        )
        return true
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const fn = this[ASYNC] ? defer : f => f()

      // convert array buffers and typed array views into buffers
      // at some point in the future, we may want to do the opposite!
      // leave strings and buffers as-is
      // anything else switches us into object mode
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)
        } else if (isArrayBuffer(chunk)) {
          chunk = Buffer.from(chunk)
        } else if (typeof chunk !== 'string') {
          // use the setter so we throw if we have encoding set
          this.objectMode = true
        }
      }

      // handle object mode up front, since it's simpler
      // this yields better performance, fewer checks later.
      if (this[OBJECTMODE]) {
        /* istanbul ignore if - maybe impossible? */
        if (this.flowing && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this.flowing) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // at this point the chunk is a buffer or string
      // don't buffer it up or send it to the decoder
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // fast-path writing strings of same encoding to a stream with
      // an empty buffer, skipping the buffer/decoder dance
      if (
        typeof chunk === 'string' &&
        // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)
      ) {
        chunk = Buffer.from(chunk, encoding)
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk)
      }

      // Note: flushing CAN potentially switch us into not-flowing mode
      if (this.flowing && this[BUFFERLENGTH] !== 0) {
        this[FLUSH](true)
      }
      if (this.flowing) {
        this.emit('data', chunk)
      } else {
        this[BUFFERPUSH](chunk)
      }
      if (this[BUFFERLENGTH] !== 0) {
        this.emit('readable')
      }
      if (cb) {
        fn(cb)
      }
      return this.flowing
    }
    read(n) {
      if (this[DESTROYED]) {
        return null
      }
      if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]()
        return null
      }
      if (this[OBJECTMODE]) {
        n = null
      }
      if (this.buffer.length > 1 && !this[OBJECTMODE]) {
        if (this.encoding) {
          this.buffer = [this.buffer.join('')]
        } else {
          this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]
        }
      }
      const ret = this[READ](n || null, this.buffer[0])
      this[MAYBE_EMIT_END]()
      return ret
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null) {
        this[BUFFERSHIFT]()
      } else {
        this.buffer[0] = chunk.slice(n)
        chunk = chunk.slice(0, n)
        this[BUFFERLENGTH] -= n
      }
      this.emit('data', chunk)
      if (!this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
      return chunk
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      if (cb) {
        this.once('end', cb)
      }
      this[EOF] = true
      this.writable = false

      // if we haven't written anything, then go ahead and emit,
      // even if we're not reading.
      // we'll re-emit if a new 'end' listener is added anyway.
      // This makes MP more suitable to write-only use cases.
      if (this.flowing || !this[PAUSED]) {
        this[MAYBE_EMIT_END]()
      }
      return this
    }

    // don't let the internal resume be overwritten
    [RESUME]() {
      if (this[DESTROYED]) {
        return
      }
      this[PAUSED] = false
      this[FLOWING] = true
      this.emit('resume')
      if (this.buffer.length) {
        this[FLUSH]()
      } else if (this[EOF]) {
        this[MAYBE_EMIT_END]()
      } else {
        this.emit('drain')
      }
    }
    resume() {
      return this[RESUME]()
    }
    pause() {
      this[FLOWING] = false
      this[PAUSED] = true
    }
    get destroyed() {
      return this[DESTROYED]
    }
    get flowing() {
      return this[FLOWING]
    }
    get paused() {
      return this[PAUSED]
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] += 1
      } else {
        this[BUFFERLENGTH] += chunk.length
      }
      this.buffer.push(chunk)
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this.buffer[0].length
        }
      }
      return this.buffer.shift()
    }
    [FLUSH](noDrain) {
      do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))
      if (!noDrain && !this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit('data', chunk), this.flowing) : false
    }
    pipe(dest, opts) {
      if (this[DESTROYED]) {
        return
      }
      const ended = this[EMITTED_END]
      opts = opts || {}
      if (dest === proc.stdout || dest === proc.stderr) {
        opts.end = false
      } else {
        opts.end = opts.end !== false
      }
      opts.proxyErrors = !!opts.proxyErrors

      // piping an ended stream ends immediately
      if (ended) {
        if (opts.end) {
          dest.end()
        }
      } else {
        this.pipes.push(
          !opts.proxyErrors
            ? new Pipe(this, dest, opts)
            : new PipeProxyErrors(this, dest, opts)
        )
        if (this[ASYNC]) {
          defer(() => this[RESUME]())
        } else {
          this[RESUME]()
        }
      }
      return dest
    }
    unpipe(dest) {
      const p = this.pipes.find(p => p.dest === dest)
      if (p) {
        this.pipes.splice(this.pipes.indexOf(p), 1)
        p.unpipe()
      }
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'data' && !this.pipes.length && !this.flowing) {
        this[RESUME]()
      } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
        super.emit('readable')
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev)
        this.removeAllListeners(ev)
      } else if (ev === 'error' && this[EMITTED_ERROR]) {
        if (this[ASYNC]) {
          defer(() => fn.call(this, this[EMITTED_ERROR]))
        } else {
          fn.call(this, this[EMITTED_ERROR])
        }
      }
      return ret
    }
    get emittedEnd() {
      return this[EMITTED_END]
    }
    [MAYBE_EMIT_END]() {
      if (
        !this[EMITTING_END] &&
        !this[EMITTED_END] &&
        !this[DESTROYED] &&
        this.buffer.length === 0 &&
        this[EOF]
      ) {
        this[EMITTING_END] = true
        this.emit('end')
        this.emit('prefinish')
        this.emit('finish')
        if (this[CLOSED]) {
          this.emit('close')
        }
        this[EMITTING_END] = false
      }
    }
    emit(ev, data, ...extra) {
      // error and close are only events allowed after calling destroy()
      if (
        ev !== 'error' &&
        ev !== 'close' &&
        ev !== DESTROYED &&
        this[DESTROYED]
      ) {
        return
      } else if (ev === 'data') {
        return !data
          ? false
          : this[ASYNC]
            ? defer(() => this[EMITDATA](data))
            : this[EMITDATA](data)
      } else if (ev === 'end') {
        return this[EMITEND]()
      } else if (ev === 'close') {
        this[CLOSED] = true
        // don't emit close before 'end' and 'finish'
        if (!this[EMITTED_END] && !this[DESTROYED]) {
          return
        }
        const ret = super.emit('close')
        this.removeAllListeners('close')
        return ret
      } else if (ev === 'error') {
        this[EMITTED_ERROR] = data
        const ret = super.emit('error', data)
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'resume') {
        const ret = super.emit('resume')
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'finish' || ev === 'prefinish') {
        const ret = super.emit(ev)
        this.removeAllListeners(ev)
        return ret
      }

      // Some other unknown event
      const ret = super.emit(ev, data, ...extra)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITDATA](data) {
      for (const p of this.pipes) {
        if (p.dest.write(data) === false) {
          this.pause()
        }
      }
      const ret = super.emit('data', data)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITEND]() {
      if (this[EMITTED_END]) {
        return
      }
      this[EMITTED_END] = true
      this.readable = false
      if (this[ASYNC]) {
        defer(() => this[EMITEND2]())
      } else {
        this[EMITEND2]()
      }
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end()
        if (data) {
          for (const p of this.pipes) {
            p.dest.write(data)
          }
          super.emit('data', data)
        }
      }
      for (const p of this.pipes) {
        p.end()
      }
      const ret = super.emit('end')
      this.removeAllListeners('end')
      return ret
    }

    // const all = await stream.collect()
    collect() {
      const buf = []
      if (!this[OBJECTMODE]) {
        buf.dataLength = 0
      }
      // set the promise first, in case an error is raised
      // by triggering the flow here.
      const p = this.promise()
      this.on('data', c => {
        buf.push(c)
        if (!this[OBJECTMODE]) {
          buf.dataLength += c.length
        }
      })
      return p.then(() => buf)
    }

    // const data = await stream.concat()
    concat() {
      return this[OBJECTMODE]
        ? Promise.reject(new Error('cannot concat in objectMode'))
        : this.collect().then(buf =>
            this[OBJECTMODE]
              ? Promise.reject(new Error('cannot concat in objectMode'))
              : this[ENCODING]
                ? buf.join('')
                : Buffer.concat(buf, buf.dataLength)
          )
    }

    // stream.promise().then(() => done, er => emitted error)
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error('stream destroyed')))
        this.on('error', er => reject(er))
        this.on('end', () => resolve())
      })
    }

    // for await (let chunk of stream)
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read()
        if (res !== null) {
          return Promise.resolve({
            done: false,
            value: res
          })
        }
        if (this[EOF]) {
          return Promise.resolve({
            done: true
          })
        }
        let resolve = null
        let reject = null
        const onerr = er => {
          this.removeListener('data', ondata)
          this.removeListener('end', onend)
          reject(er)
        }
        const ondata = value => {
          this.removeListener('error', onerr)
          this.removeListener('end', onend)
          this.pause()
          resolve({
            value: value,
            done: !!this[EOF]
          })
        }
        const onend = () => {
          this.removeListener('error', onerr)
          this.removeListener('data', ondata)
          resolve({
            done: true
          })
        }
        const ondestroy = () => onerr(new Error('stream destroyed'))
        return new Promise((res, rej) => {
          reject = rej
          resolve = res
          this.once(DESTROYED, ondestroy)
          this.once('error', onerr)
          this.once('end', onend)
          this.once('data', ondata)
        })
      }
      return {
        next
      }
    }

    // for (let chunk of stream)
    [ITERATOR]() {
      const next = () => {
        const value = this.read()
        const done = value === null
        return {
          value,
          done
        }
      }
      return {
        next
      }
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er) {
          this.emit('error', er)
        } else {
          this.emit(DESTROYED)
        }
        return this
      }
      this[DESTROYED] = true

      // throw away all buffered data, it's never coming out
      this.buffer.length = 0
      this[BUFFERLENGTH] = 0
      if (typeof this.close === 'function' && !this[CLOSED]) {
        this.close()
      }
      if (er) {
        this.emit('error', er)
      }
      // if no error to emit, still reject pending promises
      else {
        this.emit(DESTROYED)
      }
      return this
    }
    static isStream(s) {
      return (
        !!s &&
        (s instanceof Minipass ||
          s instanceof Stream ||
          (s instanceof EE &&
            (typeof s.pipe === 'function' ||
              // readable
              (typeof s.write === 'function' && typeof s.end === 'function')))) // writable
      )
    }
  }
  return minipass
}

let minipassFlush
let hasRequiredMinipassFlush
function requireMinipassFlush() {
  if (hasRequiredMinipassFlush) {
    return minipassFlush
  }
  hasRequiredMinipassFlush = 1
  const Minipass = requireMinipass()
  const _flush = Symbol('_flush')
  const _flushed = Symbol('_flushed')
  const _flushing = Symbol('_flushing')
  class Flush extends Minipass {
    constructor(opt = {}) {
      if (typeof opt === 'function') {
        opt = {
          flush: opt
        }
      }
      super(opt)

      // or extend this class and provide a 'flush' method in your subclass
      if (typeof opt.flush !== 'function' && typeof this.flush !== 'function') {
        throw new TypeError('must provide flush function in options')
      }
      this[_flush] = opt.flush || this.flush
    }
    emit(ev, ...data) {
      if ((ev !== 'end' && ev !== 'finish') || this[_flushed]) {
        return super.emit(ev, ...data)
      }
      if (this[_flushing]) {
        return
      }
      this[_flushing] = true
      const afterFlush = er => {
        this[_flushed] = true
        er ? super.emit('error', er) : super.emit('end')
      }
      const ret = this[_flush](afterFlush)
      if (ret && ret.then) {
        ret.then(
          () => afterFlush(),
          er => afterFlush(er)
        )
      }
    }
  }
  minipassFlush = Flush
  return minipassFlush
}

let hasRequiredWrite
function requireWrite() {
  if (hasRequiredWrite) {
    return write.exports
  }
  hasRequiredWrite = 1
  const events = require$$0$1
  const contentPath = requirePath()
  const fs = require$$0$5
  const { moveFile } = requireLib$2()
  const { Minipass } = requireCommonjs$7()
  const Pipeline = requireMinipassPipeline()
  const Flush = requireMinipassFlush()
  const path = require$$0$3
  const ssri = requireLib$5()
  const uniqueFilename = requireLib$3()
  const fsm = requireLib$1()
  write.exports = write$1

  // Cache of move operations in process so we don't duplicate
  const moveOperations = new Map()
  async function write$1(cache, data, opts = {}) {
    const { algorithms, size, integrity } = opts
    if (typeof size === 'number' && data.length !== size) {
      throw sizeError(size, data.length)
    }
    const sri = ssri.fromData(
      data,
      algorithms
        ? {
            algorithms
          }
        : {}
    )
    if (integrity && !ssri.checkData(data, integrity, opts)) {
      throw checksumError(integrity, sri)
    }
    for (const algo in sri) {
      const tmp = await makeTmp(cache, opts)
      const hash = sri[algo].toString()
      try {
        await fs.writeFile(tmp.target, data, {
          flag: 'wx'
        })
        await moveToDestination(tmp, cache, hash, opts)
      } finally {
        if (!tmp.moved) {
          await fs.rm(tmp.target, {
            recursive: true,
            force: true
          })
        }
      }
    }
    return {
      integrity: sri,
      size: data.length
    }
  }
  write.exports.stream = writeStream

  // writes proxied to the 'inputStream' that is passed to the Promise
  // 'end' is deferred until content is handled.
  class CacacheWriteStream extends Flush {
    constructor(cache, opts) {
      super()
      this.opts = opts
      this.cache = cache
      this.inputStream = new Minipass()
      this.inputStream.on('error', er => this.emit('error', er))
      this.inputStream.on('drain', () => this.emit('drain'))
      this.handleContentP = null
    }
    write(chunk, encoding, cb) {
      if (!this.handleContentP) {
        this.handleContentP = handleContent(
          this.inputStream,
          this.cache,
          this.opts
        )
        this.handleContentP.catch(error => this.emit('error', error))
      }
      return this.inputStream.write(chunk, encoding, cb)
    }
    flush(cb) {
      this.inputStream.end(() => {
        if (!this.handleContentP) {
          const e = new Error('Cache input stream was empty')
          e.code = 'ENODATA'
          // empty streams are probably emitting end right away.
          // defer this one tick by rejecting a promise on it.
          return Promise.reject(e).catch(cb)
        }
        // eslint-disable-next-line promise/catch-or-return
        this.handleContentP.then(
          res => {
            res.integrity && this.emit('integrity', res.integrity)
            // eslint-disable-next-line promise/always-return
            res.size !== null && this.emit('size', res.size)
            cb()
          },
          er => cb(er)
        )
      })
    }
  }
  function writeStream(cache, opts = {}) {
    return new CacacheWriteStream(cache, opts)
  }
  async function handleContent(inputStream, cache, opts) {
    const tmp = await makeTmp(cache, opts)
    try {
      const res = await pipeToTmp(inputStream, cache, tmp.target, opts)
      await moveToDestination(tmp, cache, res.integrity, opts)
      return res
    } finally {
      if (!tmp.moved) {
        await fs.rm(tmp.target, {
          recursive: true,
          force: true
        })
      }
    }
  }
  async function pipeToTmp(inputStream, cache, tmpTarget, opts) {
    const outStream = new fsm.WriteStream(tmpTarget, {
      flags: 'wx'
    })
    if (opts.integrityEmitter) {
      // we need to create these all simultaneously since they can fire in any order
      const [integrity, size] = await Promise.all([
        events.once(opts.integrityEmitter, 'integrity').then(res => res[0]),
        events.once(opts.integrityEmitter, 'size').then(res => res[0]),
        new Pipeline(inputStream, outStream).promise()
      ])
      return {
        integrity,
        size
      }
    }
    let integrity
    let size
    const hashStream = ssri.integrityStream({
      integrity: opts.integrity,
      algorithms: opts.algorithms,
      size: opts.size
    })
    hashStream.on('integrity', i => {
      integrity = i
    })
    hashStream.on('size', s => {
      size = s
    })
    const pipeline = new Pipeline(inputStream, hashStream, outStream)
    await pipeline.promise()
    return {
      integrity,
      size
    }
  }
  async function makeTmp(cache, opts) {
    const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)
    await fs.mkdir(path.dirname(tmpTarget), {
      recursive: true
    })
    return {
      target: tmpTarget,
      moved: false
    }
  }
  async function moveToDestination(tmp, cache, sri) {
    const destination = contentPath(cache, sri)
    const destDir = path.dirname(destination)
    if (moveOperations.has(destination)) {
      return moveOperations.get(destination)
    }
    moveOperations.set(
      destination,
      fs
        .mkdir(destDir, {
          recursive: true
        })
        .then(async () => {
          await moveFile(tmp.target, destination, {
            overwrite: false
          })
          tmp.moved = true
          return tmp.moved
        })
        .catch(err => {
          if (!err.message.startsWith('The destination file exists')) {
            throw Object.assign(err, {
              code: 'EEXIST'
            })
          }
        })
        .finally(() => {
          moveOperations.delete(destination)
        })
    )
    return moveOperations.get(destination)
  }
  function sizeError(expected, found) {
    /* eslint-disable-next-line max-len */
    const err = new Error(
      `Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`
    )
    err.expected = expected
    err.found = found
    err.code = 'EBADSIZE'
    return err
  }
  function checksumError(expected, found) {
    const err = new Error(`Integrity check failed:
  Wanted: ${expected}
   Found: ${found}`)
    err.code = 'EINTEGRITY'
    err.expected = expected
    err.found = found
    return err
  }
  return write.exports
}

let hasRequiredPut
function requirePut() {
  if (hasRequiredPut) {
    return put.exports
  }
  hasRequiredPut = 1
  const index = requireEntryIndex()
  const memo = requireMemoization()
  const write = requireWrite()
  const Flush = requireMinipassFlush()
  const { PassThrough } = requireMinipassCollect()
  const Pipeline = requireMinipassPipeline()
  const putOpts = opts => ({
    algorithms: ['sha512'],
    ...opts
  })
  put.exports = putData
  async function putData(cache, key, data, opts = {}) {
    const { memoize } = opts
    opts = putOpts(opts)
    const res = await write(cache, data, opts)
    const entry = await index.insert(cache, key, res.integrity, {
      ...opts,
      size: res.size
    })
    if (memoize) {
      memo.put(cache, entry, data, opts)
    }
    return res.integrity
  }
  put.exports.stream = putStream
  function putStream(cache, key, opts = {}) {
    const { memoize } = opts
    opts = putOpts(opts)
    let integrity
    let size
    let error
    let memoData
    const pipeline = new Pipeline()
    // first item in the pipeline is the memoizer, because we need
    // that to end first and get the collected data.
    if (memoize) {
      const memoizer = new PassThrough().on('collect', data => {
        memoData = data
      })
      pipeline.push(memoizer)
    }

    // contentStream is a write-only, not a passthrough
    // no data comes out of it.
    const contentStream = write
      .stream(cache, opts)
      .on('integrity', int => {
        integrity = int
      })
      .on('size', s => {
        size = s
      })
      .on('error', err => {
        error = err
      })
    pipeline.push(contentStream)

    // last but not least, we write the index and emit hash and size,
    // and memoize if we're doing that
    pipeline.push(
      new Flush({
        async flush() {
          if (!error) {
            const entry = await index.insert(cache, key, integrity, {
              ...opts,
              size
            })
            if (memoize && memoData) {
              memo.put(cache, entry, memoData, opts)
            }
            pipeline.emit('integrity', integrity)
            pipeline.emit('size', size)
          }
        }
      })
    )
    return pipeline
  }
  return put.exports
}

const rm = { exports: {} }

const commonjs$5 = {}

const commonjs$4 = {}

const commonjs$3 = {}

const commonjs$2 = {}

let hasRequiredCommonjs$5
function requireCommonjs$5() {
  if (hasRequiredCommonjs$5) {
    return commonjs$2
  }
  hasRequiredCommonjs$5 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.range = exports.balanced = void 0
    const balanced = (a, b, str) => {
      const ma = a instanceof RegExp ? maybeMatch(a, str) : a
      const mb = b instanceof RegExp ? maybeMatch(b, str) : b
      const r = ma !== null && mb != null && (0, exports.range)(ma, mb, str)
      return (
        r && {
          start: r[0],
          end: r[1],
          pre: str.slice(0, r[0]),
          body: str.slice(r[0] + ma.length, r[1]),
          post: str.slice(r[1] + mb.length)
        }
      )
    }
    exports.balanced = balanced
    const maybeMatch = (reg, str) => {
      const m = str.match(reg)
      return m ? m[0] : null
    }
    const range = (a, b, str) => {
      let begs,
        beg,
        left,
        right = undefined,
        result
      let ai = str.indexOf(a)
      let bi = str.indexOf(b, ai + 1)
      let i = ai
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi]
        }
        begs = []
        left = str.length
        while (i >= 0 && !result) {
          if (i === ai) {
            begs.push(i)
            ai = str.indexOf(a, i + 1)
          } else if (begs.length === 1) {
            const r = begs.pop()
            if (r !== undefined) {
              result = [r, bi]
            }
          } else {
            beg = begs.pop()
            if (beg !== undefined && beg < left) {
              left = beg
              right = bi
            }
            bi = str.indexOf(b, i + 1)
          }
          i = ai < bi && ai >= 0 ? ai : bi
        }
        if (begs.length && right !== undefined) {
          result = [left, right]
        }
      }
      return result
    }
    exports.range = range
  })(commonjs$2)
  return commonjs$2
}

let hasRequiredCommonjs$4
function requireCommonjs$4() {
  if (hasRequiredCommonjs$4) {
    return commonjs$3
  }
  hasRequiredCommonjs$4 = 1
  Object.defineProperty(commonjs$3, '__esModule', {
    value: true
  })
  commonjs$3.expand = expand
  const balanced_match_1 = requireCommonjs$5()
  const escSlash = '\0SLASH' + Math.random() + '\0'
  const escOpen = '\0OPEN' + Math.random() + '\0'
  const escClose = '\0CLOSE' + Math.random() + '\0'
  const escComma = '\0COMMA' + Math.random() + '\0'
  const escPeriod = '\0PERIOD' + Math.random() + '\0'
  const escSlashPattern = new RegExp(escSlash, 'g')
  const escOpenPattern = new RegExp(escOpen, 'g')
  const escClosePattern = new RegExp(escClose, 'g')
  const escCommaPattern = new RegExp(escComma, 'g')
  const escPeriodPattern = new RegExp(escPeriod, 'g')
  const slashPattern = /\\\\/g
  const openPattern = /\\{/g
  const closePattern = /\\}/g
  const commaPattern = /\\,/g
  const periodPattern = /\\./g
  function numeric(str) {
    return !isNaN(str) ? parseInt(str, 10) : str.charCodeAt(0)
  }
  function escapeBraces(str) {
    return str
      .replace(slashPattern, escSlash)
      .replace(openPattern, escOpen)
      .replace(closePattern, escClose)
      .replace(commaPattern, escComma)
      .replace(periodPattern, escPeriod)
  }
  function unescapeBraces(str) {
    return str
      .replace(escSlashPattern, '\\')
      .replace(escOpenPattern, '{')
      .replace(escClosePattern, '}')
      .replace(escCommaPattern, ',')
      .replace(escPeriodPattern, '.')
  }
  /**
   * Basically just str.split(","), but handling cases
   * where we have nested braced sections, which should be
   * treated as individual members, like {a,{b,c},d}
   */
  function parseCommaParts(str) {
    if (!str) {
      return ['']
    }
    const parts = []
    const m = (0, balanced_match_1.balanced)('{', '}', str)
    if (!m) {
      return str.split(',')
    }
    const { pre, body, post } = m
    const p = pre.split(',')
    p[p.length - 1] += '{' + body + '}'
    const postParts = parseCommaParts(post)
    if (post.length) {
      p[p.length - 1] += postParts.shift()
      p.push.apply(p, postParts)
    }
    parts.push.apply(parts, p)
    return parts
  }
  function expand(str) {
    if (!str) {
      return []
    }
    // I don't know why Bash 4.3 does this, but it does.
    // Anything starting with {} will have the first two bytes preserved
    // but *only* at the top level, so {},a}b will not expand to anything,
    // but a{},b}c will be expanded to [a}c,abc].
    // One could argue that this is a bug in Bash, but since the goal of
    // this module is to match Bash's rules, we escape a leading {}
    if (str.slice(0, 2) === '{}') {
      str = '\\{\\}' + str.slice(2)
    }
    return expand_(escapeBraces(str), true).map(unescapeBraces)
  }
  function embrace(str) {
    return '{' + str + '}'
  }
  function isPadded(el) {
    return /^-?0\d/.test(el)
  }
  function lte(i, y) {
    return i <= y
  }
  function gte(i, y) {
    return i >= y
  }
  function expand_(str, isTop) {
    /** @type {string[]} */
    const expansions = []
    const m = (0, balanced_match_1.balanced)('{', '}', str)
    if (!m) {
      return [str]
    }
    // no need to expand pre, since it is guaranteed to be free of brace-sets
    const pre = m.pre
    const post = m.post.length ? expand_(m.post, false) : ['']
    if (/\$$/.test(m.pre)) {
      for (let k = 0; k < post.length; k++) {
        const expansion = pre + '{' + m.body + '}' + post[k]
        expansions.push(expansion)
      }
    } else {
      const isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body)
      const isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(
        m.body
      )
      const isSequence = isNumericSequence || isAlphaSequence
      const isOptions = m.body.indexOf(',') >= 0
      if (!isSequence && !isOptions) {
        // {a},b}
        if (m.post.match(/,(?!,).*\}/)) {
          str = m.pre + '{' + m.body + escClose + m.post
          return expand_(str)
        }
        return [str]
      }
      let n
      if (isSequence) {
        n = m.body.split(/\.\./)
      } else {
        n = parseCommaParts(m.body)
        if (n.length === 1 && n[0] !== undefined) {
          // x{{a,b}}y ==> x{a}y x{b}y
          n = expand_(n[0], false).map(embrace)
          //XXX is this necessary? Can't seem to hit it in tests.
          /* c8 ignore start */
          if (n.length === 1) {
            return post.map(p => m.pre + n[0] + p)
          }
          /* c8 ignore stop */
        }
      }
      // at this point, n is the parts, and we know it's not a comma set
      // with a single entry.
      let N
      if (isSequence && n[0] !== undefined && n[1] !== undefined) {
        const x = numeric(n[0])
        const y = numeric(n[1])
        const width = Math.max(n[0].length, n[1].length)
        let incr =
          n.length === 3 && n[2] !== undefined ? Math.abs(numeric(n[2])) : 1
        let test = lte
        const reverse = y < x
        if (reverse) {
          incr *= -1
          test = gte
        }
        const pad = n.some(isPadded)
        N = []
        for (let i = x; test(i, y); i += incr) {
          let c
          if (isAlphaSequence) {
            c = String.fromCharCode(i)
            if (c === '\\') {
              c = ''
            }
          } else {
            c = String(i)
            if (pad) {
              const need = width - c.length
              if (need > 0) {
                const z = new Array(need + 1).join('0')
                if (i < 0) {
                  c = '-' + z + c.slice(1)
                } else {
                  c = z + c
                }
              }
            }
          }
          N.push(c)
        }
      } else {
        N = []
        for (let j = 0; j < n.length; j++) {
          N.push.apply(N, expand_(n[j], false))
        }
      }
      for (let j = 0; j < N.length; j++) {
        for (let k = 0; k < post.length; k++) {
          const expansion = pre + N[j] + post[k]
          if (!isTop || isSequence || expansion) {
            expansions.push(expansion)
          }
        }
      }
    }
    return expansions
  }
  return commonjs$3
}

const assertValidPattern = {}

let hasRequiredAssertValidPattern
function requireAssertValidPattern() {
  if (hasRequiredAssertValidPattern) {
    return assertValidPattern
  }
  hasRequiredAssertValidPattern = 1
  Object.defineProperty(assertValidPattern, '__esModule', {
    value: true
  })
  assertValidPattern.assertValidPattern = void 0
  const MAX_PATTERN_LENGTH = 1024 * 64
  const assertValidPattern$1 = pattern => {
    if (typeof pattern !== 'string') {
      throw new TypeError('invalid pattern')
    }
    if (pattern.length > MAX_PATTERN_LENGTH) {
      throw new TypeError('pattern is too long')
    }
  }
  assertValidPattern.assertValidPattern = assertValidPattern$1
  return assertValidPattern
}

const ast = {}

const braceExpressions = {}

let hasRequiredBraceExpressions
function requireBraceExpressions() {
  if (hasRequiredBraceExpressions) {
    return braceExpressions
  }
  hasRequiredBraceExpressions = 1
  // translate the various posix character classes into unicode properties
  // this works across all unicode locales
  Object.defineProperty(braceExpressions, '__esModule', {
    value: true
  })
  braceExpressions.parseClass = void 0
  // { <posix class>: [<translation>, /u flag required, negated]
  const posixClasses = {
    '[:alnum:]': ['\\p{L}\\p{Nl}\\p{Nd}', true],
    '[:alpha:]': ['\\p{L}\\p{Nl}', true],
    '[:ascii:]': ['\\x' + '00-\\x' + '7f', false],
    '[:blank:]': ['\\p{Zs}\\t', true],
    '[:cntrl:]': ['\\p{Cc}', true],
    '[:digit:]': ['\\p{Nd}', true],
    '[:graph:]': ['\\p{Z}\\p{C}', true, true],
    '[:lower:]': ['\\p{Ll}', true],
    '[:print:]': ['\\p{C}', true],
    '[:punct:]': ['\\p{P}', true],
    '[:space:]': ['\\p{Z}\\t\\r\\n\\v\\f', true],
    '[:upper:]': ['\\p{Lu}', true],
    '[:word:]': ['\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}', true],
    '[:xdigit:]': ['A-Fa-f0-9', false]
  }
  // only need to escape a few things inside of brace expressions
  // escapes: [ \ ] -
  const braceEscape = s => s.replace(/[[\]\\-]/g, '\\$&')
  // escape all regexp magic characters
  const regexpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  // everything has already been escaped, we just have to join
  const rangesToString = ranges => ranges.join('')
  // takes a glob string at a posix brace expression, and returns
  // an equivalent regular expression source, and boolean indicating
  // whether the /u flag needs to be applied, and the number of chars
  // consumed to parse the character class.
  // This also removes out of order ranges, and returns ($.) if the
  // entire class just no good.
  const parseClass = (glob, position) => {
    const pos = position
    /* c8 ignore start */
    if (glob.charAt(pos) !== '[') {
      throw new Error('not in a brace expression')
    }
    /* c8 ignore stop */
    const ranges = []
    const negs = []
    let i = pos + 1
    let sawStart = false
    let uflag = false
    let escaping = false
    let negate = false
    let endPos = pos
    let rangeStart = ''
    WHILE: while (i < glob.length) {
      const c = glob.charAt(i)
      if ((c === '!' || c === '^') && i === pos + 1) {
        negate = true
        i++
        continue
      }
      if (c === ']' && sawStart && !escaping) {
        endPos = i + 1
        break
      }
      sawStart = true
      if (c === '\\') {
        if (!escaping) {
          escaping = true
          i++
          continue
        }
        // escaped \ char, fall through and treat like normal char
      }
      if (c === '[' && !escaping) {
        // either a posix class, a collation equivalent, or just a [
        for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
          if (glob.startsWith(cls, i)) {
            // invalid, [a-[] is fine, but not [a-[:alpha]]
            if (rangeStart) {
              return ['$.', false, glob.length - pos, true]
            }
            i += cls.length
            if (neg) {
              negs.push(unip)
            } else {
              ranges.push(unip)
            }
            uflag = uflag || u
            continue WHILE
          }
        }
      }
      // now it's just a normal character, effectively
      escaping = false
      if (rangeStart) {
        // throw this range away if it's not valid, but others
        // can still match.
        if (c > rangeStart) {
          ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c))
        } else if (c === rangeStart) {
          ranges.push(braceEscape(c))
        }
        rangeStart = ''
        i++
        continue
      }
      // now might be the start of a range.
      // can be either c-d or c-] or c<more...>] or c] at this point
      if (glob.startsWith('-]', i + 1)) {
        ranges.push(braceEscape(c + '-'))
        i += 2
        continue
      }
      if (glob.startsWith('-', i + 1)) {
        rangeStart = c
        i += 2
        continue
      }
      // not the start of a range, just a single character
      ranges.push(braceEscape(c))
      i++
    }
    if (endPos < i) {
      // didn't see the end of the class, not a valid class,
      // but might still be valid as a literal match.
      return ['', false, 0, false]
    }
    // if we got no ranges and no negates, then we have a range that
    // cannot possibly match anything, and that poisons the whole glob
    if (!ranges.length && !negs.length) {
      return ['$.', false, glob.length - pos, true]
    }
    // if we got one positive range, and it's a single character, then that's
    // not actually a magic pattern, it's just that one literal character.
    // we should not treat that as "magic", we should just return the literal
    // character. [_] is a perfectly valid way to escape glob magic chars.
    if (
      negs.length === 0 &&
      ranges.length === 1 &&
      /^\\?.$/.test(ranges[0]) &&
      !negate
    ) {
      const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0]
      return [regexpEscape(r), false, endPos - pos, false]
    }
    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']'
    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']'
    const comb =
      ranges.length && negs.length
        ? '(' + sranges + '|' + snegs + ')'
        : ranges.length
          ? sranges
          : snegs
    return [comb, uflag, endPos - pos, true]
  }
  braceExpressions.parseClass = parseClass
  return braceExpressions
}

const _unescape = {}

let hasRequired_unescape
function require_unescape() {
  if (hasRequired_unescape) {
    return _unescape
  }
  hasRequired_unescape = 1
  Object.defineProperty(_unescape, '__esModule', {
    value: true
  })
  _unescape.unescape = void 0
  /**
   * Un-escape a string that has been escaped with {@link escape}.
   *
   * If the {@link windowsPathsNoEscape} option is used, then square-brace
   * escapes are removed, but not backslash escapes.  For example, it will turn
   * the string `'[*]'` into `*`, but it will not turn `'\\*'` into `'*'`,
   * becuase `\` is a path separator in `windowsPathsNoEscape` mode.
   *
   * When `windowsPathsNoEscape` is not set, then both brace escapes and
   * backslash escapes are removed.
   *
   * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped
   * or unescaped.
   */
  const unescape = (s, { windowsPathsNoEscape = false } = {}) => {
    return windowsPathsNoEscape
      ? s.replace(/\[([^/\\])\]/g, '$1')
      : s.replace(/((?!\\).|^)\[([^/\\])\]/g, '$1$2').replace(/\\([^/])/g, '$1')
  }
  _unescape.unescape = unescape
  return _unescape
}

let hasRequiredAst
function requireAst() {
  if (hasRequiredAst) {
    return ast
  }
  hasRequiredAst = 1
  // parse a single path portion
  Object.defineProperty(ast, '__esModule', {
    value: true
  })
  ast.AST = void 0
  const brace_expressions_js_1 = requireBraceExpressions()
  const unescape_js_1 = require_unescape()
  const types = new Set(['!', '?', '+', '*', '@'])
  const isExtglobType = c => types.has(c)
  // Patterns that get prepended to bind to the start of either the
  // entire string, or just a single path portion, to prevent dots
  // and/or traversal patterns, when needed.
  // Exts don't need the ^ or / bit, because the root binds that already.
  const startNoTraversal = '(?!(?:^|/)\\.\\.?(?:$|/))'
  const startNoDot = '(?!\\.)'
  // characters that indicate a start of pattern needs the "no dots" bit,
  // because a dot *might* be matched. ( is not in the list, because in
  // the case of a child extglob, it will handle the prevention itself.
  const addPatternStart = new Set(['[', '.'])
  // cases where traversal is A-OK, no dot prevention needed
  const justDots = new Set(['..', '.'])
  const reSpecials = new Set('().*{}+?[]^$\\!')
  const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  // any single thing other than /
  const qmark = '[^/]'
  // * => any number of characters
  const star = qmark + '*?'
  // use + when we need to ensure that *something* matches, because the * is
  // the only thing in the path portion.
  const starNoEmpty = qmark + '+?'
  // remove the \ chars that we added if we end up doing a nonmagic compare
  // const deslash = (s: string) => s.replace(/\\(.)/g, '$1')
  class AST {
    type
    #root
    #hasMagic
    #uflag = false
    #parts = []
    #parent
    #parentIndex
    #negs
    #filledNegs = false
    #options
    #toString
    // set to true if it's an extglob with no children
    // (which really means one child of '')
    #emptyExt = false
    constructor(type, parent, options = {}) {
      this.type = type
      // extglobs are inherently magical
      if (type) {
        this.#hasMagic = true
      }
      this.#parent = parent
      this.#root = this.#parent ? this.#parent.#root : this
      this.#options = this.#root === this ? options : this.#root.#options
      this.#negs = this.#root === this ? [] : this.#root.#negs
      if (type === '!' && !this.#root.#filledNegs) {
        this.#negs.push(this)
      }
      this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0
    }
    get hasMagic() {
      /* c8 ignore start */
      if (this.#hasMagic !== undefined) {
        return this.#hasMagic
      }
      /* c8 ignore stop */
      for (const p of this.#parts) {
        if (typeof p === 'string') {
          continue
        }
        if (p.type || p.hasMagic) {
          return (this.#hasMagic = true)
        }
      }
      // note: will be undefined until we generate the regexp src and find out
      return this.#hasMagic
    }
    // reconstructs the pattern
    toString() {
      if (this.#toString !== undefined) {
        return this.#toString
      }
      if (!this.type) {
        return (this.#toString = this.#parts.map(p => String(p)).join(''))
      } else {
        return (this.#toString =
          this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')')
      }
    }
    #fillNegs() {
      /* c8 ignore start */
      if (this !== this.#root) {
        throw new Error('should only call on root')
      }
      if (this.#filledNegs) {
        return this
      }
      /* c8 ignore stop */
      // call toString() once to fill this out
      this.toString()
      this.#filledNegs = true
      let n
      while ((n = this.#negs.pop())) {
        if (n.type !== '!') {
          continue
        }
        // walk up the tree, appending everthing that comes AFTER parentIndex
        let p = n
        let pp = p.#parent
        while (pp) {
          for (
            let i = p.#parentIndex + 1;
            !pp.type && i < pp.#parts.length;
            i++
          ) {
            for (const part of n.#parts) {
              /* c8 ignore start */
              if (typeof part === 'string') {
                throw new Error('string part in extglob AST??')
              }
              /* c8 ignore stop */
              part.copyIn(pp.#parts[i])
            }
          }
          p = pp
          pp = p.#parent
        }
      }
      return this
    }
    push(...parts) {
      for (const p of parts) {
        if (p === '') {
          continue
        }
        /* c8 ignore start */
        if (
          typeof p !== 'string' &&
          !(p instanceof AST && p.#parent === this)
        ) {
          throw new Error('invalid part: ' + p)
        }
        /* c8 ignore stop */
        this.#parts.push(p)
      }
    }
    toJSON() {
      const ret =
        this.type === null
          ? this.#parts
              .slice()
              .map(p => (typeof p === 'string' ? p : p.toJSON()))
          : [this.type, ...this.#parts.map(p => p.toJSON())]
      if (this.isStart() && !this.type) {
        ret.unshift([])
      }
      if (
        this.isEnd() &&
        (this === this.#root ||
          (this.#root.#filledNegs && this.#parent?.type === '!'))
      ) {
        ret.push({})
      }
      return ret
    }
    isStart() {
      if (this.#root === this) {
        return true
      }
      // if (this.type) return !!this.#parent?.isStart()
      if (!this.#parent?.isStart()) {
        return false
      }
      if (this.#parentIndex === 0) {
        return true
      }
      // if everything AHEAD of this is a negation, then it's still the "start"
      const p = this.#parent
      for (let i = 0; i < this.#parentIndex; i++) {
        const pp = p.#parts[i]
        if (!(pp instanceof AST && pp.type === '!')) {
          return false
        }
      }
      return true
    }
    isEnd() {
      if (this.#root === this) {
        return true
      }
      if (this.#parent?.type === '!') {
        return true
      }
      if (!this.#parent?.isEnd()) {
        return false
      }
      if (!this.type) {
        return this.#parent?.isEnd()
      }
      // if not root, it'll always have a parent
      /* c8 ignore start */
      const pl = this.#parent ? this.#parent.#parts.length : 0
      /* c8 ignore stop */
      return this.#parentIndex === pl - 1
    }
    copyIn(part) {
      if (typeof part === 'string') {
        this.push(part)
      } else {
        this.push(part.clone(this))
      }
    }
    clone(parent) {
      const c = new AST(this.type, parent)
      for (const p of this.#parts) {
        c.copyIn(p)
      }
      return c
    }
    static #parseAST(str, ast, pos, opt) {
      let escaping = false
      let inBrace = false
      let braceStart = -1
      let braceNeg = false
      if (ast.type === null) {
        // outside of a extglob, append until we find a start
        let i = pos
        let acc = ''
        while (i < str.length) {
          const c = str.charAt(i++)
          // still accumulate escapes at this point, but we do ignore
          // starts that are escaped
          if (escaping || c === '\\') {
            escaping = !escaping
            acc += c
            continue
          }
          if (inBrace) {
            if (i === braceStart + 1) {
              if (c === '^' || c === '!') {
                braceNeg = true
              }
            } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
              inBrace = false
            }
            acc += c
            continue
          } else if (c === '[') {
            inBrace = true
            braceStart = i
            braceNeg = false
            acc += c
            continue
          }
          if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {
            ast.push(acc)
            acc = ''
            const ext = new AST(c, ast)
            i = AST.#parseAST(str, ext, i, opt)
            ast.push(ext)
            continue
          }
          acc += c
        }
        ast.push(acc)
        return i
      }
      // some kind of extglob, pos is at the (
      // find the next | or )
      let i = pos + 1
      let part = new AST(null, ast)
      const parts = []
      let acc = ''
      while (i < str.length) {
        const c = str.charAt(i++)
        // still accumulate escapes at this point, but we do ignore
        // starts that are escaped
        if (escaping || c === '\\') {
          escaping = !escaping
          acc += c
          continue
        }
        if (inBrace) {
          if (i === braceStart + 1) {
            if (c === '^' || c === '!') {
              braceNeg = true
            }
          } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
            inBrace = false
          }
          acc += c
          continue
        } else if (c === '[') {
          inBrace = true
          braceStart = i
          braceNeg = false
          acc += c
          continue
        }
        if (isExtglobType(c) && str.charAt(i) === '(') {
          part.push(acc)
          acc = ''
          const ext = new AST(c, part)
          part.push(ext)
          i = AST.#parseAST(str, ext, i, opt)
          continue
        }
        if (c === '|') {
          part.push(acc)
          acc = ''
          parts.push(part)
          part = new AST(null, ast)
          continue
        }
        if (c === ')') {
          if (acc === '' && ast.#parts.length === 0) {
            ast.#emptyExt = true
          }
          part.push(acc)
          acc = ''
          ast.push(...parts, part)
          return i
        }
        acc += c
      }
      // unfinished extglob
      // if we got here, it was a malformed extglob! not an extglob, but
      // maybe something else in there.
      ast.type = null
      ast.#hasMagic = undefined
      ast.#parts = [str.substring(pos - 1)]
      return i
    }
    static fromGlob(pattern, options = {}) {
      const ast = new AST(null, undefined, options)
      AST.#parseAST(pattern, ast, 0, options)
      return ast
    }
    // returns the regular expression if there's magic, or the unescaped
    // string if not.
    toMMPattern() {
      // should only be called on root
      /* c8 ignore start */
      if (this !== this.#root) {
        return this.#root.toMMPattern()
      }
      /* c8 ignore stop */
      const glob = this.toString()
      const [re, body, hasMagic, uflag] = this.toRegExpSource()
      // if we're in nocase mode, and not nocaseMagicOnly, then we do
      // still need a regular expression if we have to case-insensitively
      // match capital/lowercase characters.
      const anyMagic =
        hasMagic ||
        this.#hasMagic ||
        (this.#options.nocase &&
          !this.#options.nocaseMagicOnly &&
          glob.toUpperCase() !== glob.toLowerCase())
      if (!anyMagic) {
        return body
      }
      const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '')
      return Object.assign(new RegExp(`^${re}$`, flags), {
        _src: re,
        _glob: glob
      })
    }
    get options() {
      return this.#options
    }
    // returns the string match, the regexp source, whether there's magic
    // in the regexp (so a regular expression is required) and whether or
    // not the uflag is needed for the regular expression (for posix classes)
    // TODO: instead of injecting the start/end at this point, just return
    // the BODY of the regexp, along with the start/end portions suitable
    // for binding the start/end in either a joined full-path makeRe context
    // (where we bind to (^|/), or a standalone matchPart context (where
    // we bind to ^, and not /).  Otherwise slashes get duped!
    //
    // In part-matching mode, the start is:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: ^(?!\.\.?$)
    // - if dots allowed or not possible: ^
    // - if dots possible and not allowed: ^(?!\.)
    // end is:
    // - if not isEnd(): nothing
    // - else: $
    //
    // In full-path matching mode, we put the slash at the START of the
    // pattern, so start is:
    // - if first pattern: same as part-matching mode
    // - if not isStart(): nothing
    // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
    // - if dots allowed or not possible: /
    // - if dots possible and not allowed: /(?!\.)
    // end is:
    // - if last pattern, same as part-matching mode
    // - else nothing
    //
    // Always put the (?:$|/) on negated tails, though, because that has to be
    // there to bind the end of the negated pattern portion, and it's easier to
    // just stick it in now rather than try to inject it later in the middle of
    // the pattern.
    //
    // We can just always return the same end, and leave it up to the caller
    // to know whether it's going to be used joined or in parts.
    // And, if the start is adjusted slightly, can do the same there:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
    // - if dots allowed or not possible: (?:/|^)
    // - if dots possible and not allowed: (?:/|^)(?!\.)
    //
    // But it's better to have a simpler binding without a conditional, for
    // performance, so probably better to return both start options.
    //
    // Then the caller just ignores the end if it's not the first pattern,
    // and the start always gets applied.
    //
    // But that's always going to be $ if it's the ending pattern, or nothing,
    // so the caller can just attach $ at the end of the pattern when building.
    //
    // So the todo is:
    // - better detect what kind of start is needed
    // - return both flavors of starting pattern
    // - attach $ at the end of the pattern when creating the actual RegExp
    //
    // Ah, but wait, no, that all only applies to the root when the first pattern
    // is not an extglob. If the first pattern IS an extglob, then we need all
    // that dot prevention biz to live in the extglob portions, because eg
    // +(*|.x*) can match .xy but not .yx.
    //
    // So, return the two flavors if it's #root and the first child is not an
    // AST, otherwise leave it to the child AST to handle it, and there,
    // use the (?:^|/) style of start binding.
    //
    // Even simplified further:
    // - Since the start for a join is eg /(?!\.) and the start for a part
    // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
    // or start or whatever) and prepend ^ or / at the Regexp construction.
    toRegExpSource(allowDot) {
      const dot = allowDot ?? !!this.#options.dot
      if (this.#root === this) {
        this.#fillNegs()
      }
      if (!this.type) {
        const noEmpty = this.isStart() && this.isEnd()
        const src = this.#parts
          .map(p => {
            const [re, _, hasMagic, uflag] =
              typeof p === 'string'
                ? AST.#parseGlob(p, this.#hasMagic, noEmpty)
                : p.toRegExpSource(allowDot)
            this.#hasMagic = this.#hasMagic || hasMagic
            this.#uflag = this.#uflag || uflag
            return re
          })
          .join('')
        let start = ''
        if (this.isStart()) {
          if (typeof this.#parts[0] === 'string') {
            // this is the string that will match the start of the pattern,
            // so we need to protect against dots and such.
            // '.' and '..' cannot match unless the pattern is that exactly,
            // even if it starts with . or dot:true is set.
            const dotTravAllowed =
              this.#parts.length === 1 && justDots.has(this.#parts[0])
            if (!dotTravAllowed) {
              const aps = addPatternStart
              // check if we have a possibility of matching . or ..,
              // and prevent that.
              const needNoTrav =
                // dots are allowed, and the pattern starts with [ or .
                (dot && aps.has(src.charAt(0))) ||
                // the pattern starts with \., and then [ or .
                (src.startsWith('\\.') && aps.has(src.charAt(2))) ||
                // the pattern starts with \.\., and then [ or .
                (src.startsWith('\\.\\.') && aps.has(src.charAt(4)))
              // no need to prevent dots if it can't match a dot, or if a
              // sub-pattern will be preventing it anyway.
              const needNoDot = !dot && !allowDot && aps.has(src.charAt(0))
              start = needNoTrav
                ? startNoTraversal
                : needNoDot
                  ? startNoDot
                  : ''
            }
          }
        }
        // append the "end of path portion" pattern to negation tails
        let end = ''
        if (
          this.isEnd() &&
          this.#root.#filledNegs &&
          this.#parent?.type === '!'
        ) {
          end = '(?:$|\\/)'
        }
        const final = start + src + end
        return [
          final,
          (0, unescape_js_1.unescape)(src),
          (this.#hasMagic = !!this.#hasMagic),
          this.#uflag
        ]
      }
      // We need to calculate the body *twice* if it's a repeat pattern
      // at the start, once in nodot mode, then again in dot mode, so a
      // pattern like *(?) can match 'x.y'
      const repeated = this.type === '*' || this.type === '+'
      // some kind of extglob
      const start = this.type === '!' ? '(?:(?!(?:' : '(?:'
      let body = this.#partsToRegExp(dot)
      if (this.isStart() && this.isEnd() && !body && this.type !== '!') {
        // invalid extglob, has to at least be *something* present, if it's
        // the entire path portion.
        const s = this.toString()
        this.#parts = [s]
        this.type = null
        this.#hasMagic = undefined
        return [s, (0, unescape_js_1.unescape)(this.toString()), false, false]
      }
      // XXX abstract out this map method
      let bodyDotAllowed =
        !repeated || allowDot || dot || !startNoDot
          ? ''
          : this.#partsToRegExp(true)
      if (bodyDotAllowed === body) {
        bodyDotAllowed = ''
      }
      if (bodyDotAllowed) {
        body = `(?:${body})(?:${bodyDotAllowed})*?`
      }
      // an empty !() is exactly equivalent to a starNoEmpty
      let final = ''
      if (this.type === '!' && this.#emptyExt) {
        final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty
      } else {
        const close =
          this.type === '!'
            ? // !() must match something,but !(x) can match ''
              '))' +
              (this.isStart() && !dot && !allowDot ? startNoDot : '') +
              star +
              ')'
            : this.type === '@'
              ? ')'
              : this.type === '?'
                ? ')?'
                : this.type === '+' && bodyDotAllowed
                  ? ')'
                  : this.type === '*' && bodyDotAllowed
                    ? `)?`
                    : `)${this.type}`
        final = start + body + close
      }
      return [
        final,
        (0, unescape_js_1.unescape)(body),
        (this.#hasMagic = !!this.#hasMagic),
        this.#uflag
      ]
    }
    #partsToRegExp(dot) {
      return this.#parts
        .map(p => {
          // extglob ASTs should only contain parent ASTs
          /* c8 ignore start */
          if (typeof p === 'string') {
            throw new Error('string type in extglob ast??')
          }
          /* c8 ignore stop */
          // can ignore hasMagic, because extglobs are already always magic
          const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot)
          this.#uflag = this.#uflag || uflag
          return re
        })
        .filter(p => !(this.isStart() && this.isEnd()) || !!p)
        .join('|')
    }
    static #parseGlob(glob, hasMagic, noEmpty = false) {
      let escaping = false
      let re = ''
      let uflag = false
      for (let i = 0; i < glob.length; i++) {
        const c = glob.charAt(i)
        if (escaping) {
          escaping = false
          re += (reSpecials.has(c) ? '\\' : '') + c
          continue
        }
        if (c === '\\') {
          if (i === glob.length - 1) {
            re += '\\\\'
          } else {
            escaping = true
          }
          continue
        }
        if (c === '[') {
          const [src, needUflag, consumed, magic] = (0,
          brace_expressions_js_1.parseClass)(glob, i)
          if (consumed) {
            re += src
            uflag = uflag || needUflag
            i += consumed - 1
            hasMagic = hasMagic || magic
            continue
          }
        }
        if (c === '*') {
          if (noEmpty && glob === '*') {
            re += starNoEmpty
          } else {
            re += star
          }
          hasMagic = true
          continue
        }
        if (c === '?') {
          re += qmark
          hasMagic = true
          continue
        }
        re += regExpEscape(c)
      }
      return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag]
    }
  }
  ast.AST = AST
  return ast
}

const _escape = {}

let hasRequired_escape
function require_escape() {
  if (hasRequired_escape) {
    return _escape
  }
  hasRequired_escape = 1
  Object.defineProperty(_escape, '__esModule', {
    value: true
  })
  _escape.escape = void 0
  /**
   * Escape all magic characters in a glob pattern.
   *
   * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}
   * option is used, then characters are escaped by wrapping in `[]`, because
   * a magic character wrapped in a character class can only be satisfied by
   * that exact character.  In this mode, `\` is _not_ escaped, because it is
   * not interpreted as a magic character, but instead as a path separator.
   */
  const escape = (s, { windowsPathsNoEscape = false } = {}) => {
    // don't need to escape +@! because we escape the parens
    // that make those magic, and escaping ! as [!] isn't valid,
    // because [!]] is a valid glob class meaning not ']'.
    return windowsPathsNoEscape
      ? s.replace(/[?*()[\]]/g, '[$&]')
      : s.replace(/[?*()[\]\\]/g, '\\$&')
  }
  _escape.escape = escape
  return _escape
}

let hasRequiredCommonjs$3
function requireCommonjs$3() {
  if (hasRequiredCommonjs$3) {
    return commonjs$4
  }
  hasRequiredCommonjs$3 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.unescape =
      exports.escape =
      exports.AST =
      exports.Minimatch =
      exports.match =
      exports.makeRe =
      exports.braceExpand =
      exports.defaults =
      exports.filter =
      exports.GLOBSTAR =
      exports.sep =
      exports.minimatch =
        void 0
    const brace_expansion_1 = requireCommonjs$4()
    const assert_valid_pattern_js_1 = requireAssertValidPattern()
    const ast_js_1 = requireAst()
    const escape_js_1 = require_escape()
    const unescape_js_1 = require_unescape()
    const minimatch = (p, pattern, options = {}) => {
      ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
      // shortcut: comments match nothing.
      if (!options.nocomment && pattern.charAt(0) === '#') {
        return false
      }
      return new Minimatch(pattern, options).match(p)
    }
    exports.minimatch = minimatch
    // Optimized checking for the most common glob patterns.
    const starDotExtRE = /^\*+([^+@!?*[(]*)$/
    const starDotExtTest = ext => f => !f.startsWith('.') && f.endsWith(ext)
    const starDotExtTestDot = ext => f => f.endsWith(ext)
    const starDotExtTestNocase = ext => {
      ext = ext.toLowerCase()
      return f => !f.startsWith('.') && f.toLowerCase().endsWith(ext)
    }
    const starDotExtTestNocaseDot = ext => {
      ext = ext.toLowerCase()
      return f => f.toLowerCase().endsWith(ext)
    }
    const starDotStarRE = /^\*+\.\*+$/
    const starDotStarTest = f => !f.startsWith('.') && f.includes('.')
    const starDotStarTestDot = f => f !== '.' && f !== '..' && f.includes('.')
    const dotStarRE = /^\.\*+$/
    const dotStarTest = f => f !== '.' && f !== '..' && f.startsWith('.')
    const starRE = /^\*+$/
    const starTest = f => f.length !== 0 && !f.startsWith('.')
    const starTestDot = f => f.length !== 0 && f !== '.' && f !== '..'
    const qmarksRE = /^\?+([^+@!?*[(]*)?$/
    const qmarksTestNocase = ([$0, ext = '']) => {
      const noext = qmarksTestNoExt([$0])
      if (!ext) {
        return noext
      }
      ext = ext.toLowerCase()
      return f => noext(f) && f.toLowerCase().endsWith(ext)
    }
    const qmarksTestNocaseDot = ([$0, ext = '']) => {
      const noext = qmarksTestNoExtDot([$0])
      if (!ext) {
        return noext
      }
      ext = ext.toLowerCase()
      return f => noext(f) && f.toLowerCase().endsWith(ext)
    }
    const qmarksTestDot = ([$0, ext = '']) => {
      const noext = qmarksTestNoExtDot([$0])
      return !ext ? noext : f => noext(f) && f.endsWith(ext)
    }
    const qmarksTest = ([$0, ext = '']) => {
      const noext = qmarksTestNoExt([$0])
      return !ext ? noext : f => noext(f) && f.endsWith(ext)
    }
    const qmarksTestNoExt = ([$0]) => {
      const len = $0.length
      return f => f.length === len && !f.startsWith('.')
    }
    const qmarksTestNoExtDot = ([$0]) => {
      const len = $0.length
      return f => f.length === len && f !== '.' && f !== '..'
    }
    /* c8 ignore start */
    const defaultPlatform =
      typeof process === 'object' && process
        ? (typeof process.env === 'object' &&
            process.env &&
            process.env.__MINIMATCH_TESTING_PLATFORM__) ||
          process.platform
        : 'posix'
    const path = {
      win32: {
        sep: '\\'
      },
      posix: {
        sep: '/'
      }
    }
    /* c8 ignore stop */
    exports.sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep
    exports.minimatch.sep = exports.sep
    exports.GLOBSTAR = Symbol('globstar **')
    exports.minimatch.GLOBSTAR = exports.GLOBSTAR
    // any single thing other than /
    // don't need to escape / when using new RegExp()
    const qmark = '[^/]'
    // * => any number of characters
    const star = qmark + '*?'
    // ** when dots are allowed.  Anything goes, except .. and .
    // not (^ or / followed by one or two dots followed by $ or /),
    // followed by anything, any number of times.
    const twoStarDot = '(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?'
    // not a ^ or / followed by a dot,
    // followed by anything, any number of times.
    const twoStarNoDot = '(?:(?!(?:\\/|^)\\.).)*?'
    const filter =
      (pattern, options = {}) =>
      p =>
        (0, exports.minimatch)(p, pattern, options)
    exports.filter = filter
    exports.minimatch.filter = exports.filter
    const ext = (a, b = {}) => Object.assign({}, a, b)
    const defaults = def => {
      if (!def || typeof def !== 'object' || !Object.keys(def).length) {
        return exports.minimatch
      }
      const orig = exports.minimatch
      const m = (p, pattern, options = {}) =>
        orig(p, pattern, ext(def, options))
      return Object.assign(m, {
        Minimatch: class Minimatch extends orig.Minimatch {
          constructor(pattern, options = {}) {
            super(pattern, ext(def, options))
          }
          static defaults(options) {
            return orig.defaults(ext(def, options)).Minimatch
          }
        },
        AST: class AST extends orig.AST {
          /* c8 ignore start */
          constructor(type, parent, options = {}) {
            super(type, parent, ext(def, options))
          }
          /* c8 ignore stop */
          static fromGlob(pattern, options = {}) {
            return orig.AST.fromGlob(pattern, ext(def, options))
          }
        },
        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),
        escape: (s, options = {}) => orig.escape(s, ext(def, options)),
        filter: (pattern, options = {}) =>
          orig.filter(pattern, ext(def, options)),
        defaults: options => orig.defaults(ext(def, options)),
        makeRe: (pattern, options = {}) =>
          orig.makeRe(pattern, ext(def, options)),
        braceExpand: (pattern, options = {}) =>
          orig.braceExpand(pattern, ext(def, options)),
        match: (list, pattern, options = {}) =>
          orig.match(list, pattern, ext(def, options)),
        sep: orig.sep,
        GLOBSTAR: exports.GLOBSTAR
      })
    }
    exports.defaults = defaults
    exports.minimatch.defaults = exports.defaults
    // Brace expansion:
    // a{b,c}d -> abd acd
    // a{b,}c -> abc ac
    // a{0..3}d -> a0d a1d a2d a3d
    // a{b,c{d,e}f}g -> abg acdfg acefg
    // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
    //
    // Invalid sets are not expanded.
    // a{2..}b -> a{2..}b
    // a{b}c -> a{b}c
    const braceExpand = (pattern, options = {}) => {
      ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
      // Thanks to Yeting Li <https://github.com/yetingli> for
      // improving this regexp to avoid a ReDOS vulnerability.
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        // shortcut. no need to expand.
        return [pattern]
      }
      return (0, brace_expansion_1.expand)(pattern)
    }
    exports.braceExpand = braceExpand
    exports.minimatch.braceExpand = exports.braceExpand
    // parse a component of the expanded set.
    // At this point, no pattern may contain "/" in it
    // so we're going to return a 2d array, where each entry is the full
    // pattern, split on '/', and then turned into a regular expression.
    // A regexp is made at the end which joins each array with an
    // escaped /, and another full one which joins each regexp with |.
    //
    // Following the lead of Bash 4.1, note that "**" only has special meaning
    // when it is the *only* thing in a path portion.  Otherwise, any series
    // of * is equivalent to a single *.  Globstar behavior is enabled by
    // default, and can be disabled by setting options.noglobstar.
    const makeRe = (pattern, options = {}) =>
      new Minimatch(pattern, options).makeRe()
    exports.makeRe = makeRe
    exports.minimatch.makeRe = exports.makeRe
    const match = (list, pattern, options = {}) => {
      const mm = new Minimatch(pattern, options)
      list = list.filter(f => mm.match(f))
      if (mm.options.nonull && !list.length) {
        list.push(pattern)
      }
      return list
    }
    exports.match = match
    exports.minimatch.match = exports.match
    // replace stuff like \* with *
    const globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/
    const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
    class Minimatch {
      options
      set;
      pattern
      windowsPathsNoEscape
      nonegate
      negate
      comment
      empty
      preserveMultipleSlashes
      partial
      globSet
      globParts
      nocase
      isWindows
      platform
      windowsNoMagicRoot
      regexp
      constructor(pattern, options = {}) {
        ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
        options = options || {}
        this.options = options
        this.pattern = pattern
        this.platform = options.platform || defaultPlatform
        this.isWindows = this.platform === 'win32'
        this.windowsPathsNoEscape =
          !!options.windowsPathsNoEscape || options.allowWindowsEscape === false
        if (this.windowsPathsNoEscape) {
          this.pattern = this.pattern.replace(/\\/g, '/')
        }
        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes
        this.regexp = null
        this.negate = false
        this.nonegate = !!options.nonegate
        this.comment = false
        this.empty = false
        this.partial = !!options.partial
        this.nocase = !!this.options.nocase
        this.windowsNoMagicRoot =
          options.windowsNoMagicRoot !== undefined
            ? options.windowsNoMagicRoot
            : !!(this.isWindows && this.nocase)
        this.globSet = []
        this.globParts = []
        this.set = []
        // make the set of regexps etc.
        this.make()
      }
      hasMagic() {
        if (this.options.magicalBraces && this.set.length > 1) {
          return true
        }
        for (const pattern of this.set) {
          for (const part of pattern) {
            if (typeof part !== 'string') {
              return true
            }
          }
        }
        return false
      }
      debug(..._) {}
      make() {
        const pattern = this.pattern
        const options = this.options
        // empty patterns and comments match nothing.
        if (!options.nocomment && pattern.charAt(0) === '#') {
          this.comment = true
          return
        }
        if (!pattern) {
          this.empty = true
          return
        }
        // step 1: figure out negation, etc.
        this.parseNegate()
        // step 2: expand braces
        this.globSet = [...new Set(this.braceExpand())]
        if (options.debug) {
          this.debug = (...args) => console.error(...args)
        }
        this.debug(this.pattern, this.globSet)
        // step 3: now we have a set, so turn each one into a series of
        // path-portion matching patterns.
        // These will be regexps, except in the case of "**", which is
        // set to the GLOBSTAR object for globstar behavior,
        // and will not contain any / characters
        //
        // First, we preprocess to make the glob pattern sets a bit simpler
        // and deduped.  There are some perf-killing patterns that can cause
        // problems with a glob walk, but we can simplify them down a bit.
        const rawGlobParts = this.globSet.map(s => this.slashSplit(s))
        this.globParts = this.preprocess(rawGlobParts)
        this.debug(this.pattern, this.globParts)
        // glob --> regexps
        let set = this.globParts.map((s, _, __) => {
          if (this.isWindows && this.windowsNoMagicRoot) {
            // check if it's a drive or unc path.
            const isUNC =
              s[0] === '' &&
              s[1] === '' &&
              (s[2] === '?' || !globMagic.test(s[2])) &&
              !globMagic.test(s[3])
            const isDrive = /^[a-z]:/i.test(s[0])
            if (isUNC) {
              return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))]
            } else if (isDrive) {
              return [s[0], ...s.slice(1).map(ss => this.parse(ss))]
            }
          }
          return s.map(ss => this.parse(ss))
        })
        this.debug(this.pattern, set)
        // filter out everything that didn't compile properly.
        this.set = set.filter(s => s.indexOf(false) === -1)
        // do not treat the ? in UNC paths as magic
        if (this.isWindows) {
          for (let i = 0; i < this.set.length; i++) {
            const p = this.set[i]
            if (
              p[0] === '' &&
              p[1] === '' &&
              this.globParts[i][2] === '?' &&
              typeof p[3] === 'string' &&
              /^[a-z]:$/i.test(p[3])
            ) {
              p[2] = '?'
            }
          }
        }
        this.debug(this.pattern, this.set)
      }
      // various transforms to equivalent pattern sets that are
      // faster to process in a filesystem walk.  The goal is to
      // eliminate what we can, and push all ** patterns as far
      // to the right as possible, even if it increases the number
      // of patterns that we have to process.
      preprocess(globParts) {
        // if we're not in globstar mode, then turn all ** into *
        if (this.options.noglobstar) {
          for (let i = 0; i < globParts.length; i++) {
            for (let j = 0; j < globParts[i].length; j++) {
              if (globParts[i][j] === '**') {
                globParts[i][j] = '*'
              }
            }
          }
        }
        const { optimizationLevel = 1 } = this.options
        if (optimizationLevel >= 2) {
          // aggressive optimization for the purpose of fs walking
          globParts = this.firstPhasePreProcess(globParts)
          globParts = this.secondPhasePreProcess(globParts)
        } else if (optimizationLevel >= 1) {
          // just basic optimizations to remove some .. parts
          globParts = this.levelOneOptimize(globParts)
        } else {
          // just collapse multiple ** portions into one
          globParts = this.adjascentGlobstarOptimize(globParts)
        }
        return globParts
      }
      // just get rid of adjascent ** portions
      adjascentGlobstarOptimize(globParts) {
        return globParts.map(parts => {
          let gs = -1
          while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
            let i = gs
            while (parts[i + 1] === '**') {
              i++
            }
            if (i !== gs) {
              parts.splice(gs, i - gs)
            }
          }
          return parts
        })
      }
      // get rid of adjascent ** and resolve .. portions
      levelOneOptimize(globParts) {
        return globParts.map(parts => {
          parts = parts.reduce((set, part) => {
            const prev = set[set.length - 1]
            if (part === '**' && prev === '**') {
              return set
            }
            if (part === '..') {
              if (prev && prev !== '..' && prev !== '.' && prev !== '**') {
                set.pop()
                return set
              }
            }
            set.push(part)
            return set
          }, [])
          return parts.length === 0 ? [''] : parts
        })
      }
      levelTwoFileOptimize(parts) {
        if (!Array.isArray(parts)) {
          parts = this.slashSplit(parts)
        }
        let didSomething = false
        do {
          didSomething = false
          // <pre>/<e>/<rest> -> <pre>/<rest>
          if (!this.preserveMultipleSlashes) {
            for (let i = 1; i < parts.length - 1; i++) {
              const p = parts[i]
              // don't squeeze out UNC patterns
              if (i === 1 && p === '' && parts[0] === '') {
                continue
              }
              if (p === '.' || p === '') {
                didSomething = true
                parts.splice(i, 1)
                i--
              }
            }
            if (
              parts[0] === '.' &&
              parts.length === 2 &&
              (parts[1] === '.' || parts[1] === '')
            ) {
              didSomething = true
              parts.pop()
            }
          }
          // <pre>/<p>/../<rest> -> <pre>/<rest>
          let dd = 0
          while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
            const p = parts[dd - 1]
            if (p && p !== '.' && p !== '..' && p !== '**') {
              didSomething = true
              parts.splice(dd - 1, 2)
              dd -= 2
            }
          }
        } while (didSomething)
        return parts.length === 0 ? [''] : parts
      }
      // First phase: single-pattern processing
      // <pre> is 1 or more portions
      // <rest> is 1 or more portions
      // <p> is any portion other than ., .., '', or **
      // <e> is . or ''
      //
      // **/.. is *brutal* for filesystem walking performance, because
      // it effectively resets the recursive walk each time it occurs,
      // and ** cannot be reduced out by a .. pattern part like a regexp
      // or most strings (other than .., ., and '') can be.
      //
      // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
      // <pre>/<e>/<rest> -> <pre>/<rest>
      // <pre>/<p>/../<rest> -> <pre>/<rest>
      // **/**/<rest> -> **/<rest>
      //
      // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
      // this WOULD be allowed if ** did follow symlinks, or * didn't
      firstPhasePreProcess(globParts) {
        let didSomething = false
        do {
          didSomething = false
          // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
          for (let parts of globParts) {
            let gs = -1
            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
              let gss = gs
              while (parts[gss + 1] === '**') {
                // <pre>/**/**/<rest> -> <pre>/**/<rest>
                gss++
              }
              // eg, if gs is 2 and gss is 4, that means we have 3 **
              // parts, and can remove 2 of them.
              if (gss > gs) {
                parts.splice(gs + 1, gss - gs)
              }
              let next = parts[gs + 1]
              const p = parts[gs + 2]
              const p2 = parts[gs + 3]
              if (next !== '..') {
                continue
              }
              if (
                !p ||
                p === '.' ||
                p === '..' ||
                !p2 ||
                p2 === '.' ||
                p2 === '..'
              ) {
                continue
              }
              didSomething = true
              // edit parts in place, and push the new one
              parts.splice(gs, 1)
              const other = parts.slice(0)
              other[gs] = '**'
              globParts.push(other)
              gs--
            }
            // <pre>/<e>/<rest> -> <pre>/<rest>
            if (!this.preserveMultipleSlashes) {
              for (let i = 1; i < parts.length - 1; i++) {
                const p = parts[i]
                // don't squeeze out UNC patterns
                if (i === 1 && p === '' && parts[0] === '') {
                  continue
                }
                if (p === '.' || p === '') {
                  didSomething = true
                  parts.splice(i, 1)
                  i--
                }
              }
              if (
                parts[0] === '.' &&
                parts.length === 2 &&
                (parts[1] === '.' || parts[1] === '')
              ) {
                didSomething = true
                parts.pop()
              }
            }
            // <pre>/<p>/../<rest> -> <pre>/<rest>
            let dd = 0
            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
              const p = parts[dd - 1]
              if (p && p !== '.' && p !== '..' && p !== '**') {
                didSomething = true
                const needDot = dd === 1 && parts[dd + 1] === '**'
                const splin = needDot ? ['.'] : []
                parts.splice(dd - 1, 2, ...splin)
                if (parts.length === 0) {
                  parts.push('')
                }
                dd -= 2
              }
            }
          }
        } while (didSomething)
        return globParts
      }
      // second phase: multi-pattern dedupes
      // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
      // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
      // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
      //
      // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
      // ^-- not valid because ** doens't follow symlinks
      secondPhasePreProcess(globParts) {
        for (let i = 0; i < globParts.length - 1; i++) {
          for (let j = i + 1; j < globParts.length; j++) {
            const matched = this.partsMatch(
              globParts[i],
              globParts[j],
              !this.preserveMultipleSlashes
            )
            if (matched) {
              globParts[i] = []
              globParts[j] = matched
              break
            }
          }
        }
        return globParts.filter(gs => gs.length)
      }
      partsMatch(a, b, emptyGSMatch = false) {
        let ai = 0
        let bi = 0
        let result = []
        let which = ''
        while (ai < a.length && bi < b.length) {
          if (a[ai] === b[bi]) {
            result.push(which === 'b' ? b[bi] : a[ai])
            ai++
            bi++
          } else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {
            result.push(a[ai])
            ai++
          } else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {
            result.push(b[bi])
            bi++
          } else if (
            a[ai] === '*' &&
            b[bi] &&
            (this.options.dot || !b[bi].startsWith('.')) &&
            b[bi] !== '**'
          ) {
            if (which === 'b') {
              return false
            }
            which = 'a'
            result.push(a[ai])
            ai++
            bi++
          } else if (
            b[bi] === '*' &&
            a[ai] &&
            (this.options.dot || !a[ai].startsWith('.')) &&
            a[ai] !== '**'
          ) {
            if (which === 'a') {
              return false
            }
            which = 'b'
            result.push(b[bi])
            ai++
            bi++
          } else {
            return false
          }
        }
        // if we fall out of the loop, it means they two are identical
        // as long as their lengths match
        return a.length === b.length && result
      }
      parseNegate() {
        if (this.nonegate) {
          return
        }
        const pattern = this.pattern
        let negate = false
        let negateOffset = 0
        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {
          negate = !negate
          negateOffset++
        }
        if (negateOffset) {
          this.pattern = pattern.slice(negateOffset)
        }
        this.negate = negate
      }
      // set partial to true to test if, for example,
      // "/a/b" matches the start of "/*/b/*/d"
      // Partial means, if you run out of file before you run
      // out of pattern, then that's fine, as long as all
      // the parts match.
      matchOne(file, pattern, partial = false) {
        const options = this.options
        // UNC paths like //?/X:/... can match X:/... and vice versa
        // Drive letters in absolute drive or unc paths are always compared
        // case-insensitively.
        if (this.isWindows) {
          const fileDrive =
            typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0])
          const fileUNC =
            !fileDrive &&
            file[0] === '' &&
            file[1] === '' &&
            file[2] === '?' &&
            /^[a-z]:$/i.test(file[3])
          const patternDrive =
            typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0])
          const patternUNC =
            !patternDrive &&
            pattern[0] === '' &&
            pattern[1] === '' &&
            pattern[2] === '?' &&
            typeof pattern[3] === 'string' &&
            /^[a-z]:$/i.test(pattern[3])
          const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined
          const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined
          if (typeof fdi === 'number' && typeof pdi === 'number') {
            const [fd, pd] = [file[fdi], pattern[pdi]]
            if (fd.toLowerCase() === pd.toLowerCase()) {
              pattern[pdi] = fd
              if (pdi > fdi) {
                pattern = pattern.slice(pdi)
              } else if (fdi > pdi) {
                file = file.slice(fdi)
              }
            }
          }
        }
        // resolve and reduce . and .. portions in the file as well.
        // dont' need to do the second phase, because it's only one string[]
        const { optimizationLevel = 1 } = this.options
        if (optimizationLevel >= 2) {
          file = this.levelTwoFileOptimize(file)
        }
        this.debug('matchOne', this, {
          file,
          pattern
        })
        this.debug('matchOne', file.length, pattern.length)
        for (
          var fi = 0, pi = 0, fl = file.length, pl = pattern.length;
          fi < fl && pi < pl;
          fi++, pi++
        ) {
          this.debug('matchOne loop')
          const p = pattern[pi]
          const f = file[fi]
          this.debug(pattern, p, f)
          // should be impossible.
          // some invalid regexp stuff in the set.
          /* c8 ignore start */
          if (p === false) {
            return false
          }
          /* c8 ignore stop */
          if (p === exports.GLOBSTAR) {
            this.debug('GLOBSTAR', [pattern, p, f])
            // "**"
            // a/**/b/**/c would match the following:
            // a/b/x/y/z/c
            // a/x/y/z/b/c
            // a/b/x/b/x/c
            // a/b/c
            // To do this, take the rest of the pattern after
            // the **, and see if it would match the file remainder.
            // If so, return success.
            // If not, the ** "swallows" a segment, and try again.
            // This is recursively awful.
            //
            // a/**/b/**/c matching a/b/x/y/z/c
            // - a matches a
            // - doublestar
            //   - matchOne(b/x/y/z/c, b/**/c)
            //     - b matches b
            //     - doublestar
            //       - matchOne(x/y/z/c, c) -> no
            //       - matchOne(y/z/c, c) -> no
            //       - matchOne(z/c, c) -> no
            //       - matchOne(c, c) yes, hit
            let fr = fi
            const pr = pi + 1
            if (pr === pl) {
              this.debug('** at the end')
              // a ** at the end will just swallow the rest.
              // We have found a match.
              // however, it will not swallow /.x, unless
              // options.dot is set.
              // . and .. are *never* matched by **, for explosively
              // exponential reasons.
              for (; fi < fl; fi++) {
                if (
                  file[fi] === '.' ||
                  file[fi] === '..' ||
                  (!options.dot && file[fi].charAt(0) === '.')
                ) {
                  return false
                }
              }
              return true
            }
            // ok, let's see if we can swallow whatever we can.
            while (fr < fl) {
              const swallowee = file[fr]
              this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)
              // XXX remove this slice.  Just pass the start index.
              if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                this.debug('globstar found match!', fr, fl, swallowee)
                // found a match.
                return true
              } else {
                // can't swallow "." or ".." ever.
                // can only swallow ".foo" when explicitly asked.
                if (
                  swallowee === '.' ||
                  swallowee === '..' ||
                  (!options.dot && swallowee.charAt(0) === '.')
                ) {
                  this.debug('dot detected!', file, fr, pattern, pr)
                  break
                }
                // ** swallows a segment, and continue.
                this.debug('globstar swallow a segment, and continue')
                fr++
              }
            }
            // no match was found.
            // However, in partial mode, we can't say this is necessarily over.
            /* c8 ignore start */
            if (partial) {
              // ran out of file
              this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
              if (fr === fl) {
                return true
              }
            }
            /* c8 ignore stop */
            return false
          }
          // something other than **
          // non-magic patterns just have to match exactly
          // patterns with magic have been turned into regexps.
          let hit
          if (typeof p === 'string') {
            hit = f === p
            this.debug('string match', p, f, hit)
          } else {
            hit = p.test(f)
            this.debug('pattern match', p, f, hit)
          }
          if (!hit) {
            return false
          }
        }
        // Note: ending in / means that we'll get a final ""
        // at the end of the pattern.  This can only match a
        // corresponding "" at the end of the file.
        // If the file ends in /, then it can only match a
        // a pattern that ends in /, unless the pattern just
        // doesn't have any more for it. But, a/b/ should *not*
        // match "a/b/*", even though "" matches against the
        // [^/]*? pattern, except in partial mode, where it might
        // simply not be reached yet.
        // However, a/b/ should still satisfy a/*
        // now either we fell off the end of the pattern, or we're done.
        if (fi === fl && pi === pl) {
          // ran out of pattern and filename at the same time.
          // an exact hit!
          return true
        } else if (fi === fl) {
          // ran out of file, but still had pattern left.
          // this is ok if we're doing the match as part of
          // a glob fs traversal.
          return partial
        } else if (pi === pl) {
          // ran out of pattern, still have file left.
          // this is only acceptable if we're on the very last
          // empty segment of a file with a trailing slash.
          // a/* should match a/b/
          return fi === fl - 1 && file[fi] === ''
          /* c8 ignore start */
        } else {
          // should be unreachable.
          throw new Error('wtf?')
        }
        /* c8 ignore stop */
      }
      braceExpand() {
        return (0, exports.braceExpand)(this.pattern, this.options)
      }
      parse(pattern) {
        ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
        const options = this.options
        // shortcuts
        if (pattern === '**') {
          return exports.GLOBSTAR
        }
        if (pattern === '') {
          return ''
        }
        // far and away, the most common glob pattern parts are
        // *, *.*, and *.<ext>  Add a fast check method for those.
        let m
        let fastTest = null
        if ((m = pattern.match(starRE))) {
          fastTest = options.dot ? starTestDot : starTest
        } else if ((m = pattern.match(starDotExtRE))) {
          fastTest = (
            options.nocase
              ? options.dot
                ? starDotExtTestNocaseDot
                : starDotExtTestNocase
              : options.dot
                ? starDotExtTestDot
                : starDotExtTest
          )(m[1])
        } else if ((m = pattern.match(qmarksRE))) {
          fastTest = (
            options.nocase
              ? options.dot
                ? qmarksTestNocaseDot
                : qmarksTestNocase
              : options.dot
                ? qmarksTestDot
                : qmarksTest
          )(m)
        } else if ((m = pattern.match(starDotStarRE))) {
          fastTest = options.dot ? starDotStarTestDot : starDotStarTest
        } else if ((m = pattern.match(dotStarRE))) {
          fastTest = dotStarTest
        }
        const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern()
        if (fastTest && typeof re === 'object') {
          // Avoids overriding in frozen environments
          Reflect.defineProperty(re, 'test', {
            value: fastTest
          })
        }
        return re
      }
      makeRe() {
        if (this.regexp || this.regexp === false) {
          return this.regexp
        }
        // at this point, this.set is a 2d array of partial
        // pattern strings, or "**".
        //
        // It's better to use .match().  This function shouldn't
        // be used, really, but it's pretty convenient sometimes,
        // when you just want to work with a regex.
        const set = this.set
        if (!set.length) {
          this.regexp = false
          return this.regexp
        }
        const options = this.options
        const twoStar = options.noglobstar
          ? star
          : options.dot
            ? twoStarDot
            : twoStarNoDot
        const flags = new Set(options.nocase ? ['i'] : [])
        // regexpify non-globstar patterns
        // if ** is only item, then we just do one twoStar
        // if ** is first, and there are more, prepend (\/|twoStar\/)? to next
        // if ** is last, append (\/twoStar|) to previous
        // if ** is in the middle, append (\/|\/twoStar\/) to previous
        // then filter out GLOBSTAR symbols
        let re = set
          .map(pattern => {
            const pp = pattern.map(p => {
              if (p instanceof RegExp) {
                for (const f of p.flags.split('')) {
                  flags.add(f)
                }
              }
              return typeof p === 'string'
                ? regExpEscape(p)
                : p === exports.GLOBSTAR
                  ? exports.GLOBSTAR
                  : p._src
            })
            pp.forEach((p, i) => {
              const next = pp[i + 1]
              const prev = pp[i - 1]
              if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {
                return
              }
              if (prev === undefined) {
                if (next !== undefined && next !== exports.GLOBSTAR) {
                  pp[i + 1] = '(?:\\/|' + twoStar + '\\/)?' + next
                } else {
                  pp[i] = twoStar
                }
              } else if (next === undefined) {
                pp[i - 1] = prev + '(?:\\/|' + twoStar + ')?'
              } else if (next !== exports.GLOBSTAR) {
                pp[i - 1] = prev + '(?:\\/|\\/' + twoStar + '\\/)' + next
                pp[i + 1] = exports.GLOBSTAR
              }
            })
            return pp.filter(p => p !== exports.GLOBSTAR).join('/')
          })
          .join('|')
        // need to wrap in parens if we had more than one thing with |,
        // otherwise only the first will be anchored to ^ and the last to $
        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', '']
        // must match entire pattern
        // ending in a * or ** will make it less strict.
        re = '^' + open + re + close + '$'
        // can match anything, as long as it's not this.
        if (this.negate) {
          re = '^(?!' + re + ').+$'
        }
        try {
          this.regexp = new RegExp(re, [...flags].join(''))
          /* c8 ignore start */
        } catch (ex) {
          // should be impossible
          this.regexp = false
        }
        /* c8 ignore stop */
        return this.regexp
      }
      slashSplit(p) {
        // if p starts with // on windows, we preserve that
        // so that UNC paths aren't broken.  Otherwise, any number of
        // / characters are coalesced into one, unless
        // preserveMultipleSlashes is set to true.
        if (this.preserveMultipleSlashes) {
          return p.split('/')
        } else if (this.isWindows && /^\/\/[^/]+/.test(p)) {
          // add an extra '' for the one we lose
          return ['', ...p.split(/\/+/)]
        } else {
          return p.split(/\/+/)
        }
      }
      match(f, partial = this.partial) {
        this.debug('match', f, this.pattern)
        // short-circuit in the case of busted things.
        // comments, etc.
        if (this.comment) {
          return false
        }
        if (this.empty) {
          return f === ''
        }
        if (f === '/' && partial) {
          return true
        }
        const options = this.options
        // windows: need to use /, not \
        if (this.isWindows) {
          f = f.split('\\').join('/')
        }
        // treat the test path as a set of pathparts.
        const ff = this.slashSplit(f)
        this.debug(this.pattern, 'split', ff)
        // just ONE of the pattern sets in this.set needs to match
        // in order for it to be valid.  If negating, then just one
        // match means that we have failed.
        // Either way, return on the first hit.
        const set = this.set
        this.debug(this.pattern, 'set', set)
        // Find the basename of the path by looking for the last non-empty segment
        let filename = ff[ff.length - 1]
        if (!filename) {
          for (let i = ff.length - 2; !filename && i >= 0; i--) {
            filename = ff[i]
          }
        }
        for (let i = 0; i < set.length; i++) {
          const pattern = set[i]
          let file = ff
          if (options.matchBase && pattern.length === 1) {
            file = [filename]
          }
          const hit = this.matchOne(file, pattern, partial)
          if (hit) {
            if (options.flipNegate) {
              return true
            }
            return !this.negate
          }
        }
        // didn't get any hits.  this is success if it's a negative
        // pattern, failure otherwise.
        if (options.flipNegate) {
          return false
        }
        return this.negate
      }
      static defaults(def) {
        return exports.minimatch.defaults(def).Minimatch
      }
    }
    exports.Minimatch = Minimatch
    /* c8 ignore start */
    const ast_js_2 = requireAst()
    Object.defineProperty(exports, 'AST', {
      enumerable: true,
      get: function () {
        return ast_js_2.AST
      }
    })
    const escape_js_2 = require_escape()
    Object.defineProperty(exports, 'escape', {
      enumerable: true,
      get: function () {
        return escape_js_2.escape
      }
    })
    const unescape_js_2 = require_unescape()
    Object.defineProperty(exports, 'unescape', {
      enumerable: true,
      get: function () {
        return unescape_js_2.unescape
      }
    })
    /* c8 ignore stop */
    exports.minimatch.AST = ast_js_1.AST
    exports.minimatch.Minimatch = Minimatch
    exports.minimatch.escape = escape_js_1.escape
    exports.minimatch.unescape = unescape_js_1.unescape
  })(commonjs$4)
  return commonjs$4
}

const glob = {}

const commonjs$1 = {}

const commonjs = {}

let hasRequiredCommonjs$2
function requireCommonjs$2() {
  if (hasRequiredCommonjs$2) {
    return commonjs
  }
  hasRequiredCommonjs$2 = 1
  /**
   * @module LRUCache
   */
  Object.defineProperty(commonjs, '__esModule', {
    value: true
  })
  commonjs.LRUCache = void 0
  const perf =
    typeof performance === 'object' &&
    performance &&
    typeof performance.now === 'function'
      ? performance
      : Date
  const warned = new Set()
  /* c8 ignore start */
  const PROCESS = typeof process === 'object' && !!process ? process : {}
  /* c8 ignore start */
  const emitWarning = (msg, type, code, fn) => {
    typeof PROCESS.emitWarning === 'function'
      ? PROCESS.emitWarning(msg, type, code, fn)
      : console.error(`[${code}] ${type}: ${msg}`)
  }
  let AC = globalThis.AbortController
  let AS = globalThis.AbortSignal
  /* c8 ignore start */
  if (typeof AC === 'undefined') {
    //@ts-ignore
    AS = class AbortSignal {
      onabort
      _onabort = []
      reason
      aborted = false
      addEventListener(_, fn) {
        this._onabort.push(fn)
      }
    }
    //@ts-ignore
    AC = class AbortController {
      constructor() {
        warnACPolyfill()
      }
      signal = new AS()
      abort(reason) {
        if (this.signal.aborted) {
          return
        }
        //@ts-ignore
        this.signal.reason = reason
        //@ts-ignore
        this.signal.aborted = true
        //@ts-ignore
        for (const fn of this.signal._onabort) {
          fn(reason)
        }
        this.signal.onabort?.(reason)
      }
    }
    let printACPolyfillWarning =
      PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'
    const warnACPolyfill = () => {
      if (!printACPolyfillWarning) {
        return
      }
      printACPolyfillWarning = false
      emitWarning(
        'AbortController is not defined. If using lru-cache in ' +
          'node 14, load an AbortController polyfill from the ' +
          '`node-abort-controller` package. A minimal polyfill is ' +
          'provided for use by LRUCache.fetch(), but it should not be ' +
          'relied upon in other contexts (eg, passing it to other APIs that ' +
          'use AbortController/AbortSignal might have undesirable effects). ' +
          'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',
        'NO_ABORT_CONTROLLER',
        'ENOTSUP',
        warnACPolyfill
      )
    }
  }
  /* c8 ignore stop */
  const shouldWarn = code => !warned.has(code)
  const isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)
  /* c8 ignore start */
  // This is a little bit ridiculous, tbh.
  // The maximum array length is 2^32-1 or thereabouts on most JS impls.
  // And well before that point, you're caching the entire world, I mean,
  // that's ~32GB of just integers for the next/prev links, plus whatever
  // else to hold that many keys and values.  Just filling the memory with
  // zeroes at init time is brutal when you get that big.
  // But why not be complete?
  // Maybe in the future, these limits will have expanded.
  const getUintArray = max =>
    !isPosInt(max)
      ? null
      : max <= Math.pow(2, 8)
        ? Uint8Array
        : max <= Math.pow(2, 16)
          ? Uint16Array
          : max <= Math.pow(2, 32)
            ? Uint32Array
            : max <= Number.MAX_SAFE_INTEGER
              ? ZeroArray
              : null
  /* c8 ignore stop */
  class ZeroArray extends Array {
    constructor(size) {
      super(size)
      this.fill(0)
    }
  }
  class Stack {
    heap
    length
    // private constructor
    static #constructing = false
    static create(max) {
      const HeapCls = getUintArray(max)
      if (!HeapCls) {
        return []
      }
      Stack.#constructing = true
      const s = new Stack(max, HeapCls)
      Stack.#constructing = false
      return s
    }
    constructor(max, HeapCls) {
      /* c8 ignore start */
      if (!Stack.#constructing) {
        throw new TypeError('instantiate Stack using Stack.create(n)')
      }
      /* c8 ignore stop */
      this.heap = new HeapCls(max)
      this.length = 0
    }
    push(n) {
      this.heap[this.length++] = n
    }
    pop() {
      return this.heap[--this.length]
    }
  }
  /**
   * Default export, the thing you're using this module to get.
   *
   * The `K` and `V` types define the key and value types, respectively. The
   * optional `FC` type defines the type of the `context` object passed to
   * `cache.fetch()` and `cache.memo()`.
   *
   * Keys and values **must not** be `null` or `undefined`.
   *
   * All properties from the options object (with the exception of `max`,
   * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are
   * added as normal public members. (The listed options are read-only getters.)
   *
   * Changing any of these will alter the defaults for subsequent method calls.
   */
  class LRUCache {
    // options that cannot be changed without disaster
    #max
    #maxSize
    #dispose
    #onInsert
    #disposeAfter
    #fetchMethod
    #memoMethod
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    ttl
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    ttlResolution
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    ttlAutopurge
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    updateAgeOnGet
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    updateAgeOnHas
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    allowStale
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    noDisposeOnSet
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    noUpdateTTL
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    maxEntrySize
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    sizeCalculation
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    noDeleteOnFetchRejection
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    noDeleteOnStaleGet
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    allowStaleOnFetchAbort
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    allowStaleOnFetchRejection
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    ignoreFetchAbort
    // computed properties
    #size
    #calculatedSize
    #keyMap
    #keyList
    #valList
    #next
    #prev
    #head
    #tail
    #free
    #disposed
    #sizes
    #starts
    #ttls
    #hasDispose
    #hasFetchMethod
    #hasDisposeAfter
    #hasOnInsert
    /**
     * Do not call this method unless you need to inspect the
     * inner workings of the cache.  If anything returned by this
     * object is modified in any way, strange breakage may occur.
     *
     * These fields are private for a reason!
     *
     * @internal
     */
    static unsafeExposeInternals(c) {
      return {
        // properties
        starts: c.#starts,
        ttls: c.#ttls,
        sizes: c.#sizes,
        keyMap: c.#keyMap,
        keyList: c.#keyList,
        valList: c.#valList,
        next: c.#next,
        prev: c.#prev,
        get head() {
          return c.#head
        },
        get tail() {
          return c.#tail
        },
        free: c.#free,
        // methods
        isBackgroundFetch: p => c.#isBackgroundFetch(p),
        backgroundFetch: (k, index, options, context) =>
          c.#backgroundFetch(k, index, options, context),
        moveToTail: index => c.#moveToTail(index),
        indexes: options => c.#indexes(options),
        rindexes: options => c.#rindexes(options),
        isStale: index => c.#isStale(index)
      }
    }
    // Protected read-only members
    /**
     * {@link LRUCache.OptionsBase.max} (read-only)
     */
    get max() {
      return this.#max
    }
    /**
     * {@link LRUCache.OptionsBase.maxSize} (read-only)
     */
    get maxSize() {
      return this.#maxSize
    }
    /**
     * The total computed size of items in the cache (read-only)
     */
    get calculatedSize() {
      return this.#calculatedSize
    }
    /**
     * The number of items stored in the cache (read-only)
     */
    get size() {
      return this.#size
    }
    /**
     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
     */
    get fetchMethod() {
      return this.#fetchMethod
    }
    get memoMethod() {
      return this.#memoMethod
    }
    /**
     * {@link LRUCache.OptionsBase.dispose} (read-only)
     */
    get dispose() {
      return this.#dispose
    }
    /**
     * {@link LRUCache.OptionsBase.onInsert} (read-only)
     */
    get onInsert() {
      return this.#onInsert
    }
    /**
     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
     */
    get disposeAfter() {
      return this.#disposeAfter
    }
    constructor(options) {
      const {
        max = 0,
        ttl,
        ttlResolution = 1,
        ttlAutopurge,
        updateAgeOnGet,
        updateAgeOnHas,
        allowStale,
        dispose,
        onInsert,
        disposeAfter,
        noDisposeOnSet,
        noUpdateTTL,
        maxSize = 0,
        maxEntrySize = 0,
        sizeCalculation,
        fetchMethod,
        memoMethod,
        noDeleteOnFetchRejection,
        noDeleteOnStaleGet,
        allowStaleOnFetchRejection,
        allowStaleOnFetchAbort,
        ignoreFetchAbort
      } = options
      if (max !== 0 && !isPosInt(max)) {
        throw new TypeError('max option must be a nonnegative integer')
      }
      const UintArray = max ? getUintArray(max) : Array
      if (!UintArray) {
        throw new Error('invalid max value: ' + max)
      }
      this.#max = max
      this.#maxSize = maxSize
      this.maxEntrySize = maxEntrySize || this.#maxSize
      this.sizeCalculation = sizeCalculation
      if (this.sizeCalculation) {
        if (!this.#maxSize && !this.maxEntrySize) {
          throw new TypeError(
            'cannot set sizeCalculation without setting maxSize or maxEntrySize'
          )
        }
        if (typeof this.sizeCalculation !== 'function') {
          throw new TypeError('sizeCalculation set to non-function')
        }
      }
      if (memoMethod !== undefined && typeof memoMethod !== 'function') {
        throw new TypeError('memoMethod must be a function if defined')
      }
      this.#memoMethod = memoMethod
      if (fetchMethod !== undefined && typeof fetchMethod !== 'function') {
        throw new TypeError('fetchMethod must be a function if specified')
      }
      this.#fetchMethod = fetchMethod
      this.#hasFetchMethod = !!fetchMethod
      this.#keyMap = new Map()
      this.#keyList = new Array(max).fill(undefined)
      this.#valList = new Array(max).fill(undefined)
      this.#next = new UintArray(max)
      this.#prev = new UintArray(max)
      this.#head = 0
      this.#tail = 0
      this.#free = Stack.create(max)
      this.#size = 0
      this.#calculatedSize = 0
      if (typeof dispose === 'function') {
        this.#dispose = dispose
      }
      if (typeof onInsert === 'function') {
        this.#onInsert = onInsert
      }
      if (typeof disposeAfter === 'function') {
        this.#disposeAfter = disposeAfter
        this.#disposed = []
      } else {
        this.#disposeAfter = undefined
        this.#disposed = undefined
      }
      this.#hasDispose = !!this.#dispose
      this.#hasOnInsert = !!this.#onInsert
      this.#hasDisposeAfter = !!this.#disposeAfter
      this.noDisposeOnSet = !!noDisposeOnSet
      this.noUpdateTTL = !!noUpdateTTL
      this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection
      this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection
      this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort
      this.ignoreFetchAbort = !!ignoreFetchAbort
      // NB: maxEntrySize is set to maxSize if it's set
      if (this.maxEntrySize !== 0) {
        if (this.#maxSize !== 0) {
          if (!isPosInt(this.#maxSize)) {
            throw new TypeError(
              'maxSize must be a positive integer if specified'
            )
          }
        }
        if (!isPosInt(this.maxEntrySize)) {
          throw new TypeError(
            'maxEntrySize must be a positive integer if specified'
          )
        }
        this.#initializeSizeTracking()
      }
      this.allowStale = !!allowStale
      this.noDeleteOnStaleGet = !!noDeleteOnStaleGet
      this.updateAgeOnGet = !!updateAgeOnGet
      this.updateAgeOnHas = !!updateAgeOnHas
      this.ttlResolution =
        isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1
      this.ttlAutopurge = !!ttlAutopurge
      this.ttl = ttl || 0
      if (this.ttl) {
        if (!isPosInt(this.ttl)) {
          throw new TypeError('ttl must be a positive integer if specified')
        }
        this.#initializeTTLTracking()
      }
      // do not allow completely unbounded caches
      if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
        throw new TypeError('At least one of max, maxSize, or ttl is required')
      }
      if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
        const code = 'LRU_CACHE_UNBOUNDED'
        if (shouldWarn(code)) {
          warned.add(code)
          const msg =
            'TTL caching without ttlAutopurge, max, or maxSize can ' +
            'result in unbounded memory consumption.'
          emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)
        }
      }
    }
    /**
     * Return the number of ms left in the item's TTL. If item is not in cache,
     * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
     */
    getRemainingTTL(key) {
      return this.#keyMap.has(key) ? Infinity : 0
    }
    #initializeTTLTracking() {
      const ttls = new ZeroArray(this.#max)
      const starts = new ZeroArray(this.#max)
      this.#ttls = ttls
      this.#starts = starts
      this.#setItemTTL = (index, ttl, start = perf.now()) => {
        starts[index] = ttl !== 0 ? start : 0
        ttls[index] = ttl
        if (ttl !== 0 && this.ttlAutopurge) {
          const t = setTimeout(() => {
            if (this.#isStale(index)) {
              this.#delete(this.#keyList[index], 'expire')
            }
          }, ttl + 1)
          // unref() not supported on all platforms
          /* c8 ignore start */
          if (t.unref) {
            t.unref()
          }
          /* c8 ignore stop */
        }
      }
      this.#updateItemAge = index => {
        starts[index] = ttls[index] !== 0 ? perf.now() : 0
      }
      this.#statusTTL = (status, index) => {
        if (ttls[index]) {
          const ttl = ttls[index]
          const start = starts[index]
          /* c8 ignore next */
          if (!ttl || !start) {
            return
          }
          status.ttl = ttl
          status.start = start
          status.now = cachedNow || getNow()
          const age = status.now - start
          status.remainingTTL = ttl - age
        }
      }
      // debounce calls to perf.now() to 1s so we're not hitting
      // that costly call repeatedly.
      let cachedNow = 0
      const getNow = () => {
        const n = perf.now()
        if (this.ttlResolution > 0) {
          cachedNow = n
          const t = setTimeout(() => (cachedNow = 0), this.ttlResolution)
          // not available on all platforms
          /* c8 ignore start */
          if (t.unref) {
            t.unref()
          }
          /* c8 ignore stop */
        }
        return n
      }
      this.getRemainingTTL = key => {
        const index = this.#keyMap.get(key)
        if (index === undefined) {
          return 0
        }
        const ttl = ttls[index]
        const start = starts[index]
        if (!ttl || !start) {
          return Infinity
        }
        const age = (cachedNow || getNow()) - start
        return ttl - age
      }
      this.#isStale = index => {
        const s = starts[index]
        const t = ttls[index]
        return !!t && !!s && (cachedNow || getNow()) - s > t
      }
    }
    // conditionally set private methods related to TTL
    #updateItemAge = () => {}
    #statusTTL = () => {}
    #setItemTTL = () => {}
    /* c8 ignore stop */
    #isStale = () => false
    #initializeSizeTracking() {
      const sizes = new ZeroArray(this.#max)
      this.#calculatedSize = 0
      this.#sizes = sizes
      this.#removeItemSize = index => {
        this.#calculatedSize -= sizes[index]
        sizes[index] = 0
      }
      this.#requireSize = (k, v, size, sizeCalculation) => {
        // provisionally accept background fetches.
        // actual value size will be checked when they return.
        if (this.#isBackgroundFetch(v)) {
          return 0
        }
        if (!isPosInt(size)) {
          if (sizeCalculation) {
            if (typeof sizeCalculation !== 'function') {
              throw new TypeError('sizeCalculation must be a function')
            }
            size = sizeCalculation(v, k)
            if (!isPosInt(size)) {
              throw new TypeError(
                'sizeCalculation return invalid (expect positive integer)'
              )
            }
          } else {
            throw new TypeError(
              'invalid size value (must be positive integer). ' +
                'When maxSize or maxEntrySize is used, sizeCalculation ' +
                'or size must be set.'
            )
          }
        }
        return size
      }
      this.#addItemSize = (index, size, status) => {
        sizes[index] = size
        if (this.#maxSize) {
          const maxSize = this.#maxSize - sizes[index]
          while (this.#calculatedSize > maxSize) {
            this.#evict(true)
          }
        }
        this.#calculatedSize += sizes[index]
        if (status) {
          status.entrySize = size
          status.totalCalculatedSize = this.#calculatedSize
        }
      }
    }
    #removeItemSize = _i => {}
    #addItemSize = (_i, _s, _st) => {}
    #requireSize = (_k, _v, size, sizeCalculation) => {
      if (size || sizeCalculation) {
        throw new TypeError(
          'cannot set size without setting maxSize or maxEntrySize on cache'
        )
      }
      return 0
    };
    *#indexes({ allowStale = this.allowStale } = {}) {
      if (this.#size) {
        for (let i = this.#tail; true; ) {
          if (!this.#isValidIndex(i)) {
            break
          }
          if (allowStale || !this.#isStale(i)) {
            yield i
          }
          if (i === this.#head) {
            break
          } else {
            i = this.#prev[i]
          }
        }
      }
    }
    *#rindexes({ allowStale = this.allowStale } = {}) {
      if (this.#size) {
        for (let i = this.#head; true; ) {
          if (!this.#isValidIndex(i)) {
            break
          }
          if (allowStale || !this.#isStale(i)) {
            yield i
          }
          if (i === this.#tail) {
            break
          } else {
            i = this.#next[i]
          }
        }
      }
    }
    #isValidIndex(index) {
      return (
        index !== undefined && this.#keyMap.get(this.#keyList[index]) === index
      )
    }
    /**
     * Return a generator yielding `[key, value]` pairs,
     * in order from most recently used to least recently used.
     */
    *entries() {
      for (const i of this.#indexes()) {
        if (
          this.#valList[i] !== undefined &&
          this.#keyList[i] !== undefined &&
          !this.#isBackgroundFetch(this.#valList[i])
        ) {
          yield [this.#keyList[i], this.#valList[i]]
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.entries}
     *
     * Return a generator yielding `[key, value]` pairs,
     * in order from least recently used to most recently used.
     */
    *rentries() {
      for (const i of this.#rindexes()) {
        if (
          this.#valList[i] !== undefined &&
          this.#keyList[i] !== undefined &&
          !this.#isBackgroundFetch(this.#valList[i])
        ) {
          yield [this.#keyList[i], this.#valList[i]]
        }
      }
    }
    /**
     * Return a generator yielding the keys in the cache,
     * in order from most recently used to least recently used.
     */
    *keys() {
      for (const i of this.#indexes()) {
        const k = this.#keyList[i]
        if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield k
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.keys}
     *
     * Return a generator yielding the keys in the cache,
     * in order from least recently used to most recently used.
     */
    *rkeys() {
      for (const i of this.#rindexes()) {
        const k = this.#keyList[i]
        if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield k
        }
      }
    }
    /**
     * Return a generator yielding the values in the cache,
     * in order from most recently used to least recently used.
     */
    *values() {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield this.#valList[i]
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.values}
     *
     * Return a generator yielding the values in the cache,
     * in order from least recently used to most recently used.
     */
    *rvalues() {
      for (const i of this.#rindexes()) {
        const v = this.#valList[i]
        if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield this.#valList[i]
        }
      }
    }
    /**
     * Iterating over the cache itself yields the same results as
     * {@link LRUCache.entries}
     */
    [Symbol.iterator]() {
      return this.entries()
    }
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    [Symbol.toStringTag] = 'LRUCache'
    /**
     * Find a value for which the supplied fn method returns a truthy value,
     * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
     */
    find(fn, getOptions = {}) {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        if (fn(value, this.#keyList[i], this)) {
          return this.get(this.#keyList[i], getOptions)
        }
      }
    }
    /**
     * Call the supplied function on each item in the cache, in order from most
     * recently used to least recently used.
     *
     * `fn` is called as `fn(value, key, cache)`.
     *
     * If `thisp` is provided, function will be called in the `this`-context of
     * the provided object, or the cache if no `thisp` object is provided.
     *
     * Does not update age or recenty of use, or iterate over stale values.
     */
    forEach(fn, thisp = this) {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        fn.call(thisp, value, this.#keyList[i], this)
      }
    }
    /**
     * The same as {@link LRUCache.forEach} but items are iterated over in
     * reverse order.  (ie, less recently used items are iterated over first.)
     */
    rforEach(fn, thisp = this) {
      for (const i of this.#rindexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        fn.call(thisp, value, this.#keyList[i], this)
      }
    }
    /**
     * Delete any stale entries. Returns true if anything was removed,
     * false otherwise.
     */
    purgeStale() {
      let deleted = false
      for (const i of this.#rindexes({
        allowStale: true
      })) {
        if (this.#isStale(i)) {
          this.#delete(this.#keyList[i], 'expire')
          deleted = true
        }
      }
      return deleted
    }
    /**
     * Get the extended info about a given entry, to get its value, size, and
     * TTL info simultaneously. Returns `undefined` if the key is not present.
     *
     * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
     * serialization, the `start` value is always the current timestamp, and the
     * `ttl` is a calculated remaining time to live (negative if expired).
     *
     * Always returns stale values, if their info is found in the cache, so be
     * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
     * if relevant.
     */
    info(key) {
      const i = this.#keyMap.get(key)
      if (i === undefined) {
        return undefined
      }
      const v = this.#valList[i]
      const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
      if (value === undefined) {
        return undefined
      }
      const entry = {
        value
      }
      if (this.#ttls && this.#starts) {
        const ttl = this.#ttls[i]
        const start = this.#starts[i]
        if (ttl && start) {
          const remain = ttl - (perf.now() - start)
          entry.ttl = remain
          entry.start = Date.now()
        }
      }
      if (this.#sizes) {
        entry.size = this.#sizes[i]
      }
      return entry
    }
    /**
     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
     * passed to {@link LRUCache#load}.
     *
     * The `start` fields are calculated relative to a portable `Date.now()`
     * timestamp, even if `performance.now()` is available.
     *
     * Stale entries are always included in the `dump`, even if
     * {@link LRUCache.OptionsBase.allowStale} is false.
     *
     * Note: this returns an actual array, not a generator, so it can be more
     * easily passed around.
     */
    dump() {
      const arr = []
      for (const i of this.#indexes({
        allowStale: true
      })) {
        const key = this.#keyList[i]
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined || key === undefined) {
          continue
        }
        const entry = {
          value
        }
        if (this.#ttls && this.#starts) {
          entry.ttl = this.#ttls[i]
          // always dump the start relative to a portable timestamp
          // it's ok for this to be a bit slow, it's a rare operation.
          const age = perf.now() - this.#starts[i]
          entry.start = Math.floor(Date.now() - age)
        }
        if (this.#sizes) {
          entry.size = this.#sizes[i]
        }
        arr.unshift([key, entry])
      }
      return arr
    }
    /**
     * Reset the cache and load in the items in entries in the order listed.
     *
     * The shape of the resulting cache may be different if the same options are
     * not used in both caches.
     *
     * The `start` fields are assumed to be calculated relative to a portable
     * `Date.now()` timestamp, even if `performance.now()` is available.
     */
    load(arr) {
      this.clear()
      for (const [key, entry] of arr) {
        if (entry.start) {
          // entry.start is a portable timestamp, but we may be using
          // node's performance.now(), so calculate the offset, so that
          // we get the intended remaining TTL, no matter how long it's
          // been on ice.
          //
          // it's ok for this to be a bit slow, it's a rare operation.
          const age = Date.now() - entry.start
          entry.start = perf.now() - age
        }
        this.set(key, entry.value, entry)
      }
    }
    /**
     * Add a value to the cache.
     *
     * Note: if `undefined` is specified as a value, this is an alias for
     * {@link LRUCache#delete}
     *
     * Fields on the {@link LRUCache.SetOptions} options param will override
     * their corresponding values in the constructor options for the scope
     * of this single `set()` operation.
     *
     * If `start` is provided, then that will set the effective start
     * time for the TTL calculation. Note that this must be a previous
     * value of `performance.now()` if supported, or a previous value of
     * `Date.now()` if not.
     *
     * Options object may also include `size`, which will prevent
     * calling the `sizeCalculation` function and just use the specified
     * number if it is a positive integer, and `noDisposeOnSet` which
     * will prevent calling a `dispose` function in the case of
     * overwrites.
     *
     * If the `size` (or return value of `sizeCalculation`) for a given
     * entry is greater than `maxEntrySize`, then the item will not be
     * added to the cache.
     *
     * Will update the recency of the entry.
     *
     * If the value is `undefined`, then this is an alias for
     * `cache.delete(key)`. `undefined` is never stored in the cache.
     */
    set(k, v, setOptions = {}) {
      if (v === undefined) {
        this.delete(k)
        return this
      }
      const {
        ttl = this.ttl,
        start,
        noDisposeOnSet = this.noDisposeOnSet,
        sizeCalculation = this.sizeCalculation,
        status
      } = setOptions
      let { noUpdateTTL = this.noUpdateTTL } = setOptions
      const size = this.#requireSize(
        k,
        v,
        setOptions.size || 0,
        sizeCalculation
      )
      // if the item doesn't fit, don't do anything
      // NB: maxEntrySize set to maxSize by default
      if (this.maxEntrySize && size > this.maxEntrySize) {
        if (status) {
          status.set = 'miss'
          status.maxEntrySizeExceeded = true
        }
        // have to delete, in case something is there already.
        this.#delete(k, 'set')
        return this
      }
      let index = this.#size === 0 ? undefined : this.#keyMap.get(k)
      if (index === undefined) {
        // addition
        index =
          this.#size === 0
            ? this.#tail
            : this.#free.length !== 0
              ? this.#free.pop()
              : this.#size === this.#max
                ? this.#evict(false)
                : this.#size
        this.#keyList[index] = k
        this.#valList[index] = v
        this.#keyMap.set(k, index)
        this.#next[this.#tail] = index
        this.#prev[index] = this.#tail
        this.#tail = index
        this.#size++
        this.#addItemSize(index, size, status)
        if (status) {
          status.set = 'add'
        }
        noUpdateTTL = false
        if (this.#hasOnInsert) {
          this.#onInsert?.(v, k, 'add')
        }
      } else {
        // update
        this.#moveToTail(index)
        const oldVal = this.#valList[index]
        if (v !== oldVal) {
          if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
            oldVal.__abortController.abort(new Error('replaced'))
            const { __staleWhileFetching: s } = oldVal
            if (s !== undefined && !noDisposeOnSet) {
              if (this.#hasDispose) {
                this.#dispose?.(s, k, 'set')
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([s, k, 'set'])
              }
            }
          } else if (!noDisposeOnSet) {
            if (this.#hasDispose) {
              this.#dispose?.(oldVal, k, 'set')
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([oldVal, k, 'set'])
            }
          }
          this.#removeItemSize(index)
          this.#addItemSize(index, size, status)
          this.#valList[index] = v
          if (status) {
            status.set = 'replace'
            const oldValue =
              oldVal && this.#isBackgroundFetch(oldVal)
                ? oldVal.__staleWhileFetching
                : oldVal
            if (oldValue !== undefined) {
              status.oldValue = oldValue
            }
          }
        } else if (status) {
          status.set = 'update'
        }
        if (this.#hasOnInsert) {
          this.onInsert?.(v, k, v === oldVal ? 'update' : 'replace')
        }
      }
      if (ttl !== 0 && !this.#ttls) {
        this.#initializeTTLTracking()
      }
      if (this.#ttls) {
        if (!noUpdateTTL) {
          this.#setItemTTL(index, ttl, start)
        }
        if (status) {
          this.#statusTTL(status, index)
        }
      }
      if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
      return this
    }
    /**
     * Evict the least recently used item, returning its value or
     * `undefined` if cache is empty.
     */
    pop() {
      try {
        while (this.#size) {
          const val = this.#valList[this.#head]
          this.#evict(true)
          if (this.#isBackgroundFetch(val)) {
            if (val.__staleWhileFetching) {
              return val.__staleWhileFetching
            }
          } else if (val !== undefined) {
            return val
          }
        }
      } finally {
        if (this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed
          let task
          while ((task = dt?.shift())) {
            this.#disposeAfter?.(...task)
          }
        }
      }
    }
    #evict(free) {
      const head = this.#head
      const k = this.#keyList[head]
      const v = this.#valList[head]
      if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
        v.__abortController.abort(new Error('evicted'))
      } else if (this.#hasDispose || this.#hasDisposeAfter) {
        if (this.#hasDispose) {
          this.#dispose?.(v, k, 'evict')
        }
        if (this.#hasDisposeAfter) {
          this.#disposed?.push([v, k, 'evict'])
        }
      }
      this.#removeItemSize(head)
      // if we aren't about to use the index, then null these out
      if (free) {
        this.#keyList[head] = undefined
        this.#valList[head] = undefined
        this.#free.push(head)
      }
      if (this.#size === 1) {
        this.#head = this.#tail = 0
        this.#free.length = 0
      } else {
        this.#head = this.#next[head]
      }
      this.#keyMap.delete(k)
      this.#size--
      return head
    }
    /**
     * Check if a key is in the cache, without updating the recency of use.
     * Will return false if the item is stale, even though it is technically
     * in the cache.
     *
     * Check if a key is in the cache, without updating the recency of
     * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
     * to `true` in either the options or the constructor.
     *
     * Will return `false` if the item is stale, even though it is technically in
     * the cache. The difference can be determined (if it matters) by using a
     * `status` argument, and inspecting the `has` field.
     *
     * Will not update item age unless
     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
     */
    has(k, hasOptions = {}) {
      const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions
      const index = this.#keyMap.get(k)
      if (index !== undefined) {
        const v = this.#valList[index]
        if (
          this.#isBackgroundFetch(v) &&
          v.__staleWhileFetching === undefined
        ) {
          return false
        }
        if (!this.#isStale(index)) {
          if (updateAgeOnHas) {
            this.#updateItemAge(index)
          }
          if (status) {
            status.has = 'hit'
            this.#statusTTL(status, index)
          }
          return true
        } else if (status) {
          status.has = 'stale'
          this.#statusTTL(status, index)
        }
      } else if (status) {
        status.has = 'miss'
      }
      return false
    }
    /**
     * Like {@link LRUCache#get} but doesn't update recency or delete stale
     * items.
     *
     * Returns `undefined` if the item is stale, unless
     * {@link LRUCache.OptionsBase.allowStale} is set.
     */
    peek(k, peekOptions = {}) {
      const { allowStale = this.allowStale } = peekOptions
      const index = this.#keyMap.get(k)
      if (index === undefined || (!allowStale && this.#isStale(index))) {
        return
      }
      const v = this.#valList[index]
      // either stale and allowed, or forcing a refresh of non-stale value
      return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
    }
    #backgroundFetch(k, index, options, context) {
      const v = index === undefined ? undefined : this.#valList[index]
      if (this.#isBackgroundFetch(v)) {
        return v
      }
      const ac = new AC()
      const { signal } = options
      // when/if our AC signals, then stop listening to theirs.
      signal?.addEventListener('abort', () => ac.abort(signal.reason), {
        signal: ac.signal
      })
      const fetchOpts = {
        signal: ac.signal,
        options,
        context
      }
      const cb = (v, updateCache = false) => {
        const { aborted } = ac.signal
        const ignoreAbort = options.ignoreFetchAbort && v !== undefined
        if (options.status) {
          if (aborted && !updateCache) {
            options.status.fetchAborted = true
            options.status.fetchError = ac.signal.reason
            if (ignoreAbort) {
              options.status.fetchAbortIgnored = true
            }
          } else {
            options.status.fetchResolved = true
          }
        }
        if (aborted && !ignoreAbort && !updateCache) {
          return fetchFail(ac.signal.reason)
        }
        // either we didn't abort, and are still here, or we did, and ignored
        const bf = p
        if (this.#valList[index] === p) {
          if (v === undefined) {
            if (bf.__staleWhileFetching) {
              this.#valList[index] = bf.__staleWhileFetching
            } else {
              this.#delete(k, 'fetch')
            }
          } else {
            if (options.status) {
              options.status.fetchUpdated = true
            }
            this.set(k, v, fetchOpts.options)
          }
        }
        return v
      }
      const eb = er => {
        if (options.status) {
          options.status.fetchRejected = true
          options.status.fetchError = er
        }
        return fetchFail(er)
      }
      const fetchFail = er => {
        const { aborted } = ac.signal
        const allowStaleAborted = aborted && options.allowStaleOnFetchAbort
        const allowStale =
          allowStaleAborted || options.allowStaleOnFetchRejection
        const noDelete = allowStale || options.noDeleteOnFetchRejection
        const bf = p
        if (this.#valList[index] === p) {
          // if we allow stale on fetch rejections, then we need to ensure that
          // the stale value is not removed from the cache when the fetch fails.
          const del = !noDelete || bf.__staleWhileFetching === undefined
          if (del) {
            this.#delete(k, 'fetch')
          } else if (!allowStaleAborted) {
            // still replace the *promise* with the stale value,
            // since we are done with the promise at this point.
            // leave it untouched if we're still waiting for an
            // aborted background fetch that hasn't yet returned.
            this.#valList[index] = bf.__staleWhileFetching
          }
        }
        if (allowStale) {
          if (options.status && bf.__staleWhileFetching !== undefined) {
            options.status.returnedStale = true
          }
          return bf.__staleWhileFetching
        } else if (bf.__returned === bf) {
          throw er
        }
      }
      const pcall = (res, rej) => {
        const fmp = this.#fetchMethod?.(k, v, fetchOpts)
        if (fmp && fmp instanceof Promise) {
          fmp.then(v => res(v === undefined ? undefined : v), rej)
        }
        // ignored, we go until we finish, regardless.
        // defer check until we are actually aborting,
        // so fetchMethod can override.
        ac.signal.addEventListener('abort', () => {
          if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
            res(undefined)
            // when it eventually resolves, update the cache.
            if (options.allowStaleOnFetchAbort) {
              res = v => cb(v, true)
            }
          }
        })
      }
      if (options.status) {
        options.status.fetchDispatched = true
      }
      const p = new Promise(pcall).then(cb, eb)
      const bf = Object.assign(p, {
        __abortController: ac,
        __staleWhileFetching: v,
        __returned: undefined
      })
      if (index === undefined) {
        // internal, don't expose status.
        this.set(k, bf, {
          ...fetchOpts.options,
          status: undefined
        })
        index = this.#keyMap.get(k)
      } else {
        this.#valList[index] = bf
      }
      return bf
    }
    #isBackgroundFetch(p) {
      if (!this.#hasFetchMethod) {
        return false
      }
      const b = p
      return (
        !!b &&
        b instanceof Promise &&
        b.hasOwnProperty('__staleWhileFetching') &&
        b.__abortController instanceof AC
      )
    }
    async fetch(k, fetchOptions = {}) {
      const {
        // get options
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        // set options
        ttl = this.ttl,
        noDisposeOnSet = this.noDisposeOnSet,
        size = 0,
        sizeCalculation = this.sizeCalculation,
        noUpdateTTL = this.noUpdateTTL,
        // fetch exclusive options
        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
        allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
        ignoreFetchAbort = this.ignoreFetchAbort,
        allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
        context,
        forceRefresh = false,
        status,
        signal
      } = fetchOptions
      if (!this.#hasFetchMethod) {
        if (status) {
          status.fetch = 'get'
        }
        return this.get(k, {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          status
        })
      }
      const options = {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        ttl,
        noDisposeOnSet,
        size,
        sizeCalculation,
        noUpdateTTL,
        noDeleteOnFetchRejection,
        allowStaleOnFetchRejection,
        allowStaleOnFetchAbort,
        ignoreFetchAbort,
        status,
        signal
      }
      let index = this.#keyMap.get(k)
      if (index === undefined) {
        if (status) {
          status.fetch = 'miss'
        }
        const p = this.#backgroundFetch(k, index, options, context)
        return (p.__returned = p)
      } else {
        // in cache, maybe already fetching
        const v = this.#valList[index]
        if (this.#isBackgroundFetch(v)) {
          const stale = allowStale && v.__staleWhileFetching !== undefined
          if (status) {
            status.fetch = 'inflight'
            if (stale) {
              status.returnedStale = true
            }
          }
          return stale ? v.__staleWhileFetching : (v.__returned = v)
        }
        // if we force a refresh, that means do NOT serve the cached value,
        // unless we are already in the process of refreshing the cache.
        const isStale = this.#isStale(index)
        if (!forceRefresh && !isStale) {
          if (status) {
            status.fetch = 'hit'
          }
          this.#moveToTail(index)
          if (updateAgeOnGet) {
            this.#updateItemAge(index)
          }
          if (status) {
            this.#statusTTL(status, index)
          }
          return v
        }
        // ok, it is stale or a forced refresh, and not already fetching.
        // refresh the cache.
        const p = this.#backgroundFetch(k, index, options, context)
        const hasStale = p.__staleWhileFetching !== undefined
        const staleVal = hasStale && allowStale
        if (status) {
          status.fetch = isStale ? 'stale' : 'refresh'
          if (staleVal && isStale) {
            status.returnedStale = true
          }
        }
        return staleVal ? p.__staleWhileFetching : (p.__returned = p)
      }
    }
    async forceFetch(k, fetchOptions = {}) {
      const v = await this.fetch(k, fetchOptions)
      if (v === undefined) {
        throw new Error('fetch() returned undefined')
      }
      return v
    }
    memo(k, memoOptions = {}) {
      const memoMethod = this.#memoMethod
      if (!memoMethod) {
        throw new Error('no memoMethod provided to constructor')
      }
      const { context, forceRefresh, ...options } = memoOptions
      const v = this.get(k, options)
      if (!forceRefresh && v !== undefined) {
        return v
      }
      const vv = memoMethod(k, v, {
        options,
        context
      })
      this.set(k, vv, options)
      return vv
    }
    /**
     * Return a value from the cache. Will update the recency of the cache
     * entry found.
     *
     * If the key is not found, get() will return `undefined`.
     */
    get(k, getOptions = {}) {
      const {
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        status
      } = getOptions
      const index = this.#keyMap.get(k)
      if (index !== undefined) {
        const value = this.#valList[index]
        const fetching = this.#isBackgroundFetch(value)
        if (status) {
          this.#statusTTL(status, index)
        }
        if (this.#isStale(index)) {
          if (status) {
            status.get = 'stale'
          }
          // delete only if not an in-flight background fetch
          if (!fetching) {
            if (!noDeleteOnStaleGet) {
              this.#delete(k, 'expire')
            }
            if (status && allowStale) {
              status.returnedStale = true
            }
            return allowStale ? value : undefined
          } else {
            if (
              status &&
              allowStale &&
              value.__staleWhileFetching !== undefined
            ) {
              status.returnedStale = true
            }
            return allowStale ? value.__staleWhileFetching : undefined
          }
        } else {
          if (status) {
            status.get = 'hit'
          }
          // if we're currently fetching it, we don't actually have it yet
          // it's not stale, which means this isn't a staleWhileRefetching.
          // If it's not stale, and fetching, AND has a __staleWhileFetching
          // value, then that means the user fetched with {forceRefresh:true},
          // so it's safe to return that value.
          if (fetching) {
            return value.__staleWhileFetching
          }
          this.#moveToTail(index)
          if (updateAgeOnGet) {
            this.#updateItemAge(index)
          }
          return value
        }
      } else if (status) {
        status.get = 'miss'
      }
    }
    #connect(p, n) {
      this.#prev[n] = p
      this.#next[p] = n
    }
    #moveToTail(index) {
      // if tail already, nothing to do
      // if head, move head to next[index]
      // else
      //   move next[prev[index]] to next[index] (head has no prev)
      //   move prev[next[index]] to prev[index]
      // prev[index] = tail
      // next[tail] = index
      // tail = index
      if (index !== this.#tail) {
        if (index === this.#head) {
          this.#head = this.#next[index]
        } else {
          this.#connect(this.#prev[index], this.#next[index])
        }
        this.#connect(this.#tail, index)
        this.#tail = index
      }
    }
    /**
     * Deletes a key out of the cache.
     *
     * Returns true if the key was deleted, false otherwise.
     */
    delete(k) {
      return this.#delete(k, 'delete')
    }
    #delete(k, reason) {
      let deleted = false
      if (this.#size !== 0) {
        const index = this.#keyMap.get(k)
        if (index !== undefined) {
          deleted = true
          if (this.#size === 1) {
            this.#clear(reason)
          } else {
            this.#removeItemSize(index)
            const v = this.#valList[index]
            if (this.#isBackgroundFetch(v)) {
              v.__abortController.abort(new Error('deleted'))
            } else if (this.#hasDispose || this.#hasDisposeAfter) {
              if (this.#hasDispose) {
                this.#dispose?.(v, k, reason)
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([v, k, reason])
              }
            }
            this.#keyMap.delete(k)
            this.#keyList[index] = undefined
            this.#valList[index] = undefined
            if (index === this.#tail) {
              this.#tail = this.#prev[index]
            } else if (index === this.#head) {
              this.#head = this.#next[index]
            } else {
              const pi = this.#prev[index]
              this.#next[pi] = this.#next[index]
              const ni = this.#next[index]
              this.#prev[ni] = this.#prev[index]
            }
            this.#size--
            this.#free.push(index)
          }
        }
      }
      if (this.#hasDisposeAfter && this.#disposed?.length) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
      return deleted
    }
    /**
     * Clear the cache entirely, throwing away all values.
     */
    clear() {
      return this.#clear('delete')
    }
    #clear(reason) {
      for (const index of this.#rindexes({
        allowStale: true
      })) {
        const v = this.#valList[index]
        if (this.#isBackgroundFetch(v)) {
          v.__abortController.abort(new Error('deleted'))
        } else {
          const k = this.#keyList[index]
          if (this.#hasDispose) {
            this.#dispose?.(v, k, reason)
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([v, k, reason])
          }
        }
      }
      this.#keyMap.clear()
      this.#valList.fill(undefined)
      this.#keyList.fill(undefined)
      if (this.#ttls && this.#starts) {
        this.#ttls.fill(0)
        this.#starts.fill(0)
      }
      if (this.#sizes) {
        this.#sizes.fill(0)
      }
      this.#head = 0
      this.#tail = 0
      this.#free.length = 0
      this.#calculatedSize = 0
      this.#size = 0
      if (this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
    }
  }
  commonjs.LRUCache = LRUCache
  return commonjs
}

let hasRequiredCommonjs$1
function requireCommonjs$1() {
  if (hasRequiredCommonjs$1) {
    return commonjs$1
  }
  hasRequiredCommonjs$1 = 1
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(commonjs$1, '__esModule', {
    value: true
  })
  commonjs$1.PathScurry =
    commonjs$1.Path =
    commonjs$1.PathScurryDarwin =
    commonjs$1.PathScurryPosix =
    commonjs$1.PathScurryWin32 =
    commonjs$1.PathScurryBase =
    commonjs$1.PathPosix =
    commonjs$1.PathWin32 =
    commonjs$1.PathBase =
    commonjs$1.ChildrenCache =
    commonjs$1.ResolveCache =
      void 0
  const lru_cache_1 = /*@__PURE__*/ requireCommonjs$2()
  const node_path_1 = require$$1$3
  const node_url_1 = require$$2$3
  const fs_1 = require$$2$2
  const actualFS = __importStar(require$$4$1)
  const realpathSync = fs_1.realpathSync.native
  // TODO: test perf of fs/promises realpath vs realpathCB,
  // since the promises one uses realpath.native
  const promises_1 = require$$5
  const minipass_1 = requireCommonjs$7()
  const defaultFS = {
    lstatSync: fs_1.lstatSync,
    readdir: fs_1.readdir,
    readdirSync: fs_1.readdirSync,
    readlinkSync: fs_1.readlinkSync,
    realpathSync,
    promises: {
      lstat: promises_1.lstat,
      readdir: promises_1.readdir,
      readlink: promises_1.readlink,
      realpath: promises_1.realpath
    }
  }
  // if they just gave us require('fs') then use our default
  const fsFromOption = fsOption =>
    !fsOption || fsOption === defaultFS || fsOption === actualFS
      ? defaultFS
      : {
          ...defaultFS,
          ...fsOption,
          promises: {
            ...defaultFS.promises,
            ...fsOption.promises
          }
        }
  // turn something like //?/c:/ into c:\
  const uncDriveRegexp = /^\\\\\?\\([a-z]:)\\?$/i
  const uncToDrive = rootPath =>
    rootPath.replace(/\//g, '\\').replace(uncDriveRegexp, '$1\\')
  // windows paths are separated by either / or \
  const eitherSep = /[\\/]/
  const UNKNOWN = 0 // may not even exist, for all we know
  const IFIFO = 0b0001
  const IFCHR = 0b0010
  const IFDIR = 0b0100
  const IFBLK = 0b0110
  const IFREG = 0b1000
  const IFLNK = 0b1010
  const IFSOCK = 0b1100
  const IFMT = 0b1111
  // mask to unset low 4 bits
  const IFMT_UNKNOWN = ~IFMT
  // set after successfully calling readdir() and getting entries.
  const READDIR_CALLED = 0b0000_0001_0000
  // set after a successful lstat()
  const LSTAT_CALLED = 0b0000_0010_0000
  // set if an entry (or one of its parents) is definitely not a dir
  const ENOTDIR = 0b0000_0100_0000
  // set if an entry (or one of its parents) does not exist
  // (can also be set on lstat errors like EACCES or ENAMETOOLONG)
  const ENOENT = 0b0000_1000_0000
  // cannot have child entries -- also verify &IFMT is either IFDIR or IFLNK
  // set if we fail to readlink
  const ENOREADLINK = 0b0001_0000_0000
  // set if we know realpath() will fail
  const ENOREALPATH = 0b0010_0000_0000
  const ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH
  const TYPEMASK = 0b0011_1111_1111
  const entToType = s =>
    s.isFile()
      ? IFREG
      : s.isDirectory()
        ? IFDIR
        : s.isSymbolicLink()
          ? IFLNK
          : s.isCharacterDevice()
            ? IFCHR
            : s.isBlockDevice()
              ? IFBLK
              : s.isSocket()
                ? IFSOCK
                : s.isFIFO()
                  ? IFIFO
                  : UNKNOWN
  // normalize unicode path names
  const normalizeCache = new Map()
  const normalize = s => {
    const c = normalizeCache.get(s)
    if (c) {
      return c
    }
    const n = s.normalize('NFKD')
    normalizeCache.set(s, n)
    return n
  }
  const normalizeNocaseCache = new Map()
  const normalizeNocase = s => {
    const c = normalizeNocaseCache.get(s)
    if (c) {
      return c
    }
    const n = normalize(s.toLowerCase())
    normalizeNocaseCache.set(s, n)
    return n
  }
  /**
   * An LRUCache for storing resolved path strings or Path objects.
   * @internal
   */
  class ResolveCache extends lru_cache_1.LRUCache {
    constructor() {
      super({
        max: 256
      })
    }
  }
  commonjs$1.ResolveCache = ResolveCache
  // In order to prevent blowing out the js heap by allocating hundreds of
  // thousands of Path entries when walking extremely large trees, the "children"
  // in this tree are represented by storing an array of Path entries in an
  // LRUCache, indexed by the parent.  At any time, Path.children() may return an
  // empty array, indicating that it doesn't know about any of its children, and
  // thus has to rebuild that cache.  This is fine, it just means that we don't
  // benefit as much from having the cached entries, but huge directory walks
  // don't blow out the stack, and smaller ones are still as fast as possible.
  //
  //It does impose some complexity when building up the readdir data, because we
  //need to pass a reference to the children array that we started with.
  /**
   * an LRUCache for storing child entries.
   * @internal
   */
  class ChildrenCache extends lru_cache_1.LRUCache {
    constructor(maxSize = 16 * 1024) {
      super({
        maxSize,
        // parent + children
        sizeCalculation: a => a.length + 1
      })
    }
  }
  commonjs$1.ChildrenCache = ChildrenCache
  const setAsCwd = Symbol('PathScurry setAsCwd')
  /**
   * Path objects are sort of like a super-powered
   * {@link https://nodejs.org/docs/latest/api/fs.html#class-fsdirent fs.Dirent}
   *
   * Each one represents a single filesystem entry on disk, which may or may not
   * exist. It includes methods for reading various types of information via
   * lstat, readlink, and readdir, and caches all information to the greatest
   * degree possible.
   *
   * Note that fs operations that would normally throw will instead return an
   * "empty" value. This is in order to prevent excessive overhead from error
   * stack traces.
   */
  class PathBase {
    /**
     * the basename of this path
     *
     * **Important**: *always* test the path name against any test string
     * usingthe {@link isNamed} method, and not by directly comparing this
     * string. Otherwise, unicode path strings that the system sees as identical
     * will not be properly treated as the same path, leading to incorrect
     * behavior and possible security issues.
     */
    name
    /**
     * the Path entry corresponding to the path root.
     *
     * @internal
     */
    root
    /**
     * All roots found within the current PathScurry family
     *
     * @internal
     */
    roots
    /**
     * a reference to the parent path, or undefined in the case of root entries
     *
     * @internal
     */
    parent
    /**
     * boolean indicating whether paths are compared case-insensitively
     * @internal
     */
    nocase
    /**
     * boolean indicating that this path is the current working directory
     * of the PathScurry collection that contains it.
     */
    isCWD = false
    // potential default fs override
    #fs
    // Stats fields
    #dev
    get dev() {
      return this.#dev
    }
    #mode
    get mode() {
      return this.#mode
    }
    #nlink
    get nlink() {
      return this.#nlink
    }
    #uid
    get uid() {
      return this.#uid
    }
    #gid
    get gid() {
      return this.#gid
    }
    #rdev
    get rdev() {
      return this.#rdev
    }
    #blksize
    get blksize() {
      return this.#blksize
    }
    #ino
    get ino() {
      return this.#ino
    }
    #size
    get size() {
      return this.#size
    }
    #blocks
    get blocks() {
      return this.#blocks
    }
    #atimeMs
    get atimeMs() {
      return this.#atimeMs
    }
    #mtimeMs
    get mtimeMs() {
      return this.#mtimeMs
    }
    #ctimeMs
    get ctimeMs() {
      return this.#ctimeMs
    }
    #birthtimeMs
    get birthtimeMs() {
      return this.#birthtimeMs
    }
    #atime
    get atime() {
      return this.#atime
    }
    #mtime
    get mtime() {
      return this.#mtime
    }
    #ctime
    get ctime() {
      return this.#ctime
    }
    #birthtime
    get birthtime() {
      return this.#birthtime
    }
    #matchName
    #depth
    #fullpath
    #fullpathPosix
    #relative
    #relativePosix
    #type
    #children
    #linkTarget
    #realpath
    /**
     * This property is for compatibility with the Dirent class as of
     * Node v20, where Dirent['parentPath'] refers to the path of the
     * directory that was passed to readdir. For root entries, it's the path
     * to the entry itself.
     */
    get parentPath() {
      return (this.parent || this).fullpath()
    }
    /**
     * Deprecated alias for Dirent['parentPath'] Somewhat counterintuitively,
     * this property refers to the *parent* path, not the path object itself.
     *
     * @deprecated
     */
    get path() {
      return this.parentPath
    }
    /**
     * Do not create new Path objects directly.  They should always be accessed
     * via the PathScurry class or other methods on the Path class.
     *
     * @internal
     */
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      this.name = name
      this.#matchName = nocase ? normalizeNocase(name) : normalize(name)
      this.#type = type & TYPEMASK
      this.nocase = nocase
      this.roots = roots
      this.root = root || this
      this.#children = children
      this.#fullpath = opts.fullpath
      this.#relative = opts.relative
      this.#relativePosix = opts.relativePosix
      this.parent = opts.parent
      if (this.parent) {
        this.#fs = this.parent.#fs
      } else {
        this.#fs = fsFromOption(opts.fs)
      }
    }
    /**
     * Returns the depth of the Path object from its root.
     *
     * For example, a path at `/foo/bar` would have a depth of 2.
     */
    depth() {
      if (this.#depth !== undefined) {
        return this.#depth
      }
      if (!this.parent) {
        return (this.#depth = 0)
      }
      return (this.#depth = this.parent.depth() + 1)
    }
    /**
     * @internal
     */
    childrenCache() {
      return this.#children
    }
    /**
     * Get the Path object referenced by the string path, resolved from this Path
     */
    resolve(path) {
      if (!path) {
        return this
      }
      const rootPath = this.getRootString(path)
      const dir = path.substring(rootPath.length)
      const dirParts = dir.split(this.splitSep)
      const result = rootPath
        ? this.getRoot(rootPath).#resolveParts(dirParts)
        : this.#resolveParts(dirParts)
      return result
    }
    #resolveParts(dirParts) {
      let p = this
      for (const part of dirParts) {
        p = p.child(part)
      }
      return p
    }
    /**
     * Returns the cached children Path objects, if still available.  If they
     * have fallen out of the cache, then returns an empty array, and resets the
     * READDIR_CALLED bit, so that future calls to readdir() will require an fs
     * lookup.
     *
     * @internal
     */
    children() {
      const cached = this.#children.get(this)
      if (cached) {
        return cached
      }
      const children = Object.assign([], {
        provisional: 0
      })
      this.#children.set(this, children)
      this.#type &= ~READDIR_CALLED
      return children
    }
    /**
     * Resolves a path portion and returns or creates the child Path.
     *
     * Returns `this` if pathPart is `''` or `'.'`, or `parent` if pathPart is
     * `'..'`.
     *
     * This should not be called directly.  If `pathPart` contains any path
     * separators, it will lead to unsafe undefined behavior.
     *
     * Use `Path.resolve()` instead.
     *
     * @internal
     */
    child(pathPart, opts) {
      if (pathPart === '' || pathPart === '.') {
        return this
      }
      if (pathPart === '..') {
        return this.parent || this
      }
      // find the child
      const children = this.children()
      const name = this.nocase ? normalizeNocase(pathPart) : normalize(pathPart)
      for (const p of children) {
        if (p.#matchName === name) {
          return p
        }
      }
      // didn't find it, create provisional child, since it might not
      // actually exist.  If we know the parent isn't a dir, then
      // in fact it CAN'T exist.
      const s = this.parent ? this.sep : ''
      const fullpath = this.#fullpath
        ? this.#fullpath + s + pathPart
        : undefined
      const pchild = this.newChild(pathPart, UNKNOWN, {
        ...opts,
        parent: this,
        fullpath
      })
      if (!this.canReaddir()) {
        pchild.#type |= ENOENT
      }
      // don't have to update provisional, because if we have real children,
      // then provisional is set to children.length, otherwise a lower number
      children.push(pchild)
      return pchild
    }
    /**
     * The relative path from the cwd. If it does not share an ancestor with
     * the cwd, then this ends up being equivalent to the fullpath()
     */
    relative() {
      if (this.isCWD) {
        return ''
      }
      if (this.#relative !== undefined) {
        return this.#relative
      }
      const name = this.name
      const p = this.parent
      if (!p) {
        return (this.#relative = this.name)
      }
      const pv = p.relative()
      return pv + (!pv || !p.parent ? '' : this.sep) + name
    }
    /**
     * The relative path from the cwd, using / as the path separator.
     * If it does not share an ancestor with
     * the cwd, then this ends up being equivalent to the fullpathPosix()
     * On posix systems, this is identical to relative().
     */
    relativePosix() {
      if (this.sep === '/') {
        return this.relative()
      }
      if (this.isCWD) {
        return ''
      }
      if (this.#relativePosix !== undefined) {
        return this.#relativePosix
      }
      const name = this.name
      const p = this.parent
      if (!p) {
        return (this.#relativePosix = this.fullpathPosix())
      }
      const pv = p.relativePosix()
      return pv + (!pv || !p.parent ? '' : '/') + name
    }
    /**
     * The fully resolved path string for this Path entry
     */
    fullpath() {
      if (this.#fullpath !== undefined) {
        return this.#fullpath
      }
      const name = this.name
      const p = this.parent
      if (!p) {
        return (this.#fullpath = this.name)
      }
      const pv = p.fullpath()
      const fp = pv + (!p.parent ? '' : this.sep) + name
      return (this.#fullpath = fp)
    }
    /**
     * On platforms other than windows, this is identical to fullpath.
     *
     * On windows, this is overridden to return the forward-slash form of the
     * full UNC path.
     */
    fullpathPosix() {
      if (this.#fullpathPosix !== undefined) {
        return this.#fullpathPosix
      }
      if (this.sep === '/') {
        return (this.#fullpathPosix = this.fullpath())
      }
      if (!this.parent) {
        const p = this.fullpath().replace(/\\/g, '/')
        if (/^[a-z]:\//i.test(p)) {
          return (this.#fullpathPosix = `//?/${p}`)
        } else {
          return (this.#fullpathPosix = p)
        }
      }
      const p = this.parent
      const pfpp = p.fullpathPosix()
      const fpp = pfpp + (!pfpp || !p.parent ? '' : '/') + this.name
      return (this.#fullpathPosix = fpp)
    }
    /**
     * Is the Path of an unknown type?
     *
     * Note that we might know *something* about it if there has been a previous
     * filesystem operation, for example that it does not exist, or is not a
     * link, or whether it has child entries.
     */
    isUnknown() {
      return (this.#type & IFMT) === UNKNOWN
    }
    isType(type) {
      return this[`is${type}`]()
    }
    getType() {
      return this.isUnknown()
        ? 'Unknown'
        : this.isDirectory()
          ? 'Directory'
          : this.isFile()
            ? 'File'
            : this.isSymbolicLink()
              ? 'SymbolicLink'
              : this.isFIFO()
                ? 'FIFO'
                : this.isCharacterDevice()
                  ? 'CharacterDevice'
                  : this.isBlockDevice()
                    ? 'BlockDevice'
                    : /* c8 ignore start */ this.isSocket()
                      ? 'Socket'
                      : 'Unknown'
      /* c8 ignore stop */
    }
    /**
     * Is the Path a regular file?
     */
    isFile() {
      return (this.#type & IFMT) === IFREG
    }
    /**
     * Is the Path a directory?
     */
    isDirectory() {
      return (this.#type & IFMT) === IFDIR
    }
    /**
     * Is the path a character device?
     */
    isCharacterDevice() {
      return (this.#type & IFMT) === IFCHR
    }
    /**
     * Is the path a block device?
     */
    isBlockDevice() {
      return (this.#type & IFMT) === IFBLK
    }
    /**
     * Is the path a FIFO pipe?
     */
    isFIFO() {
      return (this.#type & IFMT) === IFIFO
    }
    /**
     * Is the path a socket?
     */
    isSocket() {
      return (this.#type & IFMT) === IFSOCK
    }
    /**
     * Is the path a symbolic link?
     */
    isSymbolicLink() {
      return (this.#type & IFLNK) === IFLNK
    }
    /**
     * Return the entry if it has been subject of a successful lstat, or
     * undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* simply
     * mean that we haven't called lstat on it.
     */
    lstatCached() {
      return this.#type & LSTAT_CALLED ? this : undefined
    }
    /**
     * Return the cached link target if the entry has been the subject of a
     * successful readlink, or undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * readlink() has been called at some point.
     */
    readlinkCached() {
      return this.#linkTarget
    }
    /**
     * Returns the cached realpath target if the entry has been the subject
     * of a successful realpath, or undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * realpath() has been called at some point.
     */
    realpathCached() {
      return this.#realpath
    }
    /**
     * Returns the cached child Path entries array if the entry has been the
     * subject of a successful readdir(), or [] otherwise.
     *
     * Does not read the filesystem, so an empty array *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * readdir() has been called recently enough to still be valid.
     */
    readdirCached() {
      const children = this.children()
      return children.slice(0, children.provisional)
    }
    /**
     * Return true if it's worth trying to readlink.  Ie, we don't (yet) have
     * any indication that readlink will definitely fail.
     *
     * Returns false if the path is known to not be a symlink, if a previous
     * readlink failed, or if the entry does not exist.
     */
    canReadlink() {
      if (this.#linkTarget) {
        return true
      }
      if (!this.parent) {
        return false
      }
      // cases where it cannot possibly succeed
      const ifmt = this.#type & IFMT
      return !(
        (ifmt !== UNKNOWN && ifmt !== IFLNK) ||
        this.#type & ENOREADLINK ||
        this.#type & ENOENT
      )
    }
    /**
     * Return true if readdir has previously been successfully called on this
     * path, indicating that cachedReaddir() is likely valid.
     */
    calledReaddir() {
      return !!(this.#type & READDIR_CALLED)
    }
    /**
     * Returns true if the path is known to not exist. That is, a previous lstat
     * or readdir failed to verify its existence when that would have been
     * expected, or a parent entry was marked either enoent or enotdir.
     */
    isENOENT() {
      return !!(this.#type & ENOENT)
    }
    /**
     * Return true if the path is a match for the given path name.  This handles
     * case sensitivity and unicode normalization.
     *
     * Note: even on case-sensitive systems, it is **not** safe to test the
     * equality of the `.name` property to determine whether a given pathname
     * matches, due to unicode normalization mismatches.
     *
     * Always use this method instead of testing the `path.name` property
     * directly.
     */
    isNamed(n) {
      return !this.nocase
        ? this.#matchName === normalize(n)
        : this.#matchName === normalizeNocase(n)
    }
    /**
     * Return the Path object corresponding to the target of a symbolic link.
     *
     * If the Path is not a symbolic link, or if the readlink call fails for any
     * reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     */
    async readlink() {
      const target = this.#linkTarget
      if (target) {
        return target
      }
      if (!this.canReadlink()) {
        return undefined
      }
      /* c8 ignore start */
      // already covered by the canReadlink test, here for ts grumples
      if (!this.parent) {
        return undefined
      }
      /* c8 ignore stop */
      try {
        const read = await this.#fs.promises.readlink(this.fullpath())
        const linkTarget = (await this.parent.realpath())?.resolve(read)
        if (linkTarget) {
          return (this.#linkTarget = linkTarget)
        }
      } catch (er) {
        this.#readlinkFail(er.code)
        return undefined
      }
    }
    /**
     * Synchronous {@link PathBase.readlink}
     */
    readlinkSync() {
      const target = this.#linkTarget
      if (target) {
        return target
      }
      if (!this.canReadlink()) {
        return undefined
      }
      /* c8 ignore start */
      // already covered by the canReadlink test, here for ts grumples
      if (!this.parent) {
        return undefined
      }
      /* c8 ignore stop */
      try {
        const read = this.#fs.readlinkSync(this.fullpath())
        const linkTarget = this.parent.realpathSync()?.resolve(read)
        if (linkTarget) {
          return (this.#linkTarget = linkTarget)
        }
      } catch (er) {
        this.#readlinkFail(er.code)
        return undefined
      }
    }
    #readdirSuccess(children) {
      // succeeded, mark readdir called bit
      this.#type |= READDIR_CALLED
      // mark all remaining provisional children as ENOENT
      for (let p = children.provisional; p < children.length; p++) {
        const c = children[p]
        if (c) {
          c.#markENOENT()
        }
      }
    }
    #markENOENT() {
      // mark as UNKNOWN and ENOENT
      if (this.#type & ENOENT) {
        return
      }
      this.#type = (this.#type | ENOENT) & IFMT_UNKNOWN
      this.#markChildrenENOENT()
    }
    #markChildrenENOENT() {
      // all children are provisional and do not exist
      const children = this.children()
      children.provisional = 0
      for (const p of children) {
        p.#markENOENT()
      }
    }
    #markENOREALPATH() {
      this.#type |= ENOREALPATH
      this.#markENOTDIR()
    }
    // save the information when we know the entry is not a dir
    #markENOTDIR() {
      // entry is not a directory, so any children can't exist.
      // this *should* be impossible, since any children created
      // after it's been marked ENOTDIR should be marked ENOENT,
      // so it won't even get to this point.
      /* c8 ignore start */
      if (this.#type & ENOTDIR) {
        return
      }
      /* c8 ignore stop */
      let t = this.#type
      // this could happen if we stat a dir, then delete it,
      // then try to read it or one of its children.
      if ((t & IFMT) === IFDIR) {
        t &= IFMT_UNKNOWN
      }
      this.#type = t | ENOTDIR
      this.#markChildrenENOENT()
    }
    #readdirFail(code = '') {
      // markENOTDIR and markENOENT also set provisional=0
      if (code === 'ENOTDIR' || code === 'EPERM') {
        this.#markENOTDIR()
      } else if (code === 'ENOENT') {
        this.#markENOENT()
      } else {
        this.children().provisional = 0
      }
    }
    #lstatFail(code = '') {
      // Windows just raises ENOENT in this case, disable for win CI
      /* c8 ignore start */
      if (code === 'ENOTDIR') {
        // already know it has a parent by this point
        const p = this.parent
        p.#markENOTDIR()
      } else if (code === 'ENOENT') {
        /* c8 ignore stop */
        this.#markENOENT()
      }
    }
    #readlinkFail(code = '') {
      let ter = this.#type
      ter |= ENOREADLINK
      if (code === 'ENOENT') {
        ter |= ENOENT
      }
      // windows gets a weird error when you try to readlink a file
      if (code === 'EINVAL' || code === 'UNKNOWN') {
        // exists, but not a symlink, we don't know WHAT it is, so remove
        // all IFMT bits.
        ter &= IFMT_UNKNOWN
      }
      this.#type = ter
      // windows just gets ENOENT in this case.  We do cover the case,
      // just disabled because it's impossible on Windows CI
      /* c8 ignore start */
      if (code === 'ENOTDIR' && this.parent) {
        this.parent.#markENOTDIR()
      }
      /* c8 ignore stop */
    }
    #readdirAddChild(e, c) {
      return (
        this.#readdirMaybePromoteChild(e, c) || this.#readdirAddNewChild(e, c)
      )
    }
    #readdirAddNewChild(e, c) {
      // alloc new entry at head, so it's never provisional
      const type = entToType(e)
      const child = this.newChild(e.name, type, {
        parent: this
      })
      const ifmt = child.#type & IFMT
      if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) {
        child.#type |= ENOTDIR
      }
      c.unshift(child)
      c.provisional++
      return child
    }
    #readdirMaybePromoteChild(e, c) {
      for (let p = c.provisional; p < c.length; p++) {
        const pchild = c[p]
        const name = this.nocase ? normalizeNocase(e.name) : normalize(e.name)
        if (name !== pchild.#matchName) {
          continue
        }
        return this.#readdirPromoteChild(e, pchild, p, c)
      }
    }
    #readdirPromoteChild(e, p, index, c) {
      const v = p.name
      // retain any other flags, but set ifmt from dirent
      p.#type = (p.#type & IFMT_UNKNOWN) | entToType(e)
      // case sensitivity fixing when we learn the true name.
      if (v !== e.name) {
        p.name = e.name
      }
      // just advance provisional index (potentially off the list),
      // otherwise we have to splice/pop it out and re-insert at head
      if (index !== c.provisional) {
        if (index === c.length - 1) {
          c.pop()
        } else {
          c.splice(index, 1)
        }
        c.unshift(p)
      }
      c.provisional++
      return p
    }
    /**
     * Call lstat() on this Path, and update all known information that can be
     * determined.
     *
     * Note that unlike `fs.lstat()`, the returned value does not contain some
     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
     * information is required, you will need to call `fs.lstat` yourself.
     *
     * If the Path refers to a nonexistent file, or if the lstat call fails for
     * any reason, `undefined` is returned.  Otherwise the updated Path object is
     * returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    async lstat() {
      if ((this.#type & ENOENT) === 0) {
        try {
          this.#applyStat(await this.#fs.promises.lstat(this.fullpath()))
          return this
        } catch (er) {
          this.#lstatFail(er.code)
        }
      }
    }
    /**
     * synchronous {@link PathBase.lstat}
     */
    lstatSync() {
      if ((this.#type & ENOENT) === 0) {
        try {
          this.#applyStat(this.#fs.lstatSync(this.fullpath()))
          return this
        } catch (er) {
          this.#lstatFail(er.code)
        }
      }
    }
    #applyStat(st) {
      const {
        atime,
        atimeMs,
        birthtime,
        birthtimeMs,
        blksize,
        blocks,
        ctime,
        ctimeMs,
        dev,
        gid,
        ino,
        mode,
        mtime,
        mtimeMs,
        nlink,
        rdev,
        size,
        uid
      } = st
      this.#atime = atime
      this.#atimeMs = atimeMs
      this.#birthtime = birthtime
      this.#birthtimeMs = birthtimeMs
      this.#blksize = blksize
      this.#blocks = blocks
      this.#ctime = ctime
      this.#ctimeMs = ctimeMs
      this.#dev = dev
      this.#gid = gid
      this.#ino = ino
      this.#mode = mode
      this.#mtime = mtime
      this.#mtimeMs = mtimeMs
      this.#nlink = nlink
      this.#rdev = rdev
      this.#size = size
      this.#uid = uid
      const ifmt = entToType(st)
      // retain any other flags, but set the ifmt
      this.#type = (this.#type & IFMT_UNKNOWN) | ifmt | LSTAT_CALLED
      if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) {
        this.#type |= ENOTDIR
      }
    }
    #onReaddirCB = []
    #readdirCBInFlight = false
    #callOnReaddirCB(children) {
      this.#readdirCBInFlight = false
      const cbs = this.#onReaddirCB.slice()
      this.#onReaddirCB.length = 0
      cbs.forEach(cb => cb(null, children))
    }
    /**
     * Standard node-style callback interface to get list of directory entries.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     *
     * @param cb The callback called with (er, entries).  Note that the `er`
     * param is somewhat extraneous, as all readdir() errors are handled and
     * simply result in an empty set of entries being returned.
     * @param allowZalgo Boolean indicating that immediately known results should
     * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release
     * zalgo at your peril, the dark pony lord is devious and unforgiving.
     */
    readdirCB(cb, allowZalgo = false) {
      if (!this.canReaddir()) {
        if (allowZalgo) {
          cb(null, [])
        } else {
          queueMicrotask(() => cb(null, []))
        }
        return
      }
      const children = this.children()
      if (this.calledReaddir()) {
        const c = children.slice(0, children.provisional)
        if (allowZalgo) {
          cb(null, c)
        } else {
          queueMicrotask(() => cb(null, c))
        }
        return
      }
      // don't have to worry about zalgo at this point.
      this.#onReaddirCB.push(cb)
      if (this.#readdirCBInFlight) {
        return
      }
      this.#readdirCBInFlight = true
      // else read the directory, fill up children
      // de-provisionalize any provisional children.
      const fullpath = this.fullpath()
      this.#fs.readdir(
        fullpath,
        {
          withFileTypes: true
        },
        (er, entries) => {
          if (er) {
            this.#readdirFail(er.code)
            children.provisional = 0
          } else {
            // if we didn't get an error, we always get entries.
            //@ts-ignore
            for (const e of entries) {
              this.#readdirAddChild(e, children)
            }
            this.#readdirSuccess(children)
          }
          this.#callOnReaddirCB(children.slice(0, children.provisional))
          return
        }
      )
    }
    #asyncReaddirInFlight
    /**
     * Return an array of known child entries.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    async readdir() {
      if (!this.canReaddir()) {
        return []
      }
      const children = this.children()
      if (this.calledReaddir()) {
        return children.slice(0, children.provisional)
      }
      // else read the directory, fill up children
      // de-provisionalize any provisional children.
      const fullpath = this.fullpath()
      if (this.#asyncReaddirInFlight) {
        await this.#asyncReaddirInFlight
      } else {
        /* c8 ignore start */
        let resolve = () => {}
        /* c8 ignore stop */
        this.#asyncReaddirInFlight = new Promise(res => (resolve = res))
        try {
          for (const e of await this.#fs.promises.readdir(fullpath, {
            withFileTypes: true
          })) {
            this.#readdirAddChild(e, children)
          }
          this.#readdirSuccess(children)
        } catch (er) {
          this.#readdirFail(er.code)
          children.provisional = 0
        }
        this.#asyncReaddirInFlight = undefined
        resolve()
      }
      return children.slice(0, children.provisional)
    }
    /**
     * synchronous {@link PathBase.readdir}
     */
    readdirSync() {
      if (!this.canReaddir()) {
        return []
      }
      const children = this.children()
      if (this.calledReaddir()) {
        return children.slice(0, children.provisional)
      }
      // else read the directory, fill up children
      // de-provisionalize any provisional children.
      const fullpath = this.fullpath()
      try {
        for (const e of this.#fs.readdirSync(fullpath, {
          withFileTypes: true
        })) {
          this.#readdirAddChild(e, children)
        }
        this.#readdirSuccess(children)
      } catch (er) {
        this.#readdirFail(er.code)
        children.provisional = 0
      }
      return children.slice(0, children.provisional)
    }
    canReaddir() {
      if (this.#type & ENOCHILD) {
        return false
      }
      const ifmt = IFMT & this.#type
      // we always set ENOTDIR when setting IFMT, so should be impossible
      /* c8 ignore start */
      if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) {
        return false
      }
      /* c8 ignore stop */
      return true
    }
    shouldWalk(dirs, walkFilter) {
      return (
        (this.#type & IFDIR) === IFDIR &&
        !(this.#type & ENOCHILD) &&
        !dirs.has(this) &&
        (!walkFilter || walkFilter(this))
      )
    }
    /**
     * Return the Path object corresponding to path as resolved
     * by realpath(3).
     *
     * If the realpath call fails for any reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     * On success, returns a Path object.
     */
    async realpath() {
      if (this.#realpath) {
        return this.#realpath
      }
      if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type) {
        return undefined
      }
      try {
        const rp = await this.#fs.promises.realpath(this.fullpath())
        return (this.#realpath = this.resolve(rp))
      } catch (_) {
        this.#markENOREALPATH()
      }
    }
    /**
     * Synchronous {@link realpath}
     */
    realpathSync() {
      if (this.#realpath) {
        return this.#realpath
      }
      if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type) {
        return undefined
      }
      try {
        const rp = this.#fs.realpathSync(this.fullpath())
        return (this.#realpath = this.resolve(rp))
      } catch (_) {
        this.#markENOREALPATH()
      }
    }
    /**
     * Internal method to mark this Path object as the scurry cwd,
     * called by {@link PathScurry#chdir}
     *
     * @internal
     */
    [setAsCwd](oldCwd) {
      if (oldCwd === this) {
        return
      }
      oldCwd.isCWD = false
      this.isCWD = true
      const changed = new Set([])
      let rp = []
      let p = this
      while (p && p.parent) {
        changed.add(p)
        p.#relative = rp.join(this.sep)
        p.#relativePosix = rp.join('/')
        p = p.parent
        rp.push('..')
      }
      // now un-memoize parents of old cwd
      p = oldCwd
      while (p && p.parent && !changed.has(p)) {
        p.#relative = undefined
        p.#relativePosix = undefined
        p = p.parent
      }
    }
  }
  commonjs$1.PathBase = PathBase
  /**
   * Path class used on win32 systems
   *
   * Uses `'\\'` as the path separator for returned paths, either `'\\'` or `'/'`
   * as the path separator for parsing paths.
   */
  class PathWin32 extends PathBase {
    /**
     * Separator for generating path strings.
     */
    sep = '\\'
    /**
     * Separator for parsing path strings.
     */
    splitSep = eitherSep
    /**
     * Do not create new Path objects directly.  They should always be accessed
     * via the PathScurry class or other methods on the Path class.
     *
     * @internal
     */
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      super(name, type, root, roots, nocase, children, opts)
    }
    /**
     * @internal
     */
    newChild(name, type = UNKNOWN, opts = {}) {
      return new PathWin32(
        name,
        type,
        this.root,
        this.roots,
        this.nocase,
        this.childrenCache(),
        opts
      )
    }
    /**
     * @internal
     */
    getRootString(path) {
      return node_path_1.win32.parse(path).root
    }
    /**
     * @internal
     */
    getRoot(rootPath) {
      rootPath = uncToDrive(rootPath.toUpperCase())
      if (rootPath === this.root.name) {
        return this.root
      }
      // ok, not that one, check if it matches another we know about
      for (const [compare, root] of Object.entries(this.roots)) {
        if (this.sameRoot(rootPath, compare)) {
          return (this.roots[rootPath] = root)
        }
      }
      // otherwise, have to create a new one.
      return (this.roots[rootPath] = new PathScurryWin32(rootPath, this).root)
    }
    /**
     * @internal
     */
    sameRoot(rootPath, compare = this.root.name) {
      // windows can (rarely) have case-sensitive filesystem, but
      // UNC and drive letters are always case-insensitive, and canonically
      // represented uppercase.
      rootPath = rootPath
        .toUpperCase()
        .replace(/\//g, '\\')
        .replace(uncDriveRegexp, '$1\\')
      return rootPath === compare
    }
  }
  commonjs$1.PathWin32 = PathWin32
  /**
   * Path class used on all posix systems.
   *
   * Uses `'/'` as the path separator.
   */
  class PathPosix extends PathBase {
    /**
     * separator for parsing path strings
     */
    splitSep = '/'
    /**
     * separator for generating path strings
     */
    sep = '/'
    /**
     * Do not create new Path objects directly.  They should always be accessed
     * via the PathScurry class or other methods on the Path class.
     *
     * @internal
     */
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      super(name, type, root, roots, nocase, children, opts)
    }
    /**
     * @internal
     */
    getRootString(path) {
      return path.startsWith('/') ? '/' : ''
    }
    /**
     * @internal
     */
    getRoot(_rootPath) {
      return this.root
    }
    /**
     * @internal
     */
    newChild(name, type = UNKNOWN, opts = {}) {
      return new PathPosix(
        name,
        type,
        this.root,
        this.roots,
        this.nocase,
        this.childrenCache(),
        opts
      )
    }
  }
  commonjs$1.PathPosix = PathPosix
  /**
   * The base class for all PathScurry classes, providing the interface for path
   * resolution and filesystem operations.
   *
   * Typically, you should *not* instantiate this class directly, but rather one
   * of the platform-specific classes, or the exported {@link PathScurry} which
   * defaults to the current platform.
   */
  class PathScurryBase {
    /**
     * The root Path entry for the current working directory of this Scurry
     */
    root
    /**
     * The string path for the root of this Scurry's current working directory
     */
    rootPath
    /**
     * A collection of all roots encountered, referenced by rootPath
     */
    roots
    /**
     * The Path entry corresponding to this PathScurry's current working directory.
     */
    cwd
    #resolveCache
    #resolvePosixCache
    #children
    /**
     * Perform path comparisons case-insensitively.
     *
     * Defaults true on Darwin and Windows systems, false elsewhere.
     */
    nocase
    #fs
    /**
     * This class should not be instantiated directly.
     *
     * Use PathScurryWin32, PathScurryDarwin, PathScurryPosix, or PathScurry
     *
     * @internal
     */
    constructor(
      cwd = process.cwd(),
      pathImpl,
      sep,
      { nocase, childrenCacheSize = 16 * 1024, fs = defaultFS } = {}
    ) {
      this.#fs = fsFromOption(fs)
      if (cwd instanceof URL || cwd.startsWith('file://')) {
        cwd = (0, node_url_1.fileURLToPath)(cwd)
      }
      // resolve and split root, and then add to the store.
      // this is the only time we call path.resolve()
      const cwdPath = pathImpl.resolve(cwd)
      this.roots = Object.create(null)
      this.rootPath = this.parseRootPath(cwdPath)
      this.#resolveCache = new ResolveCache()
      this.#resolvePosixCache = new ResolveCache()
      this.#children = new ChildrenCache(childrenCacheSize)
      const split = cwdPath.substring(this.rootPath.length).split(sep)
      // resolve('/') leaves '', splits to [''], we don't want that.
      if (split.length === 1 && !split[0]) {
        split.pop()
      }
      /* c8 ignore start */
      if (nocase === undefined) {
        throw new TypeError(
          'must provide nocase setting to PathScurryBase ctor'
        )
      }
      /* c8 ignore stop */
      this.nocase = nocase
      this.root = this.newRoot(this.#fs)
      this.roots[this.rootPath] = this.root
      let prev = this.root
      let len = split.length - 1
      const joinSep = pathImpl.sep
      let abs = this.rootPath
      let sawFirst = false
      for (const part of split) {
        const l = len--
        prev = prev.child(part, {
          relative: new Array(l).fill('..').join(joinSep),
          relativePosix: new Array(l).fill('..').join('/'),
          fullpath: (abs += (sawFirst ? '' : joinSep) + part)
        })
        sawFirst = true
      }
      this.cwd = prev
    }
    /**
     * Get the depth of a provided path, string, or the cwd
     */
    depth(path = this.cwd) {
      if (typeof path === 'string') {
        path = this.cwd.resolve(path)
      }
      return path.depth()
    }
    /**
     * Return the cache of child entries.  Exposed so subclasses can create
     * child Path objects in a platform-specific way.
     *
     * @internal
     */
    childrenCache() {
      return this.#children
    }
    /**
     * Resolve one or more path strings to a resolved string
     *
     * Same interface as require('path').resolve.
     *
     * Much faster than path.resolve() when called multiple times for the same
     * path, because the resolved Path objects are cached.  Much slower
     * otherwise.
     */
    resolve(...paths) {
      // first figure out the minimum number of paths we have to test
      // we always start at cwd, but any absolutes will bump the start
      let r = ''
      for (let i = paths.length - 1; i >= 0; i--) {
        const p = paths[i]
        if (!p || p === '.') {
          continue
        }
        r = r ? `${p}/${r}` : p
        if (this.isAbsolute(p)) {
          break
        }
      }
      const cached = this.#resolveCache.get(r)
      if (cached !== undefined) {
        return cached
      }
      const result = this.cwd.resolve(r).fullpath()
      this.#resolveCache.set(r, result)
      return result
    }
    /**
     * Resolve one or more path strings to a resolved string, returning
     * the posix path.  Identical to .resolve() on posix systems, but on
     * windows will return a forward-slash separated UNC path.
     *
     * Same interface as require('path').resolve.
     *
     * Much faster than path.resolve() when called multiple times for the same
     * path, because the resolved Path objects are cached.  Much slower
     * otherwise.
     */
    resolvePosix(...paths) {
      // first figure out the minimum number of paths we have to test
      // we always start at cwd, but any absolutes will bump the start
      let r = ''
      for (let i = paths.length - 1; i >= 0; i--) {
        const p = paths[i]
        if (!p || p === '.') {
          continue
        }
        r = r ? `${p}/${r}` : p
        if (this.isAbsolute(p)) {
          break
        }
      }
      const cached = this.#resolvePosixCache.get(r)
      if (cached !== undefined) {
        return cached
      }
      const result = this.cwd.resolve(r).fullpathPosix()
      this.#resolvePosixCache.set(r, result)
      return result
    }
    /**
     * find the relative path from the cwd to the supplied path string or entry
     */
    relative(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.relative()
    }
    /**
     * find the relative path from the cwd to the supplied path string or
     * entry, using / as the path delimiter, even on Windows.
     */
    relativePosix(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.relativePosix()
    }
    /**
     * Return the basename for the provided string or Path object
     */
    basename(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.name
    }
    /**
     * Return the dirname for the provided string or Path object
     */
    dirname(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return (entry.parent || entry).fullpath()
    }
    async readdir(
      entry = this.cwd,
      opts = {
        withFileTypes: true
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes } = opts
      if (!entry.canReaddir()) {
        return []
      } else {
        const p = await entry.readdir()
        return withFileTypes ? p : p.map(e => e.name)
      }
    }
    readdirSync(
      entry = this.cwd,
      opts = {
        withFileTypes: true
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true } = opts
      if (!entry.canReaddir()) {
        return []
      } else if (withFileTypes) {
        return entry.readdirSync()
      } else {
        return entry.readdirSync().map(e => e.name)
      }
    }
    /**
     * Call lstat() on the string or Path object, and update all known
     * information that can be determined.
     *
     * Note that unlike `fs.lstat()`, the returned value does not contain some
     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
     * information is required, you will need to call `fs.lstat` yourself.
     *
     * If the Path refers to a nonexistent file, or if the lstat call fails for
     * any reason, `undefined` is returned.  Otherwise the updated Path object is
     * returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    async lstat(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.lstat()
    }
    /**
     * synchronous {@link PathScurryBase.lstat}
     */
    lstatSync(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.lstatSync()
    }
    async readlink(
      entry = this.cwd,
      { withFileTypes } = {
        withFileTypes: false
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes
        entry = this.cwd
      }
      const e = await entry.readlink()
      return withFileTypes ? e : e?.fullpath()
    }
    readlinkSync(
      entry = this.cwd,
      { withFileTypes } = {
        withFileTypes: false
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes
        entry = this.cwd
      }
      const e = entry.readlinkSync()
      return withFileTypes ? e : e?.fullpath()
    }
    async realpath(
      entry = this.cwd,
      { withFileTypes } = {
        withFileTypes: false
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes
        entry = this.cwd
      }
      const e = await entry.realpath()
      return withFileTypes ? e : e?.fullpath()
    }
    realpathSync(
      entry = this.cwd,
      { withFileTypes } = {
        withFileTypes: false
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes
        entry = this.cwd
      }
      const e = entry.realpathSync()
      return withFileTypes ? e : e?.fullpath()
    }
    async walk(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      const results = []
      if (!filter || filter(entry)) {
        results.push(withFileTypes ? entry : entry.fullpath())
      }
      const dirs = new Set()
      const walk = (dir, cb) => {
        dirs.add(dir)
        dir.readdirCB((er, entries) => {
          /* c8 ignore start */
          if (er) {
            return cb(er)
          }
          /* c8 ignore stop */
          let len = entries.length
          if (!len) {
            return cb()
          }
          const next = () => {
            if (--len === 0) {
              cb()
            }
          }
          for (const e of entries) {
            if (!filter || filter(e)) {
              results.push(withFileTypes ? e : e.fullpath())
            }
            if (follow && e.isSymbolicLink()) {
              e.realpath()
                .then(r => (r?.isUnknown() ? r.lstat() : r))
                .then(r =>
                  r?.shouldWalk(dirs, walkFilter) ? walk(r, next) : next()
                )
            } else {
              if (e.shouldWalk(dirs, walkFilter)) {
                walk(e, next)
              } else {
                next()
              }
            }
          }
        }, true) // zalgooooooo
      }
      const start = entry
      return new Promise((res, rej) => {
        walk(start, er => {
          /* c8 ignore start */
          if (er) {
            return rej(er)
          }
          /* c8 ignore stop */
          res(results)
        })
      })
    }
    walkSync(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      const results = []
      if (!filter || filter(entry)) {
        results.push(withFileTypes ? entry : entry.fullpath())
      }
      const dirs = new Set([entry])
      for (const dir of dirs) {
        const entries = dir.readdirSync()
        for (const e of entries) {
          if (!filter || filter(e)) {
            results.push(withFileTypes ? e : e.fullpath())
          }
          let r = e
          if (e.isSymbolicLink()) {
            if (!(follow && (r = e.realpathSync()))) {
              continue
            }
            if (r.isUnknown()) {
              r.lstatSync()
            }
          }
          if (r.shouldWalk(dirs, walkFilter)) {
            dirs.add(r)
          }
        }
      }
      return results
    }
    /**
     * Support for `for await`
     *
     * Alias for {@link PathScurryBase.iterate}
     *
     * Note: As of Node 19, this is very slow, compared to other methods of
     * walking.  Consider using {@link PathScurryBase.stream} if memory overhead
     * and backpressure are concerns, or {@link PathScurryBase.walk} if not.
     */
    [Symbol.asyncIterator]() {
      return this.iterate()
    }
    iterate(entry = this.cwd, options = {}) {
      // iterating async over the stream is significantly more performant,
      // especially in the warm-cache scenario, because it buffers up directory
      // entries in the background instead of waiting for a yield for each one.
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        options = entry
        entry = this.cwd
      }
      return this.stream(entry, options)[Symbol.asyncIterator]()
    }
    /**
     * Iterating over a PathScurry performs a synchronous walk.
     *
     * Alias for {@link PathScurryBase.iterateSync}
     */
    [Symbol.iterator]() {
      return this.iterateSync()
    }
    *iterateSync(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      if (!filter || filter(entry)) {
        yield withFileTypes ? entry : entry.fullpath()
      }
      const dirs = new Set([entry])
      for (const dir of dirs) {
        const entries = dir.readdirSync()
        for (const e of entries) {
          if (!filter || filter(e)) {
            yield withFileTypes ? e : e.fullpath()
          }
          let r = e
          if (e.isSymbolicLink()) {
            if (!(follow && (r = e.realpathSync()))) {
              continue
            }
            if (r.isUnknown()) {
              r.lstatSync()
            }
          }
          if (r.shouldWalk(dirs, walkFilter)) {
            dirs.add(r)
          }
        }
      }
    }
    stream(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      const results = new minipass_1.Minipass({
        objectMode: true
      })
      if (!filter || filter(entry)) {
        results.write(withFileTypes ? entry : entry.fullpath())
      }
      const dirs = new Set()
      const queue = [entry]
      let processing = 0
      const process = () => {
        let paused = false
        while (!paused) {
          const dir = queue.shift()
          if (!dir) {
            if (processing === 0) {
              results.end()
            }
            return
          }
          processing++
          dirs.add(dir)
          const onReaddir = (er, entries, didRealpaths = false) => {
            /* c8 ignore start */
            if (er) {
              return results.emit('error', er)
            }
            /* c8 ignore stop */
            if (follow && !didRealpaths) {
              const promises = []
              for (const e of entries) {
                if (e.isSymbolicLink()) {
                  promises.push(
                    e.realpath().then(r => (r?.isUnknown() ? r.lstat() : r))
                  )
                }
              }
              if (promises.length) {
                Promise.all(promises).then(() => onReaddir(null, entries, true))
                return
              }
            }
            for (const e of entries) {
              if (e && (!filter || filter(e))) {
                if (!results.write(withFileTypes ? e : e.fullpath())) {
                  paused = true
                }
              }
            }
            processing--
            for (const e of entries) {
              const r = e.realpathCached() || e
              if (r.shouldWalk(dirs, walkFilter)) {
                queue.push(r)
              }
            }
            if (paused && !results.flowing) {
              results.once('drain', process)
            } else if (!sync) {
              process()
            }
          }
          // zalgo containment
          let sync = true
          dir.readdirCB(onReaddir, true)
          sync = false
        }
      }
      process()
      return results
    }
    streamSync(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      const results = new minipass_1.Minipass({
        objectMode: true
      })
      const dirs = new Set()
      if (!filter || filter(entry)) {
        results.write(withFileTypes ? entry : entry.fullpath())
      }
      const queue = [entry]
      let processing = 0
      const process = () => {
        let paused = false
        while (!paused) {
          const dir = queue.shift()
          if (!dir) {
            if (processing === 0) {
              results.end()
            }
            return
          }
          processing++
          dirs.add(dir)
          const entries = dir.readdirSync()
          for (const e of entries) {
            if (!filter || filter(e)) {
              if (!results.write(withFileTypes ? e : e.fullpath())) {
                paused = true
              }
            }
          }
          processing--
          for (const e of entries) {
            let r = e
            if (e.isSymbolicLink()) {
              if (!(follow && (r = e.realpathSync()))) {
                continue
              }
              if (r.isUnknown()) {
                r.lstatSync()
              }
            }
            if (r.shouldWalk(dirs, walkFilter)) {
              queue.push(r)
            }
          }
        }
        if (paused && !results.flowing) {
          results.once('drain', process)
        }
      }
      process()
      return results
    }
    chdir(path = this.cwd) {
      const oldCwd = this.cwd
      this.cwd = typeof path === 'string' ? this.cwd.resolve(path) : path
      this.cwd[setAsCwd](oldCwd)
    }
  }
  commonjs$1.PathScurryBase = PathScurryBase
  /**
   * Windows implementation of {@link PathScurryBase}
   *
   * Defaults to case insensitve, uses `'\\'` to generate path strings.  Uses
   * {@link PathWin32} for Path objects.
   */
  class PathScurryWin32 extends PathScurryBase {
    /**
     * separator for generating path strings
     */
    sep = '\\'
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = true } = opts
      super(cwd, node_path_1.win32, '\\', {
        ...opts,
        nocase
      })
      this.nocase = nocase
      for (let p = this.cwd; p; p = p.parent) {
        p.nocase = this.nocase
      }
    }
    /**
     * @internal
     */
    parseRootPath(dir) {
      // if the path starts with a single separator, it's not a UNC, and we'll
      // just get separator as the root, and driveFromUNC will return \
      // In that case, mount \ on the root from the cwd.
      return node_path_1.win32.parse(dir).root.toUpperCase()
    }
    /**
     * @internal
     */
    newRoot(fs) {
      return new PathWin32(
        this.rootPath,
        IFDIR,
        undefined,
        this.roots,
        this.nocase,
        this.childrenCache(),
        {
          fs
        }
      )
    }
    /**
     * Return true if the provided path string is an absolute path
     */
    isAbsolute(p) {
      return (
        p.startsWith('/') || p.startsWith('\\') || /^[a-z]:(\/|\\)/i.test(p)
      )
    }
  }
  commonjs$1.PathScurryWin32 = PathScurryWin32
  /**
   * {@link PathScurryBase} implementation for all posix systems other than Darwin.
   *
   * Defaults to case-sensitive matching, uses `'/'` to generate path strings.
   *
   * Uses {@link PathPosix} for Path objects.
   */
  class PathScurryPosix extends PathScurryBase {
    /**
     * separator for generating path strings
     */
    sep = '/'
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = false } = opts
      super(cwd, node_path_1.posix, '/', {
        ...opts,
        nocase
      })
      this.nocase = nocase
    }
    /**
     * @internal
     */
    parseRootPath(_dir) {
      return '/'
    }
    /**
     * @internal
     */
    newRoot(fs) {
      return new PathPosix(
        this.rootPath,
        IFDIR,
        undefined,
        this.roots,
        this.nocase,
        this.childrenCache(),
        {
          fs
        }
      )
    }
    /**
     * Return true if the provided path string is an absolute path
     */
    isAbsolute(p) {
      return p.startsWith('/')
    }
  }
  commonjs$1.PathScurryPosix = PathScurryPosix
  /**
   * {@link PathScurryBase} implementation for Darwin (macOS) systems.
   *
   * Defaults to case-insensitive matching, uses `'/'` for generating path
   * strings.
   *
   * Uses {@link PathPosix} for Path objects.
   */
  class PathScurryDarwin extends PathScurryPosix {
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = true } = opts
      super(cwd, {
        ...opts,
        nocase
      })
    }
  }
  commonjs$1.PathScurryDarwin = PathScurryDarwin
  /**
   * Default {@link PathBase} implementation for the current platform.
   *
   * {@link PathWin32} on Windows systems, {@link PathPosix} on all others.
   */
  commonjs$1.Path = process.platform === 'win32' ? PathWin32 : PathPosix
  /**
   * Default {@link PathScurryBase} implementation for the current platform.
   *
   * {@link PathScurryWin32} on Windows systems, {@link PathScurryDarwin} on
   * Darwin (macOS) systems, {@link PathScurryPosix} on all others.
   */
  commonjs$1.PathScurry =
    process.platform === 'win32'
      ? PathScurryWin32
      : process.platform === 'darwin'
        ? PathScurryDarwin
        : PathScurryPosix
  return commonjs$1
}

const pattern = {}

let hasRequiredPattern
function requirePattern() {
  if (hasRequiredPattern) {
    return pattern
  }
  hasRequiredPattern = 1
  // this is just a very light wrapper around 2 arrays with an offset index
  Object.defineProperty(pattern, '__esModule', {
    value: true
  })
  pattern.Pattern = void 0
  const minimatch_1 = requireCommonjs$3()
  const isPatternList = pl => pl.length >= 1
  const isGlobList = gl => gl.length >= 1
  /**
   * An immutable-ish view on an array of glob parts and their parsed
   * results
   */
  class Pattern {
    #patternList
    #globList
    #index
    length
    #platform
    #rest
    #globString
    #isDrive
    #isUNC
    #isAbsolute
    #followGlobstar = true
    constructor(patternList, globList, index, platform) {
      if (!isPatternList(patternList)) {
        throw new TypeError('empty pattern list')
      }
      if (!isGlobList(globList)) {
        throw new TypeError('empty glob list')
      }
      if (globList.length !== patternList.length) {
        throw new TypeError('mismatched pattern list and glob list lengths')
      }
      this.length = patternList.length
      if (index < 0 || index >= this.length) {
        throw new TypeError('index out of range')
      }
      this.#patternList = patternList
      this.#globList = globList
      this.#index = index
      this.#platform = platform
      // normalize root entries of absolute patterns on initial creation.
      if (this.#index === 0) {
        // c: => ['c:/']
        // C:/ => ['C:/']
        // C:/x => ['C:/', 'x']
        // //host/share => ['//host/share/']
        // //host/share/ => ['//host/share/']
        // //host/share/x => ['//host/share/', 'x']
        // /etc => ['/', 'etc']
        // / => ['/']
        if (this.isUNC()) {
          // '' / '' / 'host' / 'share'
          const [p0, p1, p2, p3, ...prest] = this.#patternList
          const [g0, g1, g2, g3, ...grest] = this.#globList
          if (prest[0] === '') {
            // ends in /
            prest.shift()
            grest.shift()
          }
          const p = [p0, p1, p2, p3, ''].join('/')
          const g = [g0, g1, g2, g3, ''].join('/')
          this.#patternList = [p, ...prest]
          this.#globList = [g, ...grest]
          this.length = this.#patternList.length
        } else if (this.isDrive() || this.isAbsolute()) {
          const [p1, ...prest] = this.#patternList
          const [g1, ...grest] = this.#globList
          if (prest[0] === '') {
            // ends in /
            prest.shift()
            grest.shift()
          }
          const p = p1 + '/'
          const g = g1 + '/'
          this.#patternList = [p, ...prest]
          this.#globList = [g, ...grest]
          this.length = this.#patternList.length
        }
      }
    }
    /**
     * The first entry in the parsed list of patterns
     */
    pattern() {
      return this.#patternList[this.#index]
    }
    /**
     * true of if pattern() returns a string
     */
    isString() {
      return typeof this.#patternList[this.#index] === 'string'
    }
    /**
     * true of if pattern() returns GLOBSTAR
     */
    isGlobstar() {
      return this.#patternList[this.#index] === minimatch_1.GLOBSTAR
    }
    /**
     * true if pattern() returns a regexp
     */
    isRegExp() {
      return this.#patternList[this.#index] instanceof RegExp
    }
    /**
     * The /-joined set of glob parts that make up this pattern
     */
    globString() {
      return (this.#globString =
        this.#globString ||
        (this.#index === 0
          ? this.isAbsolute()
            ? this.#globList[0] + this.#globList.slice(1).join('/')
            : this.#globList.join('/')
          : this.#globList.slice(this.#index).join('/')))
    }
    /**
     * true if there are more pattern parts after this one
     */
    hasMore() {
      return this.length > this.#index + 1
    }
    /**
     * The rest of the pattern after this part, or null if this is the end
     */
    rest() {
      if (this.#rest !== undefined) {
        return this.#rest
      }
      if (!this.hasMore()) {
        return (this.#rest = null)
      }
      this.#rest = new Pattern(
        this.#patternList,
        this.#globList,
        this.#index + 1,
        this.#platform
      )
      this.#rest.#isAbsolute = this.#isAbsolute
      this.#rest.#isUNC = this.#isUNC
      this.#rest.#isDrive = this.#isDrive
      return this.#rest
    }
    /**
     * true if the pattern represents a //unc/path/ on windows
     */
    isUNC() {
      const pl = this.#patternList
      return this.#isUNC !== undefined
        ? this.#isUNC
        : (this.#isUNC =
            this.#platform === 'win32' &&
            this.#index === 0 &&
            pl[0] === '' &&
            pl[1] === '' &&
            typeof pl[2] === 'string' &&
            !!pl[2] &&
            typeof pl[3] === 'string' &&
            !!pl[3])
    }
    // pattern like C:/...
    // split = ['C:', ...]
    // XXX: would be nice to handle patterns like `c:*` to test the cwd
    // in c: for *, but I don't know of a way to even figure out what that
    // cwd is without actually chdir'ing into it?
    /**
     * True if the pattern starts with a drive letter on Windows
     */
    isDrive() {
      const pl = this.#patternList
      return this.#isDrive !== undefined
        ? this.#isDrive
        : (this.#isDrive =
            this.#platform === 'win32' &&
            this.#index === 0 &&
            this.length > 1 &&
            typeof pl[0] === 'string' &&
            /^[a-z]:$/i.test(pl[0]))
    }
    // pattern = '/' or '/...' or '/x/...'
    // split = ['', ''] or ['', ...] or ['', 'x', ...]
    // Drive and UNC both considered absolute on windows
    /**
     * True if the pattern is rooted on an absolute path
     */
    isAbsolute() {
      const pl = this.#patternList
      return this.#isAbsolute !== undefined
        ? this.#isAbsolute
        : (this.#isAbsolute =
            (pl[0] === '' && pl.length > 1) || this.isDrive() || this.isUNC())
    }
    /**
     * consume the root of the pattern, and return it
     */
    root() {
      const p = this.#patternList[0]
      return typeof p === 'string' && this.isAbsolute() && this.#index === 0
        ? p
        : ''
    }
    /**
     * Check to see if the current globstar pattern is allowed to follow
     * a symbolic link.
     */
    checkFollowGlobstar() {
      return !(this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar)
    }
    /**
     * Mark that the current globstar pattern is following a symbolic link
     */
    markFollowGlobstar() {
      if (this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar) {
        return false
      }
      this.#followGlobstar = false
      return true
    }
  }
  pattern.Pattern = Pattern
  return pattern
}

const walker = {}

const ignore = {}

let hasRequiredIgnore
function requireIgnore() {
  if (hasRequiredIgnore) {
    return ignore
  }
  hasRequiredIgnore = 1
  // give it a pattern, and it'll be able to tell you if
  // a given path should be ignored.
  // Ignoring a path ignores its children if the pattern ends in /**
  // Ignores are always parsed in dot:true mode
  Object.defineProperty(ignore, '__esModule', {
    value: true
  })
  ignore.Ignore = void 0
  const minimatch_1 = requireCommonjs$3()
  const pattern_js_1 = requirePattern()
  const defaultPlatform =
    typeof process === 'object' &&
    process &&
    typeof process.platform === 'string'
      ? process.platform
      : 'linux'
  /**
   * Class used to process ignored patterns
   */
  class Ignore {
    relative
    relativeChildren
    absolute
    absoluteChildren
    platform
    mmopts
    constructor(
      ignored,
      { nobrace, nocase, noext, noglobstar, platform = defaultPlatform }
    ) {
      this.relative = []
      this.absolute = []
      this.relativeChildren = []
      this.absoluteChildren = []
      this.platform = platform
      this.mmopts = {
        dot: true,
        nobrace,
        nocase,
        noext,
        noglobstar,
        optimizationLevel: 2,
        platform,
        nocomment: true,
        nonegate: true
      }
      for (const ign of ignored) {
        this.add(ign)
      }
    }
    add(ign) {
      // this is a little weird, but it gives us a clean set of optimized
      // minimatch matchers, without getting tripped up if one of them
      // ends in /** inside a brace section, and it's only inefficient at
      // the start of the walk, not along it.
      // It'd be nice if the Pattern class just had a .test() method, but
      // handling globstars is a bit of a pita, and that code already lives
      // in minimatch anyway.
      // Another way would be if maybe Minimatch could take its set/globParts
      // as an option, and then we could at least just use Pattern to test
      // for absolute-ness.
      // Yet another way, Minimatch could take an array of glob strings, and
      // a cwd option, and do the right thing.
      const mm = new minimatch_1.Minimatch(ign, this.mmopts)
      for (let i = 0; i < mm.set.length; i++) {
        const parsed = mm.set[i]
        const globParts = mm.globParts[i]
        /* c8 ignore start */
        if (!parsed || !globParts) {
          throw new Error('invalid pattern object')
        }
        // strip off leading ./ portions
        // https://github.com/isaacs/node-glob/issues/570
        while (parsed[0] === '.' && globParts[0] === '.') {
          parsed.shift()
          globParts.shift()
        }
        /* c8 ignore stop */
        const p = new pattern_js_1.Pattern(parsed, globParts, 0, this.platform)
        const m = new minimatch_1.Minimatch(p.globString(), this.mmopts)
        const children = globParts[globParts.length - 1] === '**'
        const absolute = p.isAbsolute()
        if (absolute) {
          this.absolute.push(m)
        } else {
          this.relative.push(m)
        }
        if (children) {
          if (absolute) {
            this.absoluteChildren.push(m)
          } else {
            this.relativeChildren.push(m)
          }
        }
      }
    }
    ignored(p) {
      const fullpath = p.fullpath()
      const fullpaths = `${fullpath}/`
      const relative = p.relative() || '.'
      const relatives = `${relative}/`
      for (const m of this.relative) {
        if (m.match(relative) || m.match(relatives)) {
          return true
        }
      }
      for (const m of this.absolute) {
        if (m.match(fullpath) || m.match(fullpaths)) {
          return true
        }
      }
      return false
    }
    childrenIgnored(p) {
      const fullpath = p.fullpath() + '/'
      const relative = (p.relative() || '.') + '/'
      for (const m of this.relativeChildren) {
        if (m.match(relative)) {
          return true
        }
      }
      for (const m of this.absoluteChildren) {
        if (m.match(fullpath)) {
          return true
        }
      }
      return false
    }
  }
  ignore.Ignore = Ignore
  return ignore
}

const processor = {}

let hasRequiredProcessor
function requireProcessor() {
  if (hasRequiredProcessor) {
    return processor
  }
  hasRequiredProcessor = 1
  // synchronous utility for filtering entries and calculating subwalks
  Object.defineProperty(processor, '__esModule', {
    value: true
  })
  processor.Processor =
    processor.SubWalks =
    processor.MatchRecord =
    processor.HasWalkedCache =
      void 0
  const minimatch_1 = requireCommonjs$3()
  /**
   * A cache of which patterns have been processed for a given Path
   */
  class HasWalkedCache {
    store
    constructor(store = new Map()) {
      this.store = store
    }
    copy() {
      return new HasWalkedCache(new Map(this.store))
    }
    hasWalked(target, pattern) {
      return this.store.get(target.fullpath())?.has(pattern.globString())
    }
    storeWalked(target, pattern) {
      const fullpath = target.fullpath()
      const cached = this.store.get(fullpath)
      if (cached) {
        cached.add(pattern.globString())
      } else {
        this.store.set(fullpath, new Set([pattern.globString()]))
      }
    }
  }
  processor.HasWalkedCache = HasWalkedCache
  /**
   * A record of which paths have been matched in a given walk step,
   * and whether they only are considered a match if they are a directory,
   * and whether their absolute or relative path should be returned.
   */
  class MatchRecord {
    store = new Map()
    add(target, absolute, ifDir) {
      const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0)
      const current = this.store.get(target)
      this.store.set(target, current === undefined ? n : n & current)
    }
    // match, absolute, ifdir
    entries() {
      return [...this.store.entries()].map(([path, n]) => [
        path,
        !!(n & 2),
        !!(n & 1)
      ])
    }
  }
  processor.MatchRecord = MatchRecord
  /**
   * A collection of patterns that must be processed in a subsequent step
   * for a given path.
   */
  class SubWalks {
    store = new Map()
    add(target, pattern) {
      if (!target.canReaddir()) {
        return
      }
      const subs = this.store.get(target)
      if (subs) {
        if (!subs.find(p => p.globString() === pattern.globString())) {
          subs.push(pattern)
        }
      } else {
        this.store.set(target, [pattern])
      }
    }
    get(target) {
      const subs = this.store.get(target)
      /* c8 ignore start */
      if (!subs) {
        throw new Error('attempting to walk unknown path')
      }
      /* c8 ignore stop */
      return subs
    }
    entries() {
      return this.keys().map(k => [k, this.store.get(k)])
    }
    keys() {
      return [...this.store.keys()].filter(t => t.canReaddir())
    }
  }
  processor.SubWalks = SubWalks
  /**
   * The class that processes patterns for a given path.
   *
   * Handles child entry filtering, and determining whether a path's
   * directory contents must be read.
   */
  class Processor {
    hasWalkedCache
    matches = new MatchRecord()
    subwalks = new SubWalks()
    patterns
    follow
    dot
    opts
    constructor(opts, hasWalkedCache) {
      this.opts = opts
      this.follow = !!opts.follow
      this.dot = !!opts.dot
      this.hasWalkedCache = hasWalkedCache
        ? hasWalkedCache.copy()
        : new HasWalkedCache()
    }
    processPatterns(target, patterns) {
      this.patterns = patterns
      const processingSet = patterns.map(p => [target, p])
      // map of paths to the magic-starting subwalks they need to walk
      // first item in patterns is the filter
      for (let [t, pattern] of processingSet) {
        this.hasWalkedCache.storeWalked(t, pattern)
        const root = pattern.root()
        const absolute = pattern.isAbsolute() && this.opts.absolute !== false
        // start absolute patterns at root
        if (root) {
          t = t.resolve(
            root === '/' && this.opts.root !== undefined ? this.opts.root : root
          )
          const rest = pattern.rest()
          if (!rest) {
            this.matches.add(t, true, false)
            continue
          } else {
            pattern = rest
          }
        }
        if (t.isENOENT()) {
          continue
        }
        let p
        let rest
        let changed = false
        while (
          typeof (p = pattern.pattern()) === 'string' &&
          (rest = pattern.rest())
        ) {
          const c = t.resolve(p)
          t = c
          pattern = rest
          changed = true
        }
        p = pattern.pattern()
        rest = pattern.rest()
        if (changed) {
          if (this.hasWalkedCache.hasWalked(t, pattern)) {
            continue
          }
          this.hasWalkedCache.storeWalked(t, pattern)
        }
        // now we have either a final string for a known entry,
        // more strings for an unknown entry,
        // or a pattern starting with magic, mounted on t.
        if (typeof p === 'string') {
          // must not be final entry, otherwise we would have
          // concatenated it earlier.
          const ifDir = p === '..' || p === '' || p === '.'
          this.matches.add(t.resolve(p), absolute, ifDir)
          continue
        } else if (p === minimatch_1.GLOBSTAR) {
          // if no rest, match and subwalk pattern
          // if rest, process rest and subwalk pattern
          // if it's a symlink, but we didn't get here by way of a
          // globstar match (meaning it's the first time THIS globstar
          // has traversed a symlink), then we follow it. Otherwise, stop.
          if (
            !t.isSymbolicLink() ||
            this.follow ||
            pattern.checkFollowGlobstar()
          ) {
            this.subwalks.add(t, pattern)
          }
          const rp = rest?.pattern()
          const rrest = rest?.rest()
          if (!rest || ((rp === '' || rp === '.') && !rrest)) {
            // only HAS to be a dir if it ends in **/ or **/.
            // but ending in ** will match files as well.
            this.matches.add(t, absolute, rp === '' || rp === '.')
          } else {
            if (rp === '..') {
              // this would mean you're matching **/.. at the fs root,
              // and no thanks, I'm not gonna test that specific case.
              /* c8 ignore start */
              const tp = t.parent || t
              /* c8 ignore stop */
              if (!rrest) {
                this.matches.add(tp, absolute, true)
              } else if (!this.hasWalkedCache.hasWalked(tp, rrest)) {
                this.subwalks.add(tp, rrest)
              }
            }
          }
        } else if (p instanceof RegExp) {
          this.subwalks.add(t, pattern)
        }
      }
      return this
    }
    subwalkTargets() {
      return this.subwalks.keys()
    }
    child() {
      return new Processor(this.opts, this.hasWalkedCache)
    }
    // return a new Processor containing the subwalks for each
    // child entry, and a set of matches, and
    // a hasWalkedCache that's a copy of this one
    // then we're going to call
    filterEntries(parent, entries) {
      const patterns = this.subwalks.get(parent)
      // put matches and entry walks into the results processor
      const results = this.child()
      for (const e of entries) {
        for (const pattern of patterns) {
          const absolute = pattern.isAbsolute()
          const p = pattern.pattern()
          const rest = pattern.rest()
          if (p === minimatch_1.GLOBSTAR) {
            results.testGlobstar(e, pattern, rest, absolute)
          } else if (p instanceof RegExp) {
            results.testRegExp(e, p, rest, absolute)
          } else {
            results.testString(e, p, rest, absolute)
          }
        }
      }
      return results
    }
    testGlobstar(e, pattern, rest, absolute) {
      if (this.dot || !e.name.startsWith('.')) {
        if (!pattern.hasMore()) {
          this.matches.add(e, absolute, false)
        }
        if (e.canReaddir()) {
          // if we're in follow mode or it's not a symlink, just keep
          // testing the same pattern. If there's more after the globstar,
          // then this symlink consumes the globstar. If not, then we can
          // follow at most ONE symlink along the way, so we mark it, which
          // also checks to ensure that it wasn't already marked.
          if (this.follow || !e.isSymbolicLink()) {
            this.subwalks.add(e, pattern)
          } else if (e.isSymbolicLink()) {
            if (rest && pattern.checkFollowGlobstar()) {
              this.subwalks.add(e, rest)
            } else if (pattern.markFollowGlobstar()) {
              this.subwalks.add(e, pattern)
            }
          }
        }
      }
      // if the NEXT thing matches this entry, then also add
      // the rest.
      if (rest) {
        const rp = rest.pattern()
        if (
          typeof rp === 'string' &&
          // dots and empty were handled already
          rp !== '..' &&
          rp !== '' &&
          rp !== '.'
        ) {
          this.testString(e, rp, rest.rest(), absolute)
        } else if (rp === '..') {
          /* c8 ignore start */
          const ep = e.parent || e
          /* c8 ignore stop */
          this.subwalks.add(ep, rest)
        } else if (rp instanceof RegExp) {
          this.testRegExp(e, rp, rest.rest(), absolute)
        }
      }
    }
    testRegExp(e, p, rest, absolute) {
      if (!p.test(e.name)) {
        return
      }
      if (!rest) {
        this.matches.add(e, absolute, false)
      } else {
        this.subwalks.add(e, rest)
      }
    }
    testString(e, p, rest, absolute) {
      // should never happen?
      if (!e.isNamed(p)) {
        return
      }
      if (!rest) {
        this.matches.add(e, absolute, false)
      } else {
        this.subwalks.add(e, rest)
      }
    }
  }
  processor.Processor = Processor
  return processor
}

let hasRequiredWalker
function requireWalker() {
  if (hasRequiredWalker) {
    return walker
  }
  hasRequiredWalker = 1
  Object.defineProperty(walker, '__esModule', {
    value: true
  })
  walker.GlobStream = walker.GlobWalker = walker.GlobUtil = void 0
  /**
   * Single-use utility classes to provide functionality to the {@link Glob}
   * methods.
   *
   * @module
   */
  const minipass_1 = requireCommonjs$7()
  const ignore_js_1 = requireIgnore()
  const processor_js_1 = requireProcessor()
  const makeIgnore = (ignore, opts) =>
    typeof ignore === 'string'
      ? new ignore_js_1.Ignore([ignore], opts)
      : Array.isArray(ignore)
        ? new ignore_js_1.Ignore(ignore, opts)
        : ignore
  /**
   * basic walking utilities that all the glob walker types use
   */
  class GlobUtil {
    path
    patterns
    opts
    seen = new Set()
    paused = false
    aborted = false
    #onResume = []
    #ignore
    #sep
    signal
    maxDepth
    includeChildMatches
    constructor(patterns, path, opts) {
      this.patterns = patterns
      this.path = path
      this.opts = opts
      this.#sep = !opts.posix && opts.platform === 'win32' ? '\\' : '/'
      this.includeChildMatches = opts.includeChildMatches !== false
      if (opts.ignore || !this.includeChildMatches) {
        this.#ignore = makeIgnore(opts.ignore ?? [], opts)
        if (
          !this.includeChildMatches &&
          typeof this.#ignore.add !== 'function'
        ) {
          const m = 'cannot ignore child matches, ignore lacks add() method.'
          throw new Error(m)
        }
      }
      // ignore, always set with maxDepth, but it's optional on the
      // GlobOptions type
      /* c8 ignore start */
      this.maxDepth = opts.maxDepth || Infinity
      /* c8 ignore stop */
      if (opts.signal) {
        this.signal = opts.signal
        this.signal.addEventListener('abort', () => {
          this.#onResume.length = 0
        })
      }
    }
    #ignored(path) {
      return this.seen.has(path) || !!this.#ignore?.ignored?.(path)
    }
    #childrenIgnored(path) {
      return !!this.#ignore?.childrenIgnored?.(path)
    }
    // backpressure mechanism
    pause() {
      this.paused = true
    }
    resume() {
      /* c8 ignore start */
      if (this.signal?.aborted) {
        return
      }
      /* c8 ignore stop */
      this.paused = false
      let fn = undefined
      while (!this.paused && (fn = this.#onResume.shift())) {
        fn()
      }
    }
    onResume(fn) {
      if (this.signal?.aborted) {
        return
      }
      /* c8 ignore start */
      if (!this.paused) {
        fn()
      } else {
        /* c8 ignore stop */
        this.#onResume.push(fn)
      }
    }
    // do the requisite realpath/stat checking, and return the path
    // to add or undefined to filter it out.
    async matchCheck(e, ifDir) {
      if (ifDir && this.opts.nodir) {
        return undefined
      }
      let rpc
      if (this.opts.realpath) {
        rpc = e.realpathCached() || (await e.realpath())
        if (!rpc) {
          return undefined
        }
        e = rpc
      }
      const needStat = e.isUnknown() || this.opts.stat
      const s = needStat ? await e.lstat() : e
      if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
        const target = await s.realpath()
        /* c8 ignore start */
        if (target && (target.isUnknown() || this.opts.stat)) {
          await target.lstat()
        }
        /* c8 ignore stop */
      }
      return this.matchCheckTest(s, ifDir)
    }
    matchCheckTest(e, ifDir) {
      return e &&
        (this.maxDepth === Infinity || e.depth() <= this.maxDepth) &&
        (!ifDir || e.canReaddir()) &&
        (!this.opts.nodir || !e.isDirectory()) &&
        (!this.opts.nodir ||
          !this.opts.follow ||
          !e.isSymbolicLink() ||
          !e.realpathCached()?.isDirectory()) &&
        !this.#ignored(e)
        ? e
        : undefined
    }
    matchCheckSync(e, ifDir) {
      if (ifDir && this.opts.nodir) {
        return undefined
      }
      let rpc
      if (this.opts.realpath) {
        rpc = e.realpathCached() || e.realpathSync()
        if (!rpc) {
          return undefined
        }
        e = rpc
      }
      const needStat = e.isUnknown() || this.opts.stat
      const s = needStat ? e.lstatSync() : e
      if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
        const target = s.realpathSync()
        if (target && (target?.isUnknown() || this.opts.stat)) {
          target.lstatSync()
        }
      }
      return this.matchCheckTest(s, ifDir)
    }
    matchFinish(e, absolute) {
      if (this.#ignored(e)) {
        return
      }
      // we know we have an ignore if this is false, but TS doesn't
      if (!this.includeChildMatches && this.#ignore?.add) {
        const ign = `${e.relativePosix()}/**`
        this.#ignore.add(ign)
      }
      const abs =
        this.opts.absolute === undefined ? absolute : this.opts.absolute
      this.seen.add(e)
      const mark = this.opts.mark && e.isDirectory() ? this.#sep : ''
      // ok, we have what we need!
      if (this.opts.withFileTypes) {
        this.matchEmit(e)
      } else if (abs) {
        const abs = this.opts.posix ? e.fullpathPosix() : e.fullpath()
        this.matchEmit(abs + mark)
      } else {
        const rel = this.opts.posix ? e.relativePosix() : e.relative()
        const pre =
          this.opts.dotRelative && !rel.startsWith('..' + this.#sep)
            ? '.' + this.#sep
            : ''
        this.matchEmit(!rel ? '.' + mark : pre + rel + mark)
      }
    }
    async match(e, absolute, ifDir) {
      const p = await this.matchCheck(e, ifDir)
      if (p) {
        this.matchFinish(p, absolute)
      }
    }
    matchSync(e, absolute, ifDir) {
      const p = this.matchCheckSync(e, ifDir)
      if (p) {
        this.matchFinish(p, absolute)
      }
    }
    walkCB(target, patterns, cb) {
      /* c8 ignore start */
      if (this.signal?.aborted) {
        cb()
      }
      /* c8 ignore stop */
      this.walkCB2(
        target,
        patterns,
        new processor_js_1.Processor(this.opts),
        cb
      )
    }
    walkCB2(target, patterns, processor, cb) {
      if (this.#childrenIgnored(target)) {
        return cb()
      }
      if (this.signal?.aborted) {
        cb()
      }
      if (this.paused) {
        this.onResume(() => this.walkCB2(target, patterns, processor, cb))
        return
      }
      processor.processPatterns(target, patterns)
      // done processing.  all of the above is sync, can be abstracted out.
      // subwalks is a map of paths to the entry filters they need
      // matches is a map of paths to [absolute, ifDir] tuples.
      let tasks = 1
      const next = () => {
        if (--tasks === 0) {
          cb()
        }
      }
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m)) {
          continue
        }
        tasks++
        this.match(m, absolute, ifDir).then(() => next())
      }
      for (const t of processor.subwalkTargets()) {
        if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
          continue
        }
        tasks++
        const childrenCached = t.readdirCached()
        if (t.calledReaddir()) {
          this.walkCB3(t, childrenCached, processor, next)
        } else {
          t.readdirCB(
            (_, entries) => this.walkCB3(t, entries, processor, next),
            true
          )
        }
      }
      next()
    }
    walkCB3(target, entries, processor, cb) {
      processor = processor.filterEntries(target, entries)
      let tasks = 1
      const next = () => {
        if (--tasks === 0) {
          cb()
        }
      }
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m)) {
          continue
        }
        tasks++
        this.match(m, absolute, ifDir).then(() => next())
      }
      for (const [target, patterns] of processor.subwalks.entries()) {
        tasks++
        this.walkCB2(target, patterns, processor.child(), next)
      }
      next()
    }
    walkCBSync(target, patterns, cb) {
      /* c8 ignore start */
      if (this.signal?.aborted) {
        cb()
      }
      /* c8 ignore stop */
      this.walkCB2Sync(
        target,
        patterns,
        new processor_js_1.Processor(this.opts),
        cb
      )
    }
    walkCB2Sync(target, patterns, processor, cb) {
      if (this.#childrenIgnored(target)) {
        return cb()
      }
      if (this.signal?.aborted) {
        cb()
      }
      if (this.paused) {
        this.onResume(() => this.walkCB2Sync(target, patterns, processor, cb))
        return
      }
      processor.processPatterns(target, patterns)
      // done processing.  all of the above is sync, can be abstracted out.
      // subwalks is a map of paths to the entry filters they need
      // matches is a map of paths to [absolute, ifDir] tuples.
      let tasks = 1
      const next = () => {
        if (--tasks === 0) {
          cb()
        }
      }
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m)) {
          continue
        }
        this.matchSync(m, absolute, ifDir)
      }
      for (const t of processor.subwalkTargets()) {
        if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
          continue
        }
        tasks++
        const children = t.readdirSync()
        this.walkCB3Sync(t, children, processor, next)
      }
      next()
    }
    walkCB3Sync(target, entries, processor, cb) {
      processor = processor.filterEntries(target, entries)
      let tasks = 1
      const next = () => {
        if (--tasks === 0) {
          cb()
        }
      }
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m)) {
          continue
        }
        this.matchSync(m, absolute, ifDir)
      }
      for (const [target, patterns] of processor.subwalks.entries()) {
        tasks++
        this.walkCB2Sync(target, patterns, processor.child(), next)
      }
      next()
    }
  }
  walker.GlobUtil = GlobUtil
  class GlobWalker extends GlobUtil {
    matches = new Set()

    matchEmit(e) {
      this.matches.add(e)
    }
    async walk() {
      if (this.signal?.aborted) {
        throw this.signal.reason
      }
      if (this.path.isUnknown()) {
        await this.path.lstat()
      }
      await new Promise((res, rej) => {
        this.walkCB(this.path, this.patterns, () => {
          if (this.signal?.aborted) {
            rej(this.signal.reason)
          } else {
            res(this.matches)
          }
        })
      })
      return this.matches
    }
    walkSync() {
      if (this.signal?.aborted) {
        throw this.signal.reason
      }
      if (this.path.isUnknown()) {
        this.path.lstatSync()
      }
      // nothing for the callback to do, because this never pauses
      this.walkCBSync(this.path, this.patterns, () => {
        if (this.signal?.aborted) {
          throw this.signal.reason
        }
      })
      return this.matches
    }
  }
  walker.GlobWalker = GlobWalker
  class GlobStream extends GlobUtil {
    results
    constructor(patterns, path, opts) {
      super(patterns, path, opts)
      this.results = new minipass_1.Minipass({
        signal: this.signal,
        objectMode: true
      })
      this.results.on('drain', () => this.resume())
      this.results.on('resume', () => this.resume())
    }
    matchEmit(e) {
      this.results.write(e)
      if (!this.results.flowing) {
        this.pause()
      }
    }
    stream() {
      const target = this.path
      if (target.isUnknown()) {
        target.lstat().then(() => {
          this.walkCB(target, this.patterns, () => this.results.end())
        })
      } else {
        this.walkCB(target, this.patterns, () => this.results.end())
      }
      return this.results
    }
    streamSync() {
      if (this.path.isUnknown()) {
        this.path.lstatSync()
      }
      this.walkCBSync(this.path, this.patterns, () => this.results.end())
      return this.results
    }
  }
  walker.GlobStream = GlobStream
  return walker
}

let hasRequiredGlob$1
function requireGlob$1() {
  if (hasRequiredGlob$1) {
    return glob
  }
  hasRequiredGlob$1 = 1
  Object.defineProperty(glob, '__esModule', {
    value: true
  })
  glob.Glob = void 0
  const minimatch_1 = requireCommonjs$3()
  const node_url_1 = require$$2$3
  const path_scurry_1 = requireCommonjs$1()
  const pattern_js_1 = requirePattern()
  const walker_js_1 = requireWalker()
  // if no process global, just call it linux.
  // so we default to case-sensitive, / separators
  const defaultPlatform =
    typeof process === 'object' &&
    process &&
    typeof process.platform === 'string'
      ? process.platform
      : 'linux'
  /**
   * An object that can perform glob pattern traversals.
   */
  class Glob {
    absolute
    cwd
    root
    dot
    dotRelative
    follow
    ignore
    magicalBraces
    mark
    matchBase
    maxDepth
    nobrace
    nocase
    nodir
    noext
    noglobstar
    pattern
    platform
    realpath
    scurry
    stat
    signal
    windowsPathsNoEscape
    withFileTypes
    includeChildMatches
    /**
     * The options provided to the constructor.
     */
    opts
    /**
     * An array of parsed immutable {@link Pattern} objects.
     */
    patterns
    /**
     * All options are stored as properties on the `Glob` object.
     *
     * See {@link GlobOptions} for full options descriptions.
     *
     * Note that a previous `Glob` object can be passed as the
     * `GlobOptions` to another `Glob` instantiation to re-use settings
     * and caches with a new pattern.
     *
     * Traversal functions can be called multiple times to run the walk
     * again.
     */
    constructor(pattern, opts) {
      /* c8 ignore start */
      if (!opts) {
        throw new TypeError('glob options required')
      }
      /* c8 ignore stop */
      this.withFileTypes = !!opts.withFileTypes
      this.signal = opts.signal
      this.follow = !!opts.follow
      this.dot = !!opts.dot
      this.dotRelative = !!opts.dotRelative
      this.nodir = !!opts.nodir
      this.mark = !!opts.mark
      if (!opts.cwd) {
        this.cwd = ''
      } else if (opts.cwd instanceof URL || opts.cwd.startsWith('file://')) {
        opts.cwd = (0, node_url_1.fileURLToPath)(opts.cwd)
      }
      this.cwd = opts.cwd || ''
      this.root = opts.root
      this.magicalBraces = !!opts.magicalBraces
      this.nobrace = !!opts.nobrace
      this.noext = !!opts.noext
      this.realpath = !!opts.realpath
      this.absolute = opts.absolute
      this.includeChildMatches = opts.includeChildMatches !== false
      this.noglobstar = !!opts.noglobstar
      this.matchBase = !!opts.matchBase
      this.maxDepth =
        typeof opts.maxDepth === 'number' ? opts.maxDepth : Infinity
      this.stat = !!opts.stat
      this.ignore = opts.ignore
      if (this.withFileTypes && this.absolute !== undefined) {
        throw new Error('cannot set absolute and withFileTypes:true')
      }
      if (typeof pattern === 'string') {
        pattern = [pattern]
      }
      this.windowsPathsNoEscape =
        !!opts.windowsPathsNoEscape || opts.allowWindowsEscape === false
      if (this.windowsPathsNoEscape) {
        pattern = pattern.map(p => p.replace(/\\/g, '/'))
      }
      if (this.matchBase) {
        if (opts.noglobstar) {
          throw new TypeError('base matching requires globstar')
        }
        pattern = pattern.map(p => (p.includes('/') ? p : `./**/${p}`))
      }
      this.pattern = pattern
      this.platform = opts.platform || defaultPlatform
      this.opts = {
        ...opts,
        platform: this.platform
      }
      if (opts.scurry) {
        this.scurry = opts.scurry
        if (opts.nocase !== undefined && opts.nocase !== opts.scurry.nocase) {
          throw new Error('nocase option contradicts provided scurry option')
        }
      } else {
        const Scurry =
          opts.platform === 'win32'
            ? path_scurry_1.PathScurryWin32
            : opts.platform === 'darwin'
              ? path_scurry_1.PathScurryDarwin
              : opts.platform
                ? path_scurry_1.PathScurryPosix
                : path_scurry_1.PathScurry
        this.scurry = new Scurry(this.cwd, {
          nocase: opts.nocase,
          fs: opts.fs
        })
      }
      this.nocase = this.scurry.nocase
      // If you do nocase:true on a case-sensitive file system, then
      // we need to use regexps instead of strings for non-magic
      // path portions, because statting `aBc` won't return results
      // for the file `AbC` for example.
      const nocaseMagicOnly =
        this.platform === 'darwin' || this.platform === 'win32'
      const mmo = {
        // default nocase based on platform
        ...opts,
        dot: this.dot,
        matchBase: this.matchBase,
        nobrace: this.nobrace,
        nocase: this.nocase,
        nocaseMagicOnly,
        nocomment: true,
        noext: this.noext,
        nonegate: true,
        optimizationLevel: 2,
        platform: this.platform,
        windowsPathsNoEscape: this.windowsPathsNoEscape,
        debug: !!this.opts.debug
      }
      const mms = this.pattern.map(p => new minimatch_1.Minimatch(p, mmo))
      const [matchSet, globParts] = mms.reduce(
        (set, m) => {
          set[0].push(...m.set)
          set[1].push(...m.globParts)
          return set
        },
        [[], []]
      )
      this.patterns = matchSet.map((set, i) => {
        const g = globParts[i]
        /* c8 ignore start */
        if (!g) {
          throw new Error('invalid pattern object')
        }
        /* c8 ignore stop */
        return new pattern_js_1.Pattern(set, g, 0, this.platform)
      })
    }
    async walk() {
      // Walkers always return array of Path objects, so we just have to
      // coerce them into the right shape.  It will have already called
      // realpath() if the option was set to do so, so we know that's cached.
      // start out knowing the cwd, at least
      return [
        ...(await new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {
          ...this.opts,
          maxDepth:
            this.maxDepth !== Infinity
              ? this.maxDepth + this.scurry.cwd.depth()
              : Infinity,
          platform: this.platform,
          nocase: this.nocase,
          includeChildMatches: this.includeChildMatches
        }).walk())
      ]
    }
    walkSync() {
      return [
        ...new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {
          ...this.opts,
          maxDepth:
            this.maxDepth !== Infinity
              ? this.maxDepth + this.scurry.cwd.depth()
              : Infinity,
          platform: this.platform,
          nocase: this.nocase,
          includeChildMatches: this.includeChildMatches
        }).walkSync()
      ]
    }
    stream() {
      return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth:
          this.maxDepth !== Infinity
            ? this.maxDepth + this.scurry.cwd.depth()
            : Infinity,
        platform: this.platform,
        nocase: this.nocase,
        includeChildMatches: this.includeChildMatches
      }).stream()
    }
    streamSync() {
      return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth:
          this.maxDepth !== Infinity
            ? this.maxDepth + this.scurry.cwd.depth()
            : Infinity,
        platform: this.platform,
        nocase: this.nocase,
        includeChildMatches: this.includeChildMatches
      }).streamSync()
    }
    /**
     * Default sync iteration function. Returns a Generator that
     * iterates over the results.
     */
    iterateSync() {
      return this.streamSync()[Symbol.iterator]()
    }
    [Symbol.iterator]() {
      return this.iterateSync()
    }
    /**
     * Default async iteration function. Returns an AsyncGenerator that
     * iterates over the results.
     */
    iterate() {
      return this.stream()[Symbol.asyncIterator]()
    }
    [Symbol.asyncIterator]() {
      return this.iterate()
    }
  }
  glob.Glob = Glob
  return glob
}

const hasMagic = {}

let hasRequiredHasMagic
function requireHasMagic() {
  if (hasRequiredHasMagic) {
    return hasMagic
  }
  hasRequiredHasMagic = 1
  Object.defineProperty(hasMagic, '__esModule', {
    value: true
  })
  hasMagic.hasMagic = void 0
  const minimatch_1 = requireCommonjs$3()
  /**
   * Return true if the patterns provided contain any magic glob characters,
   * given the options provided.
   *
   * Brace expansion is not considered "magic" unless the `magicalBraces` option
   * is set, as brace expansion just turns one string into an array of strings.
   * So a pattern like `'x{a,b}y'` would return `false`, because `'xay'` and
   * `'xby'` both do not contain any magic glob characters, and it's treated the
   * same as if you had called it on `['xay', 'xby']`. When `magicalBraces:true`
   * is in the options, brace expansion _is_ treated as a pattern having magic.
   */
  const hasMagic$1 = (pattern, options = {}) => {
    if (!Array.isArray(pattern)) {
      pattern = [pattern]
    }
    for (const p of pattern) {
      if (new minimatch_1.Minimatch(p, options).hasMagic()) {
        return true
      }
    }
    return false
  }
  hasMagic.hasMagic = hasMagic$1
  return hasMagic
}

let hasRequiredCommonjs
function requireCommonjs() {
  if (hasRequiredCommonjs) {
    return commonjs$5
  }
  hasRequiredCommonjs = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.glob =
      exports.sync =
      exports.iterate =
      exports.iterateSync =
      exports.stream =
      exports.streamSync =
      exports.Ignore =
      exports.hasMagic =
      exports.Glob =
      exports.unescape =
      exports.escape =
        void 0
    exports.globStreamSync = globStreamSync
    exports.globStream = globStream
    exports.globSync = globSync
    exports.globIterateSync = globIterateSync
    exports.globIterate = globIterate
    const minimatch_1 = requireCommonjs$3()
    const glob_js_1 = requireGlob$1()
    const has_magic_js_1 = requireHasMagic()
    const minimatch_2 = requireCommonjs$3()
    Object.defineProperty(exports, 'escape', {
      enumerable: true,
      get: function () {
        return minimatch_2.escape
      }
    })
    Object.defineProperty(exports, 'unescape', {
      enumerable: true,
      get: function () {
        return minimatch_2.unescape
      }
    })
    const glob_js_2 = requireGlob$1()
    Object.defineProperty(exports, 'Glob', {
      enumerable: true,
      get: function () {
        return glob_js_2.Glob
      }
    })
    const has_magic_js_2 = requireHasMagic()
    Object.defineProperty(exports, 'hasMagic', {
      enumerable: true,
      get: function () {
        return has_magic_js_2.hasMagic
      }
    })
    const ignore_js_1 = requireIgnore()
    Object.defineProperty(exports, 'Ignore', {
      enumerable: true,
      get: function () {
        return ignore_js_1.Ignore
      }
    })
    function globStreamSync(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).streamSync()
    }
    function globStream(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).stream()
    }
    function globSync(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).walkSync()
    }
    async function glob_(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).walk()
    }
    function globIterateSync(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).iterateSync()
    }
    function globIterate(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).iterate()
    }
    // aliases: glob.sync.stream() glob.stream.sync() glob.sync() etc
    exports.streamSync = globStreamSync
    exports.stream = Object.assign(globStream, {
      sync: globStreamSync
    })
    exports.iterateSync = globIterateSync
    exports.iterate = Object.assign(globIterate, {
      sync: globIterateSync
    })
    exports.sync = Object.assign(globSync, {
      stream: globStreamSync,
      iterate: globIterateSync
    })
    exports.glob = Object.assign(glob_, {
      glob: glob_,
      globSync,
      sync: exports.sync,
      globStream,
      stream: exports.stream,
      globStreamSync,
      streamSync: exports.streamSync,
      globIterate,
      iterate: exports.iterate,
      globIterateSync,
      iterateSync: exports.iterateSync,
      Glob: glob_js_1.Glob,
      hasMagic: has_magic_js_1.hasMagic,
      escape: minimatch_1.escape,
      unescape: minimatch_1.unescape
    })
    exports.glob.glob = exports.glob
  })(commonjs$5)
  return commonjs$5
}

let glob_1
let hasRequiredGlob
function requireGlob() {
  if (hasRequiredGlob) {
    return glob_1
  }
  hasRequiredGlob = 1
  const { glob } = requireCommonjs()
  const path = require$$0$3
  const globify = pattern => pattern.split(path.win32.sep).join(path.posix.sep)
  glob_1 = (path, options) => glob(globify(path), options)
  return glob_1
}

let rm_1
let hasRequiredRm$1
function requireRm$1() {
  if (hasRequiredRm$1) {
    return rm_1
  }
  hasRequiredRm$1 = 1
  const fs = require$$0$5
  const contentPath = requirePath()
  const { hasContent } = requireRead()
  rm_1 = rm
  async function rm(cache, integrity) {
    const content = await hasContent(cache, integrity)
    // ~pretty~ sure we can't end up with a content lacking sri, but be safe
    if (content && content.sri) {
      await fs.rm(contentPath(cache, content.sri), {
        recursive: true,
        force: true
      })
      return true
    } else {
      return false
    }
  }
  return rm_1
}

let hasRequiredRm
function requireRm() {
  if (hasRequiredRm) {
    return rm.exports
  }
  hasRequiredRm = 1
  const { rm: rm$1 } = require$$0$5
  const glob = requireGlob()
  const index = requireEntryIndex()
  const memo = requireMemoization()
  const path = require$$0$3
  const rmContent = requireRm$1()
  rm.exports = entry
  rm.exports.entry = entry
  function entry(cache, key, opts) {
    memo.clearMemoized()
    return index.delete(cache, key, opts)
  }
  rm.exports.content = content
  function content(cache, integrity) {
    memo.clearMemoized()
    return rmContent(cache, integrity)
  }
  rm.exports.all = all
  async function all(cache) {
    memo.clearMemoized()
    const paths = await glob(path.join(cache, '*(content-*|index-*)'), {
      silent: true,
      nosort: true
    })
    return Promise.all(
      paths.map(p =>
        rm$1(p, {
          recursive: true,
          force: true
        })
      )
    )
  }
  return rm.exports
}

const verify = { exports: {} }

let hasRequiredVerify
function requireVerify() {
  if (hasRequiredVerify) {
    return verify.exports
  }
  hasRequiredVerify = 1
  const { mkdir, readFile, rm, stat, truncate, writeFile } = require$$0$5
  const contentPath = requirePath()
  const fsm = requireLib$1()
  const glob = requireGlob()
  const index$1 = requireEntryIndex()
  const path = require$$0$3
  const ssri = requireLib$5()
  const hasOwnProperty = (obj, key) =>
    Object.prototype.hasOwnProperty.call(obj, key)
  const verifyOpts = opts => ({
    concurrency: 20,
    log: {
      silly() {}
    },
    ...opts
  })
  verify.exports = verify$1
  async function verify$1(cache, opts) {
    opts = verifyOpts(opts)
    opts.log.silly('verify', 'verifying cache at', cache)
    const steps = [
      markStartTime,
      fixPerms,
      garbageCollect,
      rebuildIndex,
      cleanTmp,
      writeVerifile,
      markEndTime
    ]
    const stats = {}
    for (const step of steps) {
      const label = step.name
      const start = new Date()
      const s = await step(cache, opts)
      if (s) {
        Object.keys(s).forEach(k => {
          stats[k] = s[k]
        })
      }
      const end = new Date()
      if (!stats.runTime) {
        stats.runTime = {}
      }
      stats.runTime[label] = end - start
    }
    stats.runTime.total = stats.endTime - stats.startTime
    opts.log.silly(
      'verify',
      'verification finished for',
      cache,
      'in',
      `${stats.runTime.total}ms`
    )
    return stats
  }
  async function markStartTime() {
    return {
      startTime: new Date()
    }
  }
  async function markEndTime() {
    return {
      endTime: new Date()
    }
  }
  async function fixPerms(cache, opts) {
    opts.log.silly('verify', 'fixing cache permissions')
    await mkdir(cache, {
      recursive: true
    })
    return null
  }

  // Implements a naive mark-and-sweep tracing garbage collector.
  //
  // The algorithm is basically as follows:
  // 1. Read (and filter) all index entries ("pointers")
  // 2. Mark each integrity value as "live"
  // 3. Read entire filesystem tree in `content-vX/` dir
  // 4. If content is live, verify its checksum and delete it if it fails
  // 5. If content is not marked as live, rm it.
  //
  async function garbageCollect(cache, opts) {
    opts.log.silly('verify', 'garbage collecting content')
    const { default: pMap } = await Promise.resolve().then(function () {
      return index
    })
    const indexStream = index$1.lsStream(cache)
    const liveContent = new Set()
    indexStream.on('data', entry => {
      if (opts.filter && !opts.filter(entry)) {
        return
      }

      // integrity is stringified, re-parse it so we can get each hash
      const integrity = ssri.parse(entry.integrity)
      for (const algo in integrity) {
        liveContent.add(integrity[algo].toString())
      }
    })
    await new Promise((resolve, reject) => {
      indexStream.on('end', resolve).on('error', reject)
    })
    const contentDir = contentPath.contentDir(cache)
    const files = await glob(path.join(contentDir, '**'), {
      follow: false,
      nodir: true,
      nosort: true
    })
    const stats = {
      verifiedContent: 0,
      reclaimedCount: 0,
      reclaimedSize: 0,
      badContentCount: 0,
      keptSize: 0
    }
    await pMap(
      files,
      async f => {
        const split = f.split(/[/\\]/)
        const digest = split.slice(split.length - 3).join('')
        const algo = split[split.length - 4]
        const integrity = ssri.fromHex(digest, algo)
        if (liveContent.has(integrity.toString())) {
          const info = await verifyContent(f, integrity)
          if (!info.valid) {
            stats.reclaimedCount++
            stats.badContentCount++
            stats.reclaimedSize += info.size
          } else {
            stats.verifiedContent++
            stats.keptSize += info.size
          }
        } else {
          // No entries refer to this content. We can delete.
          stats.reclaimedCount++
          const s = await stat(f)
          await rm(f, {
            recursive: true,
            force: true
          })
          stats.reclaimedSize += s.size
        }
        return stats
      },
      {
        concurrency: opts.concurrency
      }
    )
    return stats
  }
  async function verifyContent(filepath, sri) {
    const contentInfo = {}
    try {
      const { size } = await stat(filepath)
      contentInfo.size = size
      contentInfo.valid = true
      await ssri.checkStream(new fsm.ReadStream(filepath), sri)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return {
          size: 0,
          valid: false
        }
      }
      if (err.code !== 'EINTEGRITY') {
        throw err
      }
      await rm(filepath, {
        recursive: true,
        force: true
      })
      contentInfo.valid = false
    }
    return contentInfo
  }
  async function rebuildIndex(cache, opts) {
    opts.log.silly('verify', 'rebuilding index')
    const { default: pMap } = await Promise.resolve().then(function () {
      return index
    })
    const entries = await index$1.ls(cache)
    const stats = {
      missingContent: 0,
      rejectedEntries: 0,
      totalEntries: 0
    }
    const buckets = {}
    for (const k in entries) {
      /* istanbul ignore else */
      if (hasOwnProperty(entries, k)) {
        const hashed = index$1.hashKey(k)
        const entry = entries[k]
        const excluded = opts.filter && !opts.filter(entry)
        excluded && stats.rejectedEntries++
        if (buckets[hashed] && !excluded) {
          buckets[hashed].push(entry)
        } else if (buckets[hashed] && excluded) {
        } else if (excluded) {
          buckets[hashed] = []
          buckets[hashed]._path = index$1.bucketPath(cache, k)
        } else {
          buckets[hashed] = [entry]
          buckets[hashed]._path = index$1.bucketPath(cache, k)
        }
      }
    }
    await pMap(
      Object.keys(buckets),
      key => {
        return rebuildBucket(cache, buckets[key], stats)
      },
      {
        concurrency: opts.concurrency
      }
    )
    return stats
  }
  async function rebuildBucket(cache, bucket, stats) {
    await truncate(bucket._path)
    // This needs to be serialized because cacache explicitly
    // lets very racy bucket conflicts clobber each other.
    for (const entry of bucket) {
      const content = contentPath(cache, entry.integrity)
      try {
        await stat(content)
        await index$1.insert(cache, entry.key, entry.integrity, {
          metadata: entry.metadata,
          size: entry.size,
          time: entry.time
        })
        stats.totalEntries++
      } catch (err) {
        if (err.code === 'ENOENT') {
          stats.rejectedEntries++
          stats.missingContent++
        } else {
          throw err
        }
      }
    }
  }
  function cleanTmp(cache, opts) {
    opts.log.silly('verify', 'cleaning tmp directory')
    return rm(path.join(cache, 'tmp'), {
      recursive: true,
      force: true
    })
  }
  async function writeVerifile(cache, opts) {
    const verifile = path.join(cache, '_lastverified')
    opts.log.silly('verify', 'writing verifile to ' + verifile)
    return writeFile(verifile, `${Date.now()}`)
  }
  verify.exports.lastRun = lastRun
  async function lastRun(cache) {
    const data = await readFile(path.join(cache, '_lastverified'), {
      encoding: 'utf8'
    })
    return new Date(+data)
  }
  return verify.exports
}

const tmp = {}

let hasRequiredTmp
function requireTmp() {
  if (hasRequiredTmp) {
    return tmp
  }
  hasRequiredTmp = 1
  const { withTempDir } = requireLib$2()
  const fs = require$$0$5
  const path = require$$0$3
  tmp.mkdir = mktmpdir
  async function mktmpdir(cache, opts = {}) {
    const { tmpPrefix } = opts
    const tmpDir = path.join(cache, 'tmp')
    await fs.mkdir(tmpDir, {
      recursive: true,
      owner: 'inherit'
    })
    // do not use path.join(), it drops the trailing / if tmpPrefix is unset
    const target = `${tmpDir}${path.sep}${tmpPrefix || ''}`
    return fs.mkdtemp(target, {
      owner: 'inherit'
    })
  }
  tmp.withTmp = withTmp
  function withTmp(cache, opts, cb) {
    if (!cb) {
      cb = opts
      opts = {}
    }
    return withTempDir(path.join(cache, 'tmp'), cb, opts)
  }
  return tmp
}

lib$5.exports
let hasRequiredLib
function requireLib() {
  if (hasRequiredLib) {
    return lib$5.exports
  }
  hasRequiredLib = 1
  ;(function (module) {
    const get = requireGet()
    const put = requirePut()
    const rm = requireRm()
    const verify = requireVerify()
    const { clearMemoized } = requireMemoization()
    const tmp = requireTmp()
    const index = requireEntryIndex()
    module.exports.index = {}
    module.exports.index.compact = index.compact
    module.exports.index.insert = index.insert
    module.exports.ls = index.ls
    module.exports.ls.stream = index.lsStream
    module.exports.get = get
    module.exports.get.byDigest = get.byDigest
    module.exports.get.stream = get.stream
    module.exports.get.stream.byDigest = get.stream.byDigest
    module.exports.get.copy = get.copy
    module.exports.get.copy.byDigest = get.copy.byDigest
    module.exports.get.info = get.info
    module.exports.get.hasContent = get.hasContent
    module.exports.put = put
    module.exports.put.stream = put.stream
    module.exports.rm = rm.entry
    module.exports.rm.all = rm.all
    module.exports.rm.entry = module.exports.rm
    module.exports.rm.content = rm.content
    module.exports.clearMemoized = clearMemoized
    module.exports.tmp = {}
    module.exports.tmp.mkdir = tmp.mkdir
    module.exports.tmp.withTmp = tmp.withTmp
    module.exports.verify = verify
    module.exports.verify.lastRun = verify.lastRun
  })(lib$5)
  return lib$5.exports
}

const libExports = requireLib()

async function pMap(
  iterable,
  mapper,
  { concurrency = Number.POSITIVE_INFINITY, stopOnError = true, signal } = {}
) {
  return new Promise((resolve_, reject_) => {
    if (
      iterable[Symbol.iterator] === undefined &&
      iterable[Symbol.asyncIterator] === undefined
    ) {
      throw new TypeError(
        `Expected \`input\` to be either an \`Iterable\` or \`AsyncIterable\`, got (${typeof iterable})`
      )
    }
    if (typeof mapper !== 'function') {
      throw new TypeError('Mapper function is required')
    }
    if (
      !(
        (Number.isSafeInteger(concurrency) && concurrency >= 1) ||
        concurrency === Number.POSITIVE_INFINITY
      )
    ) {
      throw new TypeError(
        `Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${concurrency}\` (${typeof concurrency})`
      )
    }
    const result = []
    const errors = []
    const skippedIndexesMap = new Map()
    let isRejected = false
    let isResolved = false
    let isIterableDone = false
    let resolvingCount = 0
    let currentIndex = 0
    const iterator =
      iterable[Symbol.iterator] === undefined
        ? iterable[Symbol.asyncIterator]()
        : iterable[Symbol.iterator]()
    const signalListener = () => {
      reject(signal.reason)
    }
    const cleanup = () => {
      signal?.removeEventListener('abort', signalListener)
    }
    const resolve = value => {
      resolve_(value)
      cleanup()
    }
    const reject = reason => {
      isRejected = true
      isResolved = true
      reject_(reason)
      cleanup()
    }
    if (signal) {
      if (signal.aborted) {
        reject(signal.reason)
      }
      signal.addEventListener('abort', signalListener, {
        once: true
      })
    }
    const next = async () => {
      if (isResolved) {
        return
      }
      const nextItem = await iterator.next()
      const index = currentIndex
      currentIndex++

      // Note: `iterator.next()` can be called many times in parallel.
      // This can cause multiple calls to this `next()` function to
      // receive a `nextItem` with `done === true`.
      // The shutdown logic that rejects/resolves must be protected
      // so it runs only one time as the `skippedIndex` logic is
      // non-idempotent.
      if (nextItem.done) {
        isIterableDone = true
        if (resolvingCount === 0 && !isResolved) {
          if (!stopOnError && errors.length > 0) {
            reject(new AggregateError(errors)) // eslint-disable-line unicorn/error-message
            return
          }
          isResolved = true
          if (skippedIndexesMap.size === 0) {
            resolve(result)
            return
          }
          const pureResult = []

          // Support multiple `pMapSkip`'s.
          for (const [index, value] of result.entries()) {
            if (skippedIndexesMap.get(index) === pMapSkip) {
              continue
            }
            pureResult.push(value)
          }
          resolve(pureResult)
        }
        return
      }
      resolvingCount++

      // Intentionally detached
      ;(async () => {
        try {
          const element = await nextItem.value
          if (isResolved) {
            return
          }
          const value = await mapper(element, index)

          // Use Map to stage the index of the element.
          if (value === pMapSkip) {
            skippedIndexesMap.set(index, value)
          }
          result[index] = value
          resolvingCount--
          await next()
        } catch (error) {
          if (stopOnError) {
            reject(error)
          } else {
            errors.push(error)
            resolvingCount--

            // In that case we can't really continue regardless of `stopOnError` state
            // since an iterable is likely to continue throwing after it throws once.
            // If we continue calling `next()` indefinitely we will likely end up
            // in an infinite loop of failed iteration.
            try {
              await next()
            } catch (error) {
              reject(error)
            }
          }
        }
      })()
    }

    // Create the concurrent runners in a detached (non-awaited)
    // promise. We need this so we can await the `next()` calls
    // to stop creating runners before hitting the concurrency limit
    // if the iterable has already been marked as done.
    // NOTE: We *must* do this for async iterators otherwise we'll spin up
    // infinite `next()` calls by default and never start the event loop.
    ;(async () => {
      for (let index = 0; index < concurrency; index++) {
        try {
          // eslint-disable-next-line no-await-in-loop
          await next()
        } catch (error) {
          reject(error)
          break
        }
        if (isIterableDone || isRejected) {
          break
        }
      }
    })()
  })
}
const pMapSkip = Symbol('skip')

const index = /*#__PURE__*/ Object.freeze({
  __proto__: null,
  default: pMap,
  pMapSkip: pMapSkip
})

module.exports = libExports
