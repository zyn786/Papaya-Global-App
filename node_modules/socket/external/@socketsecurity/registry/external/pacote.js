'use strict'

const require$$2$3 = require('path')
const require$$0$5 = require('fs/promises')
const require$$5$2 = require('module')
const require$$0$2 = require('url')
const require$$0$6 = require('url')
const require$$0$4 = require('fs')
const require$$4$2 = require('fs')
const require$$0$3 = require('events')
const require$$1$4 = require('stream')
const require$$2$2 = require('string_decoder')
const require$$1$5 = require('path')
const require$$0$8 = require('child_process')
const require$$0$9 = require('os')
const require$$0$7 = require('fs/promises')
const require$$1$6 = require('os')
const require$$1$7 = require('path/win32')
const require$$0$a = require('module')
const require$$0$b = require('process')
const require$$0$c = require('events')
const require$$1$8 = require('stream')
const require$$2$4 = require('string_decoder')
const require$$0$d = require('crypto')
const require$$0$e = require('util')
const require$$0$h = require('assert')
const require$$0$g = require('buffer')
const require$$0$f = require('zlib')
const require$$7$2 = require('process')
const require$$0$i = require('http')
const require$$2$5 = require('https')
const require$$0$j = require('dns')
const require$$0$k = require('net')
const require$$1$a = require('tls')
const require$$1$9 = require('tty')
const require$$3$1 = require('timers/promises')
const require$$6$1 = require('querystring')
const require$$0$m = require('crypto')
const require$$0$l = require('http2')

let lib$u
let hasRequiredLib$u
function requireLib$u() {
  if (hasRequiredLib$u) {
    return lib$u
  }
  hasRequiredLib$u = 1
  const INDENT = Symbol.for('indent')
  const NEWLINE = Symbol.for('newline')
  const DEFAULT_NEWLINE = '\n'
  const DEFAULT_INDENT = '  '
  const BOM = /^\uFEFF/

  // only respect indentation if we got a line break, otherwise squash it
  // things other than objects and arrays aren't indented, so ignore those
  // Important: in both of these regexps, the $1 capture group is the newline
  // or undefined, and the $2 capture group is the indent, or undefined.
  const FORMAT = /^\s*[{[]((?:\r?\n)+)([\s\t]*)/
  const EMPTY = /^(?:\{\}|\[\])((?:\r?\n)+)?$/

  // Node 20 puts single quotes around the token and a comma after it
  const UNEXPECTED_TOKEN = /^Unexpected token '?(.)'?(,)? /i
  const hexify = char => {
    const h = char.charCodeAt(0).toString(16).toUpperCase()
    return `0x${h.length % 2 ? '0' : ''}${h}`
  }

  // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
  // because the buffer-to-string conversion in `fs.readFileSync()`
  // translates it to FEFF, the UTF-16 BOM.
  const stripBOM = txt => String(txt).replace(BOM, '')
  const makeParsedError = (msg, parsing, position = 0) => ({
    message: `${msg} while parsing ${parsing}`,
    position
  })
  const parseError = (e, txt, context = 20) => {
    let msg = e.message
    if (!txt) {
      return makeParsedError(msg, 'empty string')
    }
    const badTokenMatch = msg.match(UNEXPECTED_TOKEN)
    const badIndexMatch = msg.match(/ position\s+(\d+)/i)
    if (badTokenMatch) {
      msg = msg.replace(
        UNEXPECTED_TOKEN,
        `Unexpected token ${JSON.stringify(badTokenMatch[1])} (${hexify(badTokenMatch[1])})$2 `
      )
    }
    let errIdx
    if (badIndexMatch) {
      errIdx = +badIndexMatch[1]
    } /* istanbul ignore next - doesnt happen in Node 22 */ else if (
      msg.match(/^Unexpected end of JSON.*/i)
    ) {
      errIdx = txt.length - 1
    }
    if (errIdx == null) {
      return makeParsedError(msg, `'${txt.slice(0, context * 2)}'`)
    }
    const start = errIdx <= context ? 0 : errIdx - context
    const end = errIdx + context >= txt.length ? txt.length : errIdx + context
    const slice = `${start ? '...' : ''}${txt.slice(start, end)}${end === txt.length ? '' : '...'}`
    return makeParsedError(
      msg,
      `${txt === slice ? '' : 'near '}${JSON.stringify(slice)}`,
      errIdx
    )
  }
  class JSONParseError extends SyntaxError {
    constructor(er, txt, context, caller) {
      const metadata = parseError(er, txt, context)
      super(metadata.message)
      Object.assign(this, metadata)
      this.code = 'EJSONPARSE'
      this.systemError = er
      Error.captureStackTrace(this, caller || this.constructor)
    }
    get name() {
      return this.constructor.name
    }
    set name(n) {}
    get [Symbol.toStringTag]() {
      return this.constructor.name
    }
  }
  const parseJson = (txt, reviver) => {
    const result = JSON.parse(txt, reviver)
    if (result && typeof result === 'object') {
      // get the indentation so that we can save it back nicely
      // if the file starts with {" then we have an indent of '', ie, none
      // otherwise, pick the indentation of the next line after the first \n If the
      // pattern doesn't match, then it means no indentation. JSON.stringify ignores
      // symbols, so this is reasonably safe. if the string is '{}' or '[]', then
      // use the default 2-space indent.
      const match = txt.match(EMPTY) || txt.match(FORMAT) || [null, '', '']
      result[NEWLINE] = match[1] ?? DEFAULT_NEWLINE
      result[INDENT] = match[2] ?? DEFAULT_INDENT
    }
    return result
  }
  const parseJsonError = (raw, reviver, context) => {
    const txt = stripBOM(raw)
    try {
      return parseJson(txt, reviver)
    } catch (e) {
      if (typeof raw !== 'string' && !Buffer.isBuffer(raw)) {
        const msg =
          Array.isArray(raw) && raw.length === 0
            ? 'an empty array'
            : String(raw)
        throw Object.assign(new TypeError(`Cannot parse ${msg}`), {
          code: 'EJSONPARSE',
          systemError: e
        })
      }
      throw new JSONParseError(e, txt, context, parseJsonError)
    }
  }
  lib$u = parseJsonError
  parseJsonError.JSONParseError = JSONParseError
  parseJsonError.noExceptions = (raw, reviver) => {
    try {
      return parseJson(stripBOM(raw), reviver)
    } catch {
      // no exceptions
    }
  }
  return lib$u
}

let updateDependencies_1
let hasRequiredUpdateDependencies
function requireUpdateDependencies() {
  if (hasRequiredUpdateDependencies) {
    return updateDependencies_1
  }
  hasRequiredUpdateDependencies = 1
  const depTypes = new Set([
    'dependencies',
    'optionalDependencies',
    'devDependencies',
    'peerDependencies'
  ])

  // sort alphabetically all types of deps for a given package
  const orderDeps = content => {
    for (const type of depTypes) {
      if (content && content[type]) {
        content[type] = Object.keys(content[type])
          .sort((a, b) => a.localeCompare(b, 'en'))
          .reduce((res, key) => {
            res[key] = content[type][key]
            return res
          }, {})
      }
    }
    return content
  }
  const updateDependencies = ({ content, originalContent }) => {
    const pkg = orderDeps({
      ...content
    })

    // optionalDependencies don't need to be repeated in two places
    if (pkg.dependencies) {
      if (pkg.optionalDependencies) {
        for (const name of Object.keys(pkg.optionalDependencies)) {
          delete pkg.dependencies[name]
        }
      }
    }
    const result = {
      ...originalContent
    }

    // loop through all types of dependencies and update package json pkg
    for (const type of depTypes) {
      if (pkg[type]) {
        result[type] = pkg[type]
      }

      // prune empty type props from resulting object
      const emptyDepType =
        pkg[type] &&
        typeof pkg === 'object' &&
        Object.keys(pkg[type]).length === 0
      if (emptyDepType) {
        delete result[type]
      }
    }

    // if original package.json had dep in peerDeps AND deps, preserve that.
    const { dependencies: origProd, peerDependencies: origPeer } =
      originalContent || {}
    const { peerDependencies: newPeer } = result
    if (origProd && origPeer && newPeer) {
      // we have original prod/peer deps, and new peer deps
      // copy over any that were in both in the original
      for (const name of Object.keys(origPeer)) {
        if (origProd[name] !== undefined && newPeer[name] !== undefined) {
          result.dependencies = result.dependencies || {}
          result.dependencies[name] = newPeer[name]
        }
      }
    }
    return result
  }
  updateDependencies.knownKeys = depTypes
  updateDependencies_1 = updateDependencies
  return updateDependencies_1
}

let updateScripts_1
let hasRequiredUpdateScripts
function requireUpdateScripts() {
  if (hasRequiredUpdateScripts) {
    return updateScripts_1
  }
  hasRequiredUpdateScripts = 1
  const updateScripts = ({ content, originalContent = {} }) => {
    const newScripts = content.scripts
    if (!newScripts) {
      return originalContent
    }

    // validate scripts content being appended
    const hasInvalidScripts = () =>
      Object.entries(newScripts).some(
        ([key, value]) => typeof key !== 'string' || typeof value !== 'string'
      )
    if (hasInvalidScripts()) {
      throw Object.assign(
        new TypeError(
          'package.json scripts should be a key-value pair of strings.'
        ),
        {
          code: 'ESCRIPTSINVALID'
        }
      )
    }
    return {
      ...originalContent,
      scripts: {
        ...newScripts
      }
    }
  }
  updateScripts_1 = updateScripts
  return updateScripts_1
}

let updateWorkspaces_1
let hasRequiredUpdateWorkspaces
function requireUpdateWorkspaces() {
  if (hasRequiredUpdateWorkspaces) {
    return updateWorkspaces_1
  }
  hasRequiredUpdateWorkspaces = 1
  const updateWorkspaces = ({ content, originalContent = {} }) => {
    const newWorkspaces = content.workspaces
    if (!newWorkspaces) {
      return originalContent
    }

    // validate workspaces content being appended
    const hasInvalidWorkspaces = () =>
      newWorkspaces.some(w => !(typeof w === 'string'))
    if (!newWorkspaces.length || hasInvalidWorkspaces()) {
      throw Object.assign(
        new TypeError('workspaces should be an array of strings.'),
        {
          code: 'EWORKSPACESINVALID'
        }
      )
    }
    return {
      ...originalContent,
      workspaces: [...newWorkspaces]
    }
  }
  updateWorkspaces_1 = updateWorkspaces
  return updateWorkspaces_1
}

let debug_1
let hasRequiredDebug
function requireDebug() {
  if (hasRequiredDebug) {
    return debug_1
  }
  hasRequiredDebug = 1
  const debug =
    typeof process === 'object' &&
    process.env &&
    process.env.NODE_DEBUG &&
    /\bsemver\b/i.test(process.env.NODE_DEBUG)
      ? (...args) => console.error('SEMVER', ...args)
      : () => {}
  debug_1 = debug
  return debug_1
}

let constants$5
let hasRequiredConstants$5
function requireConstants$5() {
  if (hasRequiredConstants$5) {
    return constants$5
  }
  hasRequiredConstants$5 = 1

  // Note: this is the semver.org version of the spec that it implements
  // Not necessarily the package version of this code.
  const SEMVER_SPEC_VERSION = '2.0.0'
  const MAX_LENGTH = 256
  const MAX_SAFE_INTEGER =
    Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991

  // Max safe segment length for coercion.
  const MAX_SAFE_COMPONENT_LENGTH = 16

  // Max safe length for a build identifier. The max length minus 6 characters for
  // the shortest version with a build 0.0.0+BUILD.
  const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6
  const RELEASE_TYPES = [
    'major',
    'premajor',
    'minor',
    'preminor',
    'patch',
    'prepatch',
    'prerelease'
  ]
  constants$5 = {
    MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 0b001,
    FLAG_LOOSE: 0b010
  }
  return constants$5
}

const re = { exports: {} }

let hasRequiredRe
function requireRe() {
  if (hasRequiredRe) {
    return re.exports
  }
  hasRequiredRe = 1
  ;(function (module, exports) {
    const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } =
      requireConstants$5()
    const debug = requireDebug()
    exports = module.exports = {}

    // The actual regexps go on exports.re
    const re = (exports.re = [])
    const safeRe = (exports.safeRe = [])
    const src = (exports.src = [])
    const safeSrc = (exports.safeSrc = [])
    const t = (exports.t = {})
    let R = 0
    const LETTERDASHNUMBER = '[a-zA-Z0-9-]'

    // Replace some greedy regex tokens to prevent regex dos issues. These regex are
    // used internally via the safeRe object since all inputs in this library get
    // normalized first to trim and collapse all extra whitespace. The original
    // regexes are exported for userland consumption and lower level usage. A
    // future breaking change could export the safer regex only with a note that
    // all input should have extra whitespace removed.
    const safeRegexReplacements = [
      ['\\s', 1],
      ['\\d', MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ]
    const makeSafeRegex = value => {
      for (const [token, max] of safeRegexReplacements) {
        value = value
          .split(`${token}*`)
          .join(`${token}{0,${max}}`)
          .split(`${token}+`)
          .join(`${token}{1,${max}}`)
      }
      return value
    }
    const createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value)
      const index = R++
      debug(name, index, value)
      t[name] = index
      src[index] = value
      safeSrc[index] = safe
      re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
      safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)
    }

    // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.

    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.

    createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
    createToken('NUMERICIDENTIFIERLOOSE', '\\d+')

    // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.

    createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)

    // ## Main Version
    // Three dot-separated numeric identifiers.

    createToken(
      'MAINVERSION',
      `(${src[t.NUMERICIDENTIFIER]})\\.` +
        `(${src[t.NUMERICIDENTIFIER]})\\.` +
        `(${src[t.NUMERICIDENTIFIER]})`
    )
    createToken(
      'MAINVERSIONLOOSE',
      `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
        `(${src[t.NUMERICIDENTIFIERLOOSE]})`
    )

    // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.
    // Non-numberic identifiers include numberic identifiers but can be longer.
    // Therefore non-numberic identifiers must go first.

    createToken(
      'PRERELEASEIDENTIFIER',
      `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIER]})`
    )
    createToken(
      'PRERELEASEIDENTIFIERLOOSE',
      `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIERLOOSE]})`
    )

    // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.

    createToken(
      'PRERELEASE',
      `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`
    )
    createToken(
      'PRERELEASELOOSE',
      `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`
    )

    // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.

    createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)

    // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.

    createToken(
      'BUILD',
      `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`
    )

    // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.

    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.

    createToken(
      'FULLPLAIN',
      `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`
    )
    createToken('FULL', `^${src[t.FULLPLAIN]}$`)

    // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.
    createToken(
      'LOOSEPLAIN',
      `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`
    )
    createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)
    createToken('GTLT', '((?:<|>)?=?)')

    // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.
    createToken(
      'XRANGEIDENTIFIERLOOSE',
      `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`
    )
    createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)
    createToken(
      'XRANGEPLAIN',
      `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
        `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
        `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
        `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` +
        `)?)?`
    )
    createToken(
      'XRANGEPLAINLOOSE',
      `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
        `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` +
        `)?)?`
    )
    createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
    createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

    // Coercion.
    // Extract anything that could conceivably be a part of a valid semver
    createToken(
      'COERCEPLAIN',
      `${'(^|[^\\d])' + '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
        `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
        `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`
    )
    createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`)
    createToken(
      'COERCEFULL',
      src[t.COERCEPLAIN] +
        `(?:${src[t.PRERELEASE]})?` +
        `(?:${src[t.BUILD]})?` +
        `(?:$|[^\\d])`
    )
    createToken('COERCERTL', src[t.COERCE], true)
    createToken('COERCERTLFULL', src[t.COERCEFULL], true)

    // Tilde ranges.
    // Meaning is "reasonably at or greater than"
    createToken('LONETILDE', '(?:~>?)')
    createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
    exports.tildeTrimReplace = '$1~'
    createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
    createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

    // Caret ranges.
    // Meaning is "at least and backwards compatible with"
    createToken('LONECARET', '(?:\\^)')
    createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
    exports.caretTrimReplace = '$1^'
    createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
    createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

    // A simple gt/lt/eq thing, or just "" to indicate "any version"
    createToken(
      'COMPARATORLOOSE',
      `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`
    )
    createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

    // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`
    createToken(
      'COMPARATORTRIM',
      `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`,
      true
    )
    exports.comparatorTrimReplace = '$1$2$3'

    // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.
    createToken(
      'HYPHENRANGE',
      `^\\s*(${src[t.XRANGEPLAIN]})` +
        `\\s+-\\s+` +
        `(${src[t.XRANGEPLAIN]})` +
        `\\s*$`
    )
    createToken(
      'HYPHENRANGELOOSE',
      `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
        `\\s+-\\s+` +
        `(${src[t.XRANGEPLAINLOOSE]})` +
        `\\s*$`
    )

    // Star ranges basically just allow anything at all.
    createToken('STAR', '(<|>)?=?\\s*\\*')
    // >=0.0.0 is like a star
    createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$')
    createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$')
  })(re, re.exports)
  return re.exports
}

let parseOptions_1
let hasRequiredParseOptions
function requireParseOptions() {
  if (hasRequiredParseOptions) {
    return parseOptions_1
  }
  hasRequiredParseOptions = 1

  // parse out just the options we care about
  const looseOption = Object.freeze({
    loose: true
  })
  const emptyOpts = Object.freeze({})
  const parseOptions = options => {
    if (!options) {
      return emptyOpts
    }
    if (typeof options !== 'object') {
      return looseOption
    }
    return options
  }
  parseOptions_1 = parseOptions
  return parseOptions_1
}

let identifiers
let hasRequiredIdentifiers
function requireIdentifiers() {
  if (hasRequiredIdentifiers) {
    return identifiers
  }
  hasRequiredIdentifiers = 1
  const numeric = /^[0-9]+$/
  const compareIdentifiers = (a, b) => {
    const anum = numeric.test(a)
    const bnum = numeric.test(b)
    if (anum && bnum) {
      a = +a
      b = +b
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1
  }
  const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)
  identifiers = {
    compareIdentifiers,
    rcompareIdentifiers
  }
  return identifiers
}

let semver$1
let hasRequiredSemver$1
function requireSemver$1() {
  if (hasRequiredSemver$1) {
    return semver$1
  }
  hasRequiredSemver$1 = 1
  const debug = requireDebug()
  const { MAX_LENGTH, MAX_SAFE_INTEGER } = requireConstants$5()
  const { safeRe: re, t } = requireRe()
  const parseOptions = requireParseOptions()
  const { compareIdentifiers } = requireIdentifiers()
  class SemVer {
    constructor(version, options) {
      options = parseOptions(options)
      if (version instanceof SemVer) {
        if (
          version.loose === !!options.loose &&
          version.includePrerelease === !!options.includePrerelease
        ) {
          return version
        } else {
          version = version.version
        }
      } else if (typeof version !== 'string') {
        throw new TypeError(
          `Invalid version. Must be a string. Got type "${typeof version}".`
        )
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError(`version is longer than ${MAX_LENGTH} characters`)
      }
      debug('SemVer', version, options)
      this.options = options
      this.loose = !!options.loose
      // this isn't actually relevant for versions, but keep it so that we
      // don't run into trouble passing this.options around.
      this.includePrerelease = !!options.includePrerelease
      const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])
      if (!m) {
        throw new TypeError(`Invalid Version: ${version}`)
      }
      this.raw = version

      // these are actually numbers
      this.major = +m[1]
      this.minor = +m[2]
      this.patch = +m[3]
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError('Invalid major version')
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError('Invalid minor version')
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError('Invalid patch version')
      }

      // numberify any prerelease numeric ids
      if (!m[4]) {
        this.prerelease = []
      } else {
        this.prerelease = m[4].split('.').map(id => {
          if (/^[0-9]+$/.test(id)) {
            const num = +id
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num
            }
          }
          return id
        })
      }
      this.build = m[5] ? m[5].split('.') : []
      this.format()
    }
    format() {
      this.version = `${this.major}.${this.minor}.${this.patch}`
      if (this.prerelease.length) {
        this.version += `-${this.prerelease.join('.')}`
      }
      return this.version
    }
    toString() {
      return this.version
    }
    compare(other) {
      debug('SemVer.compare', this.version, this.options, other)
      if (!(other instanceof SemVer)) {
        if (typeof other === 'string' && other === this.version) {
          return 0
        }
        other = new SemVer(other, this.options)
      }
      if (other.version === this.version) {
        return 0
      }
      return this.compareMain(other) || this.comparePre(other)
    }
    compareMain(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }
      return (
        compareIdentifiers(this.major, other.major) ||
        compareIdentifiers(this.minor, other.minor) ||
        compareIdentifiers(this.patch, other.patch)
      )
    }
    comparePre(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }

      // NOT having a prerelease is > having one
      if (this.prerelease.length && !other.prerelease.length) {
        return -1
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0
      }
      let i = 0
      do {
        const a = this.prerelease[i]
        const b = other.prerelease[i]
        debug('prerelease compare', i, a, b)
        if (a === undefined && b === undefined) {
          return 0
        } else if (b === undefined) {
          return 1
        } else if (a === undefined) {
          return -1
        } else if (a === b) {
          continue
        } else {
          return compareIdentifiers(a, b)
        }
      } while (++i)
    }
    compareBuild(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options)
      }
      let i = 0
      do {
        const a = this.build[i]
        const b = other.build[i]
        debug('build compare', i, a, b)
        if (a === undefined && b === undefined) {
          return 0
        } else if (b === undefined) {
          return 1
        } else if (a === undefined) {
          return -1
        } else if (a === b) {
          continue
        } else {
          return compareIdentifiers(a, b)
        }
      } while (++i)
    }

    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
      if (release.startsWith('pre')) {
        if (!identifier && identifierBase === false) {
          throw new Error('invalid increment argument: identifier is empty')
        }
        // Avoid an invalid semver results
        if (identifier) {
          const match = `-${identifier}`.match(
            this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE]
          )
          if (!match || match[1] !== identifier) {
            throw new Error(`invalid identifier: ${identifier}`)
          }
        }
      }
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0
          this.patch = 0
          this.minor = 0
          this.major++
          this.inc('pre', identifier, identifierBase)
          break
        case 'preminor':
          this.prerelease.length = 0
          this.patch = 0
          this.minor++
          this.inc('pre', identifier, identifierBase)
          break
        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0
          this.inc('patch', identifier, identifierBase)
          this.inc('pre', identifier, identifierBase)
          break
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.
        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier, identifierBase)
          }
          this.inc('pre', identifier, identifierBase)
          break
        case 'release':
          if (this.prerelease.length === 0) {
            throw new Error(`version ${this.raw} is not a prerelease`)
          }
          this.prerelease.length = 0
          break
        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (
            this.minor !== 0 ||
            this.patch !== 0 ||
            this.prerelease.length === 0
          ) {
            this.major++
          }
          this.minor = 0
          this.patch = 0
          this.prerelease = []
          break
        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++
          }
          this.patch = 0
          this.prerelease = []
          break
        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++
          }
          this.prerelease = []
          break
        // This probably shouldn't be used publicly.
        // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
        case 'pre': {
          const base = Number(identifierBase) ? 1 : 0
          if (this.prerelease.length === 0) {
            this.prerelease = [base]
          } else {
            let i = this.prerelease.length
            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++
                i = -2
              }
            }
            if (i === -1) {
              // didn't increment anything
              if (
                identifier === this.prerelease.join('.') &&
                identifierBase === false
              ) {
                throw new Error(
                  'invalid increment argument: identifier already exists'
                )
              }
              this.prerelease.push(base)
            }
          }
          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            let prerelease = [identifier, base]
            if (identifierBase === false) {
              prerelease = [identifier]
            }
            if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = prerelease
              }
            } else {
              this.prerelease = prerelease
            }
          }
          break
        }
        default:
          throw new Error(`invalid increment argument: ${release}`)
      }
      this.raw = this.format()
      if (this.build.length) {
        this.raw += `+${this.build.join('.')}`
      }
      return this
    }
  }
  semver$1 = SemVer
  return semver$1
}

let parse_1
let hasRequiredParse$4
function requireParse$4() {
  if (hasRequiredParse$4) {
    return parse_1
  }
  hasRequiredParse$4 = 1
  const SemVer = requireSemver$1()
  const parse = (version, options, throwErrors = false) => {
    if (version instanceof SemVer) {
      return version
    }
    try {
      return new SemVer(version, options)
    } catch (er) {
      if (!throwErrors) {
        return null
      }
      throw er
    }
  }
  parse_1 = parse
  return parse_1
}

let valid_1
let hasRequiredValid$1
function requireValid$1() {
  if (hasRequiredValid$1) {
    return valid_1
  }
  hasRequiredValid$1 = 1
  const parse = requireParse$4()
  const valid = (version, options) => {
    const v = parse(version, options)
    return v ? v.version : null
  }
  valid_1 = valid
  return valid_1
}

let clean_1
let hasRequiredClean
function requireClean() {
  if (hasRequiredClean) {
    return clean_1
  }
  hasRequiredClean = 1
  const parse = requireParse$4()
  const clean = (version, options) => {
    const s = parse(version.trim().replace(/^[=v]+/, ''), options)
    return s ? s.version : null
  }
  clean_1 = clean
  return clean_1
}

let lib$t
let hasRequiredLib$t
function requireLib$t() {
  if (hasRequiredLib$t) {
    return lib$t
  }
  hasRequiredLib$t = 1
  const META = Symbol('proc-log.meta')
  lib$t = {
    META: META,
    output: {
      LEVELS: ['standard', 'error', 'buffer', 'flush'],
      KEYS: {
        standard: 'standard',
        error: 'error',
        buffer: 'buffer',
        flush: 'flush'
      },
      standard: function (...args) {
        return process.emit('output', 'standard', ...args)
      },
      error: function (...args) {
        return process.emit('output', 'error', ...args)
      },
      buffer: function (...args) {
        return process.emit('output', 'buffer', ...args)
      },
      flush: function (...args) {
        return process.emit('output', 'flush', ...args)
      }
    },
    log: {
      LEVELS: [
        'notice',
        'error',
        'warn',
        'info',
        'verbose',
        'http',
        'silly',
        'timing',
        'pause',
        'resume'
      ],
      KEYS: {
        notice: 'notice',
        error: 'error',
        warn: 'warn',
        info: 'info',
        verbose: 'verbose',
        http: 'http',
        silly: 'silly',
        timing: 'timing',
        pause: 'pause',
        resume: 'resume'
      },
      error: function (...args) {
        return process.emit('log', 'error', ...args)
      },
      notice: function (...args) {
        return process.emit('log', 'notice', ...args)
      },
      warn: function (...args) {
        return process.emit('log', 'warn', ...args)
      },
      info: function (...args) {
        return process.emit('log', 'info', ...args)
      },
      verbose: function (...args) {
        return process.emit('log', 'verbose', ...args)
      },
      http: function (...args) {
        return process.emit('log', 'http', ...args)
      },
      silly: function (...args) {
        return process.emit('log', 'silly', ...args)
      },
      timing: function (...args) {
        return process.emit('log', 'timing', ...args)
      },
      pause: function () {
        return process.emit('log', 'pause')
      },
      resume: function () {
        return process.emit('log', 'resume')
      }
    },
    time: {
      LEVELS: ['start', 'end'],
      KEYS: {
        start: 'start',
        end: 'end'
      },
      start: function (name, fn) {
        process.emit('time', 'start', name)
        function end() {
          return process.emit('time', 'end', name)
        }
        if (typeof fn === 'function') {
          const res = fn()
          if (res && res.finally) {
            return res.finally(end)
          }
          end()
          return res
        }
        return end
      },
      end: function (name) {
        return process.emit('time', 'end', name)
      }
    },
    input: {
      LEVELS: ['start', 'end', 'read'],
      KEYS: {
        start: 'start',
        end: 'end',
        read: 'read'
      },
      start: function (fn) {
        process.emit('input', 'start')
        function end() {
          return process.emit('input', 'end')
        }
        if (typeof fn === 'function') {
          const res = fn()
          if (res && res.finally) {
            return res.finally(end)
          }
          end()
          return res
        }
        return end
      },
      end: function () {
        return process.emit('input', 'end')
      },
      read: function (...args) {
        let resolve, reject
        const promise = new Promise((_resolve, _reject) => {
          resolve = _resolve
          reject = _reject
        })
        process.emit('input', 'read', resolve, reject, ...args)
        return promise
      }
    }
  }
  return lib$t
}

const commonjs$9 = {}

let hasRequiredCommonjs$9
function requireCommonjs$9() {
  if (hasRequiredCommonjs$9) {
    return commonjs$9
  }
  hasRequiredCommonjs$9 = 1
  /**
   * @module LRUCache
   */
  Object.defineProperty(commonjs$9, '__esModule', {
    value: true
  })
  commonjs$9.LRUCache = void 0
  const perf =
    typeof performance === 'object' &&
    performance &&
    typeof performance.now === 'function'
      ? performance
      : Date
  const warned = new Set()
  /* c8 ignore start */
  const PROCESS = typeof process === 'object' && !!process ? process : {}
  /* c8 ignore start */
  const emitWarning = (msg, type, code, fn) => {
    typeof PROCESS.emitWarning === 'function'
      ? PROCESS.emitWarning(msg, type, code, fn)
      : console.error(`[${code}] ${type}: ${msg}`)
  }
  let AC = globalThis.AbortController
  let AS = globalThis.AbortSignal
  /* c8 ignore start */
  if (typeof AC === 'undefined') {
    //@ts-ignore
    AS = class AbortSignal {
      onabort
      _onabort = []
      reason
      aborted = false
      addEventListener(_, fn) {
        this._onabort.push(fn)
      }
    }
    //@ts-ignore
    AC = class AbortController {
      constructor() {
        warnACPolyfill()
      }
      signal = new AS()
      abort(reason) {
        if (this.signal.aborted) {
          return
        }
        //@ts-ignore
        this.signal.reason = reason
        //@ts-ignore
        this.signal.aborted = true
        //@ts-ignore
        for (const fn of this.signal._onabort) {
          fn(reason)
        }
        this.signal.onabort?.(reason)
      }
    }
    let printACPolyfillWarning =
      PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'
    const warnACPolyfill = () => {
      if (!printACPolyfillWarning) {
        return
      }
      printACPolyfillWarning = false
      emitWarning(
        'AbortController is not defined. If using lru-cache in ' +
          'node 14, load an AbortController polyfill from the ' +
          '`node-abort-controller` package. A minimal polyfill is ' +
          'provided for use by LRUCache.fetch(), but it should not be ' +
          'relied upon in other contexts (eg, passing it to other APIs that ' +
          'use AbortController/AbortSignal might have undesirable effects). ' +
          'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',
        'NO_ABORT_CONTROLLER',
        'ENOTSUP',
        warnACPolyfill
      )
    }
  }
  /* c8 ignore stop */
  const shouldWarn = code => !warned.has(code)
  const isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)
  /* c8 ignore start */
  // This is a little bit ridiculous, tbh.
  // The maximum array length is 2^32-1 or thereabouts on most JS impls.
  // And well before that point, you're caching the entire world, I mean,
  // that's ~32GB of just integers for the next/prev links, plus whatever
  // else to hold that many keys and values.  Just filling the memory with
  // zeroes at init time is brutal when you get that big.
  // But why not be complete?
  // Maybe in the future, these limits will have expanded.
  const getUintArray = max =>
    !isPosInt(max)
      ? null
      : max <= Math.pow(2, 8)
        ? Uint8Array
        : max <= Math.pow(2, 16)
          ? Uint16Array
          : max <= Math.pow(2, 32)
            ? Uint32Array
            : max <= Number.MAX_SAFE_INTEGER
              ? ZeroArray
              : null
  /* c8 ignore stop */
  class ZeroArray extends Array {
    constructor(size) {
      super(size)
      this.fill(0)
    }
  }
  class Stack {
    heap
    length
    // private constructor
    static #constructing = false
    static create(max) {
      const HeapCls = getUintArray(max)
      if (!HeapCls) {
        return []
      }
      Stack.#constructing = true
      const s = new Stack(max, HeapCls)
      Stack.#constructing = false
      return s
    }
    constructor(max, HeapCls) {
      /* c8 ignore start */
      if (!Stack.#constructing) {
        throw new TypeError('instantiate Stack using Stack.create(n)')
      }
      /* c8 ignore stop */
      this.heap = new HeapCls(max)
      this.length = 0
    }
    push(n) {
      this.heap[this.length++] = n
    }
    pop() {
      return this.heap[--this.length]
    }
  }
  /**
   * Default export, the thing you're using this module to get.
   *
   * The `K` and `V` types define the key and value types, respectively. The
   * optional `FC` type defines the type of the `context` object passed to
   * `cache.fetch()` and `cache.memo()`.
   *
   * Keys and values **must not** be `null` or `undefined`.
   *
   * All properties from the options object (with the exception of `max`,
   * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are
   * added as normal public members. (The listed options are read-only getters.)
   *
   * Changing any of these will alter the defaults for subsequent method calls.
   */
  class LRUCache {
    // options that cannot be changed without disaster
    #max
    #maxSize
    #dispose
    #disposeAfter
    #fetchMethod
    #memoMethod
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    ttl
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    ttlResolution
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    ttlAutopurge
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    updateAgeOnGet
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    updateAgeOnHas
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    allowStale
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    noDisposeOnSet
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    noUpdateTTL
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    maxEntrySize
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    sizeCalculation
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    noDeleteOnFetchRejection
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    noDeleteOnStaleGet
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    allowStaleOnFetchAbort
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    allowStaleOnFetchRejection
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    ignoreFetchAbort
    // computed properties
    #size
    #calculatedSize
    #keyMap
    #keyList
    #valList
    #next
    #prev
    #head
    #tail
    #free
    #disposed
    #sizes
    #starts
    #ttls
    #hasDispose
    #hasFetchMethod
    #hasDisposeAfter
    /**
     * Do not call this method unless you need to inspect the
     * inner workings of the cache.  If anything returned by this
     * object is modified in any way, strange breakage may occur.
     *
     * These fields are private for a reason!
     *
     * @internal
     */
    static unsafeExposeInternals(c) {
      return {
        // properties
        starts: c.#starts,
        ttls: c.#ttls,
        sizes: c.#sizes,
        keyMap: c.#keyMap,
        keyList: c.#keyList,
        valList: c.#valList,
        next: c.#next,
        prev: c.#prev,
        get head() {
          return c.#head
        },
        get tail() {
          return c.#tail
        },
        free: c.#free,
        // methods
        isBackgroundFetch: p => c.#isBackgroundFetch(p),
        backgroundFetch: (k, index, options, context) =>
          c.#backgroundFetch(k, index, options, context),
        moveToTail: index => c.#moveToTail(index),
        indexes: options => c.#indexes(options),
        rindexes: options => c.#rindexes(options),
        isStale: index => c.#isStale(index)
      }
    }
    // Protected read-only members
    /**
     * {@link LRUCache.OptionsBase.max} (read-only)
     */
    get max() {
      return this.#max
    }
    /**
     * {@link LRUCache.OptionsBase.maxSize} (read-only)
     */
    get maxSize() {
      return this.#maxSize
    }
    /**
     * The total computed size of items in the cache (read-only)
     */
    get calculatedSize() {
      return this.#calculatedSize
    }
    /**
     * The number of items stored in the cache (read-only)
     */
    get size() {
      return this.#size
    }
    /**
     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
     */
    get fetchMethod() {
      return this.#fetchMethod
    }
    get memoMethod() {
      return this.#memoMethod
    }
    /**
     * {@link LRUCache.OptionsBase.dispose} (read-only)
     */
    get dispose() {
      return this.#dispose
    }
    /**
     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
     */
    get disposeAfter() {
      return this.#disposeAfter
    }
    constructor(options) {
      const {
        max = 0,
        ttl,
        ttlResolution = 1,
        ttlAutopurge,
        updateAgeOnGet,
        updateAgeOnHas,
        allowStale,
        dispose,
        disposeAfter,
        noDisposeOnSet,
        noUpdateTTL,
        maxSize = 0,
        maxEntrySize = 0,
        sizeCalculation,
        fetchMethod,
        memoMethod,
        noDeleteOnFetchRejection,
        noDeleteOnStaleGet,
        allowStaleOnFetchRejection,
        allowStaleOnFetchAbort,
        ignoreFetchAbort
      } = options
      if (max !== 0 && !isPosInt(max)) {
        throw new TypeError('max option must be a nonnegative integer')
      }
      const UintArray = max ? getUintArray(max) : Array
      if (!UintArray) {
        throw new Error('invalid max value: ' + max)
      }
      this.#max = max
      this.#maxSize = maxSize
      this.maxEntrySize = maxEntrySize || this.#maxSize
      this.sizeCalculation = sizeCalculation
      if (this.sizeCalculation) {
        if (!this.#maxSize && !this.maxEntrySize) {
          throw new TypeError(
            'cannot set sizeCalculation without setting maxSize or maxEntrySize'
          )
        }
        if (typeof this.sizeCalculation !== 'function') {
          throw new TypeError('sizeCalculation set to non-function')
        }
      }
      if (memoMethod !== undefined && typeof memoMethod !== 'function') {
        throw new TypeError('memoMethod must be a function if defined')
      }
      this.#memoMethod = memoMethod
      if (fetchMethod !== undefined && typeof fetchMethod !== 'function') {
        throw new TypeError('fetchMethod must be a function if specified')
      }
      this.#fetchMethod = fetchMethod
      this.#hasFetchMethod = !!fetchMethod
      this.#keyMap = new Map()
      this.#keyList = new Array(max).fill(undefined)
      this.#valList = new Array(max).fill(undefined)
      this.#next = new UintArray(max)
      this.#prev = new UintArray(max)
      this.#head = 0
      this.#tail = 0
      this.#free = Stack.create(max)
      this.#size = 0
      this.#calculatedSize = 0
      if (typeof dispose === 'function') {
        this.#dispose = dispose
      }
      if (typeof disposeAfter === 'function') {
        this.#disposeAfter = disposeAfter
        this.#disposed = []
      } else {
        this.#disposeAfter = undefined
        this.#disposed = undefined
      }
      this.#hasDispose = !!this.#dispose
      this.#hasDisposeAfter = !!this.#disposeAfter
      this.noDisposeOnSet = !!noDisposeOnSet
      this.noUpdateTTL = !!noUpdateTTL
      this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection
      this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection
      this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort
      this.ignoreFetchAbort = !!ignoreFetchAbort
      // NB: maxEntrySize is set to maxSize if it's set
      if (this.maxEntrySize !== 0) {
        if (this.#maxSize !== 0) {
          if (!isPosInt(this.#maxSize)) {
            throw new TypeError(
              'maxSize must be a positive integer if specified'
            )
          }
        }
        if (!isPosInt(this.maxEntrySize)) {
          throw new TypeError(
            'maxEntrySize must be a positive integer if specified'
          )
        }
        this.#initializeSizeTracking()
      }
      this.allowStale = !!allowStale
      this.noDeleteOnStaleGet = !!noDeleteOnStaleGet
      this.updateAgeOnGet = !!updateAgeOnGet
      this.updateAgeOnHas = !!updateAgeOnHas
      this.ttlResolution =
        isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1
      this.ttlAutopurge = !!ttlAutopurge
      this.ttl = ttl || 0
      if (this.ttl) {
        if (!isPosInt(this.ttl)) {
          throw new TypeError('ttl must be a positive integer if specified')
        }
        this.#initializeTTLTracking()
      }
      // do not allow completely unbounded caches
      if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
        throw new TypeError('At least one of max, maxSize, or ttl is required')
      }
      if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
        const code = 'LRU_CACHE_UNBOUNDED'
        if (shouldWarn(code)) {
          warned.add(code)
          const msg =
            'TTL caching without ttlAutopurge, max, or maxSize can ' +
            'result in unbounded memory consumption.'
          emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)
        }
      }
    }
    /**
     * Return the number of ms left in the item's TTL. If item is not in cache,
     * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
     */
    getRemainingTTL(key) {
      return this.#keyMap.has(key) ? Infinity : 0
    }
    #initializeTTLTracking() {
      const ttls = new ZeroArray(this.#max)
      const starts = new ZeroArray(this.#max)
      this.#ttls = ttls
      this.#starts = starts
      this.#setItemTTL = (index, ttl, start = perf.now()) => {
        starts[index] = ttl !== 0 ? start : 0
        ttls[index] = ttl
        if (ttl !== 0 && this.ttlAutopurge) {
          const t = setTimeout(() => {
            if (this.#isStale(index)) {
              this.#delete(this.#keyList[index], 'expire')
            }
          }, ttl + 1)
          // unref() not supported on all platforms
          /* c8 ignore start */
          if (t.unref) {
            t.unref()
          }
          /* c8 ignore stop */
        }
      }
      this.#updateItemAge = index => {
        starts[index] = ttls[index] !== 0 ? perf.now() : 0
      }
      this.#statusTTL = (status, index) => {
        if (ttls[index]) {
          const ttl = ttls[index]
          const start = starts[index]
          /* c8 ignore next */
          if (!ttl || !start) {
            return
          }
          status.ttl = ttl
          status.start = start
          status.now = cachedNow || getNow()
          const age = status.now - start
          status.remainingTTL = ttl - age
        }
      }
      // debounce calls to perf.now() to 1s so we're not hitting
      // that costly call repeatedly.
      let cachedNow = 0
      const getNow = () => {
        const n = perf.now()
        if (this.ttlResolution > 0) {
          cachedNow = n
          const t = setTimeout(() => (cachedNow = 0), this.ttlResolution)
          // not available on all platforms
          /* c8 ignore start */
          if (t.unref) {
            t.unref()
          }
          /* c8 ignore stop */
        }
        return n
      }
      this.getRemainingTTL = key => {
        const index = this.#keyMap.get(key)
        if (index === undefined) {
          return 0
        }
        const ttl = ttls[index]
        const start = starts[index]
        if (!ttl || !start) {
          return Infinity
        }
        const age = (cachedNow || getNow()) - start
        return ttl - age
      }
      this.#isStale = index => {
        const s = starts[index]
        const t = ttls[index]
        return !!t && !!s && (cachedNow || getNow()) - s > t
      }
    }
    // conditionally set private methods related to TTL
    #updateItemAge = () => {}
    #statusTTL = () => {}
    #setItemTTL = () => {}
    /* c8 ignore stop */
    #isStale = () => false
    #initializeSizeTracking() {
      const sizes = new ZeroArray(this.#max)
      this.#calculatedSize = 0
      this.#sizes = sizes
      this.#removeItemSize = index => {
        this.#calculatedSize -= sizes[index]
        sizes[index] = 0
      }
      this.#requireSize = (k, v, size, sizeCalculation) => {
        // provisionally accept background fetches.
        // actual value size will be checked when they return.
        if (this.#isBackgroundFetch(v)) {
          return 0
        }
        if (!isPosInt(size)) {
          if (sizeCalculation) {
            if (typeof sizeCalculation !== 'function') {
              throw new TypeError('sizeCalculation must be a function')
            }
            size = sizeCalculation(v, k)
            if (!isPosInt(size)) {
              throw new TypeError(
                'sizeCalculation return invalid (expect positive integer)'
              )
            }
          } else {
            throw new TypeError(
              'invalid size value (must be positive integer). ' +
                'When maxSize or maxEntrySize is used, sizeCalculation ' +
                'or size must be set.'
            )
          }
        }
        return size
      }
      this.#addItemSize = (index, size, status) => {
        sizes[index] = size
        if (this.#maxSize) {
          const maxSize = this.#maxSize - sizes[index]
          while (this.#calculatedSize > maxSize) {
            this.#evict(true)
          }
        }
        this.#calculatedSize += sizes[index]
        if (status) {
          status.entrySize = size
          status.totalCalculatedSize = this.#calculatedSize
        }
      }
    }
    #removeItemSize = _i => {}
    #addItemSize = (_i, _s, _st) => {}
    #requireSize = (_k, _v, size, sizeCalculation) => {
      if (size || sizeCalculation) {
        throw new TypeError(
          'cannot set size without setting maxSize or maxEntrySize on cache'
        )
      }
      return 0
    };
    *#indexes({ allowStale = this.allowStale } = {}) {
      if (this.#size) {
        for (let i = this.#tail; true; ) {
          if (!this.#isValidIndex(i)) {
            break
          }
          if (allowStale || !this.#isStale(i)) {
            yield i
          }
          if (i === this.#head) {
            break
          } else {
            i = this.#prev[i]
          }
        }
      }
    }
    *#rindexes({ allowStale = this.allowStale } = {}) {
      if (this.#size) {
        for (let i = this.#head; true; ) {
          if (!this.#isValidIndex(i)) {
            break
          }
          if (allowStale || !this.#isStale(i)) {
            yield i
          }
          if (i === this.#tail) {
            break
          } else {
            i = this.#next[i]
          }
        }
      }
    }
    #isValidIndex(index) {
      return (
        index !== undefined && this.#keyMap.get(this.#keyList[index]) === index
      )
    }
    /**
     * Return a generator yielding `[key, value]` pairs,
     * in order from most recently used to least recently used.
     */
    *entries() {
      for (const i of this.#indexes()) {
        if (
          this.#valList[i] !== undefined &&
          this.#keyList[i] !== undefined &&
          !this.#isBackgroundFetch(this.#valList[i])
        ) {
          yield [this.#keyList[i], this.#valList[i]]
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.entries}
     *
     * Return a generator yielding `[key, value]` pairs,
     * in order from least recently used to most recently used.
     */
    *rentries() {
      for (const i of this.#rindexes()) {
        if (
          this.#valList[i] !== undefined &&
          this.#keyList[i] !== undefined &&
          !this.#isBackgroundFetch(this.#valList[i])
        ) {
          yield [this.#keyList[i], this.#valList[i]]
        }
      }
    }
    /**
     * Return a generator yielding the keys in the cache,
     * in order from most recently used to least recently used.
     */
    *keys() {
      for (const i of this.#indexes()) {
        const k = this.#keyList[i]
        if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield k
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.keys}
     *
     * Return a generator yielding the keys in the cache,
     * in order from least recently used to most recently used.
     */
    *rkeys() {
      for (const i of this.#rindexes()) {
        const k = this.#keyList[i]
        if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield k
        }
      }
    }
    /**
     * Return a generator yielding the values in the cache,
     * in order from most recently used to least recently used.
     */
    *values() {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield this.#valList[i]
        }
      }
    }
    /**
     * Inverse order version of {@link LRUCache.values}
     *
     * Return a generator yielding the values in the cache,
     * in order from least recently used to most recently used.
     */
    *rvalues() {
      for (const i of this.#rindexes()) {
        const v = this.#valList[i]
        if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) {
          yield this.#valList[i]
        }
      }
    }
    /**
     * Iterating over the cache itself yields the same results as
     * {@link LRUCache.entries}
     */
    [Symbol.iterator]() {
      return this.entries()
    }
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    [Symbol.toStringTag] = 'LRUCache'
    /**
     * Find a value for which the supplied fn method returns a truthy value,
     * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
     */
    find(fn, getOptions = {}) {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        if (fn(value, this.#keyList[i], this)) {
          return this.get(this.#keyList[i], getOptions)
        }
      }
    }
    /**
     * Call the supplied function on each item in the cache, in order from most
     * recently used to least recently used.
     *
     * `fn` is called as `fn(value, key, cache)`.
     *
     * If `thisp` is provided, function will be called in the `this`-context of
     * the provided object, or the cache if no `thisp` object is provided.
     *
     * Does not update age or recenty of use, or iterate over stale values.
     */
    forEach(fn, thisp = this) {
      for (const i of this.#indexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        fn.call(thisp, value, this.#keyList[i], this)
      }
    }
    /**
     * The same as {@link LRUCache.forEach} but items are iterated over in
     * reverse order.  (ie, less recently used items are iterated over first.)
     */
    rforEach(fn, thisp = this) {
      for (const i of this.#rindexes()) {
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined) {
          continue
        }
        fn.call(thisp, value, this.#keyList[i], this)
      }
    }
    /**
     * Delete any stale entries. Returns true if anything was removed,
     * false otherwise.
     */
    purgeStale() {
      let deleted = false
      for (const i of this.#rindexes({
        allowStale: true
      })) {
        if (this.#isStale(i)) {
          this.#delete(this.#keyList[i], 'expire')
          deleted = true
        }
      }
      return deleted
    }
    /**
     * Get the extended info about a given entry, to get its value, size, and
     * TTL info simultaneously. Returns `undefined` if the key is not present.
     *
     * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
     * serialization, the `start` value is always the current timestamp, and the
     * `ttl` is a calculated remaining time to live (negative if expired).
     *
     * Always returns stale values, if their info is found in the cache, so be
     * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
     * if relevant.
     */
    info(key) {
      const i = this.#keyMap.get(key)
      if (i === undefined) {
        return undefined
      }
      const v = this.#valList[i]
      const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
      if (value === undefined) {
        return undefined
      }
      const entry = {
        value
      }
      if (this.#ttls && this.#starts) {
        const ttl = this.#ttls[i]
        const start = this.#starts[i]
        if (ttl && start) {
          const remain = ttl - (perf.now() - start)
          entry.ttl = remain
          entry.start = Date.now()
        }
      }
      if (this.#sizes) {
        entry.size = this.#sizes[i]
      }
      return entry
    }
    /**
     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
     * passed to {@link LRLUCache#load}.
     *
     * The `start` fields are calculated relative to a portable `Date.now()`
     * timestamp, even if `performance.now()` is available.
     *
     * Stale entries are always included in the `dump`, even if
     * {@link LRUCache.OptionsBase.allowStale} is false.
     *
     * Note: this returns an actual array, not a generator, so it can be more
     * easily passed around.
     */
    dump() {
      const arr = []
      for (const i of this.#indexes({
        allowStale: true
      })) {
        const key = this.#keyList[i]
        const v = this.#valList[i]
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
        if (value === undefined || key === undefined) {
          continue
        }
        const entry = {
          value
        }
        if (this.#ttls && this.#starts) {
          entry.ttl = this.#ttls[i]
          // always dump the start relative to a portable timestamp
          // it's ok for this to be a bit slow, it's a rare operation.
          const age = perf.now() - this.#starts[i]
          entry.start = Math.floor(Date.now() - age)
        }
        if (this.#sizes) {
          entry.size = this.#sizes[i]
        }
        arr.unshift([key, entry])
      }
      return arr
    }
    /**
     * Reset the cache and load in the items in entries in the order listed.
     *
     * The shape of the resulting cache may be different if the same options are
     * not used in both caches.
     *
     * The `start` fields are assumed to be calculated relative to a portable
     * `Date.now()` timestamp, even if `performance.now()` is available.
     */
    load(arr) {
      this.clear()
      for (const [key, entry] of arr) {
        if (entry.start) {
          // entry.start is a portable timestamp, but we may be using
          // node's performance.now(), so calculate the offset, so that
          // we get the intended remaining TTL, no matter how long it's
          // been on ice.
          //
          // it's ok for this to be a bit slow, it's a rare operation.
          const age = Date.now() - entry.start
          entry.start = perf.now() - age
        }
        this.set(key, entry.value, entry)
      }
    }
    /**
     * Add a value to the cache.
     *
     * Note: if `undefined` is specified as a value, this is an alias for
     * {@link LRUCache#delete}
     *
     * Fields on the {@link LRUCache.SetOptions} options param will override
     * their corresponding values in the constructor options for the scope
     * of this single `set()` operation.
     *
     * If `start` is provided, then that will set the effective start
     * time for the TTL calculation. Note that this must be a previous
     * value of `performance.now()` if supported, or a previous value of
     * `Date.now()` if not.
     *
     * Options object may also include `size`, which will prevent
     * calling the `sizeCalculation` function and just use the specified
     * number if it is a positive integer, and `noDisposeOnSet` which
     * will prevent calling a `dispose` function in the case of
     * overwrites.
     *
     * If the `size` (or return value of `sizeCalculation`) for a given
     * entry is greater than `maxEntrySize`, then the item will not be
     * added to the cache.
     *
     * Will update the recency of the entry.
     *
     * If the value is `undefined`, then this is an alias for
     * `cache.delete(key)`. `undefined` is never stored in the cache.
     */
    set(k, v, setOptions = {}) {
      if (v === undefined) {
        this.delete(k)
        return this
      }
      const {
        ttl = this.ttl,
        start,
        noDisposeOnSet = this.noDisposeOnSet,
        sizeCalculation = this.sizeCalculation,
        status
      } = setOptions
      let { noUpdateTTL = this.noUpdateTTL } = setOptions
      const size = this.#requireSize(
        k,
        v,
        setOptions.size || 0,
        sizeCalculation
      )
      // if the item doesn't fit, don't do anything
      // NB: maxEntrySize set to maxSize by default
      if (this.maxEntrySize && size > this.maxEntrySize) {
        if (status) {
          status.set = 'miss'
          status.maxEntrySizeExceeded = true
        }
        // have to delete, in case something is there already.
        this.#delete(k, 'set')
        return this
      }
      let index = this.#size === 0 ? undefined : this.#keyMap.get(k)
      if (index === undefined) {
        // addition
        index =
          this.#size === 0
            ? this.#tail
            : this.#free.length !== 0
              ? this.#free.pop()
              : this.#size === this.#max
                ? this.#evict(false)
                : this.#size
        this.#keyList[index] = k
        this.#valList[index] = v
        this.#keyMap.set(k, index)
        this.#next[this.#tail] = index
        this.#prev[index] = this.#tail
        this.#tail = index
        this.#size++
        this.#addItemSize(index, size, status)
        if (status) {
          status.set = 'add'
        }
        noUpdateTTL = false
      } else {
        // update
        this.#moveToTail(index)
        const oldVal = this.#valList[index]
        if (v !== oldVal) {
          if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
            oldVal.__abortController.abort(new Error('replaced'))
            const { __staleWhileFetching: s } = oldVal
            if (s !== undefined && !noDisposeOnSet) {
              if (this.#hasDispose) {
                this.#dispose?.(s, k, 'set')
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([s, k, 'set'])
              }
            }
          } else if (!noDisposeOnSet) {
            if (this.#hasDispose) {
              this.#dispose?.(oldVal, k, 'set')
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([oldVal, k, 'set'])
            }
          }
          this.#removeItemSize(index)
          this.#addItemSize(index, size, status)
          this.#valList[index] = v
          if (status) {
            status.set = 'replace'
            const oldValue =
              oldVal && this.#isBackgroundFetch(oldVal)
                ? oldVal.__staleWhileFetching
                : oldVal
            if (oldValue !== undefined) {
              status.oldValue = oldValue
            }
          }
        } else if (status) {
          status.set = 'update'
        }
      }
      if (ttl !== 0 && !this.#ttls) {
        this.#initializeTTLTracking()
      }
      if (this.#ttls) {
        if (!noUpdateTTL) {
          this.#setItemTTL(index, ttl, start)
        }
        if (status) {
          this.#statusTTL(status, index)
        }
      }
      if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
      return this
    }
    /**
     * Evict the least recently used item, returning its value or
     * `undefined` if cache is empty.
     */
    pop() {
      try {
        while (this.#size) {
          const val = this.#valList[this.#head]
          this.#evict(true)
          if (this.#isBackgroundFetch(val)) {
            if (val.__staleWhileFetching) {
              return val.__staleWhileFetching
            }
          } else if (val !== undefined) {
            return val
          }
        }
      } finally {
        if (this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed
          let task
          while ((task = dt?.shift())) {
            this.#disposeAfter?.(...task)
          }
        }
      }
    }
    #evict(free) {
      const head = this.#head
      const k = this.#keyList[head]
      const v = this.#valList[head]
      if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
        v.__abortController.abort(new Error('evicted'))
      } else if (this.#hasDispose || this.#hasDisposeAfter) {
        if (this.#hasDispose) {
          this.#dispose?.(v, k, 'evict')
        }
        if (this.#hasDisposeAfter) {
          this.#disposed?.push([v, k, 'evict'])
        }
      }
      this.#removeItemSize(head)
      // if we aren't about to use the index, then null these out
      if (free) {
        this.#keyList[head] = undefined
        this.#valList[head] = undefined
        this.#free.push(head)
      }
      if (this.#size === 1) {
        this.#head = this.#tail = 0
        this.#free.length = 0
      } else {
        this.#head = this.#next[head]
      }
      this.#keyMap.delete(k)
      this.#size--
      return head
    }
    /**
     * Check if a key is in the cache, without updating the recency of use.
     * Will return false if the item is stale, even though it is technically
     * in the cache.
     *
     * Check if a key is in the cache, without updating the recency of
     * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
     * to `true` in either the options or the constructor.
     *
     * Will return `false` if the item is stale, even though it is technically in
     * the cache. The difference can be determined (if it matters) by using a
     * `status` argument, and inspecting the `has` field.
     *
     * Will not update item age unless
     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
     */
    has(k, hasOptions = {}) {
      const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions
      const index = this.#keyMap.get(k)
      if (index !== undefined) {
        const v = this.#valList[index]
        if (
          this.#isBackgroundFetch(v) &&
          v.__staleWhileFetching === undefined
        ) {
          return false
        }
        if (!this.#isStale(index)) {
          if (updateAgeOnHas) {
            this.#updateItemAge(index)
          }
          if (status) {
            status.has = 'hit'
            this.#statusTTL(status, index)
          }
          return true
        } else if (status) {
          status.has = 'stale'
          this.#statusTTL(status, index)
        }
      } else if (status) {
        status.has = 'miss'
      }
      return false
    }
    /**
     * Like {@link LRUCache#get} but doesn't update recency or delete stale
     * items.
     *
     * Returns `undefined` if the item is stale, unless
     * {@link LRUCache.OptionsBase.allowStale} is set.
     */
    peek(k, peekOptions = {}) {
      const { allowStale = this.allowStale } = peekOptions
      const index = this.#keyMap.get(k)
      if (index === undefined || (!allowStale && this.#isStale(index))) {
        return
      }
      const v = this.#valList[index]
      // either stale and allowed, or forcing a refresh of non-stale value
      return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v
    }
    #backgroundFetch(k, index, options, context) {
      const v = index === undefined ? undefined : this.#valList[index]
      if (this.#isBackgroundFetch(v)) {
        return v
      }
      const ac = new AC()
      const { signal } = options
      // when/if our AC signals, then stop listening to theirs.
      signal?.addEventListener('abort', () => ac.abort(signal.reason), {
        signal: ac.signal
      })
      const fetchOpts = {
        signal: ac.signal,
        options,
        context
      }
      const cb = (v, updateCache = false) => {
        const { aborted } = ac.signal
        const ignoreAbort = options.ignoreFetchAbort && v !== undefined
        if (options.status) {
          if (aborted && !updateCache) {
            options.status.fetchAborted = true
            options.status.fetchError = ac.signal.reason
            if (ignoreAbort) {
              options.status.fetchAbortIgnored = true
            }
          } else {
            options.status.fetchResolved = true
          }
        }
        if (aborted && !ignoreAbort && !updateCache) {
          return fetchFail(ac.signal.reason)
        }
        // either we didn't abort, and are still here, or we did, and ignored
        const bf = p
        if (this.#valList[index] === p) {
          if (v === undefined) {
            if (bf.__staleWhileFetching) {
              this.#valList[index] = bf.__staleWhileFetching
            } else {
              this.#delete(k, 'fetch')
            }
          } else {
            if (options.status) {
              options.status.fetchUpdated = true
            }
            this.set(k, v, fetchOpts.options)
          }
        }
        return v
      }
      const eb = er => {
        if (options.status) {
          options.status.fetchRejected = true
          options.status.fetchError = er
        }
        return fetchFail(er)
      }
      const fetchFail = er => {
        const { aborted } = ac.signal
        const allowStaleAborted = aborted && options.allowStaleOnFetchAbort
        const allowStale =
          allowStaleAborted || options.allowStaleOnFetchRejection
        const noDelete = allowStale || options.noDeleteOnFetchRejection
        const bf = p
        if (this.#valList[index] === p) {
          // if we allow stale on fetch rejections, then we need to ensure that
          // the stale value is not removed from the cache when the fetch fails.
          const del = !noDelete || bf.__staleWhileFetching === undefined
          if (del) {
            this.#delete(k, 'fetch')
          } else if (!allowStaleAborted) {
            // still replace the *promise* with the stale value,
            // since we are done with the promise at this point.
            // leave it untouched if we're still waiting for an
            // aborted background fetch that hasn't yet returned.
            this.#valList[index] = bf.__staleWhileFetching
          }
        }
        if (allowStale) {
          if (options.status && bf.__staleWhileFetching !== undefined) {
            options.status.returnedStale = true
          }
          return bf.__staleWhileFetching
        } else if (bf.__returned === bf) {
          throw er
        }
      }
      const pcall = (res, rej) => {
        const fmp = this.#fetchMethod?.(k, v, fetchOpts)
        if (fmp && fmp instanceof Promise) {
          fmp.then(v => res(v === undefined ? undefined : v), rej)
        }
        // ignored, we go until we finish, regardless.
        // defer check until we are actually aborting,
        // so fetchMethod can override.
        ac.signal.addEventListener('abort', () => {
          if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
            res(undefined)
            // when it eventually resolves, update the cache.
            if (options.allowStaleOnFetchAbort) {
              res = v => cb(v, true)
            }
          }
        })
      }
      if (options.status) {
        options.status.fetchDispatched = true
      }
      const p = new Promise(pcall).then(cb, eb)
      const bf = Object.assign(p, {
        __abortController: ac,
        __staleWhileFetching: v,
        __returned: undefined
      })
      if (index === undefined) {
        // internal, don't expose status.
        this.set(k, bf, {
          ...fetchOpts.options,
          status: undefined
        })
        index = this.#keyMap.get(k)
      } else {
        this.#valList[index] = bf
      }
      return bf
    }
    #isBackgroundFetch(p) {
      if (!this.#hasFetchMethod) {
        return false
      }
      const b = p
      return (
        !!b &&
        b instanceof Promise &&
        b.hasOwnProperty('__staleWhileFetching') &&
        b.__abortController instanceof AC
      )
    }
    async fetch(k, fetchOptions = {}) {
      const {
        // get options
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        // set options
        ttl = this.ttl,
        noDisposeOnSet = this.noDisposeOnSet,
        size = 0,
        sizeCalculation = this.sizeCalculation,
        noUpdateTTL = this.noUpdateTTL,
        // fetch exclusive options
        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
        allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
        ignoreFetchAbort = this.ignoreFetchAbort,
        allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
        context,
        forceRefresh = false,
        status,
        signal
      } = fetchOptions
      if (!this.#hasFetchMethod) {
        if (status) {
          status.fetch = 'get'
        }
        return this.get(k, {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          status
        })
      }
      const options = {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        ttl,
        noDisposeOnSet,
        size,
        sizeCalculation,
        noUpdateTTL,
        noDeleteOnFetchRejection,
        allowStaleOnFetchRejection,
        allowStaleOnFetchAbort,
        ignoreFetchAbort,
        status,
        signal
      }
      let index = this.#keyMap.get(k)
      if (index === undefined) {
        if (status) {
          status.fetch = 'miss'
        }
        const p = this.#backgroundFetch(k, index, options, context)
        return (p.__returned = p)
      } else {
        // in cache, maybe already fetching
        const v = this.#valList[index]
        if (this.#isBackgroundFetch(v)) {
          const stale = allowStale && v.__staleWhileFetching !== undefined
          if (status) {
            status.fetch = 'inflight'
            if (stale) {
              status.returnedStale = true
            }
          }
          return stale ? v.__staleWhileFetching : (v.__returned = v)
        }
        // if we force a refresh, that means do NOT serve the cached value,
        // unless we are already in the process of refreshing the cache.
        const isStale = this.#isStale(index)
        if (!forceRefresh && !isStale) {
          if (status) {
            status.fetch = 'hit'
          }
          this.#moveToTail(index)
          if (updateAgeOnGet) {
            this.#updateItemAge(index)
          }
          if (status) {
            this.#statusTTL(status, index)
          }
          return v
        }
        // ok, it is stale or a forced refresh, and not already fetching.
        // refresh the cache.
        const p = this.#backgroundFetch(k, index, options, context)
        const hasStale = p.__staleWhileFetching !== undefined
        const staleVal = hasStale && allowStale
        if (status) {
          status.fetch = isStale ? 'stale' : 'refresh'
          if (staleVal && isStale) {
            status.returnedStale = true
          }
        }
        return staleVal ? p.__staleWhileFetching : (p.__returned = p)
      }
    }
    async forceFetch(k, fetchOptions = {}) {
      const v = await this.fetch(k, fetchOptions)
      if (v === undefined) {
        throw new Error('fetch() returned undefined')
      }
      return v
    }
    memo(k, memoOptions = {}) {
      const memoMethod = this.#memoMethod
      if (!memoMethod) {
        throw new Error('no memoMethod provided to constructor')
      }
      const { context, forceRefresh, ...options } = memoOptions
      const v = this.get(k, options)
      if (!forceRefresh && v !== undefined) {
        return v
      }
      const vv = memoMethod(k, v, {
        options,
        context
      })
      this.set(k, vv, options)
      return vv
    }
    /**
     * Return a value from the cache. Will update the recency of the cache
     * entry found.
     *
     * If the key is not found, get() will return `undefined`.
     */
    get(k, getOptions = {}) {
      const {
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        status
      } = getOptions
      const index = this.#keyMap.get(k)
      if (index !== undefined) {
        const value = this.#valList[index]
        const fetching = this.#isBackgroundFetch(value)
        if (status) {
          this.#statusTTL(status, index)
        }
        if (this.#isStale(index)) {
          if (status) {
            status.get = 'stale'
          }
          // delete only if not an in-flight background fetch
          if (!fetching) {
            if (!noDeleteOnStaleGet) {
              this.#delete(k, 'expire')
            }
            if (status && allowStale) {
              status.returnedStale = true
            }
            return allowStale ? value : undefined
          } else {
            if (
              status &&
              allowStale &&
              value.__staleWhileFetching !== undefined
            ) {
              status.returnedStale = true
            }
            return allowStale ? value.__staleWhileFetching : undefined
          }
        } else {
          if (status) {
            status.get = 'hit'
          }
          // if we're currently fetching it, we don't actually have it yet
          // it's not stale, which means this isn't a staleWhileRefetching.
          // If it's not stale, and fetching, AND has a __staleWhileFetching
          // value, then that means the user fetched with {forceRefresh:true},
          // so it's safe to return that value.
          if (fetching) {
            return value.__staleWhileFetching
          }
          this.#moveToTail(index)
          if (updateAgeOnGet) {
            this.#updateItemAge(index)
          }
          return value
        }
      } else if (status) {
        status.get = 'miss'
      }
    }
    #connect(p, n) {
      this.#prev[n] = p
      this.#next[p] = n
    }
    #moveToTail(index) {
      // if tail already, nothing to do
      // if head, move head to next[index]
      // else
      //   move next[prev[index]] to next[index] (head has no prev)
      //   move prev[next[index]] to prev[index]
      // prev[index] = tail
      // next[tail] = index
      // tail = index
      if (index !== this.#tail) {
        if (index === this.#head) {
          this.#head = this.#next[index]
        } else {
          this.#connect(this.#prev[index], this.#next[index])
        }
        this.#connect(this.#tail, index)
        this.#tail = index
      }
    }
    /**
     * Deletes a key out of the cache.
     *
     * Returns true if the key was deleted, false otherwise.
     */
    delete(k) {
      return this.#delete(k, 'delete')
    }
    #delete(k, reason) {
      let deleted = false
      if (this.#size !== 0) {
        const index = this.#keyMap.get(k)
        if (index !== undefined) {
          deleted = true
          if (this.#size === 1) {
            this.#clear(reason)
          } else {
            this.#removeItemSize(index)
            const v = this.#valList[index]
            if (this.#isBackgroundFetch(v)) {
              v.__abortController.abort(new Error('deleted'))
            } else if (this.#hasDispose || this.#hasDisposeAfter) {
              if (this.#hasDispose) {
                this.#dispose?.(v, k, reason)
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([v, k, reason])
              }
            }
            this.#keyMap.delete(k)
            this.#keyList[index] = undefined
            this.#valList[index] = undefined
            if (index === this.#tail) {
              this.#tail = this.#prev[index]
            } else if (index === this.#head) {
              this.#head = this.#next[index]
            } else {
              const pi = this.#prev[index]
              this.#next[pi] = this.#next[index]
              const ni = this.#next[index]
              this.#prev[ni] = this.#prev[index]
            }
            this.#size--
            this.#free.push(index)
          }
        }
      }
      if (this.#hasDisposeAfter && this.#disposed?.length) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
      return deleted
    }
    /**
     * Clear the cache entirely, throwing away all values.
     */
    clear() {
      return this.#clear('delete')
    }
    #clear(reason) {
      for (const index of this.#rindexes({
        allowStale: true
      })) {
        const v = this.#valList[index]
        if (this.#isBackgroundFetch(v)) {
          v.__abortController.abort(new Error('deleted'))
        } else {
          const k = this.#keyList[index]
          if (this.#hasDispose) {
            this.#dispose?.(v, k, reason)
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([v, k, reason])
          }
        }
      }
      this.#keyMap.clear()
      this.#valList.fill(undefined)
      this.#keyList.fill(undefined)
      if (this.#ttls && this.#starts) {
        this.#ttls.fill(0)
        this.#starts.fill(0)
      }
      if (this.#sizes) {
        this.#sizes.fill(0)
      }
      this.#head = 0
      this.#tail = 0
      this.#free.length = 0
      this.#calculatedSize = 0
      this.#size = 0
      if (this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed
        let task
        while ((task = dt?.shift())) {
          this.#disposeAfter?.(...task)
        }
      }
    }
  }
  commonjs$9.LRUCache = LRUCache
  return commonjs$9
}

/* eslint-disable max-len */
let hosts_1
let hasRequiredHosts
function requireHosts() {
  if (hasRequiredHosts) {
    return hosts_1
  }
  hasRequiredHosts = 1
  const maybeJoin = (...args) => (args.every(arg => arg) ? args.join('') : '')
  const maybeEncode = arg => (arg ? encodeURIComponent(arg) : '')
  const formatHashFragment = f =>
    f
      .toLowerCase()
      .replace(/^\W+/g, '') // strip leading non-characters
      .replace(/(?<!\W)\W+$/, '') // strip trailing non-characters
      .replace(/\//g, '') // strip all slashes
      .replace(/\W+/g, '-') // replace remaining non-characters with '-'

  const defaults = {
    sshtemplate: ({ domain, user, project, committish }) =>
      `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,
    sshurltemplate: ({ domain, user, project, committish }) =>
      `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,
    edittemplate: ({ domain, user, project, committish, editpath, path }) =>
      `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'HEAD'), '/', path)}`,
    browsetemplate: ({ domain, user, project, committish, treepath }) =>
      `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,
    browsetreetemplate: ({
      domain,
      user,
      project,
      committish,
      treepath,
      path,
      fragment,
      hashformat
    }) =>
      `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'HEAD')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,
    browseblobtemplate: ({
      domain,
      user,
      project,
      committish,
      blobpath,
      path,
      fragment,
      hashformat
    }) =>
      `https://${domain}/${user}/${project}/${blobpath}/${maybeEncode(committish || 'HEAD')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,
    docstemplate: ({ domain, user, project, treepath, committish }) =>
      `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,
    httpstemplate: ({ auth, domain, user, project, committish }) =>
      `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,
    filetemplate: ({ domain, user, project, committish, path }) =>
      `https://${domain}/${user}/${project}/raw/${maybeEncode(committish || 'HEAD')}/${path}`,
    shortcuttemplate: ({ type, user, project, committish }) =>
      `${type}:${user}/${project}${maybeJoin('#', committish)}`,
    pathtemplate: ({ user, project, committish }) =>
      `${user}/${project}${maybeJoin('#', committish)}`,
    bugstemplate: ({ domain, user, project }) =>
      `https://${domain}/${user}/${project}/issues`,
    hashformat: formatHashFragment
  }
  const hosts = {}
  hosts.github = {
    // First two are insecure and generally shouldn't be used any more, but
    // they are still supported.
    protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],
    domain: 'github.com',
    treepath: 'tree',
    blobpath: 'blob',
    editpath: 'edit',
    filetemplate: ({ auth, user, project, committish, path }) =>
      `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish || 'HEAD')}/${path}`,
    gittemplate: ({ auth, domain, user, project, committish }) =>
      `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,
    tarballtemplate: ({ domain, user, project, committish }) =>
      `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish || 'HEAD')}`,
    extract: url => {
      let [, user, project, type, committish] = url.pathname.split('/', 5)
      if (type && type !== 'tree') {
        return
      }
      if (!type) {
        committish = url.hash.slice(1)
      }
      if (project && project.endsWith('.git')) {
        project = project.slice(0, -4)
      }
      if (!user || !project) {
        return
      }
      return {
        user,
        project,
        committish
      }
    }
  }
  hosts.bitbucket = {
    protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],
    domain: 'bitbucket.org',
    treepath: 'src',
    blobpath: 'src',
    editpath: '?mode=edit',
    edittemplate: ({
      domain,
      user,
      project,
      committish,
      treepath,
      path,
      editpath
    }) =>
      `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'HEAD'), '/', path, editpath)}`,
    tarballtemplate: ({ domain, user, project, committish }) =>
      `https://${domain}/${user}/${project}/get/${maybeEncode(committish || 'HEAD')}.tar.gz`,
    extract: url => {
      let [, user, project, aux] = url.pathname.split('/', 4)
      if (['get'].includes(aux)) {
        return
      }
      if (project && project.endsWith('.git')) {
        project = project.slice(0, -4)
      }
      if (!user || !project) {
        return
      }
      return {
        user,
        project,
        committish: url.hash.slice(1)
      }
    }
  }
  hosts.gitlab = {
    protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],
    domain: 'gitlab.com',
    treepath: 'tree',
    blobpath: 'tree',
    editpath: '-/edit',
    httpstemplate: ({ auth, domain, user, project, committish }) =>
      `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,
    tarballtemplate: ({ domain, user, project, committish }) =>
      `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish || 'HEAD')}`,
    extract: url => {
      const path = url.pathname.slice(1)
      if (path.includes('/-/') || path.includes('/archive.tar.gz')) {
        return
      }
      const segments = path.split('/')
      let project = segments.pop()
      if (project.endsWith('.git')) {
        project = project.slice(0, -4)
      }
      const user = segments.join('/')
      if (!user || !project) {
        return
      }
      return {
        user,
        project,
        committish: url.hash.slice(1)
      }
    }
  }
  hosts.gist = {
    protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],
    domain: 'gist.github.com',
    editpath: 'edit',
    sshtemplate: ({ domain, project, committish }) =>
      `git@${domain}:${project}.git${maybeJoin('#', committish)}`,
    sshurltemplate: ({ domain, project, committish }) =>
      `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,
    edittemplate: ({ domain, user, project, committish, editpath }) =>
      `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,
    browsetemplate: ({ domain, project, committish }) =>
      `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,
    browsetreetemplate: ({ domain, project, committish, path, hashformat }) =>
      `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,
    browseblobtemplate: ({ domain, project, committish, path, hashformat }) =>
      `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,
    docstemplate: ({ domain, project, committish }) =>
      `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,
    httpstemplate: ({ domain, project, committish }) =>
      `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,
    filetemplate: ({ user, project, committish, path }) =>
      `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,
    shortcuttemplate: ({ type, project, committish }) =>
      `${type}:${project}${maybeJoin('#', committish)}`,
    pathtemplate: ({ project, committish }) =>
      `${project}${maybeJoin('#', committish)}`,
    bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,
    gittemplate: ({ domain, project, committish }) =>
      `git://${domain}/${project}.git${maybeJoin('#', committish)}`,
    tarballtemplate: ({ project, committish }) =>
      `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish || 'HEAD')}`,
    extract: url => {
      let [, user, project, aux] = url.pathname.split('/', 4)
      if (aux === 'raw') {
        return
      }
      if (!project) {
        if (!user) {
          return
        }
        project = user
        user = null
      }
      if (project.endsWith('.git')) {
        project = project.slice(0, -4)
      }
      return {
        user,
        project,
        committish: url.hash.slice(1)
      }
    },
    hashformat: function (fragment) {
      return fragment && 'file-' + formatHashFragment(fragment)
    }
  }
  hosts.sourcehut = {
    protocols: ['git+ssh:', 'https:'],
    domain: 'git.sr.ht',
    treepath: 'tree',
    blobpath: 'tree',
    filetemplate: ({ domain, user, project, committish, path }) =>
      `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'HEAD'}/${path}`,
    httpstemplate: ({ domain, user, project, committish }) =>
      `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,
    tarballtemplate: ({ domain, user, project, committish }) =>
      `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'HEAD'}.tar.gz`,
    bugstemplate: () => null,
    extract: url => {
      let [, user, project, aux] = url.pathname.split('/', 4)

      // tarball url
      if (['archive'].includes(aux)) {
        return
      }
      if (project && project.endsWith('.git')) {
        project = project.slice(0, -4)
      }
      if (!user || !project) {
        return
      }
      return {
        user,
        project,
        committish: url.hash.slice(1)
      }
    }
  }
  for (const [name, host] of Object.entries(hosts)) {
    hosts[name] = Object.assign({}, defaults, host)
  }
  hosts_1 = hosts
  return hosts_1
}

let parseUrl
let hasRequiredParseUrl
function requireParseUrl() {
  if (hasRequiredParseUrl) {
    return parseUrl
  }
  hasRequiredParseUrl = 1
  const url = require$$0$2
  const lastIndexOfBefore = (str, char, beforeChar) => {
    const startPosition = str.indexOf(beforeChar)
    return str.lastIndexOf(char, startPosition > -1 ? startPosition : Infinity)
  }
  const safeUrl = u => {
    try {
      return new url.URL(u)
    } catch {
      // this fn should never throw
    }
  }

  // accepts input like git:github.com:user/repo and inserts the // after the first :
  const correctProtocol = (arg, protocols) => {
    const firstColon = arg.indexOf(':')
    const proto = arg.slice(0, firstColon + 1)
    if (Object.prototype.hasOwnProperty.call(protocols, proto)) {
      return arg
    }
    const firstAt = arg.indexOf('@')
    if (firstAt > -1) {
      if (firstAt > firstColon) {
        return `git+ssh://${arg}`
      } else {
        return arg
      }
    }
    const doubleSlash = arg.indexOf('//')
    if (doubleSlash === firstColon + 1) {
      return arg
    }
    return `${arg.slice(0, firstColon + 1)}//${arg.slice(firstColon + 1)}`
  }

  // attempt to correct an scp style url so that it will parse with `new URL()`
  const correctUrl = giturl => {
    // ignore @ that come after the first hash since the denotes the start
    // of a committish which can contain @ characters
    const firstAt = lastIndexOfBefore(giturl, '@', '#')
    // ignore colons that come after the hash since that could include colons such as:
    // git@github.com:user/package-2#semver:^1.0.0
    const lastColonBeforeHash = lastIndexOfBefore(giturl, ':', '#')
    if (lastColonBeforeHash > firstAt) {
      // the last : comes after the first @ (or there is no @)
      // like it would in:
      // proto://hostname.com:user/repo
      // username@hostname.com:user/repo
      // :password@hostname.com:user/repo
      // username:password@hostname.com:user/repo
      // proto://username@hostname.com:user/repo
      // proto://:password@hostname.com:user/repo
      // proto://username:password@hostname.com:user/repo
      // then we replace the last : with a / to create a valid path
      giturl =
        giturl.slice(0, lastColonBeforeHash) +
        '/' +
        giturl.slice(lastColonBeforeHash + 1)
    }
    if (
      lastIndexOfBefore(giturl, ':', '#') === -1 &&
      giturl.indexOf('//') === -1
    ) {
      // we have no : at all
      // as it would be in:
      // username@hostname.com/user/repo
      // then we prepend a protocol
      giturl = `git+ssh://${giturl}`
    }
    return giturl
  }
  parseUrl = (giturl, protocols) => {
    const withProtocol = protocols ? correctProtocol(giturl, protocols) : giturl
    return safeUrl(withProtocol) || safeUrl(correctUrl(withProtocol))
  }
  return parseUrl
}

let fromUrl
let hasRequiredFromUrl
function requireFromUrl() {
  if (hasRequiredFromUrl) {
    return fromUrl
  }
  hasRequiredFromUrl = 1
  const parseUrl = requireParseUrl()

  // look for github shorthand inputs, such as npm/cli
  const isGitHubShorthand = arg => {
    // it cannot contain whitespace before the first #
    // it cannot start with a / because that's probably an absolute file path
    // but it must include a slash since repos are username/repository
    // it cannot start with a . because that's probably a relative file path
    // it cannot start with an @ because that's a scoped package if it passes the other tests
    // it cannot contain a : before a # because that tells us that there's a protocol
    // a second / may not exist before a #
    const firstHash = arg.indexOf('#')
    const firstSlash = arg.indexOf('/')
    const secondSlash = arg.indexOf('/', firstSlash + 1)
    const firstColon = arg.indexOf(':')
    const firstSpace = /\s/.exec(arg)
    const firstAt = arg.indexOf('@')
    const spaceOnlyAfterHash =
      !firstSpace || (firstHash > -1 && firstSpace.index > firstHash)
    const atOnlyAfterHash =
      firstAt === -1 || (firstHash > -1 && firstAt > firstHash)
    const colonOnlyAfterHash =
      firstColon === -1 || (firstHash > -1 && firstColon > firstHash)
    const secondSlashOnlyAfterHash =
      secondSlash === -1 || (firstHash > -1 && secondSlash > firstHash)
    const hasSlash = firstSlash > 0
    // if a # is found, what we really want to know is that the character
    // immediately before # is not a /
    const doesNotEndWithSlash =
      firstHash > -1 ? arg[firstHash - 1] !== '/' : !arg.endsWith('/')
    const doesNotStartWithDot = !arg.startsWith('.')
    return (
      spaceOnlyAfterHash &&
      hasSlash &&
      doesNotEndWithSlash &&
      doesNotStartWithDot &&
      atOnlyAfterHash &&
      colonOnlyAfterHash &&
      secondSlashOnlyAfterHash
    )
  }
  fromUrl = (giturl, opts, { gitHosts, protocols }) => {
    if (!giturl) {
      return
    }
    const correctedUrl = isGitHubShorthand(giturl) ? `github:${giturl}` : giturl
    const parsed = parseUrl(correctedUrl, protocols)
    if (!parsed) {
      return
    }
    const gitHostShortcut = gitHosts.byShortcut[parsed.protocol]
    const gitHostDomain =
      gitHosts.byDomain[
        parsed.hostname.startsWith('www.')
          ? parsed.hostname.slice(4)
          : parsed.hostname
      ]
    const gitHostName = gitHostShortcut || gitHostDomain
    if (!gitHostName) {
      return
    }
    const gitHostInfo = gitHosts[gitHostShortcut || gitHostDomain]
    let auth = null
    if (
      protocols[parsed.protocol]?.auth &&
      (parsed.username || parsed.password)
    ) {
      auth = `${parsed.username}${parsed.password ? ':' + parsed.password : ''}`
    }
    let committish = null
    let user = null
    let project = null
    let defaultRepresentation = null
    try {
      if (gitHostShortcut) {
        let pathname = parsed.pathname.startsWith('/')
          ? parsed.pathname.slice(1)
          : parsed.pathname
        const firstAt = pathname.indexOf('@')
        // we ignore auth for shortcuts, so just trim it out
        if (firstAt > -1) {
          pathname = pathname.slice(firstAt + 1)
        }
        const lastSlash = pathname.lastIndexOf('/')
        if (lastSlash > -1) {
          user = decodeURIComponent(pathname.slice(0, lastSlash))
          // we want nulls only, never empty strings
          if (!user) {
            user = null
          }
          project = decodeURIComponent(pathname.slice(lastSlash + 1))
        } else {
          project = decodeURIComponent(pathname)
        }
        if (project.endsWith('.git')) {
          project = project.slice(0, -4)
        }
        if (parsed.hash) {
          committish = decodeURIComponent(parsed.hash.slice(1))
        }
        defaultRepresentation = 'shortcut'
      } else {
        if (!gitHostInfo.protocols.includes(parsed.protocol)) {
          return
        }
        const segments = gitHostInfo.extract(parsed)
        if (!segments) {
          return
        }
        user = segments.user && decodeURIComponent(segments.user)
        project = decodeURIComponent(segments.project)
        committish = decodeURIComponent(segments.committish)
        defaultRepresentation =
          protocols[parsed.protocol]?.name || parsed.protocol.slice(0, -1)
      }
    } catch (err) {
      /* istanbul ignore else */
      if (err instanceof URIError) {
        return
      } else {
        throw err
      }
    }
    return [
      gitHostName,
      user,
      auth,
      project,
      committish,
      defaultRepresentation,
      opts
    ]
  }
  return fromUrl
}

let lib$s
let hasRequiredLib$s
function requireLib$s() {
  if (hasRequiredLib$s) {
    return lib$s
  }
  hasRequiredLib$s = 1
  const { LRUCache } = /*@__PURE__*/ requireCommonjs$9()
  const hosts = requireHosts()
  const fromUrl = requireFromUrl()
  const parseUrl = requireParseUrl()
  const cache = new LRUCache({
    max: 1000
  })
  function unknownHostedUrl(url) {
    try {
      const { protocol, hostname, pathname } = new URL(url)
      if (!hostname) {
        return null
      }
      const proto = /(?:git\+)http:$/.test(protocol) ? 'http:' : 'https:'
      const path = pathname.replace(/\.git$/, '')
      return `${proto}//${hostname}${path}`
    } catch {
      return null
    }
  }
  class GitHost {
    constructor(
      type,
      user,
      auth,
      project,
      committish,
      defaultRepresentation,
      opts = {}
    ) {
      Object.assign(this, GitHost.#gitHosts[type], {
        type,
        user,
        auth,
        project,
        committish,
        default: defaultRepresentation,
        opts
      })
    }
    static #gitHosts = {
      byShortcut: {},
      byDomain: {}
    }
    static #protocols = {
      'git+ssh:': {
        name: 'sshurl'
      },
      'ssh:': {
        name: 'sshurl'
      },
      'git+https:': {
        name: 'https',
        auth: true
      },
      'git:': {
        auth: true
      },
      'http:': {
        auth: true
      },
      'https:': {
        auth: true
      },
      'git+http:': {
        auth: true
      }
    }
    static addHost(name, host) {
      GitHost.#gitHosts[name] = host
      GitHost.#gitHosts.byDomain[host.domain] = name
      GitHost.#gitHosts.byShortcut[`${name}:`] = name
      GitHost.#protocols[`${name}:`] = {
        name
      }
    }
    static fromUrl(giturl, opts) {
      if (typeof giturl !== 'string') {
        return
      }
      const key = giturl + JSON.stringify(opts || {})
      if (!cache.has(key)) {
        const hostArgs = fromUrl(giturl, opts, {
          gitHosts: GitHost.#gitHosts,
          protocols: GitHost.#protocols
        })
        cache.set(key, hostArgs ? new GitHost(...hostArgs) : undefined)
      }
      return cache.get(key)
    }
    static fromManifest(manifest, opts = {}) {
      if (!manifest || typeof manifest !== 'object') {
        return
      }
      const r = manifest.repository
      // TODO: look into also checking the `bugs`/`homepage` URLs

      const rurl =
        r &&
        (typeof r === 'string'
          ? r
          : typeof r === 'object' && typeof r.url === 'string'
            ? r.url
            : null)
      if (!rurl) {
        throw new Error('no repository')
      }
      const info =
        (rurl && GitHost.fromUrl(rurl.replace(/^git\+/, ''), opts)) || null
      if (info) {
        return info
      }
      const unk = unknownHostedUrl(rurl)
      return GitHost.fromUrl(unk, opts) || unk
    }
    static parseUrl(url) {
      return parseUrl(url)
    }
    #fill(template, opts) {
      if (typeof template !== 'function') {
        return null
      }
      const options = {
        ...this,
        ...this.opts,
        ...opts
      }

      // the path should always be set so we don't end up with 'undefined' in urls
      if (!options.path) {
        options.path = ''
      }

      // template functions will insert the leading slash themselves
      if (options.path.startsWith('/')) {
        options.path = options.path.slice(1)
      }
      if (options.noCommittish) {
        options.committish = null
      }
      const result = template(options)
      return options.noGitPlus && result.startsWith('git+')
        ? result.slice(4)
        : result
    }
    hash() {
      return this.committish ? `#${this.committish}` : ''
    }
    ssh(opts) {
      return this.#fill(this.sshtemplate, opts)
    }
    sshurl(opts) {
      return this.#fill(this.sshurltemplate, opts)
    }
    browse(path, ...args) {
      // not a string, treat path as opts
      if (typeof path !== 'string') {
        return this.#fill(this.browsetemplate, path)
      }
      if (typeof args[0] !== 'string') {
        return this.#fill(this.browsetreetemplate, {
          ...args[0],
          path
        })
      }
      return this.#fill(this.browsetreetemplate, {
        ...args[1],
        fragment: args[0],
        path
      })
    }

    // If the path is known to be a file, then browseFile should be used. For some hosts
    // the url is the same as browse, but for others like GitHub a file can use both `/tree/`
    // and `/blob/` in the path. When using a default committish of `HEAD` then the `/tree/`
    // path will redirect to a specific commit. Using the `/blob/` path avoids this and
    // does not redirect to a different commit.
    browseFile(path, ...args) {
      if (typeof args[0] !== 'string') {
        return this.#fill(this.browseblobtemplate, {
          ...args[0],
          path
        })
      }
      return this.#fill(this.browseblobtemplate, {
        ...args[1],
        fragment: args[0],
        path
      })
    }
    docs(opts) {
      return this.#fill(this.docstemplate, opts)
    }
    bugs(opts) {
      return this.#fill(this.bugstemplate, opts)
    }
    https(opts) {
      return this.#fill(this.httpstemplate, opts)
    }
    git(opts) {
      return this.#fill(this.gittemplate, opts)
    }
    shortcut(opts) {
      return this.#fill(this.shortcuttemplate, opts)
    }
    path(opts) {
      return this.#fill(this.pathtemplate, opts)
    }
    tarball(opts) {
      return this.#fill(this.tarballtemplate, {
        ...opts,
        noCommittish: false
      })
    }
    file(path, opts) {
      return this.#fill(this.filetemplate, {
        ...opts,
        path
      })
    }
    edit(path, opts) {
      return this.#fill(this.edittemplate, {
        ...opts,
        path
      })
    }
    getDefaultRepresentation() {
      return this.default
    }
    toString(opts) {
      if (this.default && typeof this[this.default] === 'function') {
        return this[this.default](opts)
      }
      return this.sshurl(opts)
    }
  }
  for (const [name, host] of Object.entries(hosts)) {
    GitHost.addHost(name, host)
  }
  lib$s = GitHost
  return lib$s
}

const commonjs$8 = {}

const commonjs$7 = {}

let balancedMatch
let hasRequiredBalancedMatch
function requireBalancedMatch() {
  if (hasRequiredBalancedMatch) {
    return balancedMatch
  }
  hasRequiredBalancedMatch = 1
  balancedMatch = balanced
  function balanced(a, b, str) {
    if (a instanceof RegExp) {
      a = maybeMatch(a, str)
    }
    if (b instanceof RegExp) {
      b = maybeMatch(b, str)
    }
    const r = range(a, b, str)
    return (
      r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      }
    )
  }
  function maybeMatch(reg, str) {
    const m = str.match(reg)
    return m ? m[0] : null
  }
  balanced.range = range
  function range(a, b, str) {
    let begs, beg, left, right, result
    let ai = str.indexOf(a)
    let bi = str.indexOf(b, ai + 1)
    let i = ai
    if (ai >= 0 && bi > 0) {
      if (a === b) {
        return [ai, bi]
      }
      begs = []
      left = str.length
      while (i >= 0 && !result) {
        if (i == ai) {
          begs.push(i)
          ai = str.indexOf(a, i + 1)
        } else if (begs.length == 1) {
          result = [begs.pop(), bi]
        } else {
          beg = begs.pop()
          if (beg < left) {
            left = beg
            right = bi
          }
          bi = str.indexOf(b, i + 1)
        }
        i = ai < bi && ai >= 0 ? ai : bi
      }
      if (begs.length) {
        result = [left, right]
      }
    }
    return result
  }
  return balancedMatch
}

let braceExpansion
let hasRequiredBraceExpansion
function requireBraceExpansion() {
  if (hasRequiredBraceExpansion) {
    return braceExpansion
  }
  hasRequiredBraceExpansion = 1
  const balanced = requireBalancedMatch()
  braceExpansion = expandTop
  const escSlash = '\0SLASH' + Math.random() + '\0'
  const escOpen = '\0OPEN' + Math.random() + '\0'
  const escClose = '\0CLOSE' + Math.random() + '\0'
  const escComma = '\0COMMA' + Math.random() + '\0'
  const escPeriod = '\0PERIOD' + Math.random() + '\0'
  function numeric(str) {
    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0)
  }
  function escapeBraces(str) {
    return str
      .split('\\\\')
      .join(escSlash)
      .split('\\{')
      .join(escOpen)
      .split('\\}')
      .join(escClose)
      .split('\\,')
      .join(escComma)
      .split('\\.')
      .join(escPeriod)
  }
  function unescapeBraces(str) {
    return str
      .split(escSlash)
      .join('\\')
      .split(escOpen)
      .join('{')
      .split(escClose)
      .join('}')
      .split(escComma)
      .join(',')
      .split(escPeriod)
      .join('.')
  }

  // Basically just str.split(","), but handling cases
  // where we have nested braced sections, which should be
  // treated as individual members, like {a,{b,c},d}
  function parseCommaParts(str) {
    if (!str) {
      return ['']
    }
    const parts = []
    const m = balanced('{', '}', str)
    if (!m) {
      return str.split(',')
    }
    const pre = m.pre
    const body = m.body
    const post = m.post
    const p = pre.split(',')
    p[p.length - 1] += '{' + body + '}'
    const postParts = parseCommaParts(post)
    if (post.length) {
      p[p.length - 1] += postParts.shift()
      p.push.apply(p, postParts)
    }
    parts.push.apply(parts, p)
    return parts
  }
  function expandTop(str) {
    if (!str) {
      return []
    }

    // I don't know why Bash 4.3 does this, but it does.
    // Anything starting with {} will have the first two bytes preserved
    // but *only* at the top level, so {},a}b will not expand to anything,
    // but a{},b}c will be expanded to [a}c,abc].
    // One could argue that this is a bug in Bash, but since the goal of
    // this module is to match Bash's rules, we escape a leading {}
    if (str.substr(0, 2) === '{}') {
      str = '\\{\\}' + str.substr(2)
    }
    return expand(escapeBraces(str), true).map(unescapeBraces)
  }
  function embrace(str) {
    return '{' + str + '}'
  }
  function isPadded(el) {
    return /^-?0\d/.test(el)
  }
  function lte(i, y) {
    return i <= y
  }
  function gte(i, y) {
    return i >= y
  }
  function expand(str, isTop) {
    const expansions = []
    const m = balanced('{', '}', str)
    if (!m) {
      return [str]
    }

    // no need to expand pre, since it is guaranteed to be free of brace-sets
    const pre = m.pre
    const post = m.post.length ? expand(m.post, false) : ['']
    if (m.pre.endsWith('\u0024' /*'$'*/)) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + '{' + m.body + '}' + post[k]
        expansions.push(expansion)
      }
    } else {
      const isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body)
      const isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(
        m.body
      )
      const isSequence = isNumericSequence || isAlphaSequence
      const isOptions = m.body.indexOf(',') >= 0
      if (!isSequence && !isOptions) {
        // {a},b}
        if (m.post.match(/,(?!,).*\}/)) {
          str = m.pre + '{' + m.body + escClose + m.post
          return expand(str)
        }
        return [str]
      }
      let n
      if (isSequence) {
        n = m.body.split(/\.\./)
      } else {
        n = parseCommaParts(m.body)
        if (n.length === 1) {
          // x{{a,b}}y ==> x{a}y x{b}y
          n = expand(n[0], false).map(embrace)
          if (n.length === 1) {
            return post.map(function (p) {
              return m.pre + n[0] + p
            })
          }
        }
      }

      // at this point, n is the parts, and we know it's not a comma set
      // with a single entry.
      let N
      if (isSequence) {
        const x = numeric(n[0])
        const y = numeric(n[1])
        const width = Math.max(n[0].length, n[1].length)
        let incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1
        let test = lte
        const reverse = y < x
        if (reverse) {
          incr *= -1
          test = gte
        }
        const pad = n.some(isPadded)
        N = []
        for (let i = x; test(i, y); i += incr) {
          let c
          if (isAlphaSequence) {
            c = String.fromCharCode(i)
            if (c === '\\') {
              c = ''
            }
          } else {
            c = String(i)
            if (pad) {
              const need = width - c.length
              if (need > 0) {
                const z = new Array(need + 1).join('0')
                if (i < 0) {
                  c = '-' + z + c.slice(1)
                } else {
                  c = z + c
                }
              }
            }
          }
          N.push(c)
        }
      } else {
        N = []
        for (var j = 0; j < n.length; j++) {
          N.push.apply(N, expand(n[j], false))
        }
      }
      for (var j = 0; j < N.length; j++) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + N[j] + post[k]
          if (!isTop || isSequence || expansion) {
            expansions.push(expansion)
          }
        }
      }
    }
    return expansions
  }
  return braceExpansion
}

const assertValidPattern$2 = {}

let hasRequiredAssertValidPattern$2
function requireAssertValidPattern$2() {
  if (hasRequiredAssertValidPattern$2) {
    return assertValidPattern$2
  }
  hasRequiredAssertValidPattern$2 = 1
  Object.defineProperty(assertValidPattern$2, '__esModule', {
    value: true
  })
  assertValidPattern$2.assertValidPattern = void 0
  const MAX_PATTERN_LENGTH = 1024 * 64
  const assertValidPattern = pattern => {
    if (typeof pattern !== 'string') {
      throw new TypeError('invalid pattern')
    }
    if (pattern.length > MAX_PATTERN_LENGTH) {
      throw new TypeError('pattern is too long')
    }
  }
  assertValidPattern$2.assertValidPattern = assertValidPattern
  return assertValidPattern$2
}

const ast$2 = {}

const braceExpressions$2 = {}

let hasRequiredBraceExpressions$2
function requireBraceExpressions$2() {
  if (hasRequiredBraceExpressions$2) {
    return braceExpressions$2
  }
  hasRequiredBraceExpressions$2 = 1
  // translate the various posix character classes into unicode properties
  // this works across all unicode locales
  Object.defineProperty(braceExpressions$2, '__esModule', {
    value: true
  })
  braceExpressions$2.parseClass = void 0
  // { <posix class>: [<translation>, /u flag required, negated]
  const posixClasses = {
    '[:alnum:]': ['\\p{L}\\p{Nl}\\p{Nd}', true],
    '[:alpha:]': ['\\p{L}\\p{Nl}', true],
    '[:ascii:]': ['\\x' + '00-\\x' + '7f', false],
    '[:blank:]': ['\\p{Zs}\\t', true],
    '[:cntrl:]': ['\\p{Cc}', true],
    '[:digit:]': ['\\p{Nd}', true],
    '[:graph:]': ['\\p{Z}\\p{C}', true, true],
    '[:lower:]': ['\\p{Ll}', true],
    '[:print:]': ['\\p{C}', true],
    '[:punct:]': ['\\p{P}', true],
    '[:space:]': ['\\p{Z}\\t\\r\\n\\v\\f', true],
    '[:upper:]': ['\\p{Lu}', true],
    '[:word:]': ['\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}', true],
    '[:xdigit:]': ['A-Fa-f0-9', false]
  }
  // only need to escape a few things inside of brace expressions
  // escapes: [ \ ] -
  const braceEscape = s => s.replace(/[[\]\\-]/g, '\\$&')
  // escape all regexp magic characters
  const regexpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  // everything has already been escaped, we just have to join
  const rangesToString = ranges => ranges.join('')
  // takes a glob string at a posix brace expression, and returns
  // an equivalent regular expression source, and boolean indicating
  // whether the /u flag needs to be applied, and the number of chars
  // consumed to parse the character class.
  // This also removes out of order ranges, and returns ($.) if the
  // entire class just no good.
  const parseClass = (glob, position) => {
    const pos = position
    /* c8 ignore start */
    if (glob.charAt(pos) !== '[') {
      throw new Error('not in a brace expression')
    }
    /* c8 ignore stop */
    const ranges = []
    const negs = []
    let i = pos + 1
    let sawStart = false
    let uflag = false
    let escaping = false
    let negate = false
    let endPos = pos
    let rangeStart = ''
    WHILE: while (i < glob.length) {
      const c = glob.charAt(i)
      if ((c === '!' || c === '^') && i === pos + 1) {
        negate = true
        i++
        continue
      }
      if (c === ']' && sawStart && !escaping) {
        endPos = i + 1
        break
      }
      sawStart = true
      if (c === '\\') {
        if (!escaping) {
          escaping = true
          i++
          continue
        }
        // escaped \ char, fall through and treat like normal char
      }
      if (c === '[' && !escaping) {
        // either a posix class, a collation equivalent, or just a [
        for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
          if (glob.startsWith(cls, i)) {
            // invalid, [a-[] is fine, but not [a-[:alpha]]
            if (rangeStart) {
              return ['$.', false, glob.length - pos, true]
            }
            i += cls.length
            if (neg) {
              negs.push(unip)
            } else {
              ranges.push(unip)
            }
            uflag = uflag || u
            continue WHILE
          }
        }
      }
      // now it's just a normal character, effectively
      escaping = false
      if (rangeStart) {
        // throw this range away if it's not valid, but others
        // can still match.
        if (c > rangeStart) {
          ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c))
        } else if (c === rangeStart) {
          ranges.push(braceEscape(c))
        }
        rangeStart = ''
        i++
        continue
      }
      // now might be the start of a range.
      // can be either c-d or c-] or c<more...>] or c] at this point
      if (glob.startsWith('-]', i + 1)) {
        ranges.push(braceEscape(c + '-'))
        i += 2
        continue
      }
      if (glob.startsWith('-', i + 1)) {
        rangeStart = c
        i += 2
        continue
      }
      // not the start of a range, just a single character
      ranges.push(braceEscape(c))
      i++
    }
    if (endPos < i) {
      // didn't see the end of the class, not a valid class,
      // but might still be valid as a literal match.
      return ['', false, 0, false]
    }
    // if we got no ranges and no negates, then we have a range that
    // cannot possibly match anything, and that poisons the whole glob
    if (!ranges.length && !negs.length) {
      return ['$.', false, glob.length - pos, true]
    }
    // if we got one positive range, and it's a single character, then that's
    // not actually a magic pattern, it's just that one literal character.
    // we should not treat that as "magic", we should just return the literal
    // character. [_] is a perfectly valid way to escape glob magic chars.
    if (
      negs.length === 0 &&
      ranges.length === 1 &&
      /^\\?.$/.test(ranges[0]) &&
      !negate
    ) {
      const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0]
      return [regexpEscape(r), false, endPos - pos, false]
    }
    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']'
    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']'
    const comb =
      ranges.length && negs.length
        ? '(' + sranges + '|' + snegs + ')'
        : ranges.length
          ? sranges
          : snegs
    return [comb, uflag, endPos - pos, true]
  }
  braceExpressions$2.parseClass = parseClass
  return braceExpressions$2
}

const _unescape$2 = {}

let hasRequired_unescape$2
function require_unescape$2() {
  if (hasRequired_unescape$2) {
    return _unescape$2
  }
  hasRequired_unescape$2 = 1
  Object.defineProperty(_unescape$2, '__esModule', {
    value: true
  })
  _unescape$2.unescape = void 0
  /**
   * Un-escape a string that has been escaped with {@link escape}.
   *
   * If the {@link windowsPathsNoEscape} option is used, then square-brace
   * escapes are removed, but not backslash escapes.  For example, it will turn
   * the string `'[*]'` into `*`, but it will not turn `'\\*'` into `'*'`,
   * becuase `\` is a path separator in `windowsPathsNoEscape` mode.
   *
   * When `windowsPathsNoEscape` is not set, then both brace escapes and
   * backslash escapes are removed.
   *
   * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped
   * or unescaped.
   */
  const unescape = (s, { windowsPathsNoEscape = false } = {}) => {
    return windowsPathsNoEscape
      ? s.replace(/\[([^/\\])\]/g, '$1')
      : s.replace(/((?!\\).|^)\[([^/\\])\]/g, '$1$2').replace(/\\([^/])/g, '$1')
  }
  _unescape$2.unescape = unescape
  return _unescape$2
}

let hasRequiredAst$2
function requireAst$2() {
  if (hasRequiredAst$2) {
    return ast$2
  }
  hasRequiredAst$2 = 1
  // parse a single path portion
  Object.defineProperty(ast$2, '__esModule', {
    value: true
  })
  ast$2.AST = void 0
  const brace_expressions_js_1 = requireBraceExpressions$2()
  const unescape_js_1 = require_unescape$2()
  const types = new Set(['!', '?', '+', '*', '@'])
  const isExtglobType = c => types.has(c)
  // Patterns that get prepended to bind to the start of either the
  // entire string, or just a single path portion, to prevent dots
  // and/or traversal patterns, when needed.
  // Exts don't need the ^ or / bit, because the root binds that already.
  const startNoTraversal = '(?!(?:^|/)\\.\\.?(?:$|/))'
  const startNoDot = '(?!\\.)'
  // characters that indicate a start of pattern needs the "no dots" bit,
  // because a dot *might* be matched. ( is not in the list, because in
  // the case of a child extglob, it will handle the prevention itself.
  const addPatternStart = new Set(['[', '.'])
  // cases where traversal is A-OK, no dot prevention needed
  const justDots = new Set(['..', '.'])
  const reSpecials = new Set('().*{}+?[]^$\\!')
  const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  // any single thing other than /
  const qmark = '[^/]'
  // * => any number of characters
  const star = qmark + '*?'
  // use + when we need to ensure that *something* matches, because the * is
  // the only thing in the path portion.
  const starNoEmpty = qmark + '+?'
  // remove the \ chars that we added if we end up doing a nonmagic compare
  // const deslash = (s: string) => s.replace(/\\(.)/g, '$1')
  class AST {
    type
    #root
    #hasMagic
    #uflag = false
    #parts = []
    #parent
    #parentIndex
    #negs
    #filledNegs = false
    #options
    #toString
    // set to true if it's an extglob with no children
    // (which really means one child of '')
    #emptyExt = false
    constructor(type, parent, options = {}) {
      this.type = type
      // extglobs are inherently magical
      if (type) {
        this.#hasMagic = true
      }
      this.#parent = parent
      this.#root = this.#parent ? this.#parent.#root : this
      this.#options = this.#root === this ? options : this.#root.#options
      this.#negs = this.#root === this ? [] : this.#root.#negs
      if (type === '!' && !this.#root.#filledNegs) {
        this.#negs.push(this)
      }
      this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0
    }
    get hasMagic() {
      /* c8 ignore start */
      if (this.#hasMagic !== undefined) {
        return this.#hasMagic
      }
      /* c8 ignore stop */
      for (const p of this.#parts) {
        if (typeof p === 'string') {
          continue
        }
        if (p.type || p.hasMagic) {
          return (this.#hasMagic = true)
        }
      }
      // note: will be undefined until we generate the regexp src and find out
      return this.#hasMagic
    }
    // reconstructs the pattern
    toString() {
      if (this.#toString !== undefined) {
        return this.#toString
      }
      if (!this.type) {
        return (this.#toString = this.#parts.map(p => String(p)).join(''))
      } else {
        return (this.#toString =
          this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')')
      }
    }
    #fillNegs() {
      /* c8 ignore start */
      if (this !== this.#root) {
        throw new Error('should only call on root')
      }
      if (this.#filledNegs) {
        return this
      }
      /* c8 ignore stop */
      // call toString() once to fill this out
      this.toString()
      this.#filledNegs = true
      let n
      while ((n = this.#negs.pop())) {
        if (n.type !== '!') {
          continue
        }
        // walk up the tree, appending everthing that comes AFTER parentIndex
        let p = n
        let pp = p.#parent
        while (pp) {
          for (
            let i = p.#parentIndex + 1;
            !pp.type && i < pp.#parts.length;
            i++
          ) {
            for (const part of n.#parts) {
              /* c8 ignore start */
              if (typeof part === 'string') {
                throw new Error('string part in extglob AST??')
              }
              /* c8 ignore stop */
              part.copyIn(pp.#parts[i])
            }
          }
          p = pp
          pp = p.#parent
        }
      }
      return this
    }
    push(...parts) {
      for (const p of parts) {
        if (p === '') {
          continue
        }
        /* c8 ignore start */
        if (
          typeof p !== 'string' &&
          !(p instanceof AST && p.#parent === this)
        ) {
          throw new Error('invalid part: ' + p)
        }
        /* c8 ignore stop */
        this.#parts.push(p)
      }
    }
    toJSON() {
      const ret =
        this.type === null
          ? this.#parts
              .slice()
              .map(p => (typeof p === 'string' ? p : p.toJSON()))
          : [this.type, ...this.#parts.map(p => p.toJSON())]
      if (this.isStart() && !this.type) {
        ret.unshift([])
      }
      if (
        this.isEnd() &&
        (this === this.#root ||
          (this.#root.#filledNegs && this.#parent?.type === '!'))
      ) {
        ret.push({})
      }
      return ret
    }
    isStart() {
      if (this.#root === this) {
        return true
      }
      // if (this.type) return !!this.#parent?.isStart()
      if (!this.#parent?.isStart()) {
        return false
      }
      if (this.#parentIndex === 0) {
        return true
      }
      // if everything AHEAD of this is a negation, then it's still the "start"
      const p = this.#parent
      for (let i = 0; i < this.#parentIndex; i++) {
        const pp = p.#parts[i]
        if (!(pp instanceof AST && pp.type === '!')) {
          return false
        }
      }
      return true
    }
    isEnd() {
      if (this.#root === this) {
        return true
      }
      if (this.#parent?.type === '!') {
        return true
      }
      if (!this.#parent?.isEnd()) {
        return false
      }
      if (!this.type) {
        return this.#parent?.isEnd()
      }
      // if not root, it'll always have a parent
      /* c8 ignore start */
      const pl = this.#parent ? this.#parent.#parts.length : 0
      /* c8 ignore stop */
      return this.#parentIndex === pl - 1
    }
    copyIn(part) {
      if (typeof part === 'string') {
        this.push(part)
      } else {
        this.push(part.clone(this))
      }
    }
    clone(parent) {
      const c = new AST(this.type, parent)
      for (const p of this.#parts) {
        c.copyIn(p)
      }
      return c
    }
    static #parseAST(str, ast, pos, opt) {
      let escaping = false
      let inBrace = false
      let braceStart = -1
      let braceNeg = false
      if (ast.type === null) {
        // outside of a extglob, append until we find a start
        let i = pos
        let acc = ''
        while (i < str.length) {
          const c = str.charAt(i++)
          // still accumulate escapes at this point, but we do ignore
          // starts that are escaped
          if (escaping || c === '\\') {
            escaping = !escaping
            acc += c
            continue
          }
          if (inBrace) {
            if (i === braceStart + 1) {
              if (c === '^' || c === '!') {
                braceNeg = true
              }
            } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
              inBrace = false
            }
            acc += c
            continue
          } else if (c === '[') {
            inBrace = true
            braceStart = i
            braceNeg = false
            acc += c
            continue
          }
          if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {
            ast.push(acc)
            acc = ''
            const ext = new AST(c, ast)
            i = AST.#parseAST(str, ext, i, opt)
            ast.push(ext)
            continue
          }
          acc += c
        }
        ast.push(acc)
        return i
      }
      // some kind of extglob, pos is at the (
      // find the next | or )
      let i = pos + 1
      let part = new AST(null, ast)
      const parts = []
      let acc = ''
      while (i < str.length) {
        const c = str.charAt(i++)
        // still accumulate escapes at this point, but we do ignore
        // starts that are escaped
        if (escaping || c === '\\') {
          escaping = !escaping
          acc += c
          continue
        }
        if (inBrace) {
          if (i === braceStart + 1) {
            if (c === '^' || c === '!') {
              braceNeg = true
            }
          } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
            inBrace = false
          }
          acc += c
          continue
        } else if (c === '[') {
          inBrace = true
          braceStart = i
          braceNeg = false
          acc += c
          continue
        }
        if (isExtglobType(c) && str.charAt(i) === '(') {
          part.push(acc)
          acc = ''
          const ext = new AST(c, part)
          part.push(ext)
          i = AST.#parseAST(str, ext, i, opt)
          continue
        }
        if (c === '|') {
          part.push(acc)
          acc = ''
          parts.push(part)
          part = new AST(null, ast)
          continue
        }
        if (c === ')') {
          if (acc === '' && ast.#parts.length === 0) {
            ast.#emptyExt = true
          }
          part.push(acc)
          acc = ''
          ast.push(...parts, part)
          return i
        }
        acc += c
      }
      // unfinished extglob
      // if we got here, it was a malformed extglob! not an extglob, but
      // maybe something else in there.
      ast.type = null
      ast.#hasMagic = undefined
      ast.#parts = [str.substring(pos - 1)]
      return i
    }
    static fromGlob(pattern, options = {}) {
      const ast = new AST(null, undefined, options)
      AST.#parseAST(pattern, ast, 0, options)
      return ast
    }
    // returns the regular expression if there's magic, or the unescaped
    // string if not.
    toMMPattern() {
      // should only be called on root
      /* c8 ignore start */
      if (this !== this.#root) {
        return this.#root.toMMPattern()
      }
      /* c8 ignore stop */
      const glob = this.toString()
      const [re, body, hasMagic, uflag] = this.toRegExpSource()
      // if we're in nocase mode, and not nocaseMagicOnly, then we do
      // still need a regular expression if we have to case-insensitively
      // match capital/lowercase characters.
      const anyMagic =
        hasMagic ||
        this.#hasMagic ||
        (this.#options.nocase &&
          !this.#options.nocaseMagicOnly &&
          glob.toUpperCase() !== glob.toLowerCase())
      if (!anyMagic) {
        return body
      }
      const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '')
      return Object.assign(new RegExp(`^${re}$`, flags), {
        _src: re,
        _glob: glob
      })
    }
    get options() {
      return this.#options
    }
    // returns the string match, the regexp source, whether there's magic
    // in the regexp (so a regular expression is required) and whether or
    // not the uflag is needed for the regular expression (for posix classes)
    // TODO: instead of injecting the start/end at this point, just return
    // the BODY of the regexp, along with the start/end portions suitable
    // for binding the start/end in either a joined full-path makeRe context
    // (where we bind to (^|/), or a standalone matchPart context (where
    // we bind to ^, and not /).  Otherwise slashes get duped!
    //
    // In part-matching mode, the start is:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: ^(?!\.\.?$)
    // - if dots allowed or not possible: ^
    // - if dots possible and not allowed: ^(?!\.)
    // end is:
    // - if not isEnd(): nothing
    // - else: $
    //
    // In full-path matching mode, we put the slash at the START of the
    // pattern, so start is:
    // - if first pattern: same as part-matching mode
    // - if not isStart(): nothing
    // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
    // - if dots allowed or not possible: /
    // - if dots possible and not allowed: /(?!\.)
    // end is:
    // - if last pattern, same as part-matching mode
    // - else nothing
    //
    // Always put the (?:$|/) on negated tails, though, because that has to be
    // there to bind the end of the negated pattern portion, and it's easier to
    // just stick it in now rather than try to inject it later in the middle of
    // the pattern.
    //
    // We can just always return the same end, and leave it up to the caller
    // to know whether it's going to be used joined or in parts.
    // And, if the start is adjusted slightly, can do the same there:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
    // - if dots allowed or not possible: (?:/|^)
    // - if dots possible and not allowed: (?:/|^)(?!\.)
    //
    // But it's better to have a simpler binding without a conditional, for
    // performance, so probably better to return both start options.
    //
    // Then the caller just ignores the end if it's not the first pattern,
    // and the start always gets applied.
    //
    // But that's always going to be $ if it's the ending pattern, or nothing,
    // so the caller can just attach $ at the end of the pattern when building.
    //
    // So the todo is:
    // - better detect what kind of start is needed
    // - return both flavors of starting pattern
    // - attach $ at the end of the pattern when creating the actual RegExp
    //
    // Ah, but wait, no, that all only applies to the root when the first pattern
    // is not an extglob. If the first pattern IS an extglob, then we need all
    // that dot prevention biz to live in the extglob portions, because eg
    // +(*|.x*) can match .xy but not .yx.
    //
    // So, return the two flavors if it's #root and the first child is not an
    // AST, otherwise leave it to the child AST to handle it, and there,
    // use the (?:^|/) style of start binding.
    //
    // Even simplified further:
    // - Since the start for a join is eg /(?!\.) and the start for a part
    // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
    // or start or whatever) and prepend ^ or / at the Regexp construction.
    toRegExpSource(allowDot) {
      const dot = allowDot ?? !!this.#options.dot
      if (this.#root === this) {
        this.#fillNegs()
      }
      if (!this.type) {
        const noEmpty = this.isStart() && this.isEnd()
        const src = this.#parts
          .map(p => {
            const [re, _, hasMagic, uflag] =
              typeof p === 'string'
                ? AST.#parseGlob(p, this.#hasMagic, noEmpty)
                : p.toRegExpSource(allowDot)
            this.#hasMagic = this.#hasMagic || hasMagic
            this.#uflag = this.#uflag || uflag
            return re
          })
          .join('')
        let start = ''
        if (this.isStart()) {
          if (typeof this.#parts[0] === 'string') {
            // this is the string that will match the start of the pattern,
            // so we need to protect against dots and such.
            // '.' and '..' cannot match unless the pattern is that exactly,
            // even if it starts with . or dot:true is set.
            const dotTravAllowed =
              this.#parts.length === 1 && justDots.has(this.#parts[0])
            if (!dotTravAllowed) {
              const aps = addPatternStart
              // check if we have a possibility of matching . or ..,
              // and prevent that.
              const needNoTrav =
                // dots are allowed, and the pattern starts with [ or .
                (dot && aps.has(src.charAt(0))) ||
                // the pattern starts with \., and then [ or .
                (src.startsWith('\\.') && aps.has(src.charAt(2))) ||
                // the pattern starts with \.\., and then [ or .
                (src.startsWith('\\.\\.') && aps.has(src.charAt(4)))
              // no need to prevent dots if it can't match a dot, or if a
              // sub-pattern will be preventing it anyway.
              const needNoDot = !dot && !allowDot && aps.has(src.charAt(0))
              start = needNoTrav
                ? startNoTraversal
                : needNoDot
                  ? startNoDot
                  : ''
            }
          }
        }
        // append the "end of path portion" pattern to negation tails
        let end = ''
        if (
          this.isEnd() &&
          this.#root.#filledNegs &&
          this.#parent?.type === '!'
        ) {
          end = '(?:$|\\/)'
        }
        const final = start + src + end
        return [
          final,
          (0, unescape_js_1.unescape)(src),
          (this.#hasMagic = !!this.#hasMagic),
          this.#uflag
        ]
      }
      // We need to calculate the body *twice* if it's a repeat pattern
      // at the start, once in nodot mode, then again in dot mode, so a
      // pattern like *(?) can match 'x.y'
      const repeated = this.type === '*' || this.type === '+'
      // some kind of extglob
      const start = this.type === '!' ? '(?:(?!(?:' : '(?:'
      let body = this.#partsToRegExp(dot)
      if (this.isStart() && this.isEnd() && !body && this.type !== '!') {
        // invalid extglob, has to at least be *something* present, if it's
        // the entire path portion.
        const s = this.toString()
        this.#parts = [s]
        this.type = null
        this.#hasMagic = undefined
        return [s, (0, unescape_js_1.unescape)(this.toString()), false, false]
      }
      // XXX abstract out this map method
      let bodyDotAllowed =
        !repeated || allowDot || dot || !startNoDot
          ? ''
          : this.#partsToRegExp(true)
      if (bodyDotAllowed === body) {
        bodyDotAllowed = ''
      }
      if (bodyDotAllowed) {
        body = `(?:${body})(?:${bodyDotAllowed})*?`
      }
      // an empty !() is exactly equivalent to a starNoEmpty
      let final = ''
      if (this.type === '!' && this.#emptyExt) {
        final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty
      } else {
        const close =
          this.type === '!'
            ? // !() must match something,but !(x) can match ''
              '))' +
              (this.isStart() && !dot && !allowDot ? startNoDot : '') +
              star +
              ')'
            : this.type === '@'
              ? ')'
              : this.type === '?'
                ? ')?'
                : this.type === '+' && bodyDotAllowed
                  ? ')'
                  : this.type === '*' && bodyDotAllowed
                    ? `)?`
                    : `)${this.type}`
        final = start + body + close
      }
      return [
        final,
        (0, unescape_js_1.unescape)(body),
        (this.#hasMagic = !!this.#hasMagic),
        this.#uflag
      ]
    }
    #partsToRegExp(dot) {
      return this.#parts
        .map(p => {
          // extglob ASTs should only contain parent ASTs
          /* c8 ignore start */
          if (typeof p === 'string') {
            throw new Error('string type in extglob ast??')
          }
          /* c8 ignore stop */
          // can ignore hasMagic, because extglobs are already always magic
          const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot)
          this.#uflag = this.#uflag || uflag
          return re
        })
        .filter(p => !(this.isStart() && this.isEnd()) || !!p)
        .join('|')
    }
    static #parseGlob(glob, hasMagic, noEmpty = false) {
      let escaping = false
      let re = ''
      let uflag = false
      for (let i = 0; i < glob.length; i++) {
        const c = glob.charAt(i)
        if (escaping) {
          escaping = false
          re += (reSpecials.has(c) ? '\\' : '') + c
          continue
        }
        if (c === '\\') {
          if (i === glob.length - 1) {
            re += '\\\\'
          } else {
            escaping = true
          }
          continue
        }
        if (c === '[') {
          const [src, needUflag, consumed, magic] = (0,
          brace_expressions_js_1.parseClass)(glob, i)
          if (consumed) {
            re += src
            uflag = uflag || needUflag
            i += consumed - 1
            hasMagic = hasMagic || magic
            continue
          }
        }
        if (c === '*') {
          if (noEmpty && glob === '*') {
            re += starNoEmpty
          } else {
            re += star
          }
          hasMagic = true
          continue
        }
        if (c === '?') {
          re += qmark
          hasMagic = true
          continue
        }
        re += regExpEscape(c)
      }
      return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag]
    }
  }
  ast$2.AST = AST
  return ast$2
}

const _escape$3 = {}

let hasRequired_escape$3
function require_escape$3() {
  if (hasRequired_escape$3) {
    return _escape$3
  }
  hasRequired_escape$3 = 1
  Object.defineProperty(_escape$3, '__esModule', {
    value: true
  })
  _escape$3.escape = void 0
  /**
   * Escape all magic characters in a glob pattern.
   *
   * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}
   * option is used, then characters are escaped by wrapping in `[]`, because
   * a magic character wrapped in a character class can only be satisfied by
   * that exact character.  In this mode, `\` is _not_ escaped, because it is
   * not interpreted as a magic character, but instead as a path separator.
   */
  const escape = (s, { windowsPathsNoEscape = false } = {}) => {
    // don't need to escape +@! because we escape the parens
    // that make those magic, and escaping ! as [!] isn't valid,
    // because [!]] is a valid glob class meaning not ']'.
    return windowsPathsNoEscape
      ? s.replace(/[?*()[\]]/g, '[$&]')
      : s.replace(/[?*()[\]\\]/g, '\\$&')
  }
  _escape$3.escape = escape
  return _escape$3
}

let hasRequiredCommonjs$8
function requireCommonjs$8() {
  if (hasRequiredCommonjs$8) {
    return commonjs$7
  }
  hasRequiredCommonjs$8 = 1
  ;(function (exports) {
    const __importDefault =
      (this && this.__importDefault) ||
      function (mod) {
        return mod && mod.__esModule
          ? mod
          : {
              default: mod
            }
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.unescape =
      exports.escape =
      exports.AST =
      exports.Minimatch =
      exports.match =
      exports.makeRe =
      exports.braceExpand =
      exports.defaults =
      exports.filter =
      exports.GLOBSTAR =
      exports.sep =
      exports.minimatch =
        void 0
    const brace_expansion_1 = __importDefault(requireBraceExpansion())
    const assert_valid_pattern_js_1 = requireAssertValidPattern$2()
    const ast_js_1 = requireAst$2()
    const escape_js_1 = require_escape$3()
    const unescape_js_1 = require_unescape$2()
    const minimatch = (p, pattern, options = {}) => {
      ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
      // shortcut: comments match nothing.
      if (!options.nocomment && pattern.charAt(0) === '#') {
        return false
      }
      return new Minimatch(pattern, options).match(p)
    }
    exports.minimatch = minimatch
    // Optimized checking for the most common glob patterns.
    const starDotExtRE = /^\*+([^+@!?*[(]*)$/
    const starDotExtTest = ext => f => !f.startsWith('.') && f.endsWith(ext)
    const starDotExtTestDot = ext => f => f.endsWith(ext)
    const starDotExtTestNocase = ext => {
      ext = ext.toLowerCase()
      return f => !f.startsWith('.') && f.toLowerCase().endsWith(ext)
    }
    const starDotExtTestNocaseDot = ext => {
      ext = ext.toLowerCase()
      return f => f.toLowerCase().endsWith(ext)
    }
    const starDotStarRE = /^\*+\.\*+$/
    const starDotStarTest = f => !f.startsWith('.') && f.includes('.')
    const starDotStarTestDot = f => f !== '.' && f !== '..' && f.includes('.')
    const dotStarRE = /^\.\*+$/
    const dotStarTest = f => f !== '.' && f !== '..' && f.startsWith('.')
    const starRE = /^\*+$/
    const starTest = f => f.length !== 0 && !f.startsWith('.')
    const starTestDot = f => f.length !== 0 && f !== '.' && f !== '..'
    const qmarksRE = /^\?+([^+@!?*[(]*)?$/
    const qmarksTestNocase = ([$0, ext = '']) => {
      const noext = qmarksTestNoExt([$0])
      if (!ext) {
        return noext
      }
      ext = ext.toLowerCase()
      return f => noext(f) && f.toLowerCase().endsWith(ext)
    }
    const qmarksTestNocaseDot = ([$0, ext = '']) => {
      const noext = qmarksTestNoExtDot([$0])
      if (!ext) {
        return noext
      }
      ext = ext.toLowerCase()
      return f => noext(f) && f.toLowerCase().endsWith(ext)
    }
    const qmarksTestDot = ([$0, ext = '']) => {
      const noext = qmarksTestNoExtDot([$0])
      return !ext ? noext : f => noext(f) && f.endsWith(ext)
    }
    const qmarksTest = ([$0, ext = '']) => {
      const noext = qmarksTestNoExt([$0])
      return !ext ? noext : f => noext(f) && f.endsWith(ext)
    }
    const qmarksTestNoExt = ([$0]) => {
      const len = $0.length
      return f => f.length === len && !f.startsWith('.')
    }
    const qmarksTestNoExtDot = ([$0]) => {
      const len = $0.length
      return f => f.length === len && f !== '.' && f !== '..'
    }
    /* c8 ignore start */
    const defaultPlatform =
      typeof process === 'object' && process
        ? (typeof process.env === 'object' &&
            process.env &&
            process.env.__MINIMATCH_TESTING_PLATFORM__) ||
          process.platform
        : 'posix'
    const path = {
      win32: {
        sep: '\\'
      },
      posix: {
        sep: '/'
      }
    }
    /* c8 ignore stop */
    exports.sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep
    exports.minimatch.sep = exports.sep
    exports.GLOBSTAR = Symbol('globstar **')
    exports.minimatch.GLOBSTAR = exports.GLOBSTAR
    // any single thing other than /
    // don't need to escape / when using new RegExp()
    const qmark = '[^/]'
    // * => any number of characters
    const star = qmark + '*?'
    // ** when dots are allowed.  Anything goes, except .. and .
    // not (^ or / followed by one or two dots followed by $ or /),
    // followed by anything, any number of times.
    const twoStarDot = '(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?'
    // not a ^ or / followed by a dot,
    // followed by anything, any number of times.
    const twoStarNoDot = '(?:(?!(?:\\/|^)\\.).)*?'
    const filter =
      (pattern, options = {}) =>
      p =>
        (0, exports.minimatch)(p, pattern, options)
    exports.filter = filter
    exports.minimatch.filter = exports.filter
    const ext = (a, b = {}) => Object.assign({}, a, b)
    const defaults = def => {
      if (!def || typeof def !== 'object' || !Object.keys(def).length) {
        return exports.minimatch
      }
      const orig = exports.minimatch
      const m = (p, pattern, options = {}) =>
        orig(p, pattern, ext(def, options))
      return Object.assign(m, {
        Minimatch: class Minimatch extends orig.Minimatch {
          constructor(pattern, options = {}) {
            super(pattern, ext(def, options))
          }
          static defaults(options) {
            return orig.defaults(ext(def, options)).Minimatch
          }
        },
        AST: class AST extends orig.AST {
          /* c8 ignore start */
          constructor(type, parent, options = {}) {
            super(type, parent, ext(def, options))
          }
          /* c8 ignore stop */
          static fromGlob(pattern, options = {}) {
            return orig.AST.fromGlob(pattern, ext(def, options))
          }
        },
        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),
        escape: (s, options = {}) => orig.escape(s, ext(def, options)),
        filter: (pattern, options = {}) =>
          orig.filter(pattern, ext(def, options)),
        defaults: options => orig.defaults(ext(def, options)),
        makeRe: (pattern, options = {}) =>
          orig.makeRe(pattern, ext(def, options)),
        braceExpand: (pattern, options = {}) =>
          orig.braceExpand(pattern, ext(def, options)),
        match: (list, pattern, options = {}) =>
          orig.match(list, pattern, ext(def, options)),
        sep: orig.sep,
        GLOBSTAR: exports.GLOBSTAR
      })
    }
    exports.defaults = defaults
    exports.minimatch.defaults = exports.defaults
    // Brace expansion:
    // a{b,c}d -> abd acd
    // a{b,}c -> abc ac
    // a{0..3}d -> a0d a1d a2d a3d
    // a{b,c{d,e}f}g -> abg acdfg acefg
    // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
    //
    // Invalid sets are not expanded.
    // a{2..}b -> a{2..}b
    // a{b}c -> a{b}c
    const braceExpand = (pattern, options = {}) => {
      ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
      // Thanks to Yeting Li <https://github.com/yetingli> for
      // improving this regexp to avoid a ReDOS vulnerability.
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        // shortcut. no need to expand.
        return [pattern]
      }
      return (0, brace_expansion_1.default)(pattern)
    }
    exports.braceExpand = braceExpand
    exports.minimatch.braceExpand = exports.braceExpand
    // parse a component of the expanded set.
    // At this point, no pattern may contain "/" in it
    // so we're going to return a 2d array, where each entry is the full
    // pattern, split on '/', and then turned into a regular expression.
    // A regexp is made at the end which joins each array with an
    // escaped /, and another full one which joins each regexp with |.
    //
    // Following the lead of Bash 4.1, note that "**" only has special meaning
    // when it is the *only* thing in a path portion.  Otherwise, any series
    // of * is equivalent to a single *.  Globstar behavior is enabled by
    // default, and can be disabled by setting options.noglobstar.
    const makeRe = (pattern, options = {}) =>
      new Minimatch(pattern, options).makeRe()
    exports.makeRe = makeRe
    exports.minimatch.makeRe = exports.makeRe
    const match = (list, pattern, options = {}) => {
      const mm = new Minimatch(pattern, options)
      list = list.filter(f => mm.match(f))
      if (mm.options.nonull && !list.length) {
        list.push(pattern)
      }
      return list
    }
    exports.match = match
    exports.minimatch.match = exports.match
    // replace stuff like \* with *
    const globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/
    const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
    class Minimatch {
      options
      set;
      pattern
      windowsPathsNoEscape
      nonegate
      negate
      comment
      empty
      preserveMultipleSlashes
      partial
      globSet
      globParts
      nocase
      isWindows
      platform
      windowsNoMagicRoot
      regexp
      constructor(pattern, options = {}) {
        ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
        options = options || {}
        this.options = options
        this.pattern = pattern
        this.platform = options.platform || defaultPlatform
        this.isWindows = this.platform === 'win32'
        this.windowsPathsNoEscape =
          !!options.windowsPathsNoEscape || options.allowWindowsEscape === false
        if (this.windowsPathsNoEscape) {
          this.pattern = this.pattern.replace(/\\/g, '/')
        }
        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes
        this.regexp = null
        this.negate = false
        this.nonegate = !!options.nonegate
        this.comment = false
        this.empty = false
        this.partial = !!options.partial
        this.nocase = !!this.options.nocase
        this.windowsNoMagicRoot =
          options.windowsNoMagicRoot !== undefined
            ? options.windowsNoMagicRoot
            : !!(this.isWindows && this.nocase)
        this.globSet = []
        this.globParts = []
        this.set = []
        // make the set of regexps etc.
        this.make()
      }
      hasMagic() {
        if (this.options.magicalBraces && this.set.length > 1) {
          return true
        }
        for (const pattern of this.set) {
          for (const part of pattern) {
            if (typeof part !== 'string') {
              return true
            }
          }
        }
        return false
      }
      debug(..._) {}
      make() {
        const pattern = this.pattern
        const options = this.options
        // empty patterns and comments match nothing.
        if (!options.nocomment && pattern.charAt(0) === '#') {
          this.comment = true
          return
        }
        if (!pattern) {
          this.empty = true
          return
        }
        // step 1: figure out negation, etc.
        this.parseNegate()
        // step 2: expand braces
        this.globSet = [...new Set(this.braceExpand())]
        if (options.debug) {
          this.debug = (...args) => console.error(...args)
        }
        this.debug(this.pattern, this.globSet)
        // step 3: now we have a set, so turn each one into a series of
        // path-portion matching patterns.
        // These will be regexps, except in the case of "**", which is
        // set to the GLOBSTAR object for globstar behavior,
        // and will not contain any / characters
        //
        // First, we preprocess to make the glob pattern sets a bit simpler
        // and deduped.  There are some perf-killing patterns that can cause
        // problems with a glob walk, but we can simplify them down a bit.
        const rawGlobParts = this.globSet.map(s => this.slashSplit(s))
        this.globParts = this.preprocess(rawGlobParts)
        this.debug(this.pattern, this.globParts)
        // glob --> regexps
        let set = this.globParts.map((s, _, __) => {
          if (this.isWindows && this.windowsNoMagicRoot) {
            // check if it's a drive or unc path.
            const isUNC =
              s[0] === '' &&
              s[1] === '' &&
              (s[2] === '?' || !globMagic.test(s[2])) &&
              !globMagic.test(s[3])
            const isDrive = /^[a-z]:/i.test(s[0])
            if (isUNC) {
              return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))]
            } else if (isDrive) {
              return [s[0], ...s.slice(1).map(ss => this.parse(ss))]
            }
          }
          return s.map(ss => this.parse(ss))
        })
        this.debug(this.pattern, set)
        // filter out everything that didn't compile properly.
        this.set = set.filter(s => s.indexOf(false) === -1)
        // do not treat the ? in UNC paths as magic
        if (this.isWindows) {
          for (let i = 0; i < this.set.length; i++) {
            const p = this.set[i]
            if (
              p[0] === '' &&
              p[1] === '' &&
              this.globParts[i][2] === '?' &&
              typeof p[3] === 'string' &&
              /^[a-z]:$/i.test(p[3])
            ) {
              p[2] = '?'
            }
          }
        }
        this.debug(this.pattern, this.set)
      }
      // various transforms to equivalent pattern sets that are
      // faster to process in a filesystem walk.  The goal is to
      // eliminate what we can, and push all ** patterns as far
      // to the right as possible, even if it increases the number
      // of patterns that we have to process.
      preprocess(globParts) {
        // if we're not in globstar mode, then turn all ** into *
        if (this.options.noglobstar) {
          for (let i = 0; i < globParts.length; i++) {
            for (let j = 0; j < globParts[i].length; j++) {
              if (globParts[i][j] === '**') {
                globParts[i][j] = '*'
              }
            }
          }
        }
        const { optimizationLevel = 1 } = this.options
        if (optimizationLevel >= 2) {
          // aggressive optimization for the purpose of fs walking
          globParts = this.firstPhasePreProcess(globParts)
          globParts = this.secondPhasePreProcess(globParts)
        } else if (optimizationLevel >= 1) {
          // just basic optimizations to remove some .. parts
          globParts = this.levelOneOptimize(globParts)
        } else {
          // just collapse multiple ** portions into one
          globParts = this.adjascentGlobstarOptimize(globParts)
        }
        return globParts
      }
      // just get rid of adjascent ** portions
      adjascentGlobstarOptimize(globParts) {
        return globParts.map(parts => {
          let gs = -1
          while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
            let i = gs
            while (parts[i + 1] === '**') {
              i++
            }
            if (i !== gs) {
              parts.splice(gs, i - gs)
            }
          }
          return parts
        })
      }
      // get rid of adjascent ** and resolve .. portions
      levelOneOptimize(globParts) {
        return globParts.map(parts => {
          parts = parts.reduce((set, part) => {
            const prev = set[set.length - 1]
            if (part === '**' && prev === '**') {
              return set
            }
            if (part === '..') {
              if (prev && prev !== '..' && prev !== '.' && prev !== '**') {
                set.pop()
                return set
              }
            }
            set.push(part)
            return set
          }, [])
          return parts.length === 0 ? [''] : parts
        })
      }
      levelTwoFileOptimize(parts) {
        if (!Array.isArray(parts)) {
          parts = this.slashSplit(parts)
        }
        let didSomething = false
        do {
          didSomething = false
          // <pre>/<e>/<rest> -> <pre>/<rest>
          if (!this.preserveMultipleSlashes) {
            for (let i = 1; i < parts.length - 1; i++) {
              const p = parts[i]
              // don't squeeze out UNC patterns
              if (i === 1 && p === '' && parts[0] === '') {
                continue
              }
              if (p === '.' || p === '') {
                didSomething = true
                parts.splice(i, 1)
                i--
              }
            }
            if (
              parts[0] === '.' &&
              parts.length === 2 &&
              (parts[1] === '.' || parts[1] === '')
            ) {
              didSomething = true
              parts.pop()
            }
          }
          // <pre>/<p>/../<rest> -> <pre>/<rest>
          let dd = 0
          while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
            const p = parts[dd - 1]
            if (p && p !== '.' && p !== '..' && p !== '**') {
              didSomething = true
              parts.splice(dd - 1, 2)
              dd -= 2
            }
          }
        } while (didSomething)
        return parts.length === 0 ? [''] : parts
      }
      // First phase: single-pattern processing
      // <pre> is 1 or more portions
      // <rest> is 1 or more portions
      // <p> is any portion other than ., .., '', or **
      // <e> is . or ''
      //
      // **/.. is *brutal* for filesystem walking performance, because
      // it effectively resets the recursive walk each time it occurs,
      // and ** cannot be reduced out by a .. pattern part like a regexp
      // or most strings (other than .., ., and '') can be.
      //
      // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
      // <pre>/<e>/<rest> -> <pre>/<rest>
      // <pre>/<p>/../<rest> -> <pre>/<rest>
      // **/**/<rest> -> **/<rest>
      //
      // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
      // this WOULD be allowed if ** did follow symlinks, or * didn't
      firstPhasePreProcess(globParts) {
        let didSomething = false
        do {
          didSomething = false
          // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
          for (let parts of globParts) {
            let gs = -1
            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
              let gss = gs
              while (parts[gss + 1] === '**') {
                // <pre>/**/**/<rest> -> <pre>/**/<rest>
                gss++
              }
              // eg, if gs is 2 and gss is 4, that means we have 3 **
              // parts, and can remove 2 of them.
              if (gss > gs) {
                parts.splice(gs + 1, gss - gs)
              }
              let next = parts[gs + 1]
              const p = parts[gs + 2]
              const p2 = parts[gs + 3]
              if (next !== '..') {
                continue
              }
              if (
                !p ||
                p === '.' ||
                p === '..' ||
                !p2 ||
                p2 === '.' ||
                p2 === '..'
              ) {
                continue
              }
              didSomething = true
              // edit parts in place, and push the new one
              parts.splice(gs, 1)
              const other = parts.slice(0)
              other[gs] = '**'
              globParts.push(other)
              gs--
            }
            // <pre>/<e>/<rest> -> <pre>/<rest>
            if (!this.preserveMultipleSlashes) {
              for (let i = 1; i < parts.length - 1; i++) {
                const p = parts[i]
                // don't squeeze out UNC patterns
                if (i === 1 && p === '' && parts[0] === '') {
                  continue
                }
                if (p === '.' || p === '') {
                  didSomething = true
                  parts.splice(i, 1)
                  i--
                }
              }
              if (
                parts[0] === '.' &&
                parts.length === 2 &&
                (parts[1] === '.' || parts[1] === '')
              ) {
                didSomething = true
                parts.pop()
              }
            }
            // <pre>/<p>/../<rest> -> <pre>/<rest>
            let dd = 0
            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
              const p = parts[dd - 1]
              if (p && p !== '.' && p !== '..' && p !== '**') {
                didSomething = true
                const needDot = dd === 1 && parts[dd + 1] === '**'
                const splin = needDot ? ['.'] : []
                parts.splice(dd - 1, 2, ...splin)
                if (parts.length === 0) {
                  parts.push('')
                }
                dd -= 2
              }
            }
          }
        } while (didSomething)
        return globParts
      }
      // second phase: multi-pattern dedupes
      // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
      // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
      // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
      //
      // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
      // ^-- not valid because ** doens't follow symlinks
      secondPhasePreProcess(globParts) {
        for (let i = 0; i < globParts.length - 1; i++) {
          for (let j = i + 1; j < globParts.length; j++) {
            const matched = this.partsMatch(
              globParts[i],
              globParts[j],
              !this.preserveMultipleSlashes
            )
            if (matched) {
              globParts[i] = []
              globParts[j] = matched
              break
            }
          }
        }
        return globParts.filter(gs => gs.length)
      }
      partsMatch(a, b, emptyGSMatch = false) {
        let ai = 0
        let bi = 0
        let result = []
        let which = ''
        while (ai < a.length && bi < b.length) {
          if (a[ai] === b[bi]) {
            result.push(which === 'b' ? b[bi] : a[ai])
            ai++
            bi++
          } else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {
            result.push(a[ai])
            ai++
          } else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {
            result.push(b[bi])
            bi++
          } else if (
            a[ai] === '*' &&
            b[bi] &&
            (this.options.dot || !b[bi].startsWith('.')) &&
            b[bi] !== '**'
          ) {
            if (which === 'b') {
              return false
            }
            which = 'a'
            result.push(a[ai])
            ai++
            bi++
          } else if (
            b[bi] === '*' &&
            a[ai] &&
            (this.options.dot || !a[ai].startsWith('.')) &&
            a[ai] !== '**'
          ) {
            if (which === 'a') {
              return false
            }
            which = 'b'
            result.push(b[bi])
            ai++
            bi++
          } else {
            return false
          }
        }
        // if we fall out of the loop, it means they two are identical
        // as long as their lengths match
        return a.length === b.length && result
      }
      parseNegate() {
        if (this.nonegate) {
          return
        }
        const pattern = this.pattern
        let negate = false
        let negateOffset = 0
        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {
          negate = !negate
          negateOffset++
        }
        if (negateOffset) {
          this.pattern = pattern.slice(negateOffset)
        }
        this.negate = negate
      }
      // set partial to true to test if, for example,
      // "/a/b" matches the start of "/*/b/*/d"
      // Partial means, if you run out of file before you run
      // out of pattern, then that's fine, as long as all
      // the parts match.
      matchOne(file, pattern, partial = false) {
        const options = this.options
        // UNC paths like //?/X:/... can match X:/... and vice versa
        // Drive letters in absolute drive or unc paths are always compared
        // case-insensitively.
        if (this.isWindows) {
          const fileDrive =
            typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0])
          const fileUNC =
            !fileDrive &&
            file[0] === '' &&
            file[1] === '' &&
            file[2] === '?' &&
            /^[a-z]:$/i.test(file[3])
          const patternDrive =
            typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0])
          const patternUNC =
            !patternDrive &&
            pattern[0] === '' &&
            pattern[1] === '' &&
            pattern[2] === '?' &&
            typeof pattern[3] === 'string' &&
            /^[a-z]:$/i.test(pattern[3])
          const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined
          const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined
          if (typeof fdi === 'number' && typeof pdi === 'number') {
            const [fd, pd] = [file[fdi], pattern[pdi]]
            if (fd.toLowerCase() === pd.toLowerCase()) {
              pattern[pdi] = fd
              if (pdi > fdi) {
                pattern = pattern.slice(pdi)
              } else if (fdi > pdi) {
                file = file.slice(fdi)
              }
            }
          }
        }
        // resolve and reduce . and .. portions in the file as well.
        // dont' need to do the second phase, because it's only one string[]
        const { optimizationLevel = 1 } = this.options
        if (optimizationLevel >= 2) {
          file = this.levelTwoFileOptimize(file)
        }
        this.debug('matchOne', this, {
          file,
          pattern
        })
        this.debug('matchOne', file.length, pattern.length)
        let fi = 0,
          pi = 0,
          fl = file.length,
          pl = pattern.length
        for (; fi < fl && pi < pl; fi++, pi++) {
          this.debug('matchOne loop')
          const p = pattern[pi]
          const f = file[fi]
          this.debug(pattern, p, f)
          // should be impossible.
          // some invalid regexp stuff in the set.
          /* c8 ignore start */
          if (p === false) {
            return false
          }
          /* c8 ignore stop */
          if (p === exports.GLOBSTAR) {
            this.debug('GLOBSTAR', [pattern, p, f])
            // "**"
            // a/**/b/**/c would match the following:
            // a/b/x/y/z/c
            // a/x/y/z/b/c
            // a/b/x/b/x/c
            // a/b/c
            // To do this, take the rest of the pattern after
            // the **, and see if it would match the file remainder.
            // If so, return success.
            // If not, the ** "swallows" a segment, and try again.
            // This is recursively awful.
            //
            // a/**/b/**/c matching a/b/x/y/z/c
            // - a matches a
            // - doublestar
            //   - matchOne(b/x/y/z/c, b/**/c)
            //     - b matches b
            //     - doublestar
            //       - matchOne(x/y/z/c, c) -> no
            //       - matchOne(y/z/c, c) -> no
            //       - matchOne(z/c, c) -> no
            //       - matchOne(c, c) yes, hit
            let fr = fi
            const pr = pi + 1
            if (pr === pl) {
              this.debug('** at the end')
              // a ** at the end will just swallow the rest.
              // We have found a match.
              // however, it will not swallow /.x, unless
              // options.dot is set.
              // . and .. are *never* matched by **, for explosively
              // exponential reasons.
              for (; fi < fl; fi++) {
                if (
                  file[fi] === '.' ||
                  file[fi] === '..' ||
                  (!options.dot && file[fi].charAt(0) === '.')
                ) {
                  return false
                }
              }
              return true
            }
            // ok, let's see if we can swallow whatever we can.
            while (fr < fl) {
              const swallowee = file[fr]
              this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)
              // XXX remove this slice.  Just pass the start index.
              if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                this.debug('globstar found match!', fr, fl, swallowee)
                // found a match.
                return true
              } else {
                // can't swallow "." or ".." ever.
                // can only swallow ".foo" when explicitly asked.
                if (
                  swallowee === '.' ||
                  swallowee === '..' ||
                  (!options.dot && swallowee.charAt(0) === '.')
                ) {
                  this.debug('dot detected!', file, fr, pattern, pr)
                  break
                }
                // ** swallows a segment, and continue.
                this.debug('globstar swallow a segment, and continue')
                fr++
              }
            }
            // no match was found.
            // However, in partial mode, we can't say this is necessarily over.
            /* c8 ignore start */
            if (partial) {
              // ran out of file
              this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
              if (fr === fl) {
                return true
              }
            }
            /* c8 ignore stop */
            return false
          }
          // something other than **
          // non-magic patterns just have to match exactly
          // patterns with magic have been turned into regexps.
          let hit
          if (typeof p === 'string') {
            hit = f === p
            this.debug('string match', p, f, hit)
          } else {
            hit = p.test(f)
            this.debug('pattern match', p, f, hit)
          }
          if (!hit) {
            return false
          }
        }
        // Note: ending in / means that we'll get a final ""
        // at the end of the pattern.  This can only match a
        // corresponding "" at the end of the file.
        // If the file ends in /, then it can only match a
        // a pattern that ends in /, unless the pattern just
        // doesn't have any more for it. But, a/b/ should *not*
        // match "a/b/*", even though "" matches against the
        // [^/]*? pattern, except in partial mode, where it might
        // simply not be reached yet.
        // However, a/b/ should still satisfy a/*
        // now either we fell off the end of the pattern, or we're done.
        if (fi === fl && pi === pl) {
          // ran out of pattern and filename at the same time.
          // an exact hit!
          return true
        } else if (fi === fl) {
          // ran out of file, but still had pattern left.
          // this is ok if we're doing the match as part of
          // a glob fs traversal.
          return partial
        } else if (pi === pl) {
          // ran out of pattern, still have file left.
          // this is only acceptable if we're on the very last
          // empty segment of a file with a trailing slash.
          // a/* should match a/b/
          return fi === fl - 1 && file[fi] === ''
          /* c8 ignore start */
        } else {
          // should be unreachable.
          throw new Error('wtf?')
        }
        /* c8 ignore stop */
      }
      braceExpand() {
        return (0, exports.braceExpand)(this.pattern, this.options)
      }
      parse(pattern) {
        ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
        const options = this.options
        // shortcuts
        if (pattern === '**') {
          return exports.GLOBSTAR
        }
        if (pattern === '') {
          return ''
        }
        // far and away, the most common glob pattern parts are
        // *, *.*, and *.<ext>  Add a fast check method for those.
        let m
        let fastTest = null
        if ((m = pattern.match(starRE))) {
          fastTest = options.dot ? starTestDot : starTest
        } else if ((m = pattern.match(starDotExtRE))) {
          fastTest = (
            options.nocase
              ? options.dot
                ? starDotExtTestNocaseDot
                : starDotExtTestNocase
              : options.dot
                ? starDotExtTestDot
                : starDotExtTest
          )(m[1])
        } else if ((m = pattern.match(qmarksRE))) {
          fastTest = (
            options.nocase
              ? options.dot
                ? qmarksTestNocaseDot
                : qmarksTestNocase
              : options.dot
                ? qmarksTestDot
                : qmarksTest
          )(m)
        } else if ((m = pattern.match(starDotStarRE))) {
          fastTest = options.dot ? starDotStarTestDot : starDotStarTest
        } else if ((m = pattern.match(dotStarRE))) {
          fastTest = dotStarTest
        }
        const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern()
        if (fastTest && typeof re === 'object') {
          // Avoids overriding in frozen environments
          Reflect.defineProperty(re, 'test', {
            value: fastTest
          })
        }
        return re
      }
      makeRe() {
        if (this.regexp || this.regexp === false) {
          return this.regexp
        }
        // at this point, this.set is a 2d array of partial
        // pattern strings, or "**".
        //
        // It's better to use .match().  This function shouldn't
        // be used, really, but it's pretty convenient sometimes,
        // when you just want to work with a regex.
        const set = this.set
        if (!set.length) {
          this.regexp = false
          return this.regexp
        }
        const options = this.options
        const twoStar = options.noglobstar
          ? star
          : options.dot
            ? twoStarDot
            : twoStarNoDot
        const flags = new Set(options.nocase ? ['i'] : [])
        // regexpify non-globstar patterns
        // if ** is only item, then we just do one twoStar
        // if ** is first, and there are more, prepend (\/|twoStar\/)? to next
        // if ** is last, append (\/twoStar|) to previous
        // if ** is in the middle, append (\/|\/twoStar\/) to previous
        // then filter out GLOBSTAR symbols
        let re = set
          .map(pattern => {
            const pp = pattern.map(p => {
              if (p instanceof RegExp) {
                for (const f of p.flags.split('')) {
                  flags.add(f)
                }
              }
              return typeof p === 'string'
                ? regExpEscape(p)
                : p === exports.GLOBSTAR
                  ? exports.GLOBSTAR
                  : p._src
            })
            pp.forEach((p, i) => {
              const next = pp[i + 1]
              const prev = pp[i - 1]
              if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {
                return
              }
              if (prev === undefined) {
                if (next !== undefined && next !== exports.GLOBSTAR) {
                  pp[i + 1] = '(?:\\/|' + twoStar + '\\/)?' + next
                } else {
                  pp[i] = twoStar
                }
              } else if (next === undefined) {
                pp[i - 1] = prev + '(?:\\/|' + twoStar + ')?'
              } else if (next !== exports.GLOBSTAR) {
                pp[i - 1] = prev + '(?:\\/|\\/' + twoStar + '\\/)' + next
                pp[i + 1] = exports.GLOBSTAR
              }
            })
            return pp.filter(p => p !== exports.GLOBSTAR).join('/')
          })
          .join('|')
        // need to wrap in parens if we had more than one thing with |,
        // otherwise only the first will be anchored to ^ and the last to $
        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', '']
        // must match entire pattern
        // ending in a * or ** will make it less strict.
        re = '^' + open + re + close + '$'
        // can match anything, as long as it's not this.
        if (this.negate) {
          re = '^(?!' + re + ').+$'
        }
        try {
          this.regexp = new RegExp(re, [...flags].join(''))
          /* c8 ignore start */
        } catch (ex) {
          // should be impossible
          this.regexp = false
        }
        /* c8 ignore stop */
        return this.regexp
      }
      slashSplit(p) {
        // if p starts with // on windows, we preserve that
        // so that UNC paths aren't broken.  Otherwise, any number of
        // / characters are coalesced into one, unless
        // preserveMultipleSlashes is set to true.
        if (this.preserveMultipleSlashes) {
          return p.split('/')
        } else if (this.isWindows && /^\/\/[^/]+/.test(p)) {
          // add an extra '' for the one we lose
          return ['', ...p.split(/\/+/)]
        } else {
          return p.split(/\/+/)
        }
      }
      match(f, partial = this.partial) {
        this.debug('match', f, this.pattern)
        // short-circuit in the case of busted things.
        // comments, etc.
        if (this.comment) {
          return false
        }
        if (this.empty) {
          return f === ''
        }
        if (f === '/' && partial) {
          return true
        }
        const options = this.options
        // windows: need to use /, not \
        if (this.isWindows) {
          f = f.split('\\').join('/')
        }
        // treat the test path as a set of pathparts.
        const ff = this.slashSplit(f)
        this.debug(this.pattern, 'split', ff)
        // just ONE of the pattern sets in this.set needs to match
        // in order for it to be valid.  If negating, then just one
        // match means that we have failed.
        // Either way, return on the first hit.
        const set = this.set
        this.debug(this.pattern, 'set', set)
        // Find the basename of the path by looking for the last non-empty segment
        let filename = ff[ff.length - 1]
        if (!filename) {
          for (let i = ff.length - 2; !filename && i >= 0; i--) {
            filename = ff[i]
          }
        }
        for (let i = 0; i < set.length; i++) {
          const pattern = set[i]
          let file = ff
          if (options.matchBase && pattern.length === 1) {
            file = [filename]
          }
          const hit = this.matchOne(file, pattern, partial)
          if (hit) {
            if (options.flipNegate) {
              return true
            }
            return !this.negate
          }
        }
        // didn't get any hits.  this is success if it's a negative
        // pattern, failure otherwise.
        if (options.flipNegate) {
          return false
        }
        return this.negate
      }
      static defaults(def) {
        return exports.minimatch.defaults(def).Minimatch
      }
    }
    exports.Minimatch = Minimatch
    /* c8 ignore start */
    const ast_js_2 = requireAst$2()
    Object.defineProperty(exports, 'AST', {
      enumerable: true,
      get: function () {
        return ast_js_2.AST
      }
    })
    const escape_js_2 = require_escape$3()
    Object.defineProperty(exports, 'escape', {
      enumerable: true,
      get: function () {
        return escape_js_2.escape
      }
    })
    const unescape_js_2 = require_unescape$2()
    Object.defineProperty(exports, 'unescape', {
      enumerable: true,
      get: function () {
        return unescape_js_2.unescape
      }
    })
    /* c8 ignore stop */
    exports.minimatch.AST = ast_js_1.AST
    exports.minimatch.Minimatch = Minimatch
    exports.minimatch.escape = escape_js_1.escape
    exports.minimatch.unescape = unescape_js_1.unescape
  })(commonjs$7)
  return commonjs$7
}

const glob = {}

const commonjs$6 = {}

const commonjs$5 = {}

let hasRequiredCommonjs$7
function requireCommonjs$7() {
  if (hasRequiredCommonjs$7) {
    return commonjs$5
  }
  hasRequiredCommonjs$7 = 1
  ;(function (exports) {
    const __importDefault =
      (this && this.__importDefault) ||
      function (mod) {
        return mod && mod.__esModule
          ? mod
          : {
              default: mod
            }
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Minipass =
      exports.isWritable =
      exports.isReadable =
      exports.isStream =
        void 0
    const proc =
      typeof process === 'object' && process
        ? process
        : {
            stdout: null,
            stderr: null
          }
    const node_events_1 = require$$0$3
    const node_stream_1 = __importDefault(require$$1$4)
    const node_string_decoder_1 = require$$2$2
    /**
     * Return true if the argument is a Minipass stream, Node stream, or something
     * else that Minipass can interact with.
     */
    const isStream = s =>
      !!s &&
      typeof s === 'object' &&
      (s instanceof Minipass ||
        s instanceof node_stream_1.default ||
        (0, exports.isReadable)(s) ||
        (0, exports.isWritable)(s))
    exports.isStream = isStream
    /**
     * Return true if the argument is a valid {@link Minipass.Readable}
     */
    const isReadable = s =>
      !!s &&
      typeof s === 'object' &&
      s instanceof node_events_1.EventEmitter &&
      typeof s.pipe === 'function' &&
      // node core Writable streams have a pipe() method, but it throws
      s.pipe !== node_stream_1.default.Writable.prototype.pipe
    exports.isReadable = isReadable
    /**
     * Return true if the argument is a valid {@link Minipass.Writable}
     */
    const isWritable = s =>
      !!s &&
      typeof s === 'object' &&
      s instanceof node_events_1.EventEmitter &&
      typeof s.write === 'function' &&
      typeof s.end === 'function'
    exports.isWritable = isWritable
    const EOF = Symbol('EOF')
    const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
    const EMITTED_END = Symbol('emittedEnd')
    const EMITTING_END = Symbol('emittingEnd')
    const EMITTED_ERROR = Symbol('emittedError')
    const CLOSED = Symbol('closed')
    const READ = Symbol('read')
    const FLUSH = Symbol('flush')
    const FLUSHCHUNK = Symbol('flushChunk')
    const ENCODING = Symbol('encoding')
    const DECODER = Symbol('decoder')
    const FLOWING = Symbol('flowing')
    const PAUSED = Symbol('paused')
    const RESUME = Symbol('resume')
    const BUFFER = Symbol('buffer')
    const PIPES = Symbol('pipes')
    const BUFFERLENGTH = Symbol('bufferLength')
    const BUFFERPUSH = Symbol('bufferPush')
    const BUFFERSHIFT = Symbol('bufferShift')
    const OBJECTMODE = Symbol('objectMode')
    // internal event when stream is destroyed
    const DESTROYED = Symbol('destroyed')
    // internal event when stream has an error
    const ERROR = Symbol('error')
    const EMITDATA = Symbol('emitData')
    const EMITEND = Symbol('emitEnd')
    const EMITEND2 = Symbol('emitEnd2')
    const ASYNC = Symbol('async')
    const ABORT = Symbol('abort')
    const ABORTED = Symbol('aborted')
    const SIGNAL = Symbol('signal')
    const DATALISTENERS = Symbol('dataListeners')
    const DISCARDED = Symbol('discarded')
    const defer = fn => Promise.resolve().then(fn)
    const nodefer = fn => fn()
    const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
    const isArrayBufferLike = b =>
      b instanceof ArrayBuffer ||
      (!!b &&
        typeof b === 'object' &&
        b.constructor &&
        b.constructor.name === 'ArrayBuffer' &&
        b.byteLength >= 0)
    const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
    /**
     * Internal class representing a pipe to a destination stream.
     *
     * @internal
     */
    class Pipe {
      src
      dest
      opts
      ondrain
      constructor(src, dest, opts) {
        this.src = src
        this.dest = dest
        this.opts = opts
        this.ondrain = () => src[RESUME]()
        this.dest.on('drain', this.ondrain)
      }
      unpipe() {
        this.dest.removeListener('drain', this.ondrain)
      }
      // only here for the prototype
      /* c8 ignore start */
      proxyErrors(_er) {}
      /* c8 ignore stop */
      end() {
        this.unpipe()
        if (this.opts.end) {
          this.dest.end()
        }
      }
    }
    /**
     * Internal class representing a pipe to a destination stream where
     * errors are proxied.
     *
     * @internal
     */
    class PipeProxyErrors extends Pipe {
      unpipe() {
        this.src.removeListener('error', this.proxyErrors)
        super.unpipe()
      }
      constructor(src, dest, opts) {
        super(src, dest, opts)
        this.proxyErrors = er => dest.emit('error', er)
        src.on('error', this.proxyErrors)
      }
    }
    const isObjectModeOptions = o => !!o.objectMode
    const isEncodingOptions = o =>
      !o.objectMode && !!o.encoding && o.encoding !== 'buffer'
    /**
     * Main export, the Minipass class
     *
     * `RType` is the type of data emitted, defaults to Buffer
     *
     * `WType` is the type of data to be written, if RType is buffer or string,
     * then any {@link Minipass.ContiguousData} is allowed.
     *
     * `Events` is the set of event handler signatures that this object
     * will emit, see {@link Minipass.Events}
     */
    class Minipass extends node_events_1.EventEmitter {
      [FLOWING] = false;
      [PAUSED] = false;
      [PIPES] = [];
      [BUFFER] = [];
      [OBJECTMODE];
      [ENCODING];
      [ASYNC];
      [DECODER];
      [EOF] = false;
      [EMITTED_END] = false;
      [EMITTING_END] = false;
      [CLOSED] = false;
      [EMITTED_ERROR] = null;
      [BUFFERLENGTH] = 0;
      [DESTROYED] = false;
      [SIGNAL];
      [ABORTED] = false;
      [DATALISTENERS] = 0;
      [DISCARDED] = false
      /**
       * true if the stream can be written
       */
      writable = true
      /**
       * true if the stream can be read
       */
      readable = true
      /**
       * If `RType` is Buffer, then options do not need to be provided.
       * Otherwise, an options object must be provided to specify either
       * {@link Minipass.SharedOptions.objectMode} or
       * {@link Minipass.SharedOptions.encoding}, as appropriate.
       */
      constructor(...args) {
        const options = args[0] || {}
        super()
        if (options.objectMode && typeof options.encoding === 'string') {
          throw new TypeError(
            'Encoding and objectMode may not be used together'
          )
        }
        if (isObjectModeOptions(options)) {
          this[OBJECTMODE] = true
          this[ENCODING] = null
        } else if (isEncodingOptions(options)) {
          this[ENCODING] = options.encoding
          this[OBJECTMODE] = false
        } else {
          this[OBJECTMODE] = false
          this[ENCODING] = null
        }
        this[ASYNC] = !!options.async
        this[DECODER] = this[ENCODING]
          ? new node_string_decoder_1.StringDecoder(this[ENCODING])
          : null
        //@ts-ignore - private option for debugging and testing
        if (options && options.debugExposeBuffer === true) {
          Object.defineProperty(this, 'buffer', {
            get: () => this[BUFFER]
          })
        }
        //@ts-ignore - private option for debugging and testing
        if (options && options.debugExposePipes === true) {
          Object.defineProperty(this, 'pipes', {
            get: () => this[PIPES]
          })
        }
        const { signal } = options
        if (signal) {
          this[SIGNAL] = signal
          if (signal.aborted) {
            this[ABORT]()
          } else {
            signal.addEventListener('abort', () => this[ABORT]())
          }
        }
      }
      /**
       * The amount of data stored in the buffer waiting to be read.
       *
       * For Buffer strings, this will be the total byte length.
       * For string encoding streams, this will be the string character length,
       * according to JavaScript's `string.length` logic.
       * For objectMode streams, this is a count of the items waiting to be
       * emitted.
       */
      get bufferLength() {
        return this[BUFFERLENGTH]
      }
      /**
       * The `BufferEncoding` currently in use, or `null`
       */
      get encoding() {
        return this[ENCODING]
      }
      /**
       * @deprecated - This is a read only property
       */
      set encoding(_enc) {
        throw new Error('Encoding must be set at instantiation time')
      }
      /**
       * @deprecated - Encoding may only be set at instantiation time
       */
      setEncoding(_enc) {
        throw new Error('Encoding must be set at instantiation time')
      }
      /**
       * True if this is an objectMode stream
       */
      get objectMode() {
        return this[OBJECTMODE]
      }
      /**
       * @deprecated - This is a read-only property
       */
      set objectMode(_om) {
        throw new Error('objectMode must be set at instantiation time')
      }
      /**
       * true if this is an async stream
       */
      get ['async']() {
        return this[ASYNC]
      }
      /**
       * Set to true to make this stream async.
       *
       * Once set, it cannot be unset, as this would potentially cause incorrect
       * behavior.  Ie, a sync stream can be made async, but an async stream
       * cannot be safely made sync.
       */
      set ['async'](a) {
        this[ASYNC] = this[ASYNC] || !!a
      }
      // drop everything and get out of the flow completely
      [ABORT]() {
        this[ABORTED] = true
        this.emit('abort', this[SIGNAL]?.reason)
        this.destroy(this[SIGNAL]?.reason)
      }
      /**
       * True if the stream has been aborted.
       */
      get aborted() {
        return this[ABORTED]
      }
      /**
       * No-op setter. Stream aborted status is set via the AbortSignal provided
       * in the constructor options.
       */
      set aborted(_) {}
      write(chunk, encoding, cb) {
        if (this[ABORTED]) {
          return false
        }
        if (this[EOF]) {
          throw new Error('write after end')
        }
        if (this[DESTROYED]) {
          this.emit(
            'error',
            Object.assign(
              new Error('Cannot call write after a stream was destroyed'),
              {
                code: 'ERR_STREAM_DESTROYED'
              }
            )
          )
          return true
        }
        if (typeof encoding === 'function') {
          cb = encoding
          encoding = 'utf8'
        }
        if (!encoding) {
          encoding = 'utf8'
        }
        const fn = this[ASYNC] ? defer : nodefer
        // convert array buffers and typed array views into buffers
        // at some point in the future, we may want to do the opposite!
        // leave strings and buffers as-is
        // anything is only allowed if in object mode, so throw
        if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
          if (isArrayBufferView(chunk)) {
            //@ts-ignore - sinful unsafe type changing
            chunk = Buffer.from(
              chunk.buffer,
              chunk.byteOffset,
              chunk.byteLength
            )
          } else if (isArrayBufferLike(chunk)) {
            //@ts-ignore - sinful unsafe type changing
            chunk = Buffer.from(chunk)
          } else if (typeof chunk !== 'string') {
            throw new Error(
              'Non-contiguous data written to non-objectMode stream'
            )
          }
        }
        // handle object mode up front, since it's simpler
        // this yields better performance, fewer checks later.
        if (this[OBJECTMODE]) {
          // maybe impossible?
          /* c8 ignore start */
          if (this[FLOWING] && this[BUFFERLENGTH] !== 0) {
            this[FLUSH](true)
          }
          /* c8 ignore stop */
          if (this[FLOWING]) {
            this.emit('data', chunk)
          } else {
            this[BUFFERPUSH](chunk)
          }
          if (this[BUFFERLENGTH] !== 0) {
            this.emit('readable')
          }
          if (cb) {
            fn(cb)
          }
          return this[FLOWING]
        }
        // at this point the chunk is a buffer or string
        // don't buffer it up or send it to the decoder
        if (!chunk.length) {
          if (this[BUFFERLENGTH] !== 0) {
            this.emit('readable')
          }
          if (cb) {
            fn(cb)
          }
          return this[FLOWING]
        }
        // fast-path writing strings of same encoding to a stream with
        // an empty buffer, skipping the buffer/decoder dance
        if (
          typeof chunk === 'string' &&
          // unless it is a string already ready for us to use
          !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)
        ) {
          //@ts-ignore - sinful unsafe type change
          chunk = Buffer.from(chunk, encoding)
        }
        if (Buffer.isBuffer(chunk) && this[ENCODING]) {
          //@ts-ignore - sinful unsafe type change
          chunk = this[DECODER].write(chunk)
        }
        // Note: flushing CAN potentially switch us into not-flowing mode
        if (this[FLOWING] && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this[FLOWING]) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this[FLOWING]
      }
      /**
       * Low-level explicit read method.
       *
       * In objectMode, the argument is ignored, and one item is returned if
       * available.
       *
       * `n` is the number of bytes (or in the case of encoding streams,
       * characters) to consume. If `n` is not provided, then the entire buffer
       * is returned, or `null` is returned if no data is available.
       *
       * If `n` is greater that the amount of data in the internal buffer,
       * then `null` is returned.
       */
      read(n) {
        if (this[DESTROYED]) {
          return null
        }
        this[DISCARDED] = false
        if (
          this[BUFFERLENGTH] === 0 ||
          n === 0 ||
          (n && n > this[BUFFERLENGTH])
        ) {
          this[MAYBE_EMIT_END]()
          return null
        }
        if (this[OBJECTMODE]) {
          n = null
        }
        if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {
          // not object mode, so if we have an encoding, then RType is string
          // otherwise, must be Buffer
          this[BUFFER] = [
            this[ENCODING]
              ? this[BUFFER].join('')
              : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])
          ]
        }
        const ret = this[READ](n || null, this[BUFFER][0])
        this[MAYBE_EMIT_END]()
        return ret
      }
      [READ](n, chunk) {
        if (this[OBJECTMODE]) {
          this[BUFFERSHIFT]()
        } else {
          const c = chunk
          if (n === c.length || n === null) {
            this[BUFFERSHIFT]()
          } else if (typeof c === 'string') {
            this[BUFFER][0] = c.slice(n)
            chunk = c.slice(0, n)
            this[BUFFERLENGTH] -= n
          } else {
            this[BUFFER][0] = c.subarray(n)
            chunk = c.subarray(0, n)
            this[BUFFERLENGTH] -= n
          }
        }
        this.emit('data', chunk)
        if (!this[BUFFER].length && !this[EOF]) {
          this.emit('drain')
        }
        return chunk
      }
      end(chunk, encoding, cb) {
        if (typeof chunk === 'function') {
          cb = chunk
          chunk = undefined
        }
        if (typeof encoding === 'function') {
          cb = encoding
          encoding = 'utf8'
        }
        if (chunk !== undefined) {
          this.write(chunk, encoding)
        }
        if (cb) {
          this.once('end', cb)
        }
        this[EOF] = true
        this.writable = false
        // if we haven't written anything, then go ahead and emit,
        // even if we're not reading.
        // we'll re-emit if a new 'end' listener is added anyway.
        // This makes MP more suitable to write-only use cases.
        if (this[FLOWING] || !this[PAUSED]) {
          this[MAYBE_EMIT_END]()
        }
        return this
      }
      // don't let the internal resume be overwritten
      [RESUME]() {
        if (this[DESTROYED]) {
          return
        }
        if (!this[DATALISTENERS] && !this[PIPES].length) {
          this[DISCARDED] = true
        }
        this[PAUSED] = false
        this[FLOWING] = true
        this.emit('resume')
        if (this[BUFFER].length) {
          this[FLUSH]()
        } else if (this[EOF]) {
          this[MAYBE_EMIT_END]()
        } else {
          this.emit('drain')
        }
      }
      /**
       * Resume the stream if it is currently in a paused state
       *
       * If called when there are no pipe destinations or `data` event listeners,
       * this will place the stream in a "discarded" state, where all data will
       * be thrown away. The discarded state is removed if a pipe destination or
       * data handler is added, if pause() is called, or if any synchronous or
       * asynchronous iteration is started.
       */
      resume() {
        return this[RESUME]()
      }
      /**
       * Pause the stream
       */
      pause() {
        this[FLOWING] = false
        this[PAUSED] = true
        this[DISCARDED] = false
      }
      /**
       * true if the stream has been forcibly destroyed
       */
      get destroyed() {
        return this[DESTROYED]
      }
      /**
       * true if the stream is currently in a flowing state, meaning that
       * any writes will be immediately emitted.
       */
      get flowing() {
        return this[FLOWING]
      }
      /**
       * true if the stream is currently in a paused state
       */
      get paused() {
        return this[PAUSED]
      }
      [BUFFERPUSH](chunk) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] += 1
        } else {
          this[BUFFERLENGTH] += chunk.length
        }
        this[BUFFER].push(chunk)
      }
      [BUFFERSHIFT]() {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this[BUFFER][0].length
        }
        return this[BUFFER].shift()
      }
      [FLUSH](noDrain = false) {
        do {} while (
          this[FLUSHCHUNK](this[BUFFERSHIFT]()) &&
          this[BUFFER].length
        )
        if (!noDrain && !this[BUFFER].length && !this[EOF]) {
          this.emit('drain')
        }
      }
      [FLUSHCHUNK](chunk) {
        this.emit('data', chunk)
        return this[FLOWING]
      }
      /**
       * Pipe all data emitted by this stream into the destination provided.
       *
       * Triggers the flow of data.
       */
      pipe(dest, opts) {
        if (this[DESTROYED]) {
          return dest
        }
        this[DISCARDED] = false
        const ended = this[EMITTED_END]
        opts = opts || {}
        if (dest === proc.stdout || dest === proc.stderr) {
          opts.end = false
        } else {
          opts.end = opts.end !== false
        }
        opts.proxyErrors = !!opts.proxyErrors
        // piping an ended stream ends immediately
        if (ended) {
          if (opts.end) {
            dest.end()
          }
        } else {
          // "as" here just ignores the WType, which pipes don't care about,
          // since they're only consuming from us, and writing to the dest
          this[PIPES].push(
            !opts.proxyErrors
              ? new Pipe(this, dest, opts)
              : new PipeProxyErrors(this, dest, opts)
          )
          if (this[ASYNC]) {
            defer(() => this[RESUME]())
          } else {
            this[RESUME]()
          }
        }
        return dest
      }
      /**
       * Fully unhook a piped destination stream.
       *
       * If the destination stream was the only consumer of this stream (ie,
       * there are no other piped destinations or `'data'` event listeners)
       * then the flow of data will stop until there is another consumer or
       * {@link Minipass#resume} is explicitly called.
       */
      unpipe(dest) {
        const p = this[PIPES].find(p => p.dest === dest)
        if (p) {
          if (this[PIPES].length === 1) {
            if (this[FLOWING] && this[DATALISTENERS] === 0) {
              this[FLOWING] = false
            }
            this[PIPES] = []
          } else {
            this[PIPES].splice(this[PIPES].indexOf(p), 1)
          }
          p.unpipe()
        }
      }
      /**
       * Alias for {@link Minipass#on}
       */
      addListener(ev, handler) {
        return this.on(ev, handler)
      }
      /**
       * Mostly identical to `EventEmitter.on`, with the following
       * behavior differences to prevent data loss and unnecessary hangs:
       *
       * - Adding a 'data' event handler will trigger the flow of data
       *
       * - Adding a 'readable' event handler when there is data waiting to be read
       *   will cause 'readable' to be emitted immediately.
       *
       * - Adding an 'endish' event handler ('end', 'finish', etc.) which has
       *   already passed will cause the event to be emitted immediately and all
       *   handlers removed.
       *
       * - Adding an 'error' event handler after an error has been emitted will
       *   cause the event to be re-emitted immediately with the error previously
       *   raised.
       */
      on(ev, handler) {
        const ret = super.on(ev, handler)
        if (ev === 'data') {
          this[DISCARDED] = false
          this[DATALISTENERS]++
          if (!this[PIPES].length && !this[FLOWING]) {
            this[RESUME]()
          }
        } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
          super.emit('readable')
        } else if (isEndish(ev) && this[EMITTED_END]) {
          super.emit(ev)
          this.removeAllListeners(ev)
        } else if (ev === 'error' && this[EMITTED_ERROR]) {
          const h = handler
          if (this[ASYNC]) {
            defer(() => h.call(this, this[EMITTED_ERROR]))
          } else {
            h.call(this, this[EMITTED_ERROR])
          }
        }
        return ret
      }
      /**
       * Alias for {@link Minipass#off}
       */
      removeListener(ev, handler) {
        return this.off(ev, handler)
      }
      /**
       * Mostly identical to `EventEmitter.off`
       *
       * If a 'data' event handler is removed, and it was the last consumer
       * (ie, there are no pipe destinations or other 'data' event listeners),
       * then the flow of data will stop until there is another consumer or
       * {@link Minipass#resume} is explicitly called.
       */
      off(ev, handler) {
        const ret = super.off(ev, handler)
        // if we previously had listeners, and now we don't, and we don't
        // have any pipes, then stop the flow, unless it's been explicitly
        // put in a discarded flowing state via stream.resume().
        if (ev === 'data') {
          this[DATALISTENERS] = this.listeners('data').length
          if (
            this[DATALISTENERS] === 0 &&
            !this[DISCARDED] &&
            !this[PIPES].length
          ) {
            this[FLOWING] = false
          }
        }
        return ret
      }
      /**
       * Mostly identical to `EventEmitter.removeAllListeners`
       *
       * If all 'data' event handlers are removed, and they were the last consumer
       * (ie, there are no pipe destinations), then the flow of data will stop
       * until there is another consumer or {@link Minipass#resume} is explicitly
       * called.
       */
      removeAllListeners(ev) {
        const ret = super.removeAllListeners(ev)
        if (ev === 'data' || ev === undefined) {
          this[DATALISTENERS] = 0
          if (!this[DISCARDED] && !this[PIPES].length) {
            this[FLOWING] = false
          }
        }
        return ret
      }
      /**
       * true if the 'end' event has been emitted
       */
      get emittedEnd() {
        return this[EMITTED_END]
      }
      [MAYBE_EMIT_END]() {
        if (
          !this[EMITTING_END] &&
          !this[EMITTED_END] &&
          !this[DESTROYED] &&
          this[BUFFER].length === 0 &&
          this[EOF]
        ) {
          this[EMITTING_END] = true
          this.emit('end')
          this.emit('prefinish')
          this.emit('finish')
          if (this[CLOSED]) {
            this.emit('close')
          }
          this[EMITTING_END] = false
        }
      }
      /**
       * Mostly identical to `EventEmitter.emit`, with the following
       * behavior differences to prevent data loss and unnecessary hangs:
       *
       * If the stream has been destroyed, and the event is something other
       * than 'close' or 'error', then `false` is returned and no handlers
       * are called.
       *
       * If the event is 'end', and has already been emitted, then the event
       * is ignored. If the stream is in a paused or non-flowing state, then
       * the event will be deferred until data flow resumes. If the stream is
       * async, then handlers will be called on the next tick rather than
       * immediately.
       *
       * If the event is 'close', and 'end' has not yet been emitted, then
       * the event will be deferred until after 'end' is emitted.
       *
       * If the event is 'error', and an AbortSignal was provided for the stream,
       * and there are no listeners, then the event is ignored, matching the
       * behavior of node core streams in the presense of an AbortSignal.
       *
       * If the event is 'finish' or 'prefinish', then all listeners will be
       * removed after emitting the event, to prevent double-firing.
       */
      emit(ev, ...args) {
        const data = args[0]
        // error and close are only events allowed after calling destroy()
        if (
          ev !== 'error' &&
          ev !== 'close' &&
          ev !== DESTROYED &&
          this[DESTROYED]
        ) {
          return false
        } else if (ev === 'data') {
          return !this[OBJECTMODE] && !data
            ? false
            : this[ASYNC]
              ? (defer(() => this[EMITDATA](data)), true)
              : this[EMITDATA](data)
        } else if (ev === 'end') {
          return this[EMITEND]()
        } else if (ev === 'close') {
          this[CLOSED] = true
          // don't emit close before 'end' and 'finish'
          if (!this[EMITTED_END] && !this[DESTROYED]) {
            return false
          }
          const ret = super.emit('close')
          this.removeAllListeners('close')
          return ret
        } else if (ev === 'error') {
          this[EMITTED_ERROR] = data
          super.emit(ERROR, data)
          const ret =
            !this[SIGNAL] || this.listeners('error').length
              ? super.emit('error', data)
              : false
          this[MAYBE_EMIT_END]()
          return ret
        } else if (ev === 'resume') {
          const ret = super.emit('resume')
          this[MAYBE_EMIT_END]()
          return ret
        } else if (ev === 'finish' || ev === 'prefinish') {
          const ret = super.emit(ev)
          this.removeAllListeners(ev)
          return ret
        }
        // Some other unknown event
        const ret = super.emit(ev, ...args)
        this[MAYBE_EMIT_END]()
        return ret
      }
      [EMITDATA](data) {
        for (const p of this[PIPES]) {
          if (p.dest.write(data) === false) {
            this.pause()
          }
        }
        const ret = this[DISCARDED] ? false : super.emit('data', data)
        this[MAYBE_EMIT_END]()
        return ret
      }
      [EMITEND]() {
        if (this[EMITTED_END]) {
          return false
        }
        this[EMITTED_END] = true
        this.readable = false
        return this[ASYNC]
          ? (defer(() => this[EMITEND2]()), true)
          : this[EMITEND2]()
      }
      [EMITEND2]() {
        if (this[DECODER]) {
          const data = this[DECODER].end()
          if (data) {
            for (const p of this[PIPES]) {
              p.dest.write(data)
            }
            if (!this[DISCARDED]) {
              super.emit('data', data)
            }
          }
        }
        for (const p of this[PIPES]) {
          p.end()
        }
        const ret = super.emit('end')
        this.removeAllListeners('end')
        return ret
      }
      /**
       * Return a Promise that resolves to an array of all emitted data once
       * the stream ends.
       */
      async collect() {
        const buf = Object.assign([], {
          dataLength: 0
        })
        if (!this[OBJECTMODE]) {
          buf.dataLength = 0
        }
        // set the promise first, in case an error is raised
        // by triggering the flow here.
        const p = this.promise()
        this.on('data', c => {
          buf.push(c)
          if (!this[OBJECTMODE]) {
            buf.dataLength += c.length
          }
        })
        await p
        return buf
      }
      /**
       * Return a Promise that resolves to the concatenation of all emitted data
       * once the stream ends.
       *
       * Not allowed on objectMode streams.
       */
      async concat() {
        if (this[OBJECTMODE]) {
          throw new Error('cannot concat in objectMode')
        }
        const buf = await this.collect()
        return this[ENCODING]
          ? buf.join('')
          : Buffer.concat(buf, buf.dataLength)
      }
      /**
       * Return a void Promise that resolves once the stream ends.
       */
      async promise() {
        return new Promise((resolve, reject) => {
          this.on(DESTROYED, () => reject(new Error('stream destroyed')))
          this.on('error', er => reject(er))
          this.on('end', () => resolve())
        })
      }
      /**
       * Asynchronous `for await of` iteration.
       *
       * This will continue emitting all chunks until the stream terminates.
       */
      [Symbol.asyncIterator]() {
        // set this up front, in case the consumer doesn't call next()
        // right away.
        this[DISCARDED] = false
        let stopped = false
        const stop = async () => {
          this.pause()
          stopped = true
          return {
            value: undefined,
            done: true
          }
        }
        const next = () => {
          if (stopped) {
            return stop()
          }
          const res = this.read()
          if (res !== null) {
            return Promise.resolve({
              done: false,
              value: res
            })
          }
          if (this[EOF]) {
            return stop()
          }
          let resolve
          let reject
          const onerr = er => {
            this.off('data', ondata)
            this.off('end', onend)
            this.off(DESTROYED, ondestroy)
            stop()
            reject(er)
          }
          const ondata = value => {
            this.off('error', onerr)
            this.off('end', onend)
            this.off(DESTROYED, ondestroy)
            this.pause()
            resolve({
              value,
              done: !!this[EOF]
            })
          }
          const onend = () => {
            this.off('error', onerr)
            this.off('data', ondata)
            this.off(DESTROYED, ondestroy)
            stop()
            resolve({
              done: true,
              value: undefined
            })
          }
          const ondestroy = () => onerr(new Error('stream destroyed'))
          return new Promise((res, rej) => {
            reject = rej
            resolve = res
            this.once(DESTROYED, ondestroy)
            this.once('error', onerr)
            this.once('end', onend)
            this.once('data', ondata)
          })
        }
        return {
          next,
          throw: stop,
          return: stop,
          [Symbol.asyncIterator]() {
            return this
          }
        }
      }
      /**
       * Synchronous `for of` iteration.
       *
       * The iteration will terminate when the internal buffer runs out, even
       * if the stream has not yet terminated.
       */
      [Symbol.iterator]() {
        // set this up front, in case the consumer doesn't call next()
        // right away.
        this[DISCARDED] = false
        let stopped = false
        const stop = () => {
          this.pause()
          this.off(ERROR, stop)
          this.off(DESTROYED, stop)
          this.off('end', stop)
          stopped = true
          return {
            done: true,
            value: undefined
          }
        }
        const next = () => {
          if (stopped) {
            return stop()
          }
          const value = this.read()
          return value === null
            ? stop()
            : {
                done: false,
                value
              }
        }
        this.once('end', stop)
        this.once(ERROR, stop)
        this.once(DESTROYED, stop)
        return {
          next,
          throw: stop,
          return: stop,
          [Symbol.iterator]() {
            return this
          }
        }
      }
      /**
       * Destroy a stream, preventing it from being used for any further purpose.
       *
       * If the stream has a `close()` method, then it will be called on
       * destruction.
       *
       * After destruction, any attempt to write data, read data, or emit most
       * events will be ignored.
       *
       * If an error argument is provided, then it will be emitted in an
       * 'error' event.
       */
      destroy(er) {
        if (this[DESTROYED]) {
          if (er) {
            this.emit('error', er)
          } else {
            this.emit(DESTROYED)
          }
          return this
        }
        this[DESTROYED] = true
        this[DISCARDED] = true
        // throw away all buffered data, it's never coming out
        this[BUFFER].length = 0
        this[BUFFERLENGTH] = 0
        const wc = this
        if (typeof wc.close === 'function' && !this[CLOSED]) {
          wc.close()
        }
        if (er) {
          this.emit('error', er)
        }
        // if no error to emit, still reject pending promises
        else {
          this.emit(DESTROYED)
        }
        return this
      }
      /**
       * Alias for {@link isStream}
       *
       * Former export location, maintained for backwards compatibility.
       *
       * @deprecated
       */
      static get isStream() {
        return exports.isStream
      }
    }
    exports.Minipass = Minipass
  })(commonjs$5)
  return commonjs$5
}

let hasRequiredCommonjs$6
function requireCommonjs$6() {
  if (hasRequiredCommonjs$6) {
    return commonjs$6
  }
  hasRequiredCommonjs$6 = 1
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(commonjs$6, '__esModule', {
    value: true
  })
  commonjs$6.PathScurry =
    commonjs$6.Path =
    commonjs$6.PathScurryDarwin =
    commonjs$6.PathScurryPosix =
    commonjs$6.PathScurryWin32 =
    commonjs$6.PathScurryBase =
    commonjs$6.PathPosix =
    commonjs$6.PathWin32 =
    commonjs$6.PathBase =
    commonjs$6.ChildrenCache =
    commonjs$6.ResolveCache =
      void 0
  const lru_cache_1 = /*@__PURE__*/ requireCommonjs$9()
  const node_path_1 = require$$2$3
  const node_url_1 = require$$0$6
  const fs_1 = require$$0$4
  const actualFS = __importStar(require$$4$2)
  const realpathSync = fs_1.realpathSync.native
  // TODO: test perf of fs/promises realpath vs realpathCB,
  // since the promises one uses realpath.native
  const promises_1 = require$$0$5
  const minipass_1 = requireCommonjs$7()
  const defaultFS = {
    lstatSync: fs_1.lstatSync,
    readdir: fs_1.readdir,
    readdirSync: fs_1.readdirSync,
    readlinkSync: fs_1.readlinkSync,
    realpathSync,
    promises: {
      lstat: promises_1.lstat,
      readdir: promises_1.readdir,
      readlink: promises_1.readlink,
      realpath: promises_1.realpath
    }
  }
  // if they just gave us require('fs') then use our default
  const fsFromOption = fsOption =>
    !fsOption || fsOption === defaultFS || fsOption === actualFS
      ? defaultFS
      : {
          ...defaultFS,
          ...fsOption,
          promises: {
            ...defaultFS.promises,
            ...fsOption.promises
          }
        }
  // turn something like //?/c:/ into c:\
  const uncDriveRegexp = /^\\\\\?\\([a-z]:)\\?$/i
  const uncToDrive = rootPath =>
    rootPath.replace(/\//g, '\\').replace(uncDriveRegexp, '$1\\')
  // windows paths are separated by either / or \
  const eitherSep = /[\\/]/
  const UNKNOWN = 0 // may not even exist, for all we know
  const IFIFO = 0b0001
  const IFCHR = 0b0010
  const IFDIR = 0b0100
  const IFBLK = 0b0110
  const IFREG = 0b1000
  const IFLNK = 0b1010
  const IFSOCK = 0b1100
  const IFMT = 0b1111
  // mask to unset low 4 bits
  const IFMT_UNKNOWN = ~IFMT
  // set after successfully calling readdir() and getting entries.
  const READDIR_CALLED = 0b0000_0001_0000
  // set after a successful lstat()
  const LSTAT_CALLED = 0b0000_0010_0000
  // set if an entry (or one of its parents) is definitely not a dir
  const ENOTDIR = 0b0000_0100_0000
  // set if an entry (or one of its parents) does not exist
  // (can also be set on lstat errors like EACCES or ENAMETOOLONG)
  const ENOENT = 0b0000_1000_0000
  // cannot have child entries -- also verify &IFMT is either IFDIR or IFLNK
  // set if we fail to readlink
  const ENOREADLINK = 0b0001_0000_0000
  // set if we know realpath() will fail
  const ENOREALPATH = 0b0010_0000_0000
  const ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH
  const TYPEMASK = 0b0011_1111_1111
  const entToType = s =>
    s.isFile()
      ? IFREG
      : s.isDirectory()
        ? IFDIR
        : s.isSymbolicLink()
          ? IFLNK
          : s.isCharacterDevice()
            ? IFCHR
            : s.isBlockDevice()
              ? IFBLK
              : s.isSocket()
                ? IFSOCK
                : s.isFIFO()
                  ? IFIFO
                  : UNKNOWN
  // normalize unicode path names
  const normalizeCache = new Map()
  const normalize = s => {
    const c = normalizeCache.get(s)
    if (c) {
      return c
    }
    const n = s.normalize('NFKD')
    normalizeCache.set(s, n)
    return n
  }
  const normalizeNocaseCache = new Map()
  const normalizeNocase = s => {
    const c = normalizeNocaseCache.get(s)
    if (c) {
      return c
    }
    const n = normalize(s.toLowerCase())
    normalizeNocaseCache.set(s, n)
    return n
  }
  /**
   * An LRUCache for storing resolved path strings or Path objects.
   * @internal
   */
  class ResolveCache extends lru_cache_1.LRUCache {
    constructor() {
      super({
        max: 256
      })
    }
  }
  commonjs$6.ResolveCache = ResolveCache
  // In order to prevent blowing out the js heap by allocating hundreds of
  // thousands of Path entries when walking extremely large trees, the "children"
  // in this tree are represented by storing an array of Path entries in an
  // LRUCache, indexed by the parent.  At any time, Path.children() may return an
  // empty array, indicating that it doesn't know about any of its children, and
  // thus has to rebuild that cache.  This is fine, it just means that we don't
  // benefit as much from having the cached entries, but huge directory walks
  // don't blow out the stack, and smaller ones are still as fast as possible.
  //
  //It does impose some complexity when building up the readdir data, because we
  //need to pass a reference to the children array that we started with.
  /**
   * an LRUCache for storing child entries.
   * @internal
   */
  class ChildrenCache extends lru_cache_1.LRUCache {
    constructor(maxSize = 16 * 1024) {
      super({
        maxSize,
        // parent + children
        sizeCalculation: a => a.length + 1
      })
    }
  }
  commonjs$6.ChildrenCache = ChildrenCache
  const setAsCwd = Symbol('PathScurry setAsCwd')
  /**
   * Path objects are sort of like a super-powered
   * {@link https://nodejs.org/docs/latest/api/fs.html#class-fsdirent fs.Dirent}
   *
   * Each one represents a single filesystem entry on disk, which may or may not
   * exist. It includes methods for reading various types of information via
   * lstat, readlink, and readdir, and caches all information to the greatest
   * degree possible.
   *
   * Note that fs operations that would normally throw will instead return an
   * "empty" value. This is in order to prevent excessive overhead from error
   * stack traces.
   */
  class PathBase {
    /**
     * the basename of this path
     *
     * **Important**: *always* test the path name against any test string
     * usingthe {@link isNamed} method, and not by directly comparing this
     * string. Otherwise, unicode path strings that the system sees as identical
     * will not be properly treated as the same path, leading to incorrect
     * behavior and possible security issues.
     */
    name
    /**
     * the Path entry corresponding to the path root.
     *
     * @internal
     */
    root
    /**
     * All roots found within the current PathScurry family
     *
     * @internal
     */
    roots
    /**
     * a reference to the parent path, or undefined in the case of root entries
     *
     * @internal
     */
    parent
    /**
     * boolean indicating whether paths are compared case-insensitively
     * @internal
     */
    nocase
    /**
     * boolean indicating that this path is the current working directory
     * of the PathScurry collection that contains it.
     */
    isCWD = false
    // potential default fs override
    #fs
    // Stats fields
    #dev
    get dev() {
      return this.#dev
    }
    #mode
    get mode() {
      return this.#mode
    }
    #nlink
    get nlink() {
      return this.#nlink
    }
    #uid
    get uid() {
      return this.#uid
    }
    #gid
    get gid() {
      return this.#gid
    }
    #rdev
    get rdev() {
      return this.#rdev
    }
    #blksize
    get blksize() {
      return this.#blksize
    }
    #ino
    get ino() {
      return this.#ino
    }
    #size
    get size() {
      return this.#size
    }
    #blocks
    get blocks() {
      return this.#blocks
    }
    #atimeMs
    get atimeMs() {
      return this.#atimeMs
    }
    #mtimeMs
    get mtimeMs() {
      return this.#mtimeMs
    }
    #ctimeMs
    get ctimeMs() {
      return this.#ctimeMs
    }
    #birthtimeMs
    get birthtimeMs() {
      return this.#birthtimeMs
    }
    #atime
    get atime() {
      return this.#atime
    }
    #mtime
    get mtime() {
      return this.#mtime
    }
    #ctime
    get ctime() {
      return this.#ctime
    }
    #birthtime
    get birthtime() {
      return this.#birthtime
    }
    #matchName
    #depth
    #fullpath
    #fullpathPosix
    #relative
    #relativePosix
    #type
    #children
    #linkTarget
    #realpath
    /**
     * This property is for compatibility with the Dirent class as of
     * Node v20, where Dirent['parentPath'] refers to the path of the
     * directory that was passed to readdir. For root entries, it's the path
     * to the entry itself.
     */
    get parentPath() {
      return (this.parent || this).fullpath()
    }
    /**
     * Deprecated alias for Dirent['parentPath'] Somewhat counterintuitively,
     * this property refers to the *parent* path, not the path object itself.
     */
    get path() {
      return this.parentPath
    }
    /**
     * Do not create new Path objects directly.  They should always be accessed
     * via the PathScurry class or other methods on the Path class.
     *
     * @internal
     */
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      this.name = name
      this.#matchName = nocase ? normalizeNocase(name) : normalize(name)
      this.#type = type & TYPEMASK
      this.nocase = nocase
      this.roots = roots
      this.root = root || this
      this.#children = children
      this.#fullpath = opts.fullpath
      this.#relative = opts.relative
      this.#relativePosix = opts.relativePosix
      this.parent = opts.parent
      if (this.parent) {
        this.#fs = this.parent.#fs
      } else {
        this.#fs = fsFromOption(opts.fs)
      }
    }
    /**
     * Returns the depth of the Path object from its root.
     *
     * For example, a path at `/foo/bar` would have a depth of 2.
     */
    depth() {
      if (this.#depth !== undefined) {
        return this.#depth
      }
      if (!this.parent) {
        return (this.#depth = 0)
      }
      return (this.#depth = this.parent.depth() + 1)
    }
    /**
     * @internal
     */
    childrenCache() {
      return this.#children
    }
    /**
     * Get the Path object referenced by the string path, resolved from this Path
     */
    resolve(path) {
      if (!path) {
        return this
      }
      const rootPath = this.getRootString(path)
      const dir = path.substring(rootPath.length)
      const dirParts = dir.split(this.splitSep)
      const result = rootPath
        ? this.getRoot(rootPath).#resolveParts(dirParts)
        : this.#resolveParts(dirParts)
      return result
    }
    #resolveParts(dirParts) {
      let p = this
      for (const part of dirParts) {
        p = p.child(part)
      }
      return p
    }
    /**
     * Returns the cached children Path objects, if still available.  If they
     * have fallen out of the cache, then returns an empty array, and resets the
     * READDIR_CALLED bit, so that future calls to readdir() will require an fs
     * lookup.
     *
     * @internal
     */
    children() {
      const cached = this.#children.get(this)
      if (cached) {
        return cached
      }
      const children = Object.assign([], {
        provisional: 0
      })
      this.#children.set(this, children)
      this.#type &= ~READDIR_CALLED
      return children
    }
    /**
     * Resolves a path portion and returns or creates the child Path.
     *
     * Returns `this` if pathPart is `''` or `'.'`, or `parent` if pathPart is
     * `'..'`.
     *
     * This should not be called directly.  If `pathPart` contains any path
     * separators, it will lead to unsafe undefined behavior.
     *
     * Use `Path.resolve()` instead.
     *
     * @internal
     */
    child(pathPart, opts) {
      if (pathPart === '' || pathPart === '.') {
        return this
      }
      if (pathPart === '..') {
        return this.parent || this
      }
      // find the child
      const children = this.children()
      const name = this.nocase ? normalizeNocase(pathPart) : normalize(pathPart)
      for (const p of children) {
        if (p.#matchName === name) {
          return p
        }
      }
      // didn't find it, create provisional child, since it might not
      // actually exist.  If we know the parent isn't a dir, then
      // in fact it CAN'T exist.
      const s = this.parent ? this.sep : ''
      const fullpath = this.#fullpath
        ? this.#fullpath + s + pathPart
        : undefined
      const pchild = this.newChild(pathPart, UNKNOWN, {
        ...opts,
        parent: this,
        fullpath
      })
      if (!this.canReaddir()) {
        pchild.#type |= ENOENT
      }
      // don't have to update provisional, because if we have real children,
      // then provisional is set to children.length, otherwise a lower number
      children.push(pchild)
      return pchild
    }
    /**
     * The relative path from the cwd. If it does not share an ancestor with
     * the cwd, then this ends up being equivalent to the fullpath()
     */
    relative() {
      if (this.isCWD) {
        return ''
      }
      if (this.#relative !== undefined) {
        return this.#relative
      }
      const name = this.name
      const p = this.parent
      if (!p) {
        return (this.#relative = this.name)
      }
      const pv = p.relative()
      return pv + (!pv || !p.parent ? '' : this.sep) + name
    }
    /**
     * The relative path from the cwd, using / as the path separator.
     * If it does not share an ancestor with
     * the cwd, then this ends up being equivalent to the fullpathPosix()
     * On posix systems, this is identical to relative().
     */
    relativePosix() {
      if (this.sep === '/') {
        return this.relative()
      }
      if (this.isCWD) {
        return ''
      }
      if (this.#relativePosix !== undefined) {
        return this.#relativePosix
      }
      const name = this.name
      const p = this.parent
      if (!p) {
        return (this.#relativePosix = this.fullpathPosix())
      }
      const pv = p.relativePosix()
      return pv + (!pv || !p.parent ? '' : '/') + name
    }
    /**
     * The fully resolved path string for this Path entry
     */
    fullpath() {
      if (this.#fullpath !== undefined) {
        return this.#fullpath
      }
      const name = this.name
      const p = this.parent
      if (!p) {
        return (this.#fullpath = this.name)
      }
      const pv = p.fullpath()
      const fp = pv + (!p.parent ? '' : this.sep) + name
      return (this.#fullpath = fp)
    }
    /**
     * On platforms other than windows, this is identical to fullpath.
     *
     * On windows, this is overridden to return the forward-slash form of the
     * full UNC path.
     */
    fullpathPosix() {
      if (this.#fullpathPosix !== undefined) {
        return this.#fullpathPosix
      }
      if (this.sep === '/') {
        return (this.#fullpathPosix = this.fullpath())
      }
      if (!this.parent) {
        const p = this.fullpath().replace(/\\/g, '/')
        if (/^[a-z]:\//i.test(p)) {
          return (this.#fullpathPosix = `//?/${p}`)
        } else {
          return (this.#fullpathPosix = p)
        }
      }
      const p = this.parent
      const pfpp = p.fullpathPosix()
      const fpp = pfpp + (!pfpp || !p.parent ? '' : '/') + this.name
      return (this.#fullpathPosix = fpp)
    }
    /**
     * Is the Path of an unknown type?
     *
     * Note that we might know *something* about it if there has been a previous
     * filesystem operation, for example that it does not exist, or is not a
     * link, or whether it has child entries.
     */
    isUnknown() {
      return (this.#type & IFMT) === UNKNOWN
    }
    isType(type) {
      return this[`is${type}`]()
    }
    getType() {
      return this.isUnknown()
        ? 'Unknown'
        : this.isDirectory()
          ? 'Directory'
          : this.isFile()
            ? 'File'
            : this.isSymbolicLink()
              ? 'SymbolicLink'
              : this.isFIFO()
                ? 'FIFO'
                : this.isCharacterDevice()
                  ? 'CharacterDevice'
                  : this.isBlockDevice()
                    ? 'BlockDevice'
                    : /* c8 ignore start */ this.isSocket()
                      ? 'Socket'
                      : 'Unknown'
      /* c8 ignore stop */
    }
    /**
     * Is the Path a regular file?
     */
    isFile() {
      return (this.#type & IFMT) === IFREG
    }
    /**
     * Is the Path a directory?
     */
    isDirectory() {
      return (this.#type & IFMT) === IFDIR
    }
    /**
     * Is the path a character device?
     */
    isCharacterDevice() {
      return (this.#type & IFMT) === IFCHR
    }
    /**
     * Is the path a block device?
     */
    isBlockDevice() {
      return (this.#type & IFMT) === IFBLK
    }
    /**
     * Is the path a FIFO pipe?
     */
    isFIFO() {
      return (this.#type & IFMT) === IFIFO
    }
    /**
     * Is the path a socket?
     */
    isSocket() {
      return (this.#type & IFMT) === IFSOCK
    }
    /**
     * Is the path a symbolic link?
     */
    isSymbolicLink() {
      return (this.#type & IFLNK) === IFLNK
    }
    /**
     * Return the entry if it has been subject of a successful lstat, or
     * undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* simply
     * mean that we haven't called lstat on it.
     */
    lstatCached() {
      return this.#type & LSTAT_CALLED ? this : undefined
    }
    /**
     * Return the cached link target if the entry has been the subject of a
     * successful readlink, or undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * readlink() has been called at some point.
     */
    readlinkCached() {
      return this.#linkTarget
    }
    /**
     * Returns the cached realpath target if the entry has been the subject
     * of a successful realpath, or undefined otherwise.
     *
     * Does not read the filesystem, so an undefined result *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * realpath() has been called at some point.
     */
    realpathCached() {
      return this.#realpath
    }
    /**
     * Returns the cached child Path entries array if the entry has been the
     * subject of a successful readdir(), or [] otherwise.
     *
     * Does not read the filesystem, so an empty array *could* just mean we
     * don't have any cached data. Only use it if you are very sure that a
     * readdir() has been called recently enough to still be valid.
     */
    readdirCached() {
      const children = this.children()
      return children.slice(0, children.provisional)
    }
    /**
     * Return true if it's worth trying to readlink.  Ie, we don't (yet) have
     * any indication that readlink will definitely fail.
     *
     * Returns false if the path is known to not be a symlink, if a previous
     * readlink failed, or if the entry does not exist.
     */
    canReadlink() {
      if (this.#linkTarget) {
        return true
      }
      if (!this.parent) {
        return false
      }
      // cases where it cannot possibly succeed
      const ifmt = this.#type & IFMT
      return !(
        (ifmt !== UNKNOWN && ifmt !== IFLNK) ||
        this.#type & ENOREADLINK ||
        this.#type & ENOENT
      )
    }
    /**
     * Return true if readdir has previously been successfully called on this
     * path, indicating that cachedReaddir() is likely valid.
     */
    calledReaddir() {
      return !!(this.#type & READDIR_CALLED)
    }
    /**
     * Returns true if the path is known to not exist. That is, a previous lstat
     * or readdir failed to verify its existence when that would have been
     * expected, or a parent entry was marked either enoent or enotdir.
     */
    isENOENT() {
      return !!(this.#type & ENOENT)
    }
    /**
     * Return true if the path is a match for the given path name.  This handles
     * case sensitivity and unicode normalization.
     *
     * Note: even on case-sensitive systems, it is **not** safe to test the
     * equality of the `.name` property to determine whether a given pathname
     * matches, due to unicode normalization mismatches.
     *
     * Always use this method instead of testing the `path.name` property
     * directly.
     */
    isNamed(n) {
      return !this.nocase
        ? this.#matchName === normalize(n)
        : this.#matchName === normalizeNocase(n)
    }
    /**
     * Return the Path object corresponding to the target of a symbolic link.
     *
     * If the Path is not a symbolic link, or if the readlink call fails for any
     * reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     */
    async readlink() {
      const target = this.#linkTarget
      if (target) {
        return target
      }
      if (!this.canReadlink()) {
        return undefined
      }
      /* c8 ignore start */
      // already covered by the canReadlink test, here for ts grumples
      if (!this.parent) {
        return undefined
      }
      /* c8 ignore stop */
      try {
        const read = await this.#fs.promises.readlink(this.fullpath())
        const linkTarget = (await this.parent.realpath())?.resolve(read)
        if (linkTarget) {
          return (this.#linkTarget = linkTarget)
        }
      } catch (er) {
        this.#readlinkFail(er.code)
        return undefined
      }
    }
    /**
     * Synchronous {@link PathBase.readlink}
     */
    readlinkSync() {
      const target = this.#linkTarget
      if (target) {
        return target
      }
      if (!this.canReadlink()) {
        return undefined
      }
      /* c8 ignore start */
      // already covered by the canReadlink test, here for ts grumples
      if (!this.parent) {
        return undefined
      }
      /* c8 ignore stop */
      try {
        const read = this.#fs.readlinkSync(this.fullpath())
        const linkTarget = this.parent.realpathSync()?.resolve(read)
        if (linkTarget) {
          return (this.#linkTarget = linkTarget)
        }
      } catch (er) {
        this.#readlinkFail(er.code)
        return undefined
      }
    }
    #readdirSuccess(children) {
      // succeeded, mark readdir called bit
      this.#type |= READDIR_CALLED
      // mark all remaining provisional children as ENOENT
      for (let p = children.provisional; p < children.length; p++) {
        const c = children[p]
        if (c) {
          c.#markENOENT()
        }
      }
    }
    #markENOENT() {
      // mark as UNKNOWN and ENOENT
      if (this.#type & ENOENT) {
        return
      }
      this.#type = (this.#type | ENOENT) & IFMT_UNKNOWN
      this.#markChildrenENOENT()
    }
    #markChildrenENOENT() {
      // all children are provisional and do not exist
      const children = this.children()
      children.provisional = 0
      for (const p of children) {
        p.#markENOENT()
      }
    }
    #markENOREALPATH() {
      this.#type |= ENOREALPATH
      this.#markENOTDIR()
    }
    // save the information when we know the entry is not a dir
    #markENOTDIR() {
      // entry is not a directory, so any children can't exist.
      // this *should* be impossible, since any children created
      // after it's been marked ENOTDIR should be marked ENOENT,
      // so it won't even get to this point.
      /* c8 ignore start */
      if (this.#type & ENOTDIR) {
        return
      }
      /* c8 ignore stop */
      let t = this.#type
      // this could happen if we stat a dir, then delete it,
      // then try to read it or one of its children.
      if ((t & IFMT) === IFDIR) {
        t &= IFMT_UNKNOWN
      }
      this.#type = t | ENOTDIR
      this.#markChildrenENOENT()
    }
    #readdirFail(code = '') {
      // markENOTDIR and markENOENT also set provisional=0
      if (code === 'ENOTDIR' || code === 'EPERM') {
        this.#markENOTDIR()
      } else if (code === 'ENOENT') {
        this.#markENOENT()
      } else {
        this.children().provisional = 0
      }
    }
    #lstatFail(code = '') {
      // Windows just raises ENOENT in this case, disable for win CI
      /* c8 ignore start */
      if (code === 'ENOTDIR') {
        // already know it has a parent by this point
        const p = this.parent
        p.#markENOTDIR()
      } else if (code === 'ENOENT') {
        /* c8 ignore stop */
        this.#markENOENT()
      }
    }
    #readlinkFail(code = '') {
      let ter = this.#type
      ter |= ENOREADLINK
      if (code === 'ENOENT') {
        ter |= ENOENT
      }
      // windows gets a weird error when you try to readlink a file
      if (code === 'EINVAL' || code === 'UNKNOWN') {
        // exists, but not a symlink, we don't know WHAT it is, so remove
        // all IFMT bits.
        ter &= IFMT_UNKNOWN
      }
      this.#type = ter
      // windows just gets ENOENT in this case.  We do cover the case,
      // just disabled because it's impossible on Windows CI
      /* c8 ignore start */
      if (code === 'ENOTDIR' && this.parent) {
        this.parent.#markENOTDIR()
      }
      /* c8 ignore stop */
    }
    #readdirAddChild(e, c) {
      return (
        this.#readdirMaybePromoteChild(e, c) || this.#readdirAddNewChild(e, c)
      )
    }
    #readdirAddNewChild(e, c) {
      // alloc new entry at head, so it's never provisional
      const type = entToType(e)
      const child = this.newChild(e.name, type, {
        parent: this
      })
      const ifmt = child.#type & IFMT
      if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) {
        child.#type |= ENOTDIR
      }
      c.unshift(child)
      c.provisional++
      return child
    }
    #readdirMaybePromoteChild(e, c) {
      for (let p = c.provisional; p < c.length; p++) {
        const pchild = c[p]
        const name = this.nocase ? normalizeNocase(e.name) : normalize(e.name)
        if (name !== pchild.#matchName) {
          continue
        }
        return this.#readdirPromoteChild(e, pchild, p, c)
      }
    }
    #readdirPromoteChild(e, p, index, c) {
      const v = p.name
      // retain any other flags, but set ifmt from dirent
      p.#type = (p.#type & IFMT_UNKNOWN) | entToType(e)
      // case sensitivity fixing when we learn the true name.
      if (v !== e.name) {
        p.name = e.name
      }
      // just advance provisional index (potentially off the list),
      // otherwise we have to splice/pop it out and re-insert at head
      if (index !== c.provisional) {
        if (index === c.length - 1) {
          c.pop()
        } else {
          c.splice(index, 1)
        }
        c.unshift(p)
      }
      c.provisional++
      return p
    }
    /**
     * Call lstat() on this Path, and update all known information that can be
     * determined.
     *
     * Note that unlike `fs.lstat()`, the returned value does not contain some
     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
     * information is required, you will need to call `fs.lstat` yourself.
     *
     * If the Path refers to a nonexistent file, or if the lstat call fails for
     * any reason, `undefined` is returned.  Otherwise the updated Path object is
     * returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    async lstat() {
      if ((this.#type & ENOENT) === 0) {
        try {
          this.#applyStat(await this.#fs.promises.lstat(this.fullpath()))
          return this
        } catch (er) {
          this.#lstatFail(er.code)
        }
      }
    }
    /**
     * synchronous {@link PathBase.lstat}
     */
    lstatSync() {
      if ((this.#type & ENOENT) === 0) {
        try {
          this.#applyStat(this.#fs.lstatSync(this.fullpath()))
          return this
        } catch (er) {
          this.#lstatFail(er.code)
        }
      }
    }
    #applyStat(st) {
      const {
        atime,
        atimeMs,
        birthtime,
        birthtimeMs,
        blksize,
        blocks,
        ctime,
        ctimeMs,
        dev,
        gid,
        ino,
        mode,
        mtime,
        mtimeMs,
        nlink,
        rdev,
        size,
        uid
      } = st
      this.#atime = atime
      this.#atimeMs = atimeMs
      this.#birthtime = birthtime
      this.#birthtimeMs = birthtimeMs
      this.#blksize = blksize
      this.#blocks = blocks
      this.#ctime = ctime
      this.#ctimeMs = ctimeMs
      this.#dev = dev
      this.#gid = gid
      this.#ino = ino
      this.#mode = mode
      this.#mtime = mtime
      this.#mtimeMs = mtimeMs
      this.#nlink = nlink
      this.#rdev = rdev
      this.#size = size
      this.#uid = uid
      const ifmt = entToType(st)
      // retain any other flags, but set the ifmt
      this.#type = (this.#type & IFMT_UNKNOWN) | ifmt | LSTAT_CALLED
      if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) {
        this.#type |= ENOTDIR
      }
    }
    #onReaddirCB = []
    #readdirCBInFlight = false
    #callOnReaddirCB(children) {
      this.#readdirCBInFlight = false
      const cbs = this.#onReaddirCB.slice()
      this.#onReaddirCB.length = 0
      cbs.forEach(cb => cb(null, children))
    }
    /**
     * Standard node-style callback interface to get list of directory entries.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     *
     * @param cb The callback called with (er, entries).  Note that the `er`
     * param is somewhat extraneous, as all readdir() errors are handled and
     * simply result in an empty set of entries being returned.
     * @param allowZalgo Boolean indicating that immediately known results should
     * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release
     * zalgo at your peril, the dark pony lord is devious and unforgiving.
     */
    readdirCB(cb, allowZalgo = false) {
      if (!this.canReaddir()) {
        if (allowZalgo) {
          cb(null, [])
        } else {
          queueMicrotask(() => cb(null, []))
        }
        return
      }
      const children = this.children()
      if (this.calledReaddir()) {
        const c = children.slice(0, children.provisional)
        if (allowZalgo) {
          cb(null, c)
        } else {
          queueMicrotask(() => cb(null, c))
        }
        return
      }
      // don't have to worry about zalgo at this point.
      this.#onReaddirCB.push(cb)
      if (this.#readdirCBInFlight) {
        return
      }
      this.#readdirCBInFlight = true
      // else read the directory, fill up children
      // de-provisionalize any provisional children.
      const fullpath = this.fullpath()
      this.#fs.readdir(
        fullpath,
        {
          withFileTypes: true
        },
        (er, entries) => {
          if (er) {
            this.#readdirFail(er.code)
            children.provisional = 0
          } else {
            // if we didn't get an error, we always get entries.
            //@ts-ignore
            for (const e of entries) {
              this.#readdirAddChild(e, children)
            }
            this.#readdirSuccess(children)
          }
          this.#callOnReaddirCB(children.slice(0, children.provisional))
          return
        }
      )
    }
    #asyncReaddirInFlight
    /**
     * Return an array of known child entries.
     *
     * If the Path cannot or does not contain any children, then an empty array
     * is returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    async readdir() {
      if (!this.canReaddir()) {
        return []
      }
      const children = this.children()
      if (this.calledReaddir()) {
        return children.slice(0, children.provisional)
      }
      // else read the directory, fill up children
      // de-provisionalize any provisional children.
      const fullpath = this.fullpath()
      if (this.#asyncReaddirInFlight) {
        await this.#asyncReaddirInFlight
      } else {
        /* c8 ignore start */
        let resolve = () => {}
        /* c8 ignore stop */
        this.#asyncReaddirInFlight = new Promise(res => (resolve = res))
        try {
          for (const e of await this.#fs.promises.readdir(fullpath, {
            withFileTypes: true
          })) {
            this.#readdirAddChild(e, children)
          }
          this.#readdirSuccess(children)
        } catch (er) {
          this.#readdirFail(er.code)
          children.provisional = 0
        }
        this.#asyncReaddirInFlight = undefined
        resolve()
      }
      return children.slice(0, children.provisional)
    }
    /**
     * synchronous {@link PathBase.readdir}
     */
    readdirSync() {
      if (!this.canReaddir()) {
        return []
      }
      const children = this.children()
      if (this.calledReaddir()) {
        return children.slice(0, children.provisional)
      }
      // else read the directory, fill up children
      // de-provisionalize any provisional children.
      const fullpath = this.fullpath()
      try {
        for (const e of this.#fs.readdirSync(fullpath, {
          withFileTypes: true
        })) {
          this.#readdirAddChild(e, children)
        }
        this.#readdirSuccess(children)
      } catch (er) {
        this.#readdirFail(er.code)
        children.provisional = 0
      }
      return children.slice(0, children.provisional)
    }
    canReaddir() {
      if (this.#type & ENOCHILD) {
        return false
      }
      const ifmt = IFMT & this.#type
      // we always set ENOTDIR when setting IFMT, so should be impossible
      /* c8 ignore start */
      if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) {
        return false
      }
      /* c8 ignore stop */
      return true
    }
    shouldWalk(dirs, walkFilter) {
      return (
        (this.#type & IFDIR) === IFDIR &&
        !(this.#type & ENOCHILD) &&
        !dirs.has(this) &&
        (!walkFilter || walkFilter(this))
      )
    }
    /**
     * Return the Path object corresponding to path as resolved
     * by realpath(3).
     *
     * If the realpath call fails for any reason, `undefined` is returned.
     *
     * Result is cached, and thus may be outdated if the filesystem is mutated.
     * On success, returns a Path object.
     */
    async realpath() {
      if (this.#realpath) {
        return this.#realpath
      }
      if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type) {
        return undefined
      }
      try {
        const rp = await this.#fs.promises.realpath(this.fullpath())
        return (this.#realpath = this.resolve(rp))
      } catch (_) {
        this.#markENOREALPATH()
      }
    }
    /**
     * Synchronous {@link realpath}
     */
    realpathSync() {
      if (this.#realpath) {
        return this.#realpath
      }
      if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type) {
        return undefined
      }
      try {
        const rp = this.#fs.realpathSync(this.fullpath())
        return (this.#realpath = this.resolve(rp))
      } catch (_) {
        this.#markENOREALPATH()
      }
    }
    /**
     * Internal method to mark this Path object as the scurry cwd,
     * called by {@link PathScurry#chdir}
     *
     * @internal
     */
    [setAsCwd](oldCwd) {
      if (oldCwd === this) {
        return
      }
      oldCwd.isCWD = false
      this.isCWD = true
      const changed = new Set([])
      let rp = []
      let p = this
      while (p && p.parent) {
        changed.add(p)
        p.#relative = rp.join(this.sep)
        p.#relativePosix = rp.join('/')
        p = p.parent
        rp.push('..')
      }
      // now un-memoize parents of old cwd
      p = oldCwd
      while (p && p.parent && !changed.has(p)) {
        p.#relative = undefined
        p.#relativePosix = undefined
        p = p.parent
      }
    }
  }
  commonjs$6.PathBase = PathBase
  /**
   * Path class used on win32 systems
   *
   * Uses `'\\'` as the path separator for returned paths, either `'\\'` or `'/'`
   * as the path separator for parsing paths.
   */
  class PathWin32 extends PathBase {
    /**
     * Separator for generating path strings.
     */
    sep = '\\'
    /**
     * Separator for parsing path strings.
     */
    splitSep = eitherSep
    /**
     * Do not create new Path objects directly.  They should always be accessed
     * via the PathScurry class or other methods on the Path class.
     *
     * @internal
     */
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      super(name, type, root, roots, nocase, children, opts)
    }
    /**
     * @internal
     */
    newChild(name, type = UNKNOWN, opts = {}) {
      return new PathWin32(
        name,
        type,
        this.root,
        this.roots,
        this.nocase,
        this.childrenCache(),
        opts
      )
    }
    /**
     * @internal
     */
    getRootString(path) {
      return node_path_1.win32.parse(path).root
    }
    /**
     * @internal
     */
    getRoot(rootPath) {
      rootPath = uncToDrive(rootPath.toUpperCase())
      if (rootPath === this.root.name) {
        return this.root
      }
      // ok, not that one, check if it matches another we know about
      for (const [compare, root] of Object.entries(this.roots)) {
        if (this.sameRoot(rootPath, compare)) {
          return (this.roots[rootPath] = root)
        }
      }
      // otherwise, have to create a new one.
      return (this.roots[rootPath] = new PathScurryWin32(rootPath, this).root)
    }
    /**
     * @internal
     */
    sameRoot(rootPath, compare = this.root.name) {
      // windows can (rarely) have case-sensitive filesystem, but
      // UNC and drive letters are always case-insensitive, and canonically
      // represented uppercase.
      rootPath = rootPath
        .toUpperCase()
        .replace(/\//g, '\\')
        .replace(uncDriveRegexp, '$1\\')
      return rootPath === compare
    }
  }
  commonjs$6.PathWin32 = PathWin32
  /**
   * Path class used on all posix systems.
   *
   * Uses `'/'` as the path separator.
   */
  class PathPosix extends PathBase {
    /**
     * separator for parsing path strings
     */
    splitSep = '/'
    /**
     * separator for generating path strings
     */
    sep = '/'
    /**
     * Do not create new Path objects directly.  They should always be accessed
     * via the PathScurry class or other methods on the Path class.
     *
     * @internal
     */
    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
      super(name, type, root, roots, nocase, children, opts)
    }
    /**
     * @internal
     */
    getRootString(path) {
      return path.startsWith('/') ? '/' : ''
    }
    /**
     * @internal
     */
    getRoot(_rootPath) {
      return this.root
    }
    /**
     * @internal
     */
    newChild(name, type = UNKNOWN, opts = {}) {
      return new PathPosix(
        name,
        type,
        this.root,
        this.roots,
        this.nocase,
        this.childrenCache(),
        opts
      )
    }
  }
  commonjs$6.PathPosix = PathPosix
  /**
   * The base class for all PathScurry classes, providing the interface for path
   * resolution and filesystem operations.
   *
   * Typically, you should *not* instantiate this class directly, but rather one
   * of the platform-specific classes, or the exported {@link PathScurry} which
   * defaults to the current platform.
   */
  class PathScurryBase {
    /**
     * The root Path entry for the current working directory of this Scurry
     */
    root
    /**
     * The string path for the root of this Scurry's current working directory
     */
    rootPath
    /**
     * A collection of all roots encountered, referenced by rootPath
     */
    roots
    /**
     * The Path entry corresponding to this PathScurry's current working directory.
     */
    cwd
    #resolveCache
    #resolvePosixCache
    #children
    /**
     * Perform path comparisons case-insensitively.
     *
     * Defaults true on Darwin and Windows systems, false elsewhere.
     */
    nocase
    #fs
    /**
     * This class should not be instantiated directly.
     *
     * Use PathScurryWin32, PathScurryDarwin, PathScurryPosix, or PathScurry
     *
     * @internal
     */
    constructor(
      cwd = process.cwd(),
      pathImpl,
      sep,
      { nocase, childrenCacheSize = 16 * 1024, fs = defaultFS } = {}
    ) {
      this.#fs = fsFromOption(fs)
      if (cwd instanceof URL || cwd.startsWith('file://')) {
        cwd = (0, node_url_1.fileURLToPath)(cwd)
      }
      // resolve and split root, and then add to the store.
      // this is the only time we call path.resolve()
      const cwdPath = pathImpl.resolve(cwd)
      this.roots = Object.create(null)
      this.rootPath = this.parseRootPath(cwdPath)
      this.#resolveCache = new ResolveCache()
      this.#resolvePosixCache = new ResolveCache()
      this.#children = new ChildrenCache(childrenCacheSize)
      const split = cwdPath.substring(this.rootPath.length).split(sep)
      // resolve('/') leaves '', splits to [''], we don't want that.
      if (split.length === 1 && !split[0]) {
        split.pop()
      }
      /* c8 ignore start */
      if (nocase === undefined) {
        throw new TypeError(
          'must provide nocase setting to PathScurryBase ctor'
        )
      }
      /* c8 ignore stop */
      this.nocase = nocase
      this.root = this.newRoot(this.#fs)
      this.roots[this.rootPath] = this.root
      let prev = this.root
      let len = split.length - 1
      const joinSep = pathImpl.sep
      let abs = this.rootPath
      let sawFirst = false
      for (const part of split) {
        const l = len--
        prev = prev.child(part, {
          relative: new Array(l).fill('..').join(joinSep),
          relativePosix: new Array(l).fill('..').join('/'),
          fullpath: (abs += (sawFirst ? '' : joinSep) + part)
        })
        sawFirst = true
      }
      this.cwd = prev
    }
    /**
     * Get the depth of a provided path, string, or the cwd
     */
    depth(path = this.cwd) {
      if (typeof path === 'string') {
        path = this.cwd.resolve(path)
      }
      return path.depth()
    }
    /**
     * Return the cache of child entries.  Exposed so subclasses can create
     * child Path objects in a platform-specific way.
     *
     * @internal
     */
    childrenCache() {
      return this.#children
    }
    /**
     * Resolve one or more path strings to a resolved string
     *
     * Same interface as require('path').resolve.
     *
     * Much faster than path.resolve() when called multiple times for the same
     * path, because the resolved Path objects are cached.  Much slower
     * otherwise.
     */
    resolve(...paths) {
      // first figure out the minimum number of paths we have to test
      // we always start at cwd, but any absolutes will bump the start
      let r = ''
      for (let i = paths.length - 1; i >= 0; i--) {
        const p = paths[i]
        if (!p || p === '.') {
          continue
        }
        r = r ? `${p}/${r}` : p
        if (this.isAbsolute(p)) {
          break
        }
      }
      const cached = this.#resolveCache.get(r)
      if (cached !== undefined) {
        return cached
      }
      const result = this.cwd.resolve(r).fullpath()
      this.#resolveCache.set(r, result)
      return result
    }
    /**
     * Resolve one or more path strings to a resolved string, returning
     * the posix path.  Identical to .resolve() on posix systems, but on
     * windows will return a forward-slash separated UNC path.
     *
     * Same interface as require('path').resolve.
     *
     * Much faster than path.resolve() when called multiple times for the same
     * path, because the resolved Path objects are cached.  Much slower
     * otherwise.
     */
    resolvePosix(...paths) {
      // first figure out the minimum number of paths we have to test
      // we always start at cwd, but any absolutes will bump the start
      let r = ''
      for (let i = paths.length - 1; i >= 0; i--) {
        const p = paths[i]
        if (!p || p === '.') {
          continue
        }
        r = r ? `${p}/${r}` : p
        if (this.isAbsolute(p)) {
          break
        }
      }
      const cached = this.#resolvePosixCache.get(r)
      if (cached !== undefined) {
        return cached
      }
      const result = this.cwd.resolve(r).fullpathPosix()
      this.#resolvePosixCache.set(r, result)
      return result
    }
    /**
     * find the relative path from the cwd to the supplied path string or entry
     */
    relative(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.relative()
    }
    /**
     * find the relative path from the cwd to the supplied path string or
     * entry, using / as the path delimiter, even on Windows.
     */
    relativePosix(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.relativePosix()
    }
    /**
     * Return the basename for the provided string or Path object
     */
    basename(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.name
    }
    /**
     * Return the dirname for the provided string or Path object
     */
    dirname(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return (entry.parent || entry).fullpath()
    }
    async readdir(
      entry = this.cwd,
      opts = {
        withFileTypes: true
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes } = opts
      if (!entry.canReaddir()) {
        return []
      } else {
        const p = await entry.readdir()
        return withFileTypes ? p : p.map(e => e.name)
      }
    }
    readdirSync(
      entry = this.cwd,
      opts = {
        withFileTypes: true
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true } = opts
      if (!entry.canReaddir()) {
        return []
      } else if (withFileTypes) {
        return entry.readdirSync()
      } else {
        return entry.readdirSync().map(e => e.name)
      }
    }
    /**
     * Call lstat() on the string or Path object, and update all known
     * information that can be determined.
     *
     * Note that unlike `fs.lstat()`, the returned value does not contain some
     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
     * information is required, you will need to call `fs.lstat` yourself.
     *
     * If the Path refers to a nonexistent file, or if the lstat call fails for
     * any reason, `undefined` is returned.  Otherwise the updated Path object is
     * returned.
     *
     * Results are cached, and thus may be out of date if the filesystem is
     * mutated.
     */
    async lstat(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.lstat()
    }
    /**
     * synchronous {@link PathScurryBase.lstat}
     */
    lstatSync(entry = this.cwd) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      }
      return entry.lstatSync()
    }
    async readlink(
      entry = this.cwd,
      { withFileTypes } = {
        withFileTypes: false
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes
        entry = this.cwd
      }
      const e = await entry.readlink()
      return withFileTypes ? e : e?.fullpath()
    }
    readlinkSync(
      entry = this.cwd,
      { withFileTypes } = {
        withFileTypes: false
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes
        entry = this.cwd
      }
      const e = entry.readlinkSync()
      return withFileTypes ? e : e?.fullpath()
    }
    async realpath(
      entry = this.cwd,
      { withFileTypes } = {
        withFileTypes: false
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes
        entry = this.cwd
      }
      const e = await entry.realpath()
      return withFileTypes ? e : e?.fullpath()
    }
    realpathSync(
      entry = this.cwd,
      { withFileTypes } = {
        withFileTypes: false
      }
    ) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        withFileTypes = entry.withFileTypes
        entry = this.cwd
      }
      const e = entry.realpathSync()
      return withFileTypes ? e : e?.fullpath()
    }
    async walk(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      const results = []
      if (!filter || filter(entry)) {
        results.push(withFileTypes ? entry : entry.fullpath())
      }
      const dirs = new Set()
      const walk = (dir, cb) => {
        dirs.add(dir)
        dir.readdirCB((er, entries) => {
          /* c8 ignore start */
          if (er) {
            return cb(er)
          }
          /* c8 ignore stop */
          let len = entries.length
          if (!len) {
            return cb()
          }
          const next = () => {
            if (--len === 0) {
              cb()
            }
          }
          for (const e of entries) {
            if (!filter || filter(e)) {
              results.push(withFileTypes ? e : e.fullpath())
            }
            if (follow && e.isSymbolicLink()) {
              e.realpath()
                .then(r => (r?.isUnknown() ? r.lstat() : r))
                .then(r =>
                  r?.shouldWalk(dirs, walkFilter) ? walk(r, next) : next()
                )
            } else {
              if (e.shouldWalk(dirs, walkFilter)) {
                walk(e, next)
              } else {
                next()
              }
            }
          }
        }, true) // zalgooooooo
      }
      const start = entry
      return new Promise((res, rej) => {
        walk(start, er => {
          /* c8 ignore start */
          if (er) {
            return rej(er)
          }
          /* c8 ignore stop */
          res(results)
        })
      })
    }
    walkSync(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      const results = []
      if (!filter || filter(entry)) {
        results.push(withFileTypes ? entry : entry.fullpath())
      }
      const dirs = new Set([entry])
      for (const dir of dirs) {
        const entries = dir.readdirSync()
        for (const e of entries) {
          if (!filter || filter(e)) {
            results.push(withFileTypes ? e : e.fullpath())
          }
          let r = e
          if (e.isSymbolicLink()) {
            if (!(follow && (r = e.realpathSync()))) {
              continue
            }
            if (r.isUnknown()) {
              r.lstatSync()
            }
          }
          if (r.shouldWalk(dirs, walkFilter)) {
            dirs.add(r)
          }
        }
      }
      return results
    }
    /**
     * Support for `for await`
     *
     * Alias for {@link PathScurryBase.iterate}
     *
     * Note: As of Node 19, this is very slow, compared to other methods of
     * walking.  Consider using {@link PathScurryBase.stream} if memory overhead
     * and backpressure are concerns, or {@link PathScurryBase.walk} if not.
     */
    [Symbol.asyncIterator]() {
      return this.iterate()
    }
    iterate(entry = this.cwd, options = {}) {
      // iterating async over the stream is significantly more performant,
      // especially in the warm-cache scenario, because it buffers up directory
      // entries in the background instead of waiting for a yield for each one.
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        options = entry
        entry = this.cwd
      }
      return this.stream(entry, options)[Symbol.asyncIterator]()
    }
    /**
     * Iterating over a PathScurry performs a synchronous walk.
     *
     * Alias for {@link PathScurryBase.iterateSync}
     */
    [Symbol.iterator]() {
      return this.iterateSync()
    }
    *iterateSync(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      if (!filter || filter(entry)) {
        yield withFileTypes ? entry : entry.fullpath()
      }
      const dirs = new Set([entry])
      for (const dir of dirs) {
        const entries = dir.readdirSync()
        for (const e of entries) {
          if (!filter || filter(e)) {
            yield withFileTypes ? e : e.fullpath()
          }
          let r = e
          if (e.isSymbolicLink()) {
            if (!(follow && (r = e.realpathSync()))) {
              continue
            }
            if (r.isUnknown()) {
              r.lstatSync()
            }
          }
          if (r.shouldWalk(dirs, walkFilter)) {
            dirs.add(r)
          }
        }
      }
    }
    stream(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      const results = new minipass_1.Minipass({
        objectMode: true
      })
      if (!filter || filter(entry)) {
        results.write(withFileTypes ? entry : entry.fullpath())
      }
      const dirs = new Set()
      const queue = [entry]
      let processing = 0
      const process = () => {
        let paused = false
        while (!paused) {
          const dir = queue.shift()
          if (!dir) {
            if (processing === 0) {
              results.end()
            }
            return
          }
          processing++
          dirs.add(dir)
          const onReaddir = (er, entries, didRealpaths = false) => {
            /* c8 ignore start */
            if (er) {
              return results.emit('error', er)
            }
            /* c8 ignore stop */
            if (follow && !didRealpaths) {
              const promises = []
              for (const e of entries) {
                if (e.isSymbolicLink()) {
                  promises.push(
                    e.realpath().then(r => (r?.isUnknown() ? r.lstat() : r))
                  )
                }
              }
              if (promises.length) {
                Promise.all(promises).then(() => onReaddir(null, entries, true))
                return
              }
            }
            for (const e of entries) {
              if (e && (!filter || filter(e))) {
                if (!results.write(withFileTypes ? e : e.fullpath())) {
                  paused = true
                }
              }
            }
            processing--
            for (const e of entries) {
              const r = e.realpathCached() || e
              if (r.shouldWalk(dirs, walkFilter)) {
                queue.push(r)
              }
            }
            if (paused && !results.flowing) {
              results.once('drain', process)
            } else if (!sync) {
              process()
            }
          }
          // zalgo containment
          let sync = true
          dir.readdirCB(onReaddir, true)
          sync = false
        }
      }
      process()
      return results
    }
    streamSync(entry = this.cwd, opts = {}) {
      if (typeof entry === 'string') {
        entry = this.cwd.resolve(entry)
      } else if (!(entry instanceof PathBase)) {
        opts = entry
        entry = this.cwd
      }
      const { withFileTypes = true, follow = false, filter, walkFilter } = opts
      const results = new minipass_1.Minipass({
        objectMode: true
      })
      const dirs = new Set()
      if (!filter || filter(entry)) {
        results.write(withFileTypes ? entry : entry.fullpath())
      }
      const queue = [entry]
      let processing = 0
      const process = () => {
        let paused = false
        while (!paused) {
          const dir = queue.shift()
          if (!dir) {
            if (processing === 0) {
              results.end()
            }
            return
          }
          processing++
          dirs.add(dir)
          const entries = dir.readdirSync()
          for (const e of entries) {
            if (!filter || filter(e)) {
              if (!results.write(withFileTypes ? e : e.fullpath())) {
                paused = true
              }
            }
          }
          processing--
          for (const e of entries) {
            let r = e
            if (e.isSymbolicLink()) {
              if (!(follow && (r = e.realpathSync()))) {
                continue
              }
              if (r.isUnknown()) {
                r.lstatSync()
              }
            }
            if (r.shouldWalk(dirs, walkFilter)) {
              queue.push(r)
            }
          }
        }
        if (paused && !results.flowing) {
          results.once('drain', process)
        }
      }
      process()
      return results
    }
    chdir(path = this.cwd) {
      const oldCwd = this.cwd
      this.cwd = typeof path === 'string' ? this.cwd.resolve(path) : path
      this.cwd[setAsCwd](oldCwd)
    }
  }
  commonjs$6.PathScurryBase = PathScurryBase
  /**
   * Windows implementation of {@link PathScurryBase}
   *
   * Defaults to case insensitve, uses `'\\'` to generate path strings.  Uses
   * {@link PathWin32} for Path objects.
   */
  class PathScurryWin32 extends PathScurryBase {
    /**
     * separator for generating path strings
     */
    sep = '\\'
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = true } = opts
      super(cwd, node_path_1.win32, '\\', {
        ...opts,
        nocase
      })
      this.nocase = nocase
      for (let p = this.cwd; p; p = p.parent) {
        p.nocase = this.nocase
      }
    }
    /**
     * @internal
     */
    parseRootPath(dir) {
      // if the path starts with a single separator, it's not a UNC, and we'll
      // just get separator as the root, and driveFromUNC will return \
      // In that case, mount \ on the root from the cwd.
      return node_path_1.win32.parse(dir).root.toUpperCase()
    }
    /**
     * @internal
     */
    newRoot(fs) {
      return new PathWin32(
        this.rootPath,
        IFDIR,
        undefined,
        this.roots,
        this.nocase,
        this.childrenCache(),
        {
          fs
        }
      )
    }
    /**
     * Return true if the provided path string is an absolute path
     */
    isAbsolute(p) {
      return (
        p.startsWith('/') || p.startsWith('\\') || /^[a-z]:(\/|\\)/i.test(p)
      )
    }
  }
  commonjs$6.PathScurryWin32 = PathScurryWin32
  /**
   * {@link PathScurryBase} implementation for all posix systems other than Darwin.
   *
   * Defaults to case-sensitive matching, uses `'/'` to generate path strings.
   *
   * Uses {@link PathPosix} for Path objects.
   */
  class PathScurryPosix extends PathScurryBase {
    /**
     * separator for generating path strings
     */
    sep = '/'
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = false } = opts
      super(cwd, node_path_1.posix, '/', {
        ...opts,
        nocase
      })
      this.nocase = nocase
    }
    /**
     * @internal
     */
    parseRootPath(_dir) {
      return '/'
    }
    /**
     * @internal
     */
    newRoot(fs) {
      return new PathPosix(
        this.rootPath,
        IFDIR,
        undefined,
        this.roots,
        this.nocase,
        this.childrenCache(),
        {
          fs
        }
      )
    }
    /**
     * Return true if the provided path string is an absolute path
     */
    isAbsolute(p) {
      return p.startsWith('/')
    }
  }
  commonjs$6.PathScurryPosix = PathScurryPosix
  /**
   * {@link PathScurryBase} implementation for Darwin (macOS) systems.
   *
   * Defaults to case-insensitive matching, uses `'/'` for generating path
   * strings.
   *
   * Uses {@link PathPosix} for Path objects.
   */
  class PathScurryDarwin extends PathScurryPosix {
    constructor(cwd = process.cwd(), opts = {}) {
      const { nocase = true } = opts
      super(cwd, {
        ...opts,
        nocase
      })
    }
  }
  commonjs$6.PathScurryDarwin = PathScurryDarwin
  /**
   * Default {@link PathBase} implementation for the current platform.
   *
   * {@link PathWin32} on Windows systems, {@link PathPosix} on all others.
   */
  commonjs$6.Path = process.platform === 'win32' ? PathWin32 : PathPosix
  /**
   * Default {@link PathScurryBase} implementation for the current platform.
   *
   * {@link PathScurryWin32} on Windows systems, {@link PathScurryDarwin} on
   * Darwin (macOS) systems, {@link PathScurryPosix} on all others.
   */
  commonjs$6.PathScurry =
    process.platform === 'win32'
      ? PathScurryWin32
      : process.platform === 'darwin'
        ? PathScurryDarwin
        : PathScurryPosix
  return commonjs$6
}

const pattern = {}

let hasRequiredPattern
function requirePattern() {
  if (hasRequiredPattern) {
    return pattern
  }
  hasRequiredPattern = 1
  // this is just a very light wrapper around 2 arrays with an offset index
  Object.defineProperty(pattern, '__esModule', {
    value: true
  })
  pattern.Pattern = void 0
  const minimatch_1 = requireCommonjs$8()
  const isPatternList = pl => pl.length >= 1
  const isGlobList = gl => gl.length >= 1
  /**
   * An immutable-ish view on an array of glob parts and their parsed
   * results
   */
  class Pattern {
    #patternList
    #globList
    #index
    length
    #platform
    #rest
    #globString
    #isDrive
    #isUNC
    #isAbsolute
    #followGlobstar = true
    constructor(patternList, globList, index, platform) {
      if (!isPatternList(patternList)) {
        throw new TypeError('empty pattern list')
      }
      if (!isGlobList(globList)) {
        throw new TypeError('empty glob list')
      }
      if (globList.length !== patternList.length) {
        throw new TypeError('mismatched pattern list and glob list lengths')
      }
      this.length = patternList.length
      if (index < 0 || index >= this.length) {
        throw new TypeError('index out of range')
      }
      this.#patternList = patternList
      this.#globList = globList
      this.#index = index
      this.#platform = platform
      // normalize root entries of absolute patterns on initial creation.
      if (this.#index === 0) {
        // c: => ['c:/']
        // C:/ => ['C:/']
        // C:/x => ['C:/', 'x']
        // //host/share => ['//host/share/']
        // //host/share/ => ['//host/share/']
        // //host/share/x => ['//host/share/', 'x']
        // /etc => ['/', 'etc']
        // / => ['/']
        if (this.isUNC()) {
          // '' / '' / 'host' / 'share'
          const [p0, p1, p2, p3, ...prest] = this.#patternList
          const [g0, g1, g2, g3, ...grest] = this.#globList
          if (prest[0] === '') {
            // ends in /
            prest.shift()
            grest.shift()
          }
          const p = [p0, p1, p2, p3, ''].join('/')
          const g = [g0, g1, g2, g3, ''].join('/')
          this.#patternList = [p, ...prest]
          this.#globList = [g, ...grest]
          this.length = this.#patternList.length
        } else if (this.isDrive() || this.isAbsolute()) {
          const [p1, ...prest] = this.#patternList
          const [g1, ...grest] = this.#globList
          if (prest[0] === '') {
            // ends in /
            prest.shift()
            grest.shift()
          }
          const p = p1 + '/'
          const g = g1 + '/'
          this.#patternList = [p, ...prest]
          this.#globList = [g, ...grest]
          this.length = this.#patternList.length
        }
      }
    }
    /**
     * The first entry in the parsed list of patterns
     */
    pattern() {
      return this.#patternList[this.#index]
    }
    /**
     * true of if pattern() returns a string
     */
    isString() {
      return typeof this.#patternList[this.#index] === 'string'
    }
    /**
     * true of if pattern() returns GLOBSTAR
     */
    isGlobstar() {
      return this.#patternList[this.#index] === minimatch_1.GLOBSTAR
    }
    /**
     * true if pattern() returns a regexp
     */
    isRegExp() {
      return this.#patternList[this.#index] instanceof RegExp
    }
    /**
     * The /-joined set of glob parts that make up this pattern
     */
    globString() {
      return (this.#globString =
        this.#globString ||
        (this.#index === 0
          ? this.isAbsolute()
            ? this.#globList[0] + this.#globList.slice(1).join('/')
            : this.#globList.join('/')
          : this.#globList.slice(this.#index).join('/')))
    }
    /**
     * true if there are more pattern parts after this one
     */
    hasMore() {
      return this.length > this.#index + 1
    }
    /**
     * The rest of the pattern after this part, or null if this is the end
     */
    rest() {
      if (this.#rest !== undefined) {
        return this.#rest
      }
      if (!this.hasMore()) {
        return (this.#rest = null)
      }
      this.#rest = new Pattern(
        this.#patternList,
        this.#globList,
        this.#index + 1,
        this.#platform
      )
      this.#rest.#isAbsolute = this.#isAbsolute
      this.#rest.#isUNC = this.#isUNC
      this.#rest.#isDrive = this.#isDrive
      return this.#rest
    }
    /**
     * true if the pattern represents a //unc/path/ on windows
     */
    isUNC() {
      const pl = this.#patternList
      return this.#isUNC !== undefined
        ? this.#isUNC
        : (this.#isUNC =
            this.#platform === 'win32' &&
            this.#index === 0 &&
            pl[0] === '' &&
            pl[1] === '' &&
            typeof pl[2] === 'string' &&
            !!pl[2] &&
            typeof pl[3] === 'string' &&
            !!pl[3])
    }
    // pattern like C:/...
    // split = ['C:', ...]
    // XXX: would be nice to handle patterns like `c:*` to test the cwd
    // in c: for *, but I don't know of a way to even figure out what that
    // cwd is without actually chdir'ing into it?
    /**
     * True if the pattern starts with a drive letter on Windows
     */
    isDrive() {
      const pl = this.#patternList
      return this.#isDrive !== undefined
        ? this.#isDrive
        : (this.#isDrive =
            this.#platform === 'win32' &&
            this.#index === 0 &&
            this.length > 1 &&
            typeof pl[0] === 'string' &&
            /^[a-z]:$/i.test(pl[0]))
    }
    // pattern = '/' or '/...' or '/x/...'
    // split = ['', ''] or ['', ...] or ['', 'x', ...]
    // Drive and UNC both considered absolute on windows
    /**
     * True if the pattern is rooted on an absolute path
     */
    isAbsolute() {
      const pl = this.#patternList
      return this.#isAbsolute !== undefined
        ? this.#isAbsolute
        : (this.#isAbsolute =
            (pl[0] === '' && pl.length > 1) || this.isDrive() || this.isUNC())
    }
    /**
     * consume the root of the pattern, and return it
     */
    root() {
      const p = this.#patternList[0]
      return typeof p === 'string' && this.isAbsolute() && this.#index === 0
        ? p
        : ''
    }
    /**
     * Check to see if the current globstar pattern is allowed to follow
     * a symbolic link.
     */
    checkFollowGlobstar() {
      return !(this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar)
    }
    /**
     * Mark that the current globstar pattern is following a symbolic link
     */
    markFollowGlobstar() {
      if (this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar) {
        return false
      }
      this.#followGlobstar = false
      return true
    }
  }
  pattern.Pattern = Pattern
  return pattern
}

const walker = {}

const ignore = {}

let hasRequiredIgnore
function requireIgnore() {
  if (hasRequiredIgnore) {
    return ignore
  }
  hasRequiredIgnore = 1
  // give it a pattern, and it'll be able to tell you if
  // a given path should be ignored.
  // Ignoring a path ignores its children if the pattern ends in /**
  // Ignores are always parsed in dot:true mode
  Object.defineProperty(ignore, '__esModule', {
    value: true
  })
  ignore.Ignore = void 0
  const minimatch_1 = requireCommonjs$8()
  const pattern_js_1 = requirePattern()
  const defaultPlatform =
    typeof process === 'object' &&
    process &&
    typeof process.platform === 'string'
      ? process.platform
      : 'linux'
  /**
   * Class used to process ignored patterns
   */
  class Ignore {
    relative
    relativeChildren
    absolute
    absoluteChildren
    platform
    mmopts
    constructor(
      ignored,
      { nobrace, nocase, noext, noglobstar, platform = defaultPlatform }
    ) {
      this.relative = []
      this.absolute = []
      this.relativeChildren = []
      this.absoluteChildren = []
      this.platform = platform
      this.mmopts = {
        dot: true,
        nobrace,
        nocase,
        noext,
        noglobstar,
        optimizationLevel: 2,
        platform,
        nocomment: true,
        nonegate: true
      }
      for (const ign of ignored) {
        this.add(ign)
      }
    }
    add(ign) {
      // this is a little weird, but it gives us a clean set of optimized
      // minimatch matchers, without getting tripped up if one of them
      // ends in /** inside a brace section, and it's only inefficient at
      // the start of the walk, not along it.
      // It'd be nice if the Pattern class just had a .test() method, but
      // handling globstars is a bit of a pita, and that code already lives
      // in minimatch anyway.
      // Another way would be if maybe Minimatch could take its set/globParts
      // as an option, and then we could at least just use Pattern to test
      // for absolute-ness.
      // Yet another way, Minimatch could take an array of glob strings, and
      // a cwd option, and do the right thing.
      const mm = new minimatch_1.Minimatch(ign, this.mmopts)
      for (let i = 0; i < mm.set.length; i++) {
        const parsed = mm.set[i]
        const globParts = mm.globParts[i]
        /* c8 ignore start */
        if (!parsed || !globParts) {
          throw new Error('invalid pattern object')
        }
        // strip off leading ./ portions
        // https://github.com/isaacs/node-glob/issues/570
        while (parsed[0] === '.' && globParts[0] === '.') {
          parsed.shift()
          globParts.shift()
        }
        /* c8 ignore stop */
        const p = new pattern_js_1.Pattern(parsed, globParts, 0, this.platform)
        const m = new minimatch_1.Minimatch(p.globString(), this.mmopts)
        const children = globParts[globParts.length - 1] === '**'
        const absolute = p.isAbsolute()
        if (absolute) {
          this.absolute.push(m)
        } else {
          this.relative.push(m)
        }
        if (children) {
          if (absolute) {
            this.absoluteChildren.push(m)
          } else {
            this.relativeChildren.push(m)
          }
        }
      }
    }
    ignored(p) {
      const fullpath = p.fullpath()
      const fullpaths = `${fullpath}/`
      const relative = p.relative() || '.'
      const relatives = `${relative}/`
      for (const m of this.relative) {
        if (m.match(relative) || m.match(relatives)) {
          return true
        }
      }
      for (const m of this.absolute) {
        if (m.match(fullpath) || m.match(fullpaths)) {
          return true
        }
      }
      return false
    }
    childrenIgnored(p) {
      const fullpath = p.fullpath() + '/'
      const relative = (p.relative() || '.') + '/'
      for (const m of this.relativeChildren) {
        if (m.match(relative)) {
          return true
        }
      }
      for (const m of this.absoluteChildren) {
        if (m.match(fullpath)) {
          return true
        }
      }
      return false
    }
  }
  ignore.Ignore = Ignore
  return ignore
}

const processor = {}

let hasRequiredProcessor
function requireProcessor() {
  if (hasRequiredProcessor) {
    return processor
  }
  hasRequiredProcessor = 1
  // synchronous utility for filtering entries and calculating subwalks
  Object.defineProperty(processor, '__esModule', {
    value: true
  })
  processor.Processor =
    processor.SubWalks =
    processor.MatchRecord =
    processor.HasWalkedCache =
      void 0
  const minimatch_1 = requireCommonjs$8()
  /**
   * A cache of which patterns have been processed for a given Path
   */
  class HasWalkedCache {
    store
    constructor(store = new Map()) {
      this.store = store
    }
    copy() {
      return new HasWalkedCache(new Map(this.store))
    }
    hasWalked(target, pattern) {
      return this.store.get(target.fullpath())?.has(pattern.globString())
    }
    storeWalked(target, pattern) {
      const fullpath = target.fullpath()
      const cached = this.store.get(fullpath)
      if (cached) {
        cached.add(pattern.globString())
      } else {
        this.store.set(fullpath, new Set([pattern.globString()]))
      }
    }
  }
  processor.HasWalkedCache = HasWalkedCache
  /**
   * A record of which paths have been matched in a given walk step,
   * and whether they only are considered a match if they are a directory,
   * and whether their absolute or relative path should be returned.
   */
  class MatchRecord {
    store = new Map()
    add(target, absolute, ifDir) {
      const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0)
      const current = this.store.get(target)
      this.store.set(target, current === undefined ? n : n & current)
    }
    // match, absolute, ifdir
    entries() {
      return [...this.store.entries()].map(([path, n]) => [
        path,
        !!(n & 2),
        !!(n & 1)
      ])
    }
  }
  processor.MatchRecord = MatchRecord
  /**
   * A collection of patterns that must be processed in a subsequent step
   * for a given path.
   */
  class SubWalks {
    store = new Map()
    add(target, pattern) {
      if (!target.canReaddir()) {
        return
      }
      const subs = this.store.get(target)
      if (subs) {
        if (!subs.find(p => p.globString() === pattern.globString())) {
          subs.push(pattern)
        }
      } else {
        this.store.set(target, [pattern])
      }
    }
    get(target) {
      const subs = this.store.get(target)
      /* c8 ignore start */
      if (!subs) {
        throw new Error('attempting to walk unknown path')
      }
      /* c8 ignore stop */
      return subs
    }
    entries() {
      return this.keys().map(k => [k, this.store.get(k)])
    }
    keys() {
      return [...this.store.keys()].filter(t => t.canReaddir())
    }
  }
  processor.SubWalks = SubWalks
  /**
   * The class that processes patterns for a given path.
   *
   * Handles child entry filtering, and determining whether a path's
   * directory contents must be read.
   */
  class Processor {
    hasWalkedCache
    matches = new MatchRecord()
    subwalks = new SubWalks()
    patterns
    follow
    dot
    opts
    constructor(opts, hasWalkedCache) {
      this.opts = opts
      this.follow = !!opts.follow
      this.dot = !!opts.dot
      this.hasWalkedCache = hasWalkedCache
        ? hasWalkedCache.copy()
        : new HasWalkedCache()
    }
    processPatterns(target, patterns) {
      this.patterns = patterns
      const processingSet = patterns.map(p => [target, p])
      // map of paths to the magic-starting subwalks they need to walk
      // first item in patterns is the filter
      for (let [t, pattern] of processingSet) {
        this.hasWalkedCache.storeWalked(t, pattern)
        const root = pattern.root()
        const absolute = pattern.isAbsolute() && this.opts.absolute !== false
        // start absolute patterns at root
        if (root) {
          t = t.resolve(
            root === '/' && this.opts.root !== undefined ? this.opts.root : root
          )
          const rest = pattern.rest()
          if (!rest) {
            this.matches.add(t, true, false)
            continue
          } else {
            pattern = rest
          }
        }
        if (t.isENOENT()) {
          continue
        }
        let p
        let rest
        let changed = false
        while (
          typeof (p = pattern.pattern()) === 'string' &&
          (rest = pattern.rest())
        ) {
          const c = t.resolve(p)
          t = c
          pattern = rest
          changed = true
        }
        p = pattern.pattern()
        rest = pattern.rest()
        if (changed) {
          if (this.hasWalkedCache.hasWalked(t, pattern)) {
            continue
          }
          this.hasWalkedCache.storeWalked(t, pattern)
        }
        // now we have either a final string for a known entry,
        // more strings for an unknown entry,
        // or a pattern starting with magic, mounted on t.
        if (typeof p === 'string') {
          // must not be final entry, otherwise we would have
          // concatenated it earlier.
          const ifDir = p === '..' || p === '' || p === '.'
          this.matches.add(t.resolve(p), absolute, ifDir)
          continue
        } else if (p === minimatch_1.GLOBSTAR) {
          // if no rest, match and subwalk pattern
          // if rest, process rest and subwalk pattern
          // if it's a symlink, but we didn't get here by way of a
          // globstar match (meaning it's the first time THIS globstar
          // has traversed a symlink), then we follow it. Otherwise, stop.
          if (
            !t.isSymbolicLink() ||
            this.follow ||
            pattern.checkFollowGlobstar()
          ) {
            this.subwalks.add(t, pattern)
          }
          const rp = rest?.pattern()
          const rrest = rest?.rest()
          if (!rest || ((rp === '' || rp === '.') && !rrest)) {
            // only HAS to be a dir if it ends in **/ or **/.
            // but ending in ** will match files as well.
            this.matches.add(t, absolute, rp === '' || rp === '.')
          } else {
            if (rp === '..') {
              // this would mean you're matching **/.. at the fs root,
              // and no thanks, I'm not gonna test that specific case.
              /* c8 ignore start */
              const tp = t.parent || t
              /* c8 ignore stop */
              if (!rrest) {
                this.matches.add(tp, absolute, true)
              } else if (!this.hasWalkedCache.hasWalked(tp, rrest)) {
                this.subwalks.add(tp, rrest)
              }
            }
          }
        } else if (p instanceof RegExp) {
          this.subwalks.add(t, pattern)
        }
      }
      return this
    }
    subwalkTargets() {
      return this.subwalks.keys()
    }
    child() {
      return new Processor(this.opts, this.hasWalkedCache)
    }
    // return a new Processor containing the subwalks for each
    // child entry, and a set of matches, and
    // a hasWalkedCache that's a copy of this one
    // then we're going to call
    filterEntries(parent, entries) {
      const patterns = this.subwalks.get(parent)
      // put matches and entry walks into the results processor
      const results = this.child()
      for (const e of entries) {
        for (const pattern of patterns) {
          const absolute = pattern.isAbsolute()
          const p = pattern.pattern()
          const rest = pattern.rest()
          if (p === minimatch_1.GLOBSTAR) {
            results.testGlobstar(e, pattern, rest, absolute)
          } else if (p instanceof RegExp) {
            results.testRegExp(e, p, rest, absolute)
          } else {
            results.testString(e, p, rest, absolute)
          }
        }
      }
      return results
    }
    testGlobstar(e, pattern, rest, absolute) {
      if (this.dot || !e.name.startsWith('.')) {
        if (!pattern.hasMore()) {
          this.matches.add(e, absolute, false)
        }
        if (e.canReaddir()) {
          // if we're in follow mode or it's not a symlink, just keep
          // testing the same pattern. If there's more after the globstar,
          // then this symlink consumes the globstar. If not, then we can
          // follow at most ONE symlink along the way, so we mark it, which
          // also checks to ensure that it wasn't already marked.
          if (this.follow || !e.isSymbolicLink()) {
            this.subwalks.add(e, pattern)
          } else if (e.isSymbolicLink()) {
            if (rest && pattern.checkFollowGlobstar()) {
              this.subwalks.add(e, rest)
            } else if (pattern.markFollowGlobstar()) {
              this.subwalks.add(e, pattern)
            }
          }
        }
      }
      // if the NEXT thing matches this entry, then also add
      // the rest.
      if (rest) {
        const rp = rest.pattern()
        if (
          typeof rp === 'string' &&
          // dots and empty were handled already
          rp !== '..' &&
          rp !== '' &&
          rp !== '.'
        ) {
          this.testString(e, rp, rest.rest(), absolute)
        } else if (rp === '..') {
          /* c8 ignore start */
          const ep = e.parent || e
          /* c8 ignore stop */
          this.subwalks.add(ep, rest)
        } else if (rp instanceof RegExp) {
          this.testRegExp(e, rp, rest.rest(), absolute)
        }
      }
    }
    testRegExp(e, p, rest, absolute) {
      if (!p.test(e.name)) {
        return
      }
      if (!rest) {
        this.matches.add(e, absolute, false)
      } else {
        this.subwalks.add(e, rest)
      }
    }
    testString(e, p, rest, absolute) {
      // should never happen?
      if (!e.isNamed(p)) {
        return
      }
      if (!rest) {
        this.matches.add(e, absolute, false)
      } else {
        this.subwalks.add(e, rest)
      }
    }
  }
  processor.Processor = Processor
  return processor
}

let hasRequiredWalker
function requireWalker() {
  if (hasRequiredWalker) {
    return walker
  }
  hasRequiredWalker = 1
  Object.defineProperty(walker, '__esModule', {
    value: true
  })
  walker.GlobStream = walker.GlobWalker = walker.GlobUtil = void 0
  /**
   * Single-use utility classes to provide functionality to the {@link Glob}
   * methods.
   *
   * @module
   */
  const minipass_1 = requireCommonjs$7()
  const ignore_js_1 = requireIgnore()
  const processor_js_1 = requireProcessor()
  const makeIgnore = (ignore, opts) =>
    typeof ignore === 'string'
      ? new ignore_js_1.Ignore([ignore], opts)
      : Array.isArray(ignore)
        ? new ignore_js_1.Ignore(ignore, opts)
        : ignore
  /**
   * basic walking utilities that all the glob walker types use
   */
  class GlobUtil {
    path
    patterns
    opts
    seen = new Set()
    paused = false
    aborted = false
    #onResume = []
    #ignore
    #sep
    signal
    maxDepth
    includeChildMatches
    constructor(patterns, path, opts) {
      this.patterns = patterns
      this.path = path
      this.opts = opts
      this.#sep = !opts.posix && opts.platform === 'win32' ? '\\' : '/'
      this.includeChildMatches = opts.includeChildMatches !== false
      if (opts.ignore || !this.includeChildMatches) {
        this.#ignore = makeIgnore(opts.ignore ?? [], opts)
        if (
          !this.includeChildMatches &&
          typeof this.#ignore.add !== 'function'
        ) {
          const m = 'cannot ignore child matches, ignore lacks add() method.'
          throw new Error(m)
        }
      }
      // ignore, always set with maxDepth, but it's optional on the
      // GlobOptions type
      /* c8 ignore start */
      this.maxDepth = opts.maxDepth || Infinity
      /* c8 ignore stop */
      if (opts.signal) {
        this.signal = opts.signal
        this.signal.addEventListener('abort', () => {
          this.#onResume.length = 0
        })
      }
    }
    #ignored(path) {
      return this.seen.has(path) || !!this.#ignore?.ignored?.(path)
    }
    #childrenIgnored(path) {
      return !!this.#ignore?.childrenIgnored?.(path)
    }
    // backpressure mechanism
    pause() {
      this.paused = true
    }
    resume() {
      /* c8 ignore start */
      if (this.signal?.aborted) {
        return
      }
      /* c8 ignore stop */
      this.paused = false
      let fn = undefined
      while (!this.paused && (fn = this.#onResume.shift())) {
        fn()
      }
    }
    onResume(fn) {
      if (this.signal?.aborted) {
        return
      }
      /* c8 ignore start */
      if (!this.paused) {
        fn()
      } else {
        /* c8 ignore stop */
        this.#onResume.push(fn)
      }
    }
    // do the requisite realpath/stat checking, and return the path
    // to add or undefined to filter it out.
    async matchCheck(e, ifDir) {
      if (ifDir && this.opts.nodir) {
        return undefined
      }
      let rpc
      if (this.opts.realpath) {
        rpc = e.realpathCached() || (await e.realpath())
        if (!rpc) {
          return undefined
        }
        e = rpc
      }
      const needStat = e.isUnknown() || this.opts.stat
      const s = needStat ? await e.lstat() : e
      if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
        const target = await s.realpath()
        /* c8 ignore start */
        if (target && (target.isUnknown() || this.opts.stat)) {
          await target.lstat()
        }
        /* c8 ignore stop */
      }
      return this.matchCheckTest(s, ifDir)
    }
    matchCheckTest(e, ifDir) {
      return e &&
        (this.maxDepth === Infinity || e.depth() <= this.maxDepth) &&
        (!ifDir || e.canReaddir()) &&
        (!this.opts.nodir || !e.isDirectory()) &&
        (!this.opts.nodir ||
          !this.opts.follow ||
          !e.isSymbolicLink() ||
          !e.realpathCached()?.isDirectory()) &&
        !this.#ignored(e)
        ? e
        : undefined
    }
    matchCheckSync(e, ifDir) {
      if (ifDir && this.opts.nodir) {
        return undefined
      }
      let rpc
      if (this.opts.realpath) {
        rpc = e.realpathCached() || e.realpathSync()
        if (!rpc) {
          return undefined
        }
        e = rpc
      }
      const needStat = e.isUnknown() || this.opts.stat
      const s = needStat ? e.lstatSync() : e
      if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
        const target = s.realpathSync()
        if (target && (target?.isUnknown() || this.opts.stat)) {
          target.lstatSync()
        }
      }
      return this.matchCheckTest(s, ifDir)
    }
    matchFinish(e, absolute) {
      if (this.#ignored(e)) {
        return
      }
      // we know we have an ignore if this is false, but TS doesn't
      if (!this.includeChildMatches && this.#ignore?.add) {
        const ign = `${e.relativePosix()}/**`
        this.#ignore.add(ign)
      }
      const abs =
        this.opts.absolute === undefined ? absolute : this.opts.absolute
      this.seen.add(e)
      const mark = this.opts.mark && e.isDirectory() ? this.#sep : ''
      // ok, we have what we need!
      if (this.opts.withFileTypes) {
        this.matchEmit(e)
      } else if (abs) {
        const abs = this.opts.posix ? e.fullpathPosix() : e.fullpath()
        this.matchEmit(abs + mark)
      } else {
        const rel = this.opts.posix ? e.relativePosix() : e.relative()
        const pre =
          this.opts.dotRelative && !rel.startsWith('..' + this.#sep)
            ? '.' + this.#sep
            : ''
        this.matchEmit(!rel ? '.' + mark : pre + rel + mark)
      }
    }
    async match(e, absolute, ifDir) {
      const p = await this.matchCheck(e, ifDir)
      if (p) {
        this.matchFinish(p, absolute)
      }
    }
    matchSync(e, absolute, ifDir) {
      const p = this.matchCheckSync(e, ifDir)
      if (p) {
        this.matchFinish(p, absolute)
      }
    }
    walkCB(target, patterns, cb) {
      /* c8 ignore start */
      if (this.signal?.aborted) {
        cb()
      }
      /* c8 ignore stop */
      this.walkCB2(
        target,
        patterns,
        new processor_js_1.Processor(this.opts),
        cb
      )
    }
    walkCB2(target, patterns, processor, cb) {
      if (this.#childrenIgnored(target)) {
        return cb()
      }
      if (this.signal?.aborted) {
        cb()
      }
      if (this.paused) {
        this.onResume(() => this.walkCB2(target, patterns, processor, cb))
        return
      }
      processor.processPatterns(target, patterns)
      // done processing.  all of the above is sync, can be abstracted out.
      // subwalks is a map of paths to the entry filters they need
      // matches is a map of paths to [absolute, ifDir] tuples.
      let tasks = 1
      const next = () => {
        if (--tasks === 0) {
          cb()
        }
      }
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m)) {
          continue
        }
        tasks++
        this.match(m, absolute, ifDir).then(() => next())
      }
      for (const t of processor.subwalkTargets()) {
        if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
          continue
        }
        tasks++
        const childrenCached = t.readdirCached()
        if (t.calledReaddir()) {
          this.walkCB3(t, childrenCached, processor, next)
        } else {
          t.readdirCB(
            (_, entries) => this.walkCB3(t, entries, processor, next),
            true
          )
        }
      }
      next()
    }
    walkCB3(target, entries, processor, cb) {
      processor = processor.filterEntries(target, entries)
      let tasks = 1
      const next = () => {
        if (--tasks === 0) {
          cb()
        }
      }
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m)) {
          continue
        }
        tasks++
        this.match(m, absolute, ifDir).then(() => next())
      }
      for (const [target, patterns] of processor.subwalks.entries()) {
        tasks++
        this.walkCB2(target, patterns, processor.child(), next)
      }
      next()
    }
    walkCBSync(target, patterns, cb) {
      /* c8 ignore start */
      if (this.signal?.aborted) {
        cb()
      }
      /* c8 ignore stop */
      this.walkCB2Sync(
        target,
        patterns,
        new processor_js_1.Processor(this.opts),
        cb
      )
    }
    walkCB2Sync(target, patterns, processor, cb) {
      if (this.#childrenIgnored(target)) {
        return cb()
      }
      if (this.signal?.aborted) {
        cb()
      }
      if (this.paused) {
        this.onResume(() => this.walkCB2Sync(target, patterns, processor, cb))
        return
      }
      processor.processPatterns(target, patterns)
      // done processing.  all of the above is sync, can be abstracted out.
      // subwalks is a map of paths to the entry filters they need
      // matches is a map of paths to [absolute, ifDir] tuples.
      let tasks = 1
      const next = () => {
        if (--tasks === 0) {
          cb()
        }
      }
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m)) {
          continue
        }
        this.matchSync(m, absolute, ifDir)
      }
      for (const t of processor.subwalkTargets()) {
        if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
          continue
        }
        tasks++
        const children = t.readdirSync()
        this.walkCB3Sync(t, children, processor, next)
      }
      next()
    }
    walkCB3Sync(target, entries, processor, cb) {
      processor = processor.filterEntries(target, entries)
      let tasks = 1
      const next = () => {
        if (--tasks === 0) {
          cb()
        }
      }
      for (const [m, absolute, ifDir] of processor.matches.entries()) {
        if (this.#ignored(m)) {
          continue
        }
        this.matchSync(m, absolute, ifDir)
      }
      for (const [target, patterns] of processor.subwalks.entries()) {
        tasks++
        this.walkCB2Sync(target, patterns, processor.child(), next)
      }
      next()
    }
  }
  walker.GlobUtil = GlobUtil
  class GlobWalker extends GlobUtil {
    matches = new Set()

    matchEmit(e) {
      this.matches.add(e)
    }
    async walk() {
      if (this.signal?.aborted) {
        throw this.signal.reason
      }
      if (this.path.isUnknown()) {
        await this.path.lstat()
      }
      await new Promise((res, rej) => {
        this.walkCB(this.path, this.patterns, () => {
          if (this.signal?.aborted) {
            rej(this.signal.reason)
          } else {
            res(this.matches)
          }
        })
      })
      return this.matches
    }
    walkSync() {
      if (this.signal?.aborted) {
        throw this.signal.reason
      }
      if (this.path.isUnknown()) {
        this.path.lstatSync()
      }
      // nothing for the callback to do, because this never pauses
      this.walkCBSync(this.path, this.patterns, () => {
        if (this.signal?.aborted) {
          throw this.signal.reason
        }
      })
      return this.matches
    }
  }
  walker.GlobWalker = GlobWalker
  class GlobStream extends GlobUtil {
    results
    constructor(patterns, path, opts) {
      super(patterns, path, opts)
      this.results = new minipass_1.Minipass({
        signal: this.signal,
        objectMode: true
      })
      this.results.on('drain', () => this.resume())
      this.results.on('resume', () => this.resume())
    }
    matchEmit(e) {
      this.results.write(e)
      if (!this.results.flowing) {
        this.pause()
      }
    }
    stream() {
      const target = this.path
      if (target.isUnknown()) {
        target.lstat().then(() => {
          this.walkCB(target, this.patterns, () => this.results.end())
        })
      } else {
        this.walkCB(target, this.patterns, () => this.results.end())
      }
      return this.results
    }
    streamSync() {
      if (this.path.isUnknown()) {
        this.path.lstatSync()
      }
      this.walkCBSync(this.path, this.patterns, () => this.results.end())
      return this.results
    }
  }
  walker.GlobStream = GlobStream
  return walker
}

let hasRequiredGlob$2
function requireGlob$2() {
  if (hasRequiredGlob$2) {
    return glob
  }
  hasRequiredGlob$2 = 1
  Object.defineProperty(glob, '__esModule', {
    value: true
  })
  glob.Glob = void 0
  const minimatch_1 = requireCommonjs$8()
  const node_url_1 = require$$0$6
  const path_scurry_1 = requireCommonjs$6()
  const pattern_js_1 = requirePattern()
  const walker_js_1 = requireWalker()
  // if no process global, just call it linux.
  // so we default to case-sensitive, / separators
  const defaultPlatform =
    typeof process === 'object' &&
    process &&
    typeof process.platform === 'string'
      ? process.platform
      : 'linux'
  /**
   * An object that can perform glob pattern traversals.
   */
  class Glob {
    absolute
    cwd
    root
    dot
    dotRelative
    follow
    ignore
    magicalBraces
    mark
    matchBase
    maxDepth
    nobrace
    nocase
    nodir
    noext
    noglobstar
    pattern
    platform
    realpath
    scurry
    stat
    signal
    windowsPathsNoEscape
    withFileTypes
    includeChildMatches
    /**
     * The options provided to the constructor.
     */
    opts
    /**
     * An array of parsed immutable {@link Pattern} objects.
     */
    patterns
    /**
     * All options are stored as properties on the `Glob` object.
     *
     * See {@link GlobOptions} for full options descriptions.
     *
     * Note that a previous `Glob` object can be passed as the
     * `GlobOptions` to another `Glob` instantiation to re-use settings
     * and caches with a new pattern.
     *
     * Traversal functions can be called multiple times to run the walk
     * again.
     */
    constructor(pattern, opts) {
      /* c8 ignore start */
      if (!opts) {
        throw new TypeError('glob options required')
      }
      /* c8 ignore stop */
      this.withFileTypes = !!opts.withFileTypes
      this.signal = opts.signal
      this.follow = !!opts.follow
      this.dot = !!opts.dot
      this.dotRelative = !!opts.dotRelative
      this.nodir = !!opts.nodir
      this.mark = !!opts.mark
      if (!opts.cwd) {
        this.cwd = ''
      } else if (opts.cwd instanceof URL || opts.cwd.startsWith('file://')) {
        opts.cwd = (0, node_url_1.fileURLToPath)(opts.cwd)
      }
      this.cwd = opts.cwd || ''
      this.root = opts.root
      this.magicalBraces = !!opts.magicalBraces
      this.nobrace = !!opts.nobrace
      this.noext = !!opts.noext
      this.realpath = !!opts.realpath
      this.absolute = opts.absolute
      this.includeChildMatches = opts.includeChildMatches !== false
      this.noglobstar = !!opts.noglobstar
      this.matchBase = !!opts.matchBase
      this.maxDepth =
        typeof opts.maxDepth === 'number' ? opts.maxDepth : Infinity
      this.stat = !!opts.stat
      this.ignore = opts.ignore
      if (this.withFileTypes && this.absolute !== undefined) {
        throw new Error('cannot set absolute and withFileTypes:true')
      }
      if (typeof pattern === 'string') {
        pattern = [pattern]
      }
      this.windowsPathsNoEscape =
        !!opts.windowsPathsNoEscape || opts.allowWindowsEscape === false
      if (this.windowsPathsNoEscape) {
        pattern = pattern.map(p => p.replace(/\\/g, '/'))
      }
      if (this.matchBase) {
        if (opts.noglobstar) {
          throw new TypeError('base matching requires globstar')
        }
        pattern = pattern.map(p => (p.includes('/') ? p : `./**/${p}`))
      }
      this.pattern = pattern
      this.platform = opts.platform || defaultPlatform
      this.opts = {
        ...opts,
        platform: this.platform
      }
      if (opts.scurry) {
        this.scurry = opts.scurry
        if (opts.nocase !== undefined && opts.nocase !== opts.scurry.nocase) {
          throw new Error('nocase option contradicts provided scurry option')
        }
      } else {
        const Scurry =
          opts.platform === 'win32'
            ? path_scurry_1.PathScurryWin32
            : opts.platform === 'darwin'
              ? path_scurry_1.PathScurryDarwin
              : opts.platform
                ? path_scurry_1.PathScurryPosix
                : path_scurry_1.PathScurry
        this.scurry = new Scurry(this.cwd, {
          nocase: opts.nocase,
          fs: opts.fs
        })
      }
      this.nocase = this.scurry.nocase
      // If you do nocase:true on a case-sensitive file system, then
      // we need to use regexps instead of strings for non-magic
      // path portions, because statting `aBc` won't return results
      // for the file `AbC` for example.
      const nocaseMagicOnly =
        this.platform === 'darwin' || this.platform === 'win32'
      const mmo = {
        // default nocase based on platform
        ...opts,
        dot: this.dot,
        matchBase: this.matchBase,
        nobrace: this.nobrace,
        nocase: this.nocase,
        nocaseMagicOnly,
        nocomment: true,
        noext: this.noext,
        nonegate: true,
        optimizationLevel: 2,
        platform: this.platform,
        windowsPathsNoEscape: this.windowsPathsNoEscape,
        debug: !!this.opts.debug
      }
      const mms = this.pattern.map(p => new minimatch_1.Minimatch(p, mmo))
      const [matchSet, globParts] = mms.reduce(
        (set, m) => {
          set[0].push(...m.set)
          set[1].push(...m.globParts)
          return set
        },
        [[], []]
      )
      this.patterns = matchSet.map((set, i) => {
        const g = globParts[i]
        /* c8 ignore start */
        if (!g) {
          throw new Error('invalid pattern object')
        }
        /* c8 ignore stop */
        return new pattern_js_1.Pattern(set, g, 0, this.platform)
      })
    }
    async walk() {
      // Walkers always return array of Path objects, so we just have to
      // coerce them into the right shape.  It will have already called
      // realpath() if the option was set to do so, so we know that's cached.
      // start out knowing the cwd, at least
      return [
        ...(await new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {
          ...this.opts,
          maxDepth:
            this.maxDepth !== Infinity
              ? this.maxDepth + this.scurry.cwd.depth()
              : Infinity,
          platform: this.platform,
          nocase: this.nocase,
          includeChildMatches: this.includeChildMatches
        }).walk())
      ]
    }
    walkSync() {
      return [
        ...new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {
          ...this.opts,
          maxDepth:
            this.maxDepth !== Infinity
              ? this.maxDepth + this.scurry.cwd.depth()
              : Infinity,
          platform: this.platform,
          nocase: this.nocase,
          includeChildMatches: this.includeChildMatches
        }).walkSync()
      ]
    }
    stream() {
      return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth:
          this.maxDepth !== Infinity
            ? this.maxDepth + this.scurry.cwd.depth()
            : Infinity,
        platform: this.platform,
        nocase: this.nocase,
        includeChildMatches: this.includeChildMatches
      }).stream()
    }
    streamSync() {
      return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth:
          this.maxDepth !== Infinity
            ? this.maxDepth + this.scurry.cwd.depth()
            : Infinity,
        platform: this.platform,
        nocase: this.nocase,
        includeChildMatches: this.includeChildMatches
      }).streamSync()
    }
    /**
     * Default sync iteration function. Returns a Generator that
     * iterates over the results.
     */
    iterateSync() {
      return this.streamSync()[Symbol.iterator]()
    }
    [Symbol.iterator]() {
      return this.iterateSync()
    }
    /**
     * Default async iteration function. Returns an AsyncGenerator that
     * iterates over the results.
     */
    iterate() {
      return this.stream()[Symbol.asyncIterator]()
    }
    [Symbol.asyncIterator]() {
      return this.iterate()
    }
  }
  glob.Glob = Glob
  return glob
}

const hasMagic = {}

let hasRequiredHasMagic
function requireHasMagic() {
  if (hasRequiredHasMagic) {
    return hasMagic
  }
  hasRequiredHasMagic = 1
  Object.defineProperty(hasMagic, '__esModule', {
    value: true
  })
  hasMagic.hasMagic = void 0
  const minimatch_1 = requireCommonjs$8()
  /**
   * Return true if the patterns provided contain any magic glob characters,
   * given the options provided.
   *
   * Brace expansion is not considered "magic" unless the `magicalBraces` option
   * is set, as brace expansion just turns one string into an array of strings.
   * So a pattern like `'x{a,b}y'` would return `false`, because `'xay'` and
   * `'xby'` both do not contain any magic glob characters, and it's treated the
   * same as if you had called it on `['xay', 'xby']`. When `magicalBraces:true`
   * is in the options, brace expansion _is_ treated as a pattern having magic.
   */
  const hasMagic$1 = (pattern, options = {}) => {
    if (!Array.isArray(pattern)) {
      pattern = [pattern]
    }
    for (const p of pattern) {
      if (new minimatch_1.Minimatch(p, options).hasMagic()) {
        return true
      }
    }
    return false
  }
  hasMagic.hasMagic = hasMagic$1
  return hasMagic
}

let hasRequiredCommonjs$5
function requireCommonjs$5() {
  if (hasRequiredCommonjs$5) {
    return commonjs$8
  }
  hasRequiredCommonjs$5 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.glob =
      exports.sync =
      exports.iterate =
      exports.iterateSync =
      exports.stream =
      exports.streamSync =
      exports.Ignore =
      exports.hasMagic =
      exports.Glob =
      exports.unescape =
      exports.escape =
        void 0
    exports.globStreamSync = globStreamSync
    exports.globStream = globStream
    exports.globSync = globSync
    exports.globIterateSync = globIterateSync
    exports.globIterate = globIterate
    const minimatch_1 = requireCommonjs$8()
    const glob_js_1 = requireGlob$2()
    const has_magic_js_1 = requireHasMagic()
    const minimatch_2 = requireCommonjs$8()
    Object.defineProperty(exports, 'escape', {
      enumerable: true,
      get: function () {
        return minimatch_2.escape
      }
    })
    Object.defineProperty(exports, 'unescape', {
      enumerable: true,
      get: function () {
        return minimatch_2.unescape
      }
    })
    const glob_js_2 = requireGlob$2()
    Object.defineProperty(exports, 'Glob', {
      enumerable: true,
      get: function () {
        return glob_js_2.Glob
      }
    })
    const has_magic_js_2 = requireHasMagic()
    Object.defineProperty(exports, 'hasMagic', {
      enumerable: true,
      get: function () {
        return has_magic_js_2.hasMagic
      }
    })
    const ignore_js_1 = requireIgnore()
    Object.defineProperty(exports, 'Ignore', {
      enumerable: true,
      get: function () {
        return ignore_js_1.Ignore
      }
    })
    function globStreamSync(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).streamSync()
    }
    function globStream(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).stream()
    }
    function globSync(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).walkSync()
    }
    async function glob_(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).walk()
    }
    function globIterateSync(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).iterateSync()
    }
    function globIterate(pattern, options = {}) {
      return new glob_js_1.Glob(pattern, options).iterate()
    }
    // aliases: glob.sync.stream() glob.stream.sync() glob.sync() etc
    exports.streamSync = globStreamSync
    exports.stream = Object.assign(globStream, {
      sync: globStreamSync
    })
    exports.iterateSync = globIterateSync
    exports.iterate = Object.assign(globIterate, {
      sync: globIterateSync
    })
    exports.sync = Object.assign(globSync, {
      stream: globStreamSync,
      iterate: globIterateSync
    })
    exports.glob = Object.assign(glob_, {
      glob: glob_,
      globSync,
      sync: exports.sync,
      globStream,
      stream: exports.stream,
      globStreamSync,
      streamSync: exports.streamSync,
      globIterate,
      iterate: exports.iterate,
      globIterateSync,
      iterateSync: exports.iterateSync,
      Glob: glob_js_1.Glob,
      hasMagic: has_magic_js_1.hasMagic,
      escape: minimatch_1.escape,
      unescape: minimatch_1.unescape
    })
    exports.glob.glob = exports.glob
  })(commonjs$8)
  return commonjs$8
}

const cjs = {}

const posix = {}

let hasRequiredPosix
function requirePosix() {
  if (hasRequiredPosix) {
    return posix
  }
  hasRequiredPosix = 1
  /**
   * This is the Posix implementation of isexe, which uses the file
   * mode and uid/gid values.
   *
   * @module
   */
  Object.defineProperty(posix, '__esModule', {
    value: true
  })
  posix.sync = posix.isexe = void 0
  const fs_1 = require$$0$4
  const promises_1 = require$$0$7
  /**
   * Determine whether a path is executable according to the mode and
   * current (or specified) user and group IDs.
   */
  const isexe = async (path, options = {}) => {
    const { ignoreErrors = false } = options
    try {
      return checkStat(await (0, promises_1.stat)(path), options)
    } catch (e) {
      const er = e
      if (ignoreErrors || er.code === 'EACCES') {
        return false
      }
      throw er
    }
  }
  posix.isexe = isexe
  /**
   * Synchronously determine whether a path is executable according to
   * the mode and current (or specified) user and group IDs.
   */
  const sync = (path, options = {}) => {
    const { ignoreErrors = false } = options
    try {
      return checkStat((0, fs_1.statSync)(path), options)
    } catch (e) {
      const er = e
      if (ignoreErrors || er.code === 'EACCES') {
        return false
      }
      throw er
    }
  }
  posix.sync = sync
  const checkStat = (stat, options) => stat.isFile() && checkMode(stat, options)
  const checkMode = (stat, options) => {
    const myUid = options.uid ?? process.getuid?.()
    const myGroups = options.groups ?? process.getgroups?.() ?? []
    const myGid = options.gid ?? process.getgid?.() ?? myGroups[0]
    if (myUid === undefined || myGid === undefined) {
      throw new Error('cannot get uid or gid')
    }
    const groups = new Set([myGid, ...myGroups])
    const mod = stat.mode
    const uid = stat.uid
    const gid = stat.gid
    const u = parseInt('100', 8)
    const g = parseInt('010', 8)
    const o = parseInt('001', 8)
    const ug = u | g
    return !!(
      mod & o ||
      (mod & g && groups.has(gid)) ||
      (mod & u && uid === myUid) ||
      (mod & ug && myUid === 0)
    )
  }
  return posix
}

const win32 = {}

let hasRequiredWin32
function requireWin32() {
  if (hasRequiredWin32) {
    return win32
  }
  hasRequiredWin32 = 1
  /**
   * This is the Windows implementation of isexe, which uses the file
   * extension and PATHEXT setting.
   *
   * @module
   */
  Object.defineProperty(win32, '__esModule', {
    value: true
  })
  win32.sync = win32.isexe = void 0
  const fs_1 = require$$0$4
  const promises_1 = require$$0$7
  /**
   * Determine whether a path is executable based on the file extension
   * and PATHEXT environment variable (or specified pathExt option)
   */
  const isexe = async (path, options = {}) => {
    const { ignoreErrors = false } = options
    try {
      return checkStat(await (0, promises_1.stat)(path), path, options)
    } catch (e) {
      const er = e
      if (ignoreErrors || er.code === 'EACCES') {
        return false
      }
      throw er
    }
  }
  win32.isexe = isexe
  /**
   * Synchronously determine whether a path is executable based on the file
   * extension and PATHEXT environment variable (or specified pathExt option)
   */
  const sync = (path, options = {}) => {
    const { ignoreErrors = false } = options
    try {
      return checkStat((0, fs_1.statSync)(path), path, options)
    } catch (e) {
      const er = e
      if (ignoreErrors || er.code === 'EACCES') {
        return false
      }
      throw er
    }
  }
  win32.sync = sync
  const checkPathExt = (path, options) => {
    const { pathExt = process.env.PATHEXT || '' } = options
    const peSplit = pathExt.split(';')
    if (peSplit.indexOf('') !== -1) {
      return true
    }
    for (let i = 0; i < peSplit.length; i++) {
      const p = peSplit[i].toLowerCase()
      const ext = path.substring(path.length - p.length).toLowerCase()
      if (p && ext === p) {
        return true
      }
    }
    return false
  }
  const checkStat = (stat, path, options) =>
    stat.isFile() && checkPathExt(path, options)
  return win32
}

const options$2 = {}

let hasRequiredOptions$2
function requireOptions$2() {
  if (hasRequiredOptions$2) {
    return options$2
  }
  hasRequiredOptions$2 = 1
  Object.defineProperty(options$2, '__esModule', {
    value: true
  })
  return options$2
}

let hasRequiredCjs
function requireCjs() {
  if (hasRequiredCjs) {
    return cjs
  }
  hasRequiredCjs = 1
  ;(function (exports) {
    const __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            let desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            o[k2] = m[k]
          })
    const __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', {
              enumerable: true,
              value: v
            })
          }
        : function (o, v) {
            o['default'] = v
          })
    const __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) {
          return mod
        }
        const result = {}
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        }
        __setModuleDefault(result, mod)
        return result
      }
    const __exportStar =
      (this && this.__exportStar) ||
      function (m, exports) {
        for (const p in m) {
          if (
            p !== 'default' &&
            !Object.prototype.hasOwnProperty.call(exports, p)
          )
            __createBinding(exports, m, p)
        }
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.sync = exports.isexe = exports.posix = exports.win32 = void 0
    const posix = __importStar(requirePosix())
    exports.posix = posix
    const win32 = __importStar(requireWin32())
    exports.win32 = win32
    __exportStar(requireOptions$2(), exports)
    const platform = process.env._ISEXE_TEST_PLATFORM_ || process.platform
    const impl = platform === 'win32' ? win32 : posix
    /**
     * Determine whether a path is executable on the current platform.
     */
    exports.isexe = impl.isexe
    /**
     * Synchronously determine whether a path is executable on the
     * current platform.
     */
    exports.sync = impl.sync
  })(cjs)
  return cjs
}

let lib$r
let hasRequiredLib$r
function requireLib$r() {
  if (hasRequiredLib$r) {
    return lib$r
  }
  hasRequiredLib$r = 1
  const { isexe, sync: isexeSync } = requireCjs()
  const { join, delimiter, sep, posix } = require$$1$5
  const isWindows = process.platform === 'win32'

  // used to check for slashed in commands passed in. always checks for the posix
  // seperator on all platforms, and checks for the current separator when not on
  // a posix platform. don't use the isWindows check for this since that is mocked
  // in tests but we still need the code to actually work when called. that is also
  // why it is ignored from coverage.
  /* istanbul ignore next */
  const rSlash = new RegExp(
    `[${posix.sep}${sep === posix.sep ? '' : sep}]`.replace(/(\\)/g, '\\$1')
  )
  const rRel = new RegExp(`^\\.${rSlash.source}`)
  const getNotFoundError = cmd =>
    Object.assign(new Error(`not found: ${cmd}`), {
      code: 'ENOENT'
    })
  const getPathInfo = (
    cmd,
    {
      path: optPath = process.env.PATH,
      pathExt: optPathExt = process.env.PATHEXT,
      delimiter: optDelimiter = delimiter
    }
  ) => {
    // If it has a slash, then we don't bother searching the pathenv.
    // just check the file itself, and that's it.
    const pathEnv = cmd.match(rSlash)
      ? ['']
      : [
          // windows always checks the cwd first
          ...(isWindows ? [process.cwd()] : []),
          ...(optPath || /* istanbul ignore next: very unusual */ '').split(
            optDelimiter
          )
        ]
    if (isWindows) {
      const pathExtExe =
        optPathExt || ['.EXE', '.CMD', '.BAT', '.COM'].join(optDelimiter)
      const pathExt = pathExtExe
        .split(optDelimiter)
        .flatMap(item => [item, item.toLowerCase()])
      if (cmd.includes('.') && pathExt[0] !== '') {
        pathExt.unshift('')
      }
      return {
        pathEnv,
        pathExt,
        pathExtExe
      }
    }
    return {
      pathEnv,
      pathExt: ['']
    }
  }
  const getPathPart = (raw, cmd) => {
    const pathPart = /^".*"$/.test(raw) ? raw.slice(1, -1) : raw
    const prefix = !pathPart && rRel.test(cmd) ? cmd.slice(0, 2) : ''
    return prefix + join(pathPart, cmd)
  }
  const which = async (cmd, opt = {}) => {
    const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)
    const found = []
    for (const envPart of pathEnv) {
      const p = getPathPart(envPart, cmd)
      for (const ext of pathExt) {
        const withExt = p + ext
        const is = await isexe(withExt, {
          pathExt: pathExtExe,
          ignoreErrors: true
        })
        if (is) {
          if (!opt.all) {
            return withExt
          }
          found.push(withExt)
        }
      }
    }
    if (opt.all && found.length) {
      return found
    }
    if (opt.nothrow) {
      return null
    }
    throw getNotFoundError(cmd)
  }
  const whichSync = (cmd, opt = {}) => {
    const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)
    const found = []
    for (const pathEnvPart of pathEnv) {
      const p = getPathPart(pathEnvPart, cmd)
      for (const ext of pathExt) {
        const withExt = p + ext
        const is = isexeSync(withExt, {
          pathExt: pathExtExe,
          ignoreErrors: true
        })
        if (is) {
          if (!opt.all) {
            return withExt
          }
          found.push(withExt)
        }
      }
    }
    if (opt.all && found.length) {
      return found
    }
    if (opt.nothrow) {
      return null
    }
    throw getNotFoundError(cmd)
  }
  lib$r = which
  which.sync = whichSync
  return lib$r
}

let _escape$2
let hasRequired_escape$2
function require_escape$2() {
  if (hasRequired_escape$2) {
    return _escape$2
  }
  hasRequired_escape$2 = 1

  // eslint-disable-next-line max-len
  // this code adapted from: https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/
  const cmd = (input, doubleEscape) => {
    if (!input.length) {
      return '""'
    }
    let result
    if (!/[ \t\n\v"]/.test(input)) {
      result = input
    } else {
      result = '"'
      for (let i = 0; i <= input.length; ++i) {
        let slashCount = 0
        while (input[i] === '\\') {
          ++i
          ++slashCount
        }
        if (i === input.length) {
          result += '\\'.repeat(slashCount * 2)
          break
        }
        if (input[i] === '"') {
          result += '\\'.repeat(slashCount * 2 + 1)
          result += input[i]
        } else {
          result += '\\'.repeat(slashCount)
          result += input[i]
        }
      }
      result += '"'
    }

    // and finally, prefix shell meta chars with a ^
    result = result.replace(/[ !%^&()<>|"]/g, '^$&')
    if (doubleEscape) {
      result = result.replace(/[ !%^&()<>|"]/g, '^$&')
    }
    return result
  }
  const sh = input => {
    if (!input.length) {
      return `''`
    }
    if (!/[\t\n\r "#$&'()*;<>?\\`|~]/.test(input)) {
      return input
    }

    // replace single quotes with '\'' and wrap the whole result in a fresh set of quotes
    const result = `'${input.replace(/'/g, `'\\''`)}'`
      // if the input string already had single quotes around it, clean those up
      .replace(/^(?:'')+(?!$)/, '')
      .replace(/\\'''/g, `\\'`)
    return result
  }
  _escape$2 = {
    cmd,
    sh
  }
  return _escape$2
}

let lib$q
let hasRequiredLib$q
function requireLib$q() {
  if (hasRequiredLib$q) {
    return lib$q
  }
  hasRequiredLib$q = 1
  const { spawn } = require$$0$8
  const os = require$$0$9
  const which = requireLib$r()
  const escape = require_escape$2()

  // 'extra' object is for decorating the error a bit more
  const promiseSpawn = (cmd, args, opts = {}, extra = {}) => {
    if (opts.shell) {
      return spawnWithShell(cmd, args, opts, extra)
    }
    let resolve, reject
    const promise = new Promise((_resolve, _reject) => {
      resolve = _resolve
      reject = _reject
    })

    // Create error here so we have a more useful stack trace when rejecting
    const closeError = new Error('command failed')
    const stdout = []
    const stderr = []
    const getResult = result => ({
      cmd,
      args,
      ...result,
      ...stdioResult(stdout, stderr, opts),
      ...extra
    })
    const rejectWithOpts = (er, erOpts) => {
      const resultError = getResult(erOpts)
      reject(Object.assign(er, resultError))
    }
    const proc = spawn(cmd, args, opts)
    promise.stdin = proc.stdin
    promise.process = proc
    proc.on('error', rejectWithOpts)
    if (proc.stdout) {
      proc.stdout.on('data', c => stdout.push(c))
      proc.stdout.on('error', rejectWithOpts)
    }
    if (proc.stderr) {
      proc.stderr.on('data', c => stderr.push(c))
      proc.stderr.on('error', rejectWithOpts)
    }
    proc.on('close', (code, signal) => {
      if (code || signal) {
        rejectWithOpts(closeError, {
          code,
          signal
        })
      } else {
        resolve(
          getResult({
            code,
            signal
          })
        )
      }
    })
    return promise
  }
  const spawnWithShell = (cmd, args, opts, extra) => {
    let command = opts.shell
    // if shell is set to true, we use a platform default. we can't let the core
    // spawn method decide this for us because we need to know what shell is in use
    // ahead of time so that we can escape arguments properly. we don't need coverage here.
    if (command === true) {
      // istanbul ignore next
      command = process.platform === 'win32' ? process.env.ComSpec : 'sh'
    }
    const options = {
      ...opts,
      shell: false
    }
    const realArgs = []
    let script = cmd

    // first, determine if we're in windows because if we are we need to know if we're
    // running an .exe or a .cmd/.bat since the latter requires extra escaping
    const isCmd = /(?:^|\\)cmd(?:\.exe)?$/i.test(command)
    if (isCmd) {
      let doubleEscape = false

      // find the actual command we're running
      let initialCmd = ''
      let insideQuotes = false
      for (let i = 0; i < cmd.length; ++i) {
        const char = cmd.charAt(i)
        if (char === ' ' && !insideQuotes) {
          break
        }
        initialCmd += char
        if (char === '"' || char === "'") {
          insideQuotes = !insideQuotes
        }
      }
      let pathToInitial
      try {
        pathToInitial = which
          .sync(initialCmd, {
            path:
              (options.env && findInObject(options.env, 'PATH')) ||
              process.env.PATH,
            pathext:
              (options.env && findInObject(options.env, 'PATHEXT')) ||
              process.env.PATHEXT
          })
          .toLowerCase()
      } catch (err) {
        pathToInitial = initialCmd.toLowerCase()
      }
      doubleEscape =
        pathToInitial.endsWith('.cmd') || pathToInitial.endsWith('.bat')
      for (const arg of args) {
        script += ` ${escape.cmd(arg, doubleEscape)}`
      }
      realArgs.push('/d', '/s', '/c', script)
      options.windowsVerbatimArguments = true
    } else {
      for (const arg of args) {
        script += ` ${escape.sh(arg)}`
      }
      realArgs.push('-c', script)
    }
    return promiseSpawn(command, realArgs, options, extra)
  }

  // open a file with the default application as defined by the user's OS
  const open = (_args, opts = {}, extra = {}) => {
    const options = {
      ...opts,
      shell: true
    }
    const args = [].concat(_args)
    let platform = process.platform
    // process.platform === 'linux' may actually indicate WSL, if that's the case
    // open the argument with sensible-browser which is pre-installed
    // In WSL, set the default browser using, for example,
    // export BROWSER="/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"
    // or
    // export BROWSER="/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"
    // To permanently set the default browser, add the appropriate entry to your shell's
    // RC file, e.g. .bashrc or .zshrc.
    if (
      platform === 'linux' &&
      os.release().toLowerCase().includes('microsoft')
    ) {
      platform = 'wsl'
      if (!process.env.BROWSER) {
        return Promise.reject(
          new Error(
            'Set the BROWSER environment variable to your desired browser.'
          )
        )
      }
    }
    let command = options.command
    if (!command) {
      if (platform === 'win32') {
        // spawnWithShell does not do the additional os.release() check, so we
        // have to force the shell here to make sure we treat WSL as windows.
        options.shell = process.env.ComSpec
        // also, the start command accepts a title so to make sure that we don't
        // accidentally interpret the first arg as the title, we stick an empty
        // string immediately after the start command
        command = 'start ""'
      } else if (platform === 'wsl') {
        command = 'sensible-browser'
      } else if (platform === 'darwin') {
        command = 'open'
      } else {
        command = 'xdg-open'
      }
    }
    return spawnWithShell(command, args, options, extra)
  }
  promiseSpawn.open = open
  const isPipe = (stdio = 'pipe', fd) => {
    if (stdio === 'pipe' || stdio === null) {
      return true
    }
    if (Array.isArray(stdio)) {
      return isPipe(stdio[fd], fd)
    }
    return false
  }
  const stdioResult = (stdout, stderr, { stdioString = true, stdio }) => {
    const result = {
      stdout: null,
      stderr: null
    }

    // stdio is [stdin, stdout, stderr]
    if (isPipe(stdio, 1)) {
      result.stdout = Buffer.concat(stdout)
      if (stdioString) {
        result.stdout = result.stdout.toString().trim()
      }
    }
    if (isPipe(stdio, 2)) {
      result.stderr = Buffer.concat(stderr)
      if (stdioString) {
        result.stderr = result.stderr.toString().trim()
      }
    }
    return result
  }

  // case insensitive lookup in an object
  const findInObject = (obj, key) => {
    key = key.toLowerCase()
    for (const objKey of Object.keys(obj).sort()) {
      if (objKey.toLowerCase() === key) {
        return obj[objKey]
      }
    }
  }
  lib$q = promiseSpawn
  return lib$q
}

let errCode
let hasRequiredErrCode
function requireErrCode() {
  if (hasRequiredErrCode) {
    return errCode
  }
  hasRequiredErrCode = 1
  function assign(obj, props) {
    for (const key in props) {
      Object.defineProperty(obj, key, {
        value: props[key],
        enumerable: true,
        configurable: true
      })
    }
    return obj
  }
  function createError(err, code, props) {
    if (!err || typeof err === 'string') {
      throw new TypeError('Please pass an Error to err-code')
    }
    if (!props) {
      props = {}
    }
    if (typeof code === 'object') {
      props = code
      code = undefined
    }
    if (code != null) {
      props.code = code
    }
    try {
      return assign(err, props)
    } catch (_) {
      props.message = err.message
      props.stack = err.stack
      const ErrClass = function () {}
      ErrClass.prototype = Object.create(Object.getPrototypeOf(err))
      return assign(new ErrClass(), props)
    }
  }
  errCode = createError
  return errCode
}

const retry$1 = {}

let retry_operation
let hasRequiredRetry_operation
function requireRetry_operation() {
  if (hasRequiredRetry_operation) {
    return retry_operation
  }
  hasRequiredRetry_operation = 1
  function RetryOperation(timeouts, options) {
    // Compatibility for the old (timeouts, retryForever) signature
    if (typeof options === 'boolean') {
      options = {
        forever: options
      }
    }
    this._originalTimeouts = JSON.parse(JSON.stringify(timeouts))
    this._timeouts = timeouts
    this._options = options || {}
    this._maxRetryTime = (options && options.maxRetryTime) || Infinity
    this._fn = null
    this._errors = []
    this._attempts = 1
    this._operationTimeout = null
    this._operationTimeoutCb = null
    this._timeout = null
    this._operationStart = null
    if (this._options.forever) {
      this._cachedTimeouts = this._timeouts.slice(0)
    }
  }
  retry_operation = RetryOperation
  RetryOperation.prototype.reset = function () {
    this._attempts = 1
    this._timeouts = this._originalTimeouts
  }
  RetryOperation.prototype.stop = function () {
    if (this._timeout) {
      clearTimeout(this._timeout)
    }
    this._timeouts = []
    this._cachedTimeouts = null
  }
  RetryOperation.prototype.retry = function (err) {
    if (this._timeout) {
      clearTimeout(this._timeout)
    }
    if (!err) {
      return false
    }
    const currentTime = new Date().getTime()
    if (err && currentTime - this._operationStart >= this._maxRetryTime) {
      this._errors.unshift(new Error('RetryOperation timeout occurred'))
      return false
    }
    this._errors.push(err)
    let timeout = this._timeouts.shift()
    if (timeout === undefined) {
      if (this._cachedTimeouts) {
        // retry forever, only keep last error
        this._errors.splice(this._errors.length - 1, this._errors.length)
        this._timeouts = this._cachedTimeouts.slice(0)
        timeout = this._timeouts.shift()
      } else {
        return false
      }
    }
    const self = this
    const timer = setTimeout(function () {
      self._attempts++
      if (self._operationTimeoutCb) {
        self._timeout = setTimeout(function () {
          self._operationTimeoutCb(self._attempts)
        }, self._operationTimeout)
        if (self._options.unref) {
          self._timeout.unref()
        }
      }
      self._fn(self._attempts)
    }, timeout)
    if (this._options.unref) {
      timer.unref()
    }
    return true
  }
  RetryOperation.prototype.attempt = function (fn, timeoutOps) {
    this._fn = fn
    if (timeoutOps) {
      if (timeoutOps.timeout) {
        this._operationTimeout = timeoutOps.timeout
      }
      if (timeoutOps.cb) {
        this._operationTimeoutCb = timeoutOps.cb
      }
    }
    const self = this
    if (this._operationTimeoutCb) {
      this._timeout = setTimeout(function () {
        self._operationTimeoutCb()
      }, self._operationTimeout)
    }
    this._operationStart = new Date().getTime()
    this._fn(this._attempts)
  }
  RetryOperation.prototype.try = function (fn) {
    console.log('Using RetryOperation.try() is deprecated')
    this.attempt(fn)
  }
  RetryOperation.prototype.start = function (fn) {
    console.log('Using RetryOperation.start() is deprecated')
    this.attempt(fn)
  }
  RetryOperation.prototype.start = RetryOperation.prototype.try
  RetryOperation.prototype.errors = function () {
    return this._errors
  }
  RetryOperation.prototype.attempts = function () {
    return this._attempts
  }
  RetryOperation.prototype.mainError = function () {
    if (this._errors.length === 0) {
      return null
    }
    const counts = {}
    let mainError = null
    let mainErrorCount = 0
    for (let i = 0; i < this._errors.length; i++) {
      const error = this._errors[i]
      const message = error.message
      const count = (counts[message] || 0) + 1
      counts[message] = count
      if (count >= mainErrorCount) {
        mainError = error
        mainErrorCount = count
      }
    }
    return mainError
  }
  return retry_operation
}

let hasRequiredRetry$1
function requireRetry$1() {
  if (hasRequiredRetry$1) {
    return retry$1
  }
  hasRequiredRetry$1 = 1
  ;(function (exports) {
    const RetryOperation = requireRetry_operation()
    exports.operation = function (options) {
      const timeouts = exports.timeouts(options)
      return new RetryOperation(timeouts, {
        forever: options && options.forever,
        unref: options && options.unref,
        maxRetryTime: options && options.maxRetryTime
      })
    }
    exports.timeouts = function (options) {
      if (options instanceof Array) {
        return [].concat(options)
      }
      const opts = {
        retries: 10,
        factor: 2,
        minTimeout: 1 * 1000,
        maxTimeout: Infinity,
        randomize: false
      }
      for (const key in options) {
        opts[key] = options[key]
      }
      if (opts.minTimeout > opts.maxTimeout) {
        throw new Error('minTimeout is greater than maxTimeout')
      }
      const timeouts = []
      for (var i = 0; i < opts.retries; i++) {
        timeouts.push(this.createTimeout(i, opts))
      }
      if (options && options.forever && !timeouts.length) {
        timeouts.push(this.createTimeout(i, opts))
      }

      // sort the array numerically ascending
      timeouts.sort(function (a, b) {
        return a - b
      })
      return timeouts
    }
    exports.createTimeout = function (attempt, opts) {
      const random = opts.randomize ? Math.random() + 1 : 1
      let timeout = Math.round(
        random * opts.minTimeout * Math.pow(opts.factor, attempt)
      )
      timeout = Math.min(timeout, opts.maxTimeout)
      return timeout
    }
    exports.wrap = function (obj, options, methods) {
      if (options instanceof Array) {
        methods = options
        options = null
      }
      if (!methods) {
        methods = []
        for (const key in obj) {
          if (typeof obj[key] === 'function') {
            methods.push(key)
          }
        }
      }
      for (let i = 0; i < methods.length; i++) {
        const method = methods[i]
        const original = obj[method]
        obj[method] = function retryWrapper(original) {
          const op = exports.operation(options)
          const args = Array.prototype.slice.call(arguments, 1)
          const callback = args.pop()
          args.push(function (err) {
            if (op.retry(err)) {
              return
            }
            if (err) {
              arguments[0] = op.mainError()
            }
            callback.apply(this, arguments)
          })
          op.attempt(function () {
            original.apply(obj, args)
          })
        }.bind(obj, original)
        obj[method].options = options
      }
    }
  })(retry$1)
  return retry$1
}

let retry
let hasRequiredRetry
function requireRetry() {
  if (hasRequiredRetry) {
    return retry
  }
  hasRequiredRetry = 1
  retry = requireRetry$1()
  return retry
}

let promiseRetry_1
let hasRequiredPromiseRetry
function requirePromiseRetry() {
  if (hasRequiredPromiseRetry) {
    return promiseRetry_1
  }
  hasRequiredPromiseRetry = 1
  const errcode = requireErrCode()
  const retry = requireRetry()
  const hasOwn = Object.prototype.hasOwnProperty
  function isRetryError(err) {
    return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried')
  }
  function promiseRetry(fn, options) {
    let temp
    let operation
    if (typeof fn === 'object' && typeof options === 'function') {
      // Swap options and fn when using alternate signature (options, fn)
      temp = options
      options = fn
      fn = temp
    }
    operation = retry.operation(options)
    return new Promise(function (resolve, reject) {
      operation.attempt(function (number) {
        Promise.resolve()
          .then(function () {
            return fn(function (err) {
              if (isRetryError(err)) {
                err = err.retried
              }
              throw errcode(new Error('Retrying'), 'EPROMISERETRY', {
                retried: err
              })
            }, number)
          })
          .then(resolve, function (err) {
            if (isRetryError(err)) {
              err = err.retried
              if (operation.retry(err || new Error())) {
                return
              }
            }
            reject(err)
          })
      })
    })
  }
  promiseRetry_1 = promiseRetry
  return promiseRetry_1
}

let errors$4
let hasRequiredErrors$4
function requireErrors$4() {
  if (hasRequiredErrors$4) {
    return errors$4
  }
  hasRequiredErrors$4 = 1
  const maxRetry = 3
  class GitError extends Error {
    shouldRetry() {
      return false
    }
  }
  class GitConnectionError extends GitError {
    constructor() {
      super('A git connection error occurred')
    }
    shouldRetry(number) {
      return number < maxRetry
    }
  }
  class GitPathspecError extends GitError {
    constructor() {
      super('The git reference could not be found')
    }
  }
  class GitUnknownError extends GitError {
    constructor() {
      super('An unknown git error occurred')
    }
  }
  errors$4 = {
    GitConnectionError,
    GitPathspecError,
    GitUnknownError
  }
  return errors$4
}

let makeError_1
let hasRequiredMakeError
function requireMakeError() {
  if (hasRequiredMakeError) {
    return makeError_1
  }
  hasRequiredMakeError = 1
  const { GitConnectionError, GitPathspecError, GitUnknownError } =
    requireErrors$4()
  const connectionErrorRe = new RegExp(
    [
      'remote error: Internal Server Error',
      'The remote end hung up unexpectedly',
      'Connection timed out',
      'Operation timed out',
      'Failed to connect to .* Timed out',
      'Connection reset by peer',
      'SSL_ERROR_SYSCALL',
      'The requested URL returned error: 503'
    ].join('|')
  )
  const missingPathspecRe =
    /pathspec .* did not match any file\(s\) known to git/
  function makeError(er) {
    const message = er.stderr
    let gitEr
    if (connectionErrorRe.test(message)) {
      gitEr = new GitConnectionError(message)
    } else if (missingPathspecRe.test(message)) {
      gitEr = new GitPathspecError(message)
    } else {
      gitEr = new GitUnknownError(message)
    }
    return Object.assign(gitEr, er)
  }
  makeError_1 = makeError
  return makeError_1
}

const opts = { exports: {} }

let ini
let hasRequiredIni
function requireIni() {
  if (hasRequiredIni) {
    return ini
  }
  hasRequiredIni = 1
  const { hasOwnProperty } = Object.prototype
  const encode = (obj, opt = {}) => {
    if (typeof opt === 'string') {
      opt = {
        section: opt
      }
    }
    opt.align = opt.align === true
    opt.newline = opt.newline === true
    opt.sort = opt.sort === true
    opt.whitespace = opt.whitespace === true || opt.align === true
    // The `typeof` check is required because accessing the `process` directly fails on browsers.
    /* istanbul ignore next */
    opt.platform =
      opt.platform || (typeof process !== 'undefined' && process.platform)
    opt.bracketedArray = opt.bracketedArray !== false

    /* istanbul ignore next */
    const eol = opt.platform === 'win32' ? '\r\n' : '\n'
    const separator = opt.whitespace ? ' = ' : '='
    const children = []
    const keys = opt.sort ? Object.keys(obj).sort() : Object.keys(obj)
    let padToChars = 0
    // If aligning on the separator, then padToChars is determined as follows:
    // 1. Get the keys
    // 2. Exclude keys pointing to objects unless the value is null or an array
    // 3. Add `[]` to array keys
    // 4. Ensure non empty set of keys
    // 5. Reduce the set to the longest `safe` key
    // 6. Get the `safe` length
    if (opt.align) {
      padToChars = safe(
        keys
          .filter(
            k =>
              obj[k] === null ||
              Array.isArray(obj[k]) ||
              typeof obj[k] !== 'object'
          )
          .map(k => (Array.isArray(obj[k]) ? `${k}[]` : k))
          .concat([''])
          .reduce((a, b) => (safe(a).length >= safe(b).length ? a : b))
      ).length
    }
    let out = ''
    const arraySuffix = opt.bracketedArray ? '[]' : ''
    for (const k of keys) {
      const val = obj[k]
      if (val && Array.isArray(val)) {
        for (const item of val) {
          out +=
            safe(`${k}${arraySuffix}`).padEnd(padToChars, ' ') +
            separator +
            safe(item) +
            eol
        }
      } else if (val && typeof val === 'object') {
        children.push(k)
      } else {
        out += safe(k).padEnd(padToChars, ' ') + separator + safe(val) + eol
      }
    }
    if (opt.section && out.length) {
      out =
        '[' + safe(opt.section) + ']' + (opt.newline ? eol + eol : eol) + out
    }
    for (const k of children) {
      const nk = splitSections(k, '.').join('\\.')
      const section = (opt.section ? opt.section + '.' : '') + nk
      const child = encode(obj[k], {
        ...opt,
        section
      })
      if (out.length && child.length) {
        out += eol
      }
      out += child
    }
    return out
  }
  function splitSections(str, separator) {
    let lastMatchIndex = 0
    let lastSeparatorIndex = 0
    let nextIndex = 0
    const sections = []
    do {
      nextIndex = str.indexOf(separator, lastMatchIndex)
      if (nextIndex !== -1) {
        lastMatchIndex = nextIndex + separator.length
        if (nextIndex > 0 && str[nextIndex - 1] === '\\') {
          continue
        }
        sections.push(str.slice(lastSeparatorIndex, nextIndex))
        lastSeparatorIndex = nextIndex + separator.length
      }
    } while (nextIndex !== -1)
    sections.push(str.slice(lastSeparatorIndex))
    return sections
  }
  const decode = (str, opt = {}) => {
    opt.bracketedArray = opt.bracketedArray !== false
    const out = Object.create(null)
    let p = out
    let section = null
    //          section          |key      = value
    const re = /^\[([^\]]*)\]\s*$|^([^=]+)(=(.*))?$/i
    const lines = str.split(/[\r\n]+/g)
    const duplicates = {}
    for (const line of lines) {
      if (!line || line.match(/^\s*[;#]/) || line.match(/^\s*$/)) {
        continue
      }
      const match = line.match(re)
      if (!match) {
        continue
      }
      if (match[1] !== undefined) {
        section = unsafe(match[1])
        if (section === '__proto__') {
          // not allowed
          // keep parsing the section, but don't attach it.
          p = Object.create(null)
          continue
        }
        p = out[section] = out[section] || Object.create(null)
        continue
      }
      const keyRaw = unsafe(match[2])
      let isArray
      if (opt.bracketedArray) {
        isArray = keyRaw.length > 2 && keyRaw.slice(-2) === '[]'
      } else {
        duplicates[keyRaw] = (duplicates?.[keyRaw] || 0) + 1
        isArray = duplicates[keyRaw] > 1
      }
      const key =
        isArray && keyRaw.endsWith('[]') ? keyRaw.slice(0, -2) : keyRaw
      if (key === '__proto__') {
        continue
      }
      const valueRaw = match[3] ? unsafe(match[4]) : true
      const value =
        valueRaw === 'true' || valueRaw === 'false' || valueRaw === 'null'
          ? JSON.parse(valueRaw)
          : valueRaw

      // Convert keys with '[]' suffix to an array
      if (isArray) {
        if (!hasOwnProperty.call(p, key)) {
          p[key] = []
        } else if (!Array.isArray(p[key])) {
          p[key] = [p[key]]
        }
      }

      // safeguard against resetting a previously defined
      // array by accidentally forgetting the brackets
      if (Array.isArray(p[key])) {
        p[key].push(value)
      } else {
        p[key] = value
      }
    }

    // {a:{y:1},"a.b":{x:2}} --> {a:{y:1,b:{x:2}}}
    // use a filter to return the keys that have to be deleted.
    const remove = []
    for (const k of Object.keys(out)) {
      if (
        !hasOwnProperty.call(out, k) ||
        typeof out[k] !== 'object' ||
        Array.isArray(out[k])
      ) {
        continue
      }

      // see if the parent section is also an object.
      // if so, add it to that, and mark this one for deletion
      const parts = splitSections(k, '.')
      p = out
      const l = parts.pop()
      const nl = l.replace(/\\\./g, '.')
      for (const part of parts) {
        if (part === '__proto__') {
          continue
        }
        if (!hasOwnProperty.call(p, part) || typeof p[part] !== 'object') {
          p[part] = Object.create(null)
        }
        p = p[part]
      }
      if (p === out && nl === l) {
        continue
      }
      p[nl] = out[k]
      remove.push(k)
    }
    for (const del of remove) {
      delete out[del]
    }
    return out
  }
  const isQuoted = val => {
    return (
      (val.startsWith('"') && val.endsWith('"')) ||
      (val.startsWith("'") && val.endsWith("'"))
    )
  }
  const safe = val => {
    if (
      typeof val !== 'string' ||
      val.match(/[=\r\n]/) ||
      val.match(/^\[/) ||
      (val.length > 1 && isQuoted(val)) ||
      val !== val.trim()
    ) {
      return JSON.stringify(val)
    }
    return val.split(';').join('\\;').split('#').join('\\#')
  }
  const unsafe = val => {
    val = (val || '').trim()
    if (isQuoted(val)) {
      // remove the single quotes before calling JSON.parse
      if (val.charAt(0) === "'") {
        val = val.slice(1, -1)
      }
      try {
        val = JSON.parse(val)
      } catch {
        // ignore errors
      }
    } else {
      // walk the val to find the first not-escaped ; character
      let esc = false
      let unesc = ''
      for (let i = 0, l = val.length; i < l; i++) {
        const c = val.charAt(i)
        if (esc) {
          if ('\\;#'.indexOf(c) !== -1) {
            unesc += c
          } else {
            unesc += '\\' + c
          }
          esc = false
        } else if (';#'.indexOf(c) !== -1) {
          break
        } else if (c === '\\') {
          esc = true
        } else {
          unesc += c
        }
      }
      if (esc) {
        unesc += '\\'
      }
      return unesc.trim()
    }
    return val
  }
  ini = {
    parse: decode,
    decode,
    stringify: encode,
    encode,
    safe,
    unsafe
  }
  return ini
}

let hasRequiredOpts
function requireOpts() {
  if (hasRequiredOpts) {
    return opts.exports
  }
  hasRequiredOpts = 1
  const fs = require$$4$2
  const os = require$$1$6
  const path = require$$2$3
  const ini = requireIni()
  const gitConfigPath = path.join(os.homedir(), '.gitconfig')
  let cachedConfig = null

  // Function to load and cache the git config
  const loadGitConfig = () => {
    if (cachedConfig === null) {
      try {
        cachedConfig = {}
        if (fs.existsSync(gitConfigPath)) {
          const configContent = fs.readFileSync(gitConfigPath, 'utf-8')
          cachedConfig = ini.parse(configContent)
        }
      } catch (error) {
        cachedConfig = {}
      }
    }
    return cachedConfig
  }
  const checkGitConfigs = () => {
    const config = loadGitConfig()
    return {
      sshCommandSetInConfig: config?.core?.sshCommand !== undefined,
      askPassSetInConfig: config?.core?.askpass !== undefined
    }
  }
  const sshCommandSetInEnv = process.env.GIT_SSH_COMMAND !== undefined
  const askPassSetInEnv = process.env.GIT_ASKPASS !== undefined
  const { sshCommandSetInConfig, askPassSetInConfig } = checkGitConfigs()

  // Values we want to set if they're not already defined by the end user
  // This defaults to accepting new ssh host key fingerprints
  const finalGitEnv = {
    ...(askPassSetInEnv || askPassSetInConfig
      ? {}
      : {
          GIT_ASKPASS: 'echo'
        }),
    ...(sshCommandSetInEnv || sshCommandSetInConfig
      ? {}
      : {
          GIT_SSH_COMMAND: 'ssh -oStrictHostKeyChecking=accept-new'
        })
  }
  opts.exports = (opts = {}) => ({
    stdioString: true,
    ...opts,
    shell: false,
    env: opts.env || {
      ...finalGitEnv,
      ...process.env
    }
  })

  // Export the loadGitConfig function for testing
  opts.exports.loadGitConfig = loadGitConfig
  return opts.exports
}

let which_1
let hasRequiredWhich
function requireWhich() {
  if (hasRequiredWhich) {
    return which_1
  }
  hasRequiredWhich = 1
  const which = requireLib$r()
  let gitPath
  try {
    gitPath = which.sync('git')
  } catch {
    // ignore errors
  }
  which_1 = (opts = {}) => {
    if (opts.git) {
      return opts.git
    }
    if (!gitPath || opts.git === false) {
      return Object.assign(new Error('No git binary found in $PATH'), {
        code: 'ENOGIT'
      })
    }
    return gitPath
  }
  return which_1
}

let spawn_1
let hasRequiredSpawn
function requireSpawn() {
  if (hasRequiredSpawn) {
    return spawn_1
  }
  hasRequiredSpawn = 1
  const spawn = requireLib$q()
  const promiseRetry = requirePromiseRetry()
  const { log } = requireLib$t()
  const makeError = requireMakeError()
  const makeOpts = requireOpts()
  spawn_1 = (gitArgs, opts = {}) => {
    const whichGit = requireWhich()
    const gitPath = whichGit(opts)
    if (gitPath instanceof Error) {
      return Promise.reject(gitPath)
    }

    // undocumented option, mostly only here for tests
    const args =
      opts.allowReplace || gitArgs[0] === '--no-replace-objects'
        ? gitArgs
        : ['--no-replace-objects', ...gitArgs]
    let retryOpts = opts.retry
    if (retryOpts === null || retryOpts === undefined) {
      retryOpts = {
        retries: opts.fetchRetries || 2,
        factor: opts.fetchRetryFactor || 10,
        maxTimeout: opts.fetchRetryMaxtimeout || 60000,
        minTimeout: opts.fetchRetryMintimeout || 1000
      }
    }
    return promiseRetry((retryFn, number) => {
      if (number !== 1) {
        log.silly(
          'git',
          `Retrying git command: ${args.join(' ')} attempt # ${number}`
        )
      }
      return spawn(gitPath, args, makeOpts(opts)).catch(er => {
        const gitError = makeError(er)
        if (!gitError.shouldRetry(number)) {
          throw gitError
        }
        retryFn(gitError)
      })
    }, retryOpts)
  }
  return spawn_1
}

let inc_1
let hasRequiredInc
function requireInc() {
  if (hasRequiredInc) {
    return inc_1
  }
  hasRequiredInc = 1
  const SemVer = requireSemver$1()
  const inc = (version, release, options, identifier, identifierBase) => {
    if (typeof options === 'string') {
      identifierBase = identifier
      identifier = options
      options = undefined
    }
    try {
      return new SemVer(
        version instanceof SemVer ? version.version : version,
        options
      ).inc(release, identifier, identifierBase).version
    } catch (er) {
      return null
    }
  }
  inc_1 = inc
  return inc_1
}

let diff_1
let hasRequiredDiff
function requireDiff() {
  if (hasRequiredDiff) {
    return diff_1
  }
  hasRequiredDiff = 1
  const parse = requireParse$4()
  const diff = (version1, version2) => {
    const v1 = parse(version1, null, true)
    const v2 = parse(version2, null, true)
    const comparison = v1.compare(v2)
    if (comparison === 0) {
      return null
    }
    const v1Higher = comparison > 0
    const highVersion = v1Higher ? v1 : v2
    const lowVersion = v1Higher ? v2 : v1
    const highHasPre = !!highVersion.prerelease.length
    const lowHasPre = !!lowVersion.prerelease.length
    if (lowHasPre && !highHasPre) {
      // Going from prerelease -> no prerelease requires some special casing

      // If the low version has only a major, then it will always be a major
      // Some examples:
      // 1.0.0-1 -> 1.0.0
      // 1.0.0-1 -> 1.1.1
      // 1.0.0-1 -> 2.0.0
      if (!lowVersion.patch && !lowVersion.minor) {
        return 'major'
      }

      // If the main part has no difference
      if (lowVersion.compareMain(highVersion) === 0) {
        if (lowVersion.minor && !lowVersion.patch) {
          return 'minor'
        }
        return 'patch'
      }
    }

    // add the `pre` prefix if we are going to a prerelease version
    const prefix = highHasPre ? 'pre' : ''
    if (v1.major !== v2.major) {
      return prefix + 'major'
    }
    if (v1.minor !== v2.minor) {
      return prefix + 'minor'
    }
    if (v1.patch !== v2.patch) {
      return prefix + 'patch'
    }

    // high and low are preleases
    return 'prerelease'
  }
  diff_1 = diff
  return diff_1
}

let major_1
let hasRequiredMajor
function requireMajor() {
  if (hasRequiredMajor) {
    return major_1
  }
  hasRequiredMajor = 1
  const SemVer = requireSemver$1()
  const major = (a, loose) => new SemVer(a, loose).major
  major_1 = major
  return major_1
}

let minor_1
let hasRequiredMinor
function requireMinor() {
  if (hasRequiredMinor) {
    return minor_1
  }
  hasRequiredMinor = 1
  const SemVer = requireSemver$1()
  const minor = (a, loose) => new SemVer(a, loose).minor
  minor_1 = minor
  return minor_1
}

let patch_1
let hasRequiredPatch
function requirePatch() {
  if (hasRequiredPatch) {
    return patch_1
  }
  hasRequiredPatch = 1
  const SemVer = requireSemver$1()
  const patch = (a, loose) => new SemVer(a, loose).patch
  patch_1 = patch
  return patch_1
}

let prerelease_1
let hasRequiredPrerelease
function requirePrerelease() {
  if (hasRequiredPrerelease) {
    return prerelease_1
  }
  hasRequiredPrerelease = 1
  const parse = requireParse$4()
  const prerelease = (version, options) => {
    const parsed = parse(version, options)
    return parsed && parsed.prerelease.length ? parsed.prerelease : null
  }
  prerelease_1 = prerelease
  return prerelease_1
}

let compare_1
let hasRequiredCompare
function requireCompare() {
  if (hasRequiredCompare) {
    return compare_1
  }
  hasRequiredCompare = 1
  const SemVer = requireSemver$1()
  const compare = (a, b, loose) =>
    new SemVer(a, loose).compare(new SemVer(b, loose))
  compare_1 = compare
  return compare_1
}

let rcompare_1
let hasRequiredRcompare
function requireRcompare() {
  if (hasRequiredRcompare) {
    return rcompare_1
  }
  hasRequiredRcompare = 1
  const compare = requireCompare()
  const rcompare = (a, b, loose) => compare(b, a, loose)
  rcompare_1 = rcompare
  return rcompare_1
}

let compareLoose_1
let hasRequiredCompareLoose
function requireCompareLoose() {
  if (hasRequiredCompareLoose) {
    return compareLoose_1
  }
  hasRequiredCompareLoose = 1
  const compare = requireCompare()
  const compareLoose = (a, b) => compare(a, b, true)
  compareLoose_1 = compareLoose
  return compareLoose_1
}

let compareBuild_1
let hasRequiredCompareBuild
function requireCompareBuild() {
  if (hasRequiredCompareBuild) {
    return compareBuild_1
  }
  hasRequiredCompareBuild = 1
  const SemVer = requireSemver$1()
  const compareBuild = (a, b, loose) => {
    const versionA = new SemVer(a, loose)
    const versionB = new SemVer(b, loose)
    return versionA.compare(versionB) || versionA.compareBuild(versionB)
  }
  compareBuild_1 = compareBuild
  return compareBuild_1
}

let sort_1
let hasRequiredSort$1
function requireSort$1() {
  if (hasRequiredSort$1) {
    return sort_1
  }
  hasRequiredSort$1 = 1
  const compareBuild = requireCompareBuild()
  const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
  sort_1 = sort
  return sort_1
}

let rsort_1
let hasRequiredRsort
function requireRsort() {
  if (hasRequiredRsort) {
    return rsort_1
  }
  hasRequiredRsort = 1
  const compareBuild = requireCompareBuild()
  const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
  rsort_1 = rsort
  return rsort_1
}

let gt_1
let hasRequiredGt
function requireGt() {
  if (hasRequiredGt) {
    return gt_1
  }
  hasRequiredGt = 1
  const compare = requireCompare()
  const gt = (a, b, loose) => compare(a, b, loose) > 0
  gt_1 = gt
  return gt_1
}

let lt_1
let hasRequiredLt
function requireLt() {
  if (hasRequiredLt) {
    return lt_1
  }
  hasRequiredLt = 1
  const compare = requireCompare()
  const lt = (a, b, loose) => compare(a, b, loose) < 0
  lt_1 = lt
  return lt_1
}

let eq_1
let hasRequiredEq
function requireEq() {
  if (hasRequiredEq) {
    return eq_1
  }
  hasRequiredEq = 1
  const compare = requireCompare()
  const eq = (a, b, loose) => compare(a, b, loose) === 0
  eq_1 = eq
  return eq_1
}

let neq_1
let hasRequiredNeq
function requireNeq() {
  if (hasRequiredNeq) {
    return neq_1
  }
  hasRequiredNeq = 1
  const compare = requireCompare()
  const neq = (a, b, loose) => compare(a, b, loose) !== 0
  neq_1 = neq
  return neq_1
}

let gte_1
let hasRequiredGte
function requireGte() {
  if (hasRequiredGte) {
    return gte_1
  }
  hasRequiredGte = 1
  const compare = requireCompare()
  const gte = (a, b, loose) => compare(a, b, loose) >= 0
  gte_1 = gte
  return gte_1
}

let lte_1
let hasRequiredLte
function requireLte() {
  if (hasRequiredLte) {
    return lte_1
  }
  hasRequiredLte = 1
  const compare = requireCompare()
  const lte = (a, b, loose) => compare(a, b, loose) <= 0
  lte_1 = lte
  return lte_1
}

let cmp_1
let hasRequiredCmp
function requireCmp() {
  if (hasRequiredCmp) {
    return cmp_1
  }
  hasRequiredCmp = 1
  const eq = requireEq()
  const neq = requireNeq()
  const gt = requireGt()
  const gte = requireGte()
  const lt = requireLt()
  const lte = requireLte()
  const cmp = (a, op, b, loose) => {
    switch (op) {
      case '===':
        if (typeof a === 'object') {
          a = a.version
        }
        if (typeof b === 'object') {
          b = b.version
        }
        return a === b
      case '!==':
        if (typeof a === 'object') {
          a = a.version
        }
        if (typeof b === 'object') {
          b = b.version
        }
        return a !== b
      case '':
      case '=':
      case '==':
        return eq(a, b, loose)
      case '!=':
        return neq(a, b, loose)
      case '>':
        return gt(a, b, loose)
      case '>=':
        return gte(a, b, loose)
      case '<':
        return lt(a, b, loose)
      case '<=':
        return lte(a, b, loose)
      default:
        throw new TypeError(`Invalid operator: ${op}`)
    }
  }
  cmp_1 = cmp
  return cmp_1
}

let coerce_1
let hasRequiredCoerce
function requireCoerce() {
  if (hasRequiredCoerce) {
    return coerce_1
  }
  hasRequiredCoerce = 1
  const SemVer = requireSemver$1()
  const parse = requireParse$4()
  const { safeRe: re, t } = requireRe()
  const coerce = (version, options) => {
    if (version instanceof SemVer) {
      return version
    }
    if (typeof version === 'number') {
      version = String(version)
    }
    if (typeof version !== 'string') {
      return null
    }
    options = options || {}
    let match = null
    if (!options.rtl) {
      match = version.match(
        options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]
      )
    } else {
      // Find the right-most coercible string that does not share
      // a terminus with a more left-ward coercible string.
      // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
      // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
      //
      // Walk through the string checking with a /g regexp
      // Manually set the index so as to pick up overlapping matches.
      // Stop when we get a match that ends at the string end, since no
      // coercible string can be more right-ward without the same terminus.
      const coerceRtlRegex = options.includePrerelease
        ? re[t.COERCERTLFULL]
        : re[t.COERCERTL]
      let next
      while (
        (next = coerceRtlRegex.exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
      ) {
        if (
          !match ||
          next.index + next[0].length !== match.index + match[0].length
        ) {
          match = next
        }
        coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length
      }
      // leave it in a clean state
      coerceRtlRegex.lastIndex = -1
    }
    if (match === null) {
      return null
    }
    const major = match[2]
    const minor = match[3] || '0'
    const patch = match[4] || '0'
    const prerelease =
      options.includePrerelease && match[5] ? `-${match[5]}` : ''
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''
    return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)
  }
  coerce_1 = coerce
  return coerce_1
}

let lrucache
let hasRequiredLrucache
function requireLrucache() {
  if (hasRequiredLrucache) {
    return lrucache
  }
  hasRequiredLrucache = 1
  class LRUCache {
    constructor() {
      this.max = 1000
      this.map = new Map()
    }
    get(key) {
      const value = this.map.get(key)
      if (value === undefined) {
        return undefined
      } else {
        // Remove the key from the map and add it to the end
        this.map.delete(key)
        this.map.set(key, value)
        return value
      }
    }
    delete(key) {
      return this.map.delete(key)
    }
    set(key, value) {
      const deleted = this.delete(key)
      if (!deleted && value !== undefined) {
        // If cache is full, delete the least recently used item
        if (this.map.size >= this.max) {
          const firstKey = this.map.keys().next().value
          this.delete(firstKey)
        }
        this.map.set(key, value)
      }
      return this
    }
  }
  lrucache = LRUCache
  return lrucache
}

let range
let hasRequiredRange
function requireRange() {
  if (hasRequiredRange) {
    return range
  }
  hasRequiredRange = 1
  const SPACE_CHARACTERS = /\s+/g

  // hoisted class for cyclic dependency
  class Range {
    constructor(range, options) {
      options = parseOptions(options)
      if (range instanceof Range) {
        if (
          range.loose === !!options.loose &&
          range.includePrerelease === !!options.includePrerelease
        ) {
          return range
        } else {
          return new Range(range.raw, options)
        }
      }
      if (range instanceof Comparator) {
        // just put it in the set and return
        this.raw = range.value
        this.set = [[range]]
        this.formatted = undefined
        return this
      }
      this.options = options
      this.loose = !!options.loose
      this.includePrerelease = !!options.includePrerelease

      // First reduce all whitespace as much as possible so we do not have to rely
      // on potentially slow regexes like \s*. This is then stored and used for
      // future error messages as well.
      this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')

      // First, split on ||
      this.set = this.raw
        .split('||')
        // map the range to a 2d array of comparators
        .map(r => this.parseRange(r.trim()))
        // throw out any comparator lists that are empty
        // this generally means that it was not a valid range, which is allowed
        // in loose mode, but will still throw if the WHOLE range is invalid.
        .filter(c => c.length)
      if (!this.set.length) {
        throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
      }

      // if we have any that are not the null set, throw out null sets.
      if (this.set.length > 1) {
        // keep the first one, in case they're all null sets
        const first = this.set[0]
        this.set = this.set.filter(c => !isNullSet(c[0]))
        if (this.set.length === 0) {
          this.set = [first]
        } else if (this.set.length > 1) {
          // if we have any that are *, then the range is just *
          for (const c of this.set) {
            if (c.length === 1 && isAny(c[0])) {
              this.set = [c]
              break
            }
          }
        }
      }
      this.formatted = undefined
    }
    get range() {
      if (this.formatted === undefined) {
        this.formatted = ''
        for (let i = 0; i < this.set.length; i++) {
          if (i > 0) {
            this.formatted += '||'
          }
          const comps = this.set[i]
          for (let k = 0; k < comps.length; k++) {
            if (k > 0) {
              this.formatted += ' '
            }
            this.formatted += comps[k].toString().trim()
          }
        }
      }
      return this.formatted
    }
    format() {
      return this.range
    }
    toString() {
      return this.range
    }
    parseRange(range) {
      // memoize range parsing for performance.
      // this is a very hot path, and fully deterministic.
      const memoOpts =
        (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
        (this.options.loose && FLAG_LOOSE)
      const memoKey = memoOpts + ':' + range
      const cached = cache.get(memoKey)
      if (cached) {
        return cached
      }
      const loose = this.options.loose
      // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
      const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
      range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
      debug('hyphen replace', range)

      // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
      debug('comparator trim', range)

      // `~ 1.2.3` => `~1.2.3`
      range = range.replace(re[t.TILDETRIM], tildeTrimReplace)
      debug('tilde trim', range)

      // `^ 1.2.3` => `^1.2.3`
      range = range.replace(re[t.CARETTRIM], caretTrimReplace)
      debug('caret trim', range)

      // At this point, the range is completely trimmed and
      // ready to be split into comparators.

      let rangeList = range
        .split(' ')
        .map(comp => parseComparator(comp, this.options))
        .join(' ')
        .split(/\s+/)
        // >=0.0.0 is equivalent to *
        .map(comp => replaceGTE0(comp, this.options))
      if (loose) {
        // in loose mode, throw out any that are not valid comparators
        rangeList = rangeList.filter(comp => {
          debug('loose invalid filter', comp, this.options)
          return !!comp.match(re[t.COMPARATORLOOSE])
        })
      }
      debug('range list', rangeList)

      // if any comparators are the null set, then replace with JUST null set
      // if more than one comparator, remove any * comparators
      // also, don't include the same comparator more than once
      const rangeMap = new Map()
      const comparators = rangeList.map(
        comp => new Comparator(comp, this.options)
      )
      for (const comp of comparators) {
        if (isNullSet(comp)) {
          return [comp]
        }
        rangeMap.set(comp.value, comp)
      }
      if (rangeMap.size > 1 && rangeMap.has('')) {
        rangeMap.delete('')
      }
      const result = [...rangeMap.values()]
      cache.set(memoKey, result)
      return result
    }
    intersects(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError('a Range is required')
      }
      return this.set.some(thisComparators => {
        return (
          isSatisfiable(thisComparators, options) &&
          range.set.some(rangeComparators => {
            return (
              isSatisfiable(rangeComparators, options) &&
              thisComparators.every(thisComparator => {
                return rangeComparators.every(rangeComparator => {
                  return thisComparator.intersects(rangeComparator, options)
                })
              })
            )
          })
        )
      })
    }

    // if ANY of the sets match ALL of its comparators, then pass
    test(version) {
      if (!version) {
        return false
      }
      if (typeof version === 'string') {
        try {
          version = new SemVer(version, this.options)
        } catch (er) {
          return false
        }
      }
      for (let i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true
        }
      }
      return false
    }
  }
  range = Range
  const LRU = requireLrucache()
  const cache = new LRU()
  const parseOptions = requireParseOptions()
  const Comparator = requireComparator()
  const debug = requireDebug()
  const SemVer = requireSemver$1()
  const {
    safeRe: re,
    t,
    comparatorTrimReplace,
    tildeTrimReplace,
    caretTrimReplace
  } = requireRe()
  const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = requireConstants$5()
  const isNullSet = c => c.value === '<0.0.0-0'
  const isAny = c => c.value === ''

  // take a set of comparators and determine whether there
  // exists a version which can satisfy it
  const isSatisfiable = (comparators, options) => {
    let result = true
    const remainingComparators = comparators.slice()
    let testComparator = remainingComparators.pop()
    while (result && remainingComparators.length) {
      result = remainingComparators.every(otherComparator => {
        return testComparator.intersects(otherComparator, options)
      })
      testComparator = remainingComparators.pop()
    }
    return result
  }

  // comprised of xranges, tildes, stars, and gtlt's at this point.
  // already replaced the hyphen ranges
  // turn into a set of JUST comparators.
  const parseComparator = (comp, options) => {
    debug('comp', comp, options)
    comp = replaceCarets(comp, options)
    debug('caret', comp)
    comp = replaceTildes(comp, options)
    debug('tildes', comp)
    comp = replaceXRanges(comp, options)
    debug('xrange', comp)
    comp = replaceStars(comp, options)
    debug('stars', comp)
    return comp
  }
  const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

  // ~, ~> --> * (any, kinda silly)
  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
  // ~0.0.1 --> >=0.0.1 <0.1.0-0
  const replaceTildes = (comp, options) => {
    return comp
      .trim()
      .split(/\s+/)
      .map(c => replaceTilde(c, options))
      .join(' ')
  }
  const replaceTilde = (comp, options) => {
    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
    return comp.replace(r, (_, M, m, p, pr) => {
      debug('tilde', comp, _, M, m, p, pr)
      let ret
      if (isX(M)) {
        ret = ''
      } else if (isX(m)) {
        ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
      } else if (isX(p)) {
        // ~1.2 == >=1.2.0 <1.3.0-0
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
      } else if (pr) {
        debug('replaceTilde pr', pr)
        ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`
      } else {
        // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`
      }
      debug('tilde return', ret)
      return ret
    })
  }

  // ^ --> * (any, kinda silly)
  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
  // ^1.2.3 --> >=1.2.3 <2.0.0-0
  // ^1.2.0 --> >=1.2.0 <2.0.0-0
  // ^0.0.1 --> >=0.0.1 <0.0.2-0
  // ^0.1.0 --> >=0.1.0 <0.2.0-0
  const replaceCarets = (comp, options) => {
    return comp
      .trim()
      .split(/\s+/)
      .map(c => replaceCaret(c, options))
      .join(' ')
  }
  const replaceCaret = (comp, options) => {
    debug('caret', comp, options)
    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
    const z = options.includePrerelease ? '-0' : ''
    return comp.replace(r, (_, M, m, p, pr) => {
      debug('caret', comp, _, M, m, p, pr)
      let ret
      if (isX(M)) {
        ret = ''
      } else if (isX(m)) {
        ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
      } else if (isX(p)) {
        if (M === '0') {
          ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
        } else {
          ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
        }
      } else if (pr) {
        debug('replaceCaret pr', pr)
        if (M === '0') {
          if (m === '0') {
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`
          }
        } else {
          ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`
        }
      } else {
        debug('no pr')
        if (M === '0') {
          if (m === '0') {
            ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`
          } else {
            ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`
          }
        } else {
          ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`
        }
      }
      debug('caret return', ret)
      return ret
    })
  }
  const replaceXRanges = (comp, options) => {
    debug('replaceXRanges', comp, options)
    return comp
      .split(/\s+/)
      .map(c => replaceXRange(c, options))
      .join(' ')
  }
  const replaceXRange = (comp, options) => {
    comp = comp.trim()
    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
    return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
      debug('xRange', comp, ret, gtlt, M, m, p, pr)
      const xM = isX(M)
      const xm = xM || isX(m)
      const xp = xm || isX(p)
      const anyX = xp
      if (gtlt === '=' && anyX) {
        gtlt = ''
      }

      // if we're including prereleases in the match, then we need
      // to fix this to -0, the lowest possible prerelease value
      pr = options.includePrerelease ? '-0' : ''
      if (xM) {
        if (gtlt === '>' || gtlt === '<') {
          // nothing is allowed
          ret = '<0.0.0-0'
        } else {
          // nothing is forbidden
          ret = '*'
        }
      } else if (gtlt && anyX) {
        // we know patch is an x, because we have any x at all.
        // replace X with 0
        if (xm) {
          m = 0
        }
        p = 0
        if (gtlt === '>') {
          // >1 => >=2.0.0
          // >1.2 => >=1.3.0
          gtlt = '>='
          if (xm) {
            M = +M + 1
            m = 0
            p = 0
          } else {
            m = +m + 1
            p = 0
          }
        } else if (gtlt === '<=') {
          // <=0.7.x is actually <0.8.0, since any 0.7.x should
          // pass.  Similarly, <=7.x is actually <8.0.0, etc.
          gtlt = '<'
          if (xm) {
            M = +M + 1
          } else {
            m = +m + 1
          }
        }
        if (gtlt === '<') {
          pr = '-0'
        }
        ret = `${gtlt + M}.${m}.${p}${pr}`
      } else if (xm) {
        ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
      } else if (xp) {
        ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`
      }
      debug('xRange return', ret)
      return ret
    })
  }

  // Because * is AND-ed with everything else in the comparator,
  // and '' means "any version", just remove the *s entirely.
  const replaceStars = (comp, options) => {
    debug('replaceStars', comp, options)
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[t.STAR], '')
  }
  const replaceGTE0 = (comp, options) => {
    debug('replaceGTE0', comp, options)
    return comp
      .trim()
      .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
  }

  // This function is passed to string.replace(re[t.HYPHENRANGE])
  // M, m, patch, prerelease, build
  // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
  // 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
  // 1.2 - 3.4 => >=1.2.0 <3.5.0-0
  // TODO build?
  const hyphenReplace =
    incPr => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = ''
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? '-0' : ''}`
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
      } else if (fpr) {
        from = `>=${from}`
      } else {
        from = `>=${from}${incPr ? '-0' : ''}`
      }
      if (isX(tM)) {
        to = ''
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`
      } else {
        to = `<=${to}`
      }
      return `${from} ${to}`.trim()
    }
  const testSet = (set, version, options) => {
    for (let i = 0; i < set.length; i++) {
      if (!set[i].test(version)) {
        return false
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      // Find the set of versions that are allowed to have prereleases
      // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
      // That should allow `1.2.3-pr.2` to pass.
      // However, `1.2.4-alpha.notready` should NOT be allowed,
      // even though it's within the range set by the comparators.
      for (let i = 0; i < set.length; i++) {
        debug(set[i].semver)
        if (set[i].semver === Comparator.ANY) {
          continue
        }
        if (set[i].semver.prerelease.length > 0) {
          const allowed = set[i].semver
          if (
            allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch
          ) {
            return true
          }
        }
      }

      // Version has a -pre, but it's not one of the ones we like.
      return false
    }
    return true
  }
  return range
}

let comparator
let hasRequiredComparator
function requireComparator() {
  if (hasRequiredComparator) {
    return comparator
  }
  hasRequiredComparator = 1
  const ANY = Symbol('SemVer ANY')
  // hoisted class for cyclic dependency
  class Comparator {
    static get ANY() {
      return ANY
    }
    constructor(comp, options) {
      options = parseOptions(options)
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp
        } else {
          comp = comp.value
        }
      }
      comp = comp.trim().split(/\s+/).join(' ')
      debug('comparator', comp, options)
      this.options = options
      this.loose = !!options.loose
      this.parse(comp)
      if (this.semver === ANY) {
        this.value = ''
      } else {
        this.value = this.operator + this.semver.version
      }
      debug('comp', this)
    }
    parse(comp) {
      const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
      const m = comp.match(r)
      if (!m) {
        throw new TypeError(`Invalid comparator: ${comp}`)
      }
      this.operator = m[1] !== undefined ? m[1] : ''
      if (this.operator === '=') {
        this.operator = ''
      }

      // if it literally is just '>' or '' then allow anything.
      if (!m[2]) {
        this.semver = ANY
      } else {
        this.semver = new SemVer(m[2], this.options.loose)
      }
    }
    toString() {
      return this.value
    }
    test(version) {
      debug('Comparator.test', version, this.options.loose)
      if (this.semver === ANY || version === ANY) {
        return true
      }
      if (typeof version === 'string') {
        try {
          version = new SemVer(version, this.options)
        } catch (er) {
          return false
        }
      }
      return cmp(version, this.operator, this.semver, this.options)
    }
    intersects(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError('a Comparator is required')
      }
      if (this.operator === '') {
        if (this.value === '') {
          return true
        }
        return new Range(comp.value, options).test(this.value)
      } else if (comp.operator === '') {
        if (comp.value === '') {
          return true
        }
        return new Range(this.value, options).test(comp.semver)
      }
      options = parseOptions(options)

      // Special cases where nothing can possibly be lower
      if (
        options.includePrerelease &&
        (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')
      ) {
        return false
      }
      if (
        !options.includePrerelease &&
        (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))
      ) {
        return false
      }

      // Same direction increasing (> or >=)
      if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
        return true
      }
      // Same direction decreasing (< or <=)
      if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
        return true
      }
      // same SemVer and both sides are inclusive (<= or >=)
      if (
        this.semver.version === comp.semver.version &&
        this.operator.includes('=') &&
        comp.operator.includes('=')
      ) {
        return true
      }
      // opposite directions less than
      if (
        cmp(this.semver, '<', comp.semver, options) &&
        this.operator.startsWith('>') &&
        comp.operator.startsWith('<')
      ) {
        return true
      }
      // opposite directions greater than
      if (
        cmp(this.semver, '>', comp.semver, options) &&
        this.operator.startsWith('<') &&
        comp.operator.startsWith('>')
      ) {
        return true
      }
      return false
    }
  }
  comparator = Comparator
  const parseOptions = requireParseOptions()
  const { safeRe: re, t } = requireRe()
  const cmp = requireCmp()
  const debug = requireDebug()
  const SemVer = requireSemver$1()
  const Range = requireRange()
  return comparator
}

let satisfies_1
let hasRequiredSatisfies
function requireSatisfies() {
  if (hasRequiredSatisfies) {
    return satisfies_1
  }
  hasRequiredSatisfies = 1
  const Range = requireRange()
  const satisfies = (version, range, options) => {
    try {
      range = new Range(range, options)
    } catch (er) {
      return false
    }
    return range.test(version)
  }
  satisfies_1 = satisfies
  return satisfies_1
}

let toComparators_1
let hasRequiredToComparators
function requireToComparators() {
  if (hasRequiredToComparators) {
    return toComparators_1
  }
  hasRequiredToComparators = 1
  const Range = requireRange()

  // Mostly just for testing and legacy API reasons
  const toComparators = (range, options) =>
    new Range(range, options).set.map(comp =>
      comp
        .map(c => c.value)
        .join(' ')
        .trim()
        .split(' ')
    )
  toComparators_1 = toComparators
  return toComparators_1
}

let maxSatisfying_1
let hasRequiredMaxSatisfying
function requireMaxSatisfying() {
  if (hasRequiredMaxSatisfying) {
    return maxSatisfying_1
  }
  hasRequiredMaxSatisfying = 1
  const SemVer = requireSemver$1()
  const Range = requireRange()
  const maxSatisfying = (versions, range, options) => {
    let max = null
    let maxSV = null
    let rangeObj = null
    try {
      rangeObj = new Range(range, options)
    } catch (er) {
      return null
    }
    versions.forEach(v => {
      if (rangeObj.test(v)) {
        // satisfies(v, range, options)
        if (!max || maxSV.compare(v) === -1) {
          // compare(max, v, true)
          max = v
          maxSV = new SemVer(max, options)
        }
      }
    })
    return max
  }
  maxSatisfying_1 = maxSatisfying
  return maxSatisfying_1
}

let minSatisfying_1
let hasRequiredMinSatisfying
function requireMinSatisfying() {
  if (hasRequiredMinSatisfying) {
    return minSatisfying_1
  }
  hasRequiredMinSatisfying = 1
  const SemVer = requireSemver$1()
  const Range = requireRange()
  const minSatisfying = (versions, range, options) => {
    let min = null
    let minSV = null
    let rangeObj = null
    try {
      rangeObj = new Range(range, options)
    } catch (er) {
      return null
    }
    versions.forEach(v => {
      if (rangeObj.test(v)) {
        // satisfies(v, range, options)
        if (!min || minSV.compare(v) === 1) {
          // compare(min, v, true)
          min = v
          minSV = new SemVer(min, options)
        }
      }
    })
    return min
  }
  minSatisfying_1 = minSatisfying
  return minSatisfying_1
}

let minVersion_1
let hasRequiredMinVersion
function requireMinVersion() {
  if (hasRequiredMinVersion) {
    return minVersion_1
  }
  hasRequiredMinVersion = 1
  const SemVer = requireSemver$1()
  const Range = requireRange()
  const gt = requireGt()
  const minVersion = (range, loose) => {
    range = new Range(range, loose)
    let minver = new SemVer('0.0.0')
    if (range.test(minver)) {
      return minver
    }
    minver = new SemVer('0.0.0-0')
    if (range.test(minver)) {
      return minver
    }
    minver = null
    for (let i = 0; i < range.set.length; ++i) {
      const comparators = range.set[i]
      let setMin = null
      comparators.forEach(comparator => {
        // Clone to avoid manipulating the comparator's semver object.
        const compver = new SemVer(comparator.semver.version)
        switch (comparator.operator) {
          case '>':
            if (compver.prerelease.length === 0) {
              compver.patch++
            } else {
              compver.prerelease.push(0)
            }
            compver.raw = compver.format()
          /* fallthrough */
          case '':
          case '>=':
            if (!setMin || gt(compver, setMin)) {
              setMin = compver
            }
            break
          case '<':
          case '<=':
            /* Ignore maximum versions */
            break
          /* istanbul ignore next */
          default:
            throw new Error(`Unexpected operation: ${comparator.operator}`)
        }
      })
      if (setMin && (!minver || gt(minver, setMin))) {
        minver = setMin
      }
    }
    if (minver && range.test(minver)) {
      return minver
    }
    return null
  }
  minVersion_1 = minVersion
  return minVersion_1
}

let valid
let hasRequiredValid
function requireValid() {
  if (hasRequiredValid) {
    return valid
  }
  hasRequiredValid = 1
  const Range = requireRange()
  const validRange = (range, options) => {
    try {
      // Return '*' instead of '' so that truthiness works.
      // This will throw if it's invalid anyway
      return new Range(range, options).range || '*'
    } catch (er) {
      return null
    }
  }
  valid = validRange
  return valid
}

let outside_1
let hasRequiredOutside
function requireOutside() {
  if (hasRequiredOutside) {
    return outside_1
  }
  hasRequiredOutside = 1
  const SemVer = requireSemver$1()
  const Comparator = requireComparator()
  const { ANY } = Comparator
  const Range = requireRange()
  const satisfies = requireSatisfies()
  const gt = requireGt()
  const lt = requireLt()
  const lte = requireLte()
  const gte = requireGte()
  const outside = (version, range, hilo, options) => {
    version = new SemVer(version, options)
    range = new Range(range, options)
    let gtfn, ltefn, ltfn, comp, ecomp
    switch (hilo) {
      case '>':
        gtfn = gt
        ltefn = lte
        ltfn = lt
        comp = '>'
        ecomp = '>='
        break
      case '<':
        gtfn = lt
        ltefn = gte
        ltfn = gt
        comp = '<'
        ecomp = '<='
        break
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"')
    }

    // If it satisfies the range it is not outside
    if (satisfies(version, range, options)) {
      return false
    }

    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.

    for (let i = 0; i < range.set.length; ++i) {
      const comparators = range.set[i]
      let high = null
      let low = null
      comparators.forEach(comparator => {
        if (comparator.semver === ANY) {
          comparator = new Comparator('>=0.0.0')
        }
        high = high || comparator
        low = low || comparator
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator
        }
      })

      // If the edge version comparator has a operator then our version
      // isn't outside it
      if (high.operator === comp || high.operator === ecomp) {
        return false
      }

      // If the lowest version comparator has an operator and our version
      // is less than it then it isn't higher than the range
      if (
        (!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)
      ) {
        return false
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false
      }
    }
    return true
  }
  outside_1 = outside
  return outside_1
}

let gtr_1
let hasRequiredGtr
function requireGtr() {
  if (hasRequiredGtr) {
    return gtr_1
  }
  hasRequiredGtr = 1

  // Determine if version is greater than all the versions possible in the range.
  const outside = requireOutside()
  const gtr = (version, range, options) => outside(version, range, '>', options)
  gtr_1 = gtr
  return gtr_1
}

let ltr_1
let hasRequiredLtr
function requireLtr() {
  if (hasRequiredLtr) {
    return ltr_1
  }
  hasRequiredLtr = 1
  const outside = requireOutside()
  // Determine if version is less than all the versions possible in the range
  const ltr = (version, range, options) => outside(version, range, '<', options)
  ltr_1 = ltr
  return ltr_1
}

let intersects_1
let hasRequiredIntersects
function requireIntersects() {
  if (hasRequiredIntersects) {
    return intersects_1
  }
  hasRequiredIntersects = 1
  const Range = requireRange()
  const intersects = (r1, r2, options) => {
    r1 = new Range(r1, options)
    r2 = new Range(r2, options)
    return r1.intersects(r2, options)
  }
  intersects_1 = intersects
  return intersects_1
}

let simplify
let hasRequiredSimplify
function requireSimplify() {
  if (hasRequiredSimplify) {
    return simplify
  }
  hasRequiredSimplify = 1

  // given a set of versions and a range, create a "simplified" range
  // that includes the same versions that the original range does
  // If the original range is shorter than the simplified one, return that.
  const satisfies = requireSatisfies()
  const compare = requireCompare()
  simplify = (versions, range, options) => {
    const set = []
    let first = null
    let prev = null
    const v = versions.sort((a, b) => compare(a, b, options))
    for (const version of v) {
      const included = satisfies(version, range, options)
      if (included) {
        prev = version
        if (!first) {
          first = version
        }
      } else {
        if (prev) {
          set.push([first, prev])
        }
        prev = null
        first = null
      }
    }
    if (first) {
      set.push([first, null])
    }
    const ranges = []
    for (const [min, max] of set) {
      if (min === max) {
        ranges.push(min)
      } else if (!max && min === v[0]) {
        ranges.push('*')
      } else if (!max) {
        ranges.push(`>=${min}`)
      } else if (min === v[0]) {
        ranges.push(`<=${max}`)
      } else {
        ranges.push(`${min} - ${max}`)
      }
    }
    const simplified = ranges.join(' || ')
    const original = typeof range.raw === 'string' ? range.raw : String(range)
    return simplified.length < original.length ? simplified : range
  }
  return simplify
}

let subset_1
let hasRequiredSubset
function requireSubset() {
  if (hasRequiredSubset) {
    return subset_1
  }
  hasRequiredSubset = 1
  const Range = requireRange()
  const Comparator = requireComparator()
  const { ANY } = Comparator
  const satisfies = requireSatisfies()
  const compare = requireCompare()

  // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
  // - Every simple range `r1, r2, ...` is a null set, OR
  // - Every simple range `r1, r2, ...` which is not a null set is a subset of
  //   some `R1, R2, ...`
  //
  // Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
  // - If c is only the ANY comparator
  //   - If C is only the ANY comparator, return true
  //   - Else if in prerelease mode, return false
  //   - else replace c with `[>=0.0.0]`
  // - If C is only the ANY comparator
  //   - if in prerelease mode, return true
  //   - else replace C with `[>=0.0.0]`
  // - Let EQ be the set of = comparators in c
  // - If EQ is more than one, return true (null set)
  // - Let GT be the highest > or >= comparator in c
  // - Let LT be the lowest < or <= comparator in c
  // - If GT and LT, and GT.semver > LT.semver, return true (null set)
  // - If any C is a = range, and GT or LT are set, return false
  // - If EQ
  //   - If GT, and EQ does not satisfy GT, return true (null set)
  //   - If LT, and EQ does not satisfy LT, return true (null set)
  //   - If EQ satisfies every C, return true
  //   - Else return false
  // - If GT
  //   - If GT.semver is lower than any > or >= comp in C, return false
  //   - If GT is >=, and GT.semver does not satisfy every C, return false
  //   - If GT.semver has a prerelease, and not in prerelease mode
  //     - If no C has a prerelease and the GT.semver tuple, return false
  // - If LT
  //   - If LT.semver is greater than any < or <= comp in C, return false
  //   - If LT is <=, and LT.semver does not satisfy every C, return false
  //   - If GT.semver has a prerelease, and not in prerelease mode
  //     - If no C has a prerelease and the LT.semver tuple, return false
  // - Else return true

  const subset = (sub, dom, options = {}) => {
    if (sub === dom) {
      return true
    }
    sub = new Range(sub, options)
    dom = new Range(dom, options)
    let sawNonNull = false
    OUTER: for (const simpleSub of sub.set) {
      for (const simpleDom of dom.set) {
        const isSub = simpleSubset(simpleSub, simpleDom, options)
        sawNonNull = sawNonNull || isSub !== null
        if (isSub) {
          continue OUTER
        }
      }
      // the null set is a subset of everything, but null simple ranges in
      // a complex range should be ignored.  so if we saw a non-null range,
      // then we know this isn't a subset, but if EVERY simple range was null,
      // then it is a subset.
      if (sawNonNull) {
        return false
      }
    }
    return true
  }
  const minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]
  const minimumVersion = [new Comparator('>=0.0.0')]
  const simpleSubset = (sub, dom, options) => {
    if (sub === dom) {
      return true
    }
    if (sub.length === 1 && sub[0].semver === ANY) {
      if (dom.length === 1 && dom[0].semver === ANY) {
        return true
      } else if (options.includePrerelease) {
        sub = minimumVersionWithPreRelease
      } else {
        sub = minimumVersion
      }
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
      if (options.includePrerelease) {
        return true
      } else {
        dom = minimumVersion
      }
    }
    const eqSet = new Set()
    let gt, lt
    for (const c of sub) {
      if (c.operator === '>' || c.operator === '>=') {
        gt = higherGT(gt, c, options)
      } else if (c.operator === '<' || c.operator === '<=') {
        lt = lowerLT(lt, c, options)
      } else {
        eqSet.add(c.semver)
      }
    }
    if (eqSet.size > 1) {
      return null
    }
    let gtltComp
    if (gt && lt) {
      gtltComp = compare(gt.semver, lt.semver, options)
      if (gtltComp > 0) {
        return null
      } else if (
        gtltComp === 0 &&
        (gt.operator !== '>=' || lt.operator !== '<=')
      ) {
        return null
      }
    }

    // will iterate one or zero times
    for (const eq of eqSet) {
      if (gt && !satisfies(eq, String(gt), options)) {
        return null
      }
      if (lt && !satisfies(eq, String(lt), options)) {
        return null
      }
      for (const c of dom) {
        if (!satisfies(eq, String(c), options)) {
          return false
        }
      }
      return true
    }
    let higher, lower
    let hasDomLT, hasDomGT
    // if the subset has a prerelease, we need a comparator in the superset
    // with the same tuple and a prerelease, or it's not a subset
    let needDomLTPre =
      lt && !options.includePrerelease && lt.semver.prerelease.length
        ? lt.semver
        : false
    let needDomGTPre =
      gt && !options.includePrerelease && gt.semver.prerelease.length
        ? gt.semver
        : false
    // exception: <1.2.3-0 is the same as <1.2.3
    if (
      needDomLTPre &&
      needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' &&
      needDomLTPre.prerelease[0] === 0
    ) {
      needDomLTPre = false
    }
    for (const c of dom) {
      hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='
      hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='
      if (gt) {
        if (needDomGTPre) {
          if (
            c.semver.prerelease &&
            c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch
          ) {
            needDomGTPre = false
          }
        }
        if (c.operator === '>' || c.operator === '>=') {
          higher = higherGT(gt, c, options)
          if (higher === c && higher !== gt) {
            return false
          }
        } else if (
          gt.operator === '>=' &&
          !satisfies(gt.semver, String(c), options)
        ) {
          return false
        }
      }
      if (lt) {
        if (needDomLTPre) {
          if (
            c.semver.prerelease &&
            c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch
          ) {
            needDomLTPre = false
          }
        }
        if (c.operator === '<' || c.operator === '<=') {
          lower = lowerLT(lt, c, options)
          if (lower === c && lower !== lt) {
            return false
          }
        } else if (
          lt.operator === '<=' &&
          !satisfies(lt.semver, String(c), options)
        ) {
          return false
        }
      }
      if (!c.operator && (lt || gt) && gtltComp !== 0) {
        return false
      }
    }

    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
    if (gt && hasDomLT && !lt && gtltComp !== 0) {
      return false
    }
    if (lt && hasDomGT && !gt && gtltComp !== 0) {
      return false
    }

    // we needed a prerelease range in a specific tuple, but didn't get one
    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
    // because it includes prereleases in the 1.2.3 tuple
    if (needDomGTPre || needDomLTPre) {
      return false
    }
    return true
  }

  // >=1.2.3 is lower than >1.2.3
  const higherGT = (a, b, options) => {
    if (!a) {
      return b
    }
    const comp = compare(a.semver, b.semver, options)
    return comp > 0
      ? a
      : comp < 0
        ? b
        : b.operator === '>' && a.operator === '>='
          ? b
          : a
  }

  // <=1.2.3 is higher than <1.2.3
  const lowerLT = (a, b, options) => {
    if (!a) {
      return b
    }
    const comp = compare(a.semver, b.semver, options)
    return comp < 0
      ? a
      : comp > 0
        ? b
        : b.operator === '<' && a.operator === '<='
          ? b
          : a
  }
  subset_1 = subset
  return subset_1
}

let semver
let hasRequiredSemver
function requireSemver() {
  if (hasRequiredSemver) {
    return semver
  }
  hasRequiredSemver = 1

  // just pre-load all the stuff that index.js lazily exports
  const internalRe = requireRe()
  const constants = requireConstants$5()
  const SemVer = requireSemver$1()
  const identifiers = requireIdentifiers()
  const parse = requireParse$4()
  const valid = requireValid$1()
  const clean = requireClean()
  const inc = requireInc()
  const diff = requireDiff()
  const major = requireMajor()
  const minor = requireMinor()
  const patch = requirePatch()
  const prerelease = requirePrerelease()
  const compare = requireCompare()
  const rcompare = requireRcompare()
  const compareLoose = requireCompareLoose()
  const compareBuild = requireCompareBuild()
  const sort = requireSort$1()
  const rsort = requireRsort()
  const gt = requireGt()
  const lt = requireLt()
  const eq = requireEq()
  const neq = requireNeq()
  const gte = requireGte()
  const lte = requireLte()
  const cmp = requireCmp()
  const coerce = requireCoerce()
  const Comparator = requireComparator()
  const Range = requireRange()
  const satisfies = requireSatisfies()
  const toComparators = requireToComparators()
  const maxSatisfying = requireMaxSatisfying()
  const minSatisfying = requireMinSatisfying()
  const minVersion = requireMinVersion()
  const validRange = requireValid()
  const outside = requireOutside()
  const gtr = requireGtr()
  const ltr = requireLtr()
  const intersects = requireIntersects()
  const simplifyRange = requireSimplify()
  const subset = requireSubset()
  semver = {
    parse,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
  }
  return semver
}

let linesToRevs
let hasRequiredLinesToRevs
function requireLinesToRevs() {
  if (hasRequiredLinesToRevs) {
    return linesToRevs
  }
  hasRequiredLinesToRevs = 1
  // turn an array of lines from `git ls-remote` into a thing
  // vaguely resembling a packument, where docs are a resolved ref

  const semver = requireSemver()
  linesToRevs = lines =>
    finish(
      lines.reduce(linesToRevsReducer, {
        versions: {},
        'dist-tags': {},
        refs: {},
        shas: {}
      })
    )
  const finish = revs => distTags(shaList(peelTags(revs)))

  // We can check out shallow clones on specific SHAs if we have a ref
  const shaList = revs => {
    Object.keys(revs.refs).forEach(ref => {
      const doc = revs.refs[ref]
      if (!revs.shas[doc.sha]) {
        revs.shas[doc.sha] = [ref]
      } else {
        revs.shas[doc.sha].push(ref)
      }
    })
    return revs
  }

  // Replace any tags with their ^{} counterparts, if those exist
  const peelTags = revs => {
    Object.keys(revs.refs)
      .filter(ref => ref.endsWith('^{}'))
      .forEach(ref => {
        const peeled = revs.refs[ref]
        const unpeeled = revs.refs[ref.replace(/\^\{\}$/, '')]
        if (unpeeled) {
          unpeeled.sha = peeled.sha
          delete revs.refs[ref]
        }
      })
    return revs
  }
  const distTags = revs => {
    // not entirely sure what situations would result in an
    // ichabod repo, but best to be careful in Sleepy Hollow anyway
    const HEAD = revs.refs.HEAD || /* istanbul ignore next */ {}
    const versions = Object.keys(revs.versions)
    versions.forEach(v => {
      // simulate a dist-tags with latest pointing at the
      // 'latest' branch if one exists and is a version,
      // or HEAD if not.
      const ver = revs.versions[v]
      if (revs.refs.latest && ver.sha === revs.refs.latest.sha) {
        revs['dist-tags'].latest = v
      } else if (ver.sha === HEAD.sha) {
        revs['dist-tags'].HEAD = v
        if (!revs.refs.latest) {
          revs['dist-tags'].latest = v
        }
      }
    })
    return revs
  }
  const refType = ref => {
    if (ref.startsWith('refs/tags/')) {
      return 'tag'
    }
    if (ref.startsWith('refs/heads/')) {
      return 'branch'
    }
    if (ref.startsWith('refs/pull/')) {
      return 'pull'
    }
    if (ref === 'HEAD') {
      return 'head'
    }
    // Could be anything, ignore for now
    /* istanbul ignore next */
    return 'other'
  }

  // return the doc, or null if we should ignore it.
  const lineToRevDoc = line => {
    const split = line.trim().split(/\s+/, 2)
    if (split.length < 2) {
      return null
    }
    const sha = split[0].trim()
    const rawRef = split[1].trim()
    const type = refType(rawRef)
    if (type === 'tag') {
      // refs/tags/foo^{} is the 'peeled tag', ie the commit
      // that is tagged by refs/tags/foo they resolve to the same
      // content, just different objects in git's data structure.
      // But, we care about the thing the tag POINTS to, not the tag
      // object itself, so we only look at the peeled tag refs, and
      // ignore the pointer.
      // For now, though, we have to save both, because some tags
      // don't have peels, if they were not annotated.
      const ref = rawRef.slice('refs/tags/'.length)
      return {
        sha,
        ref,
        rawRef,
        type
      }
    }
    if (type === 'branch') {
      const ref = rawRef.slice('refs/heads/'.length)
      return {
        sha,
        ref,
        rawRef,
        type
      }
    }
    if (type === 'pull') {
      // NB: merged pull requests installable with #pull/123/merge
      // for the merged pr, or #pull/123 for the PR head
      const ref = rawRef.slice('refs/'.length).replace(/\/head$/, '')
      return {
        sha,
        ref,
        rawRef,
        type
      }
    }
    if (type === 'head') {
      const ref = 'HEAD'
      return {
        sha,
        ref,
        rawRef,
        type
      }
    }

    // at this point, all we can do is leave the ref un-munged
    return {
      sha,
      ref: rawRef,
      rawRef,
      type
    }
  }
  const linesToRevsReducer = (revs, line) => {
    const doc = lineToRevDoc(line)
    if (!doc) {
      return revs
    }
    revs.refs[doc.ref] = doc
    revs.refs[doc.rawRef] = doc
    if (doc.type === 'tag') {
      // try to pull a semver value out of tags like `release-v1.2.3`
      // which is a pretty common pattern.
      const match =
        !doc.ref.endsWith('^{}') &&
        doc.ref.match(/v?(\d+\.\d+\.\d+(?:[-+].+)?)$/)
      if (match && semver.valid(match[1], true)) {
        revs.versions[semver.clean(match[1], true)] = doc
      }
    }
    return revs
  }
  return linesToRevs
}

let revs
let hasRequiredRevs
function requireRevs() {
  if (hasRequiredRevs) {
    return revs
  }
  hasRequiredRevs = 1
  const spawn = requireSpawn()
  const { LRUCache } = /*@__PURE__*/ requireCommonjs$9()
  const linesToRevs = requireLinesToRevs()
  const revsCache = new LRUCache({
    max: 100,
    ttl: 5 * 60 * 1000
  })
  revs = async (repo, opts = {}) => {
    if (!opts.noGitRevCache) {
      const cached = revsCache.get(repo)
      if (cached) {
        return cached
      }
    }
    const { stdout } = await spawn(['ls-remote', repo], opts)
    const revs = linesToRevs(stdout.trim().split('\n'))
    revsCache.set(repo, revs)
    return revs
  }
  return revs
}

const utils$3 = {}

let hasRequiredUtils$3
function requireUtils$3() {
  if (hasRequiredUtils$3) {
    return utils$3
  }
  hasRequiredUtils$3 = 1
  const isWindows = opts => (opts.fakePlatform || process.platform) === 'win32'
  utils$3.isWindows = isWindows
  return utils$3
}

const npa$2 = { exports: {} }

let lib$p
let hasRequiredLib$p
function requireLib$p() {
  if (hasRequiredLib$p) {
    return lib$p
  }
  hasRequiredLib$p = 1
  const { builtinModules: builtins } = require$$0$a
  const scopedPackagePattern = new RegExp('^(?:@([^/]+?)[/])?([^/]+?)$')
  const exclusionList = ['node_modules', 'favicon.ico']
  function validate(name) {
    const warnings = []
    const errors = []
    if (name === null) {
      errors.push('name cannot be null')
      return done(warnings, errors)
    }
    if (name === undefined) {
      errors.push('name cannot be undefined')
      return done(warnings, errors)
    }
    if (typeof name !== 'string') {
      errors.push('name must be a string')
      return done(warnings, errors)
    }
    if (!name.length) {
      errors.push('name length must be greater than zero')
    }
    if (name.startsWith('.')) {
      errors.push('name cannot start with a period')
    }
    if (name.match(/^_/)) {
      errors.push('name cannot start with an underscore')
    }
    if (name.trim() !== name) {
      errors.push('name cannot contain leading or trailing spaces')
    }

    // No funny business
    exclusionList.forEach(function (excludedName) {
      if (name.toLowerCase() === excludedName) {
        errors.push(excludedName + ' is not a valid package name')
      }
    })

    // Generate warnings for stuff that used to be allowed

    // core module names like http, events, util, etc
    if (builtins.includes(name.toLowerCase())) {
      warnings.push(name + ' is a core module name')
    }
    if (name.length > 214) {
      warnings.push('name can no longer contain more than 214 characters')
    }

    // mIxeD CaSe nAMEs
    if (name.toLowerCase() !== name) {
      warnings.push('name can no longer contain capital letters')
    }
    if (/[~'!()*]/.test(name.split('/').slice(-1)[0])) {
      warnings.push('name can no longer contain special characters ("~\'!()*")')
    }
    if (encodeURIComponent(name) !== name) {
      // Maybe it's a scoped package name, like @user/package
      const nameMatch = name.match(scopedPackagePattern)
      if (nameMatch) {
        const user = nameMatch[1]
        const pkg = nameMatch[2]
        if (pkg.startsWith('.')) {
          errors.push('name cannot start with a period')
        }
        if (
          encodeURIComponent(user) === user &&
          encodeURIComponent(pkg) === pkg
        ) {
          return done(warnings, errors)
        }
      }
      errors.push('name can only contain URL-friendly characters')
    }
    return done(warnings, errors)
  }
  const done = function (warnings, errors) {
    const result = {
      validForNewPackages: errors.length === 0 && warnings.length === 0,
      validForOldPackages: errors.length === 0,
      warnings: warnings,
      errors: errors
    }
    if (!result.warnings.length) {
      delete result.warnings
    }
    if (!result.errors.length) {
      delete result.errors
    }
    return result
  }
  lib$p = validate
  return lib$p
}

let hasRequiredNpa$2
function requireNpa$2() {
  if (hasRequiredNpa$2) {
    return npa$2.exports
  }
  hasRequiredNpa$2 = 1
  const isWindows = process.platform === 'win32'
  const { URL } = require$$0$6
  // We need to use path/win32 so that we get consistent results in tests, but this also means we need to manually convert backslashes to forward slashes when generating file: urls with paths.
  const path = isWindows ? require$$1$7 : require$$2$3
  const { homedir } = require$$1$6
  const HostedGit = requireLib$s()
  const semver = requireSemver()
  const validatePackageName = requireLib$p()
  const { log } = requireLib$t()
  const hasSlashes = isWindows ? /\\|[/]/ : /[/]/
  const isURL = /^(?:git[+])?[a-z]+:/i
  const isGit = /^[^@]+@[^:.]+\.[^:]+:.+$/i
  const isFileType = /[.](?:tgz|tar.gz|tar)$/i
  const isPortNumber = /:[0-9]+(\/|$)/i
  const isWindowsFile = /^(?:[.]|~[/]|[/\\]|[a-zA-Z]:)/
  const isPosixFile = /^(?:[.]|~[/]|[/]|[a-zA-Z]:)/
  const defaultRegistry = 'https://registry.npmjs.org'
  function npa(arg, where) {
    let name
    let spec
    if (typeof arg === 'object') {
      if (arg instanceof Result && (!where || where === arg.where)) {
        return arg
      } else if (arg.name && arg.rawSpec) {
        return npa.resolve(arg.name, arg.rawSpec, where || arg.where)
      } else {
        return npa(arg.raw, where || arg.where)
      }
    }
    const nameEndsAt = arg.indexOf('@', 1) // Skip possible leading @
    const namePart = nameEndsAt > 0 ? arg.slice(0, nameEndsAt) : arg
    if (isURL.test(arg)) {
      spec = arg
    } else if (isGit.test(arg)) {
      spec = `git+ssh://${arg}`
      // eslint-disable-next-line max-len
    } else if (
      !namePart.startsWith('@') &&
      (hasSlashes.test(namePart) || isFileType.test(namePart))
    ) {
      spec = arg
    } else if (nameEndsAt > 0) {
      name = namePart
      spec = arg.slice(nameEndsAt + 1) || '*'
    } else {
      const valid = validatePackageName(arg)
      if (valid.validForOldPackages) {
        name = arg
        spec = '*'
      } else {
        spec = arg
      }
    }
    return resolve(name, spec, where, arg)
  }
  function isFileSpec(spec) {
    if (!spec) {
      return false
    }
    if (spec.toLowerCase().startsWith('file:')) {
      return true
    }
    if (isWindows) {
      return isWindowsFile.test(spec)
    }
    // We never hit this in windows tests, obviously
    /* istanbul ignore next */
    return isPosixFile.test(spec)
  }
  function isAliasSpec(spec) {
    if (!spec) {
      return false
    }
    return spec.toLowerCase().startsWith('npm:')
  }
  function resolve(name, spec, where, arg) {
    const res = new Result({
      raw: arg,
      name: name,
      rawSpec: spec,
      fromArgument: arg != null
    })
    if (name) {
      res.name = name
    }
    if (!where) {
      where = process.cwd()
    }
    if (isFileSpec(spec)) {
      return fromFile(res, where)
    } else if (isAliasSpec(spec)) {
      return fromAlias(res, where)
    }
    const hosted = HostedGit.fromUrl(spec, {
      noGitPlus: true,
      noCommittish: true
    })
    if (hosted) {
      return fromHostedGit(res, hosted)
    } else if (spec && isURL.test(spec)) {
      return fromURL(res)
    } else if (spec && (hasSlashes.test(spec) || isFileType.test(spec))) {
      return fromFile(res, where)
    } else {
      return fromRegistry(res)
    }
  }
  function toPurl(arg, reg = defaultRegistry) {
    const res = npa(arg)
    if (res.type !== 'version') {
      throw invalidPurlType(res.type, res.raw)
    }

    // URI-encode leading @ of scoped packages
    let purl = 'pkg:npm/' + res.name.replace(/^@/, '%40') + '@' + res.rawSpec
    if (reg !== defaultRegistry) {
      purl += '?repository_url=' + reg
    }
    return purl
  }
  function invalidPackageName(name, valid, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid package name "${name}" of package "${raw}": ${valid.errors.join('; ')}.`
    )
    err.code = 'EINVALIDPACKAGENAME'
    return err
  }
  function invalidTagName(name, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid tag name "${name}" of package "${raw}": Tags may not have any characters that encodeURIComponent encodes.`
    )
    err.code = 'EINVALIDTAGNAME'
    return err
  }
  function invalidPurlType(type, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid type "${type}" of package "${raw}": Purl can only be generated for "version" types.`
    )
    err.code = 'EINVALIDPURLTYPE'
    return err
  }
  class Result {
    constructor(opts) {
      this.type = opts.type
      this.registry = opts.registry
      this.where = opts.where
      if (opts.raw == null) {
        this.raw = opts.name ? `${opts.name}@${opts.rawSpec}` : opts.rawSpec
      } else {
        this.raw = opts.raw
      }
      this.name = undefined
      this.escapedName = undefined
      this.scope = undefined
      this.rawSpec = opts.rawSpec || ''
      this.saveSpec = opts.saveSpec
      this.fetchSpec = opts.fetchSpec
      if (opts.name) {
        this.setName(opts.name)
      }
      this.gitRange = opts.gitRange
      this.gitCommittish = opts.gitCommittish
      this.gitSubdir = opts.gitSubdir
      this.hosted = opts.hosted
    }

    // TODO move this to a getter/setter in a semver major
    setName(name) {
      const valid = validatePackageName(name)
      if (!valid.validForOldPackages) {
        throw invalidPackageName(name, valid, this.raw)
      }
      this.name = name
      this.scope =
        name[0] === '@' ? name.slice(0, name.indexOf('/')) : undefined
      // scoped packages in couch must have slash url-encoded, e.g. @foo%2Fbar
      this.escapedName = name.replace('/', '%2f')
      return this
    }
    toString() {
      const full = []
      if (this.name != null && this.name !== '') {
        full.push(this.name)
      }
      const spec = this.saveSpec || this.fetchSpec || this.rawSpec
      if (spec != null && spec !== '') {
        full.push(spec)
      }
      return full.length ? full.join('@') : this.raw
    }
    toJSON() {
      const result = Object.assign({}, this)
      delete result.hosted
      return result
    }
  }

  // sets res.gitCommittish, res.gitRange, and res.gitSubdir
  function setGitAttrs(res, committish) {
    if (!committish) {
      res.gitCommittish = null
      return
    }

    // for each :: separated item:
    for (const part of committish.split('::')) {
      // if the item has no : the n it is a commit-ish
      if (!part.includes(':')) {
        if (res.gitRange) {
          throw new Error(
            'cannot override existing semver range with a committish'
          )
        }
        if (res.gitCommittish) {
          throw new Error(
            'cannot override existing committish with a second committish'
          )
        }
        res.gitCommittish = part
        continue
      }
      // split on name:value
      const [name, value] = part.split(':')
      // if name is semver do semver lookup of ref or tag
      if (name === 'semver') {
        if (res.gitCommittish) {
          throw new Error(
            'cannot override existing committish with a semver range'
          )
        }
        if (res.gitRange) {
          throw new Error(
            'cannot override existing semver range with a second semver range'
          )
        }
        res.gitRange = decodeURIComponent(value)
        continue
      }
      if (name === 'path') {
        if (res.gitSubdir) {
          throw new Error('cannot override existing path with a second path')
        }
        res.gitSubdir = `/${value}`
        continue
      }
      log.warn('npm-package-arg', `ignoring unknown key "${name}"`)
    }
  }

  // Taken from: EncodePathChars and lookup_table in src/node_url.cc
  // url.pathToFileURL only returns absolute references.  We can't use it to encode paths.
  // encodeURI mangles windows paths. We can't use it to encode paths.
  // Under the hood, url.pathToFileURL does a limited set of encoding, with an extra windows step, and then calls path.resolve.
  // The encoding node does without path.resolve is not available outside of the source, so we are recreating it here.
  const encodedPathChars = new Map([
    ['\0', '%00'],
    ['\t', '%09'],
    ['\n', '%0A'],
    ['\r', '%0D'],
    [' ', '%20'],
    ['"', '%22'],
    ['#', '%23'],
    ['%', '%25'],
    ['?', '%3F'],
    ['[', '%5B'],
    ['\\', isWindows ? '/' : '%5C'],
    [']', '%5D'],
    ['^', '%5E'],
    ['|', '%7C'],
    ['~', '%7E']
  ])
  function pathToFileURL(str) {
    let result = ''
    for (let i = 0; i < str.length; i++) {
      result = `${result}${encodedPathChars.get(str[i]) ?? str[i]}`
    }
    if (result.startsWith('file:')) {
      return result
    }
    return `file:${result}`
  }
  function fromFile(res, where) {
    res.type = isFileType.test(res.rawSpec) ? 'file' : 'directory'
    res.where = where
    let rawSpec = pathToFileURL(res.rawSpec)
    if (rawSpec.startsWith('file:/')) {
      // XXX backwards compatibility lack of compliance with RFC 8089

      // turn file://path into file:/path
      if (/^file:\/\/[^/]/.test(rawSpec)) {
        rawSpec = `file:/${rawSpec.slice(5)}`
      }

      // turn file:/../path into file:../path
      // for 1 or 3 leading slashes (2 is already ruled out from handling file:// explicitly above)
      if (/^\/{1,3}\.\.?(\/|$)/.test(rawSpec.slice(5))) {
        rawSpec = rawSpec.replace(/^file:\/{1,3}/, 'file:')
      }
    }
    let resolvedUrl
    let specUrl
    try {
      // always put the '/' on "where", or else file:foo from /path/to/bar goes to /path/to/foo, when we want it to be /path/to/bar/foo
      resolvedUrl = new URL(rawSpec, `${pathToFileURL(path.resolve(where))}/`)
      specUrl = new URL(rawSpec)
    } catch (originalError) {
      const er = new Error('Invalid file: URL, must comply with RFC 8089')
      throw Object.assign(er, {
        raw: res.rawSpec,
        spec: res,
        where,
        originalError
      })
    }

    // turn /C:/blah into just C:/blah on windows
    let specPath = decodeURIComponent(specUrl.pathname)
    let resolvedPath = decodeURIComponent(resolvedUrl.pathname)
    if (isWindows) {
      specPath = specPath.replace(/^\/+([a-z]:\/)/i, '$1')
      resolvedPath = resolvedPath.replace(/^\/+([a-z]:\/)/i, '$1')
    }

    // replace ~ with homedir, but keep the ~ in the saveSpec
    // otherwise, make it relative to where param
    if (/^\/~(\/|$)/.test(specPath)) {
      res.saveSpec = `file:${specPath.substr(1)}`
      resolvedPath = path.resolve(homedir(), specPath.substr(3))
    } else if (!path.isAbsolute(rawSpec.slice(5))) {
      res.saveSpec = `file:${path.relative(where, resolvedPath)}`
    } else {
      res.saveSpec = `file:${path.resolve(resolvedPath)}`
    }
    res.fetchSpec = path.resolve(where, resolvedPath)
    // re-normalize the slashes in saveSpec due to node:path/win32 behavior in windows
    res.saveSpec = res.saveSpec.split('\\').join('/')
    // Ignoring because this only happens in windows
    /* istanbul ignore next */
    if (res.saveSpec.startsWith('file://')) {
      // normalization of \\win32\root paths can cause a double / which we don't want
      res.saveSpec = `file:/${res.saveSpec.slice(7)}`
    }
    return res
  }
  function fromHostedGit(res, hosted) {
    res.type = 'git'
    res.hosted = hosted
    res.saveSpec = hosted.toString({
      noGitPlus: false,
      noCommittish: false
    })
    res.fetchSpec =
      hosted.getDefaultRepresentation() === 'shortcut'
        ? null
        : hosted.toString()
    setGitAttrs(res, hosted.committish)
    return res
  }
  function unsupportedURLType(protocol, spec) {
    const err = new Error(`Unsupported URL Type "${protocol}": ${spec}`)
    err.code = 'EUNSUPPORTEDPROTOCOL'
    return err
  }
  function fromURL(res) {
    let rawSpec = res.rawSpec
    res.saveSpec = rawSpec
    if (rawSpec.startsWith('git+ssh:')) {
      // git ssh specifiers are overloaded to also use scp-style git
      // specifiers, so we have to parse those out and treat them special.
      // They are NOT true URIs, so we can't hand them to URL.

      // This regex looks for things that look like:
      // git+ssh://git@my.custom.git.com:username/project.git#deadbeef
      // ...and various combinations. The username in the beginning is *required*.
      const matched = rawSpec.match(
        /^git\+ssh:\/\/([^:#]+:[^#]+(?:\.git)?)(?:#(.*))?$/i
      )
      // Filter out all-number "usernames" which are really port numbers
      // They can either be :1234 :1234/ or :1234/path but not :12abc
      if (matched && !matched[1].match(isPortNumber)) {
        res.type = 'git'
        setGitAttrs(res, matched[2])
        res.fetchSpec = matched[1]
        return res
      }
    } else if (rawSpec.startsWith('git+file://')) {
      // URL can't handle windows paths
      rawSpec = rawSpec.replace(/\\/g, '/')
    }
    const parsedUrl = new URL(rawSpec)
    // check the protocol, and then see if it's git or not
    switch (parsedUrl.protocol) {
      case 'git:':
      case 'git+http:':
      case 'git+https:':
      case 'git+rsync:':
      case 'git+ftp:':
      case 'git+file:':
      case 'git+ssh:':
        res.type = 'git'
        setGitAttrs(res, parsedUrl.hash.slice(1))
        if (
          parsedUrl.protocol === 'git+file:' &&
          /^git\+file:\/\/[a-z]:/i.test(rawSpec)
        ) {
          // URL can't handle drive letters on windows file paths, the host can't contain a :
          res.fetchSpec = `git+file://${parsedUrl.host.toLowerCase()}:${parsedUrl.pathname}`
        } else {
          parsedUrl.hash = ''
          res.fetchSpec = parsedUrl.toString()
        }
        if (res.fetchSpec.startsWith('git+')) {
          res.fetchSpec = res.fetchSpec.slice(4)
        }
        break
      case 'http:':
      case 'https:':
        res.type = 'remote'
        res.fetchSpec = res.saveSpec
        break
      default:
        throw unsupportedURLType(parsedUrl.protocol, rawSpec)
    }
    return res
  }
  function fromAlias(res, where) {
    const subSpec = npa(res.rawSpec.substr(4), where)
    if (subSpec.type === 'alias') {
      throw new Error('nested aliases not supported')
    }
    if (!subSpec.registry) {
      throw new Error('aliases only work for registry deps')
    }
    if (!subSpec.name) {
      throw new Error('aliases must have a name')
    }
    res.subSpec = subSpec
    res.registry = true
    res.type = 'alias'
    res.saveSpec = null
    res.fetchSpec = null
    return res
  }
  function fromRegistry(res) {
    res.registry = true
    const spec = res.rawSpec.trim()
    // no save spec for registry components as we save based on the fetched
    // version, not on the argument so this can't compute that.
    res.saveSpec = null
    res.fetchSpec = spec
    const version = semver.valid(spec, true)
    const range = semver.validRange(spec, true)
    if (version) {
      res.type = 'version'
    } else if (range) {
      res.type = 'range'
    } else {
      if (encodeURIComponent(spec) !== spec) {
        throw invalidTagName(spec, res.raw)
      }
      res.type = 'tag'
    }
    return res
  }
  npa$2.exports = npa
  npa$2.exports.resolve = resolve
  npa$2.exports.toPurl = toPurl
  npa$2.exports.Result = Result
  return npa$2.exports
}

let currentEnv
let hasRequiredCurrentEnv
function requireCurrentEnv() {
  if (hasRequiredCurrentEnv) {
    return currentEnv
  }
  hasRequiredCurrentEnv = 1
  const process = require$$0$b
  const nodeOs = require$$1$6
  const fs = require$$4$2
  function isMusl(file) {
    return file.includes('libc.musl-') || file.includes('ld-musl-')
  }
  function os() {
    return process.platform
  }
  function cpu() {
    return process.arch
  }
  const LDD_PATH = '/usr/bin/ldd'
  function getFamilyFromFilesystem() {
    try {
      const content = fs.readFileSync(LDD_PATH, 'utf-8')
      if (content.includes('musl')) {
        return 'musl'
      }
      if (content.includes('GNU C Library')) {
        return 'glibc'
      }
      return null
    } catch {
      return undefined
    }
  }
  function getFamilyFromReport() {
    const originalExclude = process.report.excludeNetwork
    process.report.excludeNetwork = true
    const report = process.report.getReport()
    process.report.excludeNetwork = originalExclude
    if (report.header?.glibcVersionRuntime) {
      family = 'glibc'
    } else if (
      Array.isArray(report.sharedObjects) &&
      report.sharedObjects.some(isMusl)
    ) {
      family = 'musl'
    } else {
      family = null
    }
    return family
  }
  let family
  function libc(osName) {
    if (osName !== 'linux') {
      return undefined
    }
    if (family === undefined) {
      family = getFamilyFromFilesystem()
      if (family === undefined) {
        family = getFamilyFromReport()
      }
    }
    return family
  }
  function devEngines(env = {}) {
    const osName = env.os || os()
    return {
      cpu: {
        name: env.cpu || cpu()
      },
      libc: {
        name: env.libc || libc(osName)
      },
      os: {
        name: osName,
        version: env.osVersion || nodeOs.release()
      },
      packageManager: {
        name: 'npm',
        version: env.npmVersion
      },
      runtime: {
        name: 'node',
        version: env.nodeVersion || process.version
      }
    }
  }
  currentEnv = {
    cpu,
    libc,
    os,
    devEngines
  }
  return currentEnv
}

let devEngines
let hasRequiredDevEngines
function requireDevEngines() {
  if (hasRequiredDevEngines) {
    return devEngines
  }
  hasRequiredDevEngines = 1
  const satisfies = requireSatisfies()
  const validRange = requireValid()
  const recognizedOnFail = new Set(['ignore', 'warn', 'error', 'download'])
  const recognizedProperties = ['name', 'version', 'onFail']
  const recognizedEngines = ['packageManager', 'runtime', 'cpu', 'libc', 'os']

  /** checks a devEngine dependency */
  function checkDependency(wanted, current, opts) {
    const { engine } = opts
    if (
      typeof wanted !== 'object' ||
      wanted === null ||
      Array.isArray(wanted)
    ) {
      throw new Error(`Invalid non-object value for "${engine}"`)
    }
    const properties = Object.keys(wanted)
    for (const prop of properties) {
      if (!recognizedProperties.includes(prop)) {
        throw new Error(`Invalid property "${prop}" for "${engine}"`)
      }
    }
    if (!properties.includes('name')) {
      throw new Error(`Missing "name" property for "${engine}"`)
    }
    if (typeof wanted.name !== 'string') {
      throw new Error(`Invalid non-string value for "name" within "${engine}"`)
    }
    if (typeof current.name !== 'string' || current.name === '') {
      throw new Error(`Unable to determine "name" for "${engine}"`)
    }
    if (properties.includes('onFail')) {
      if (typeof wanted.onFail !== 'string') {
        throw new Error(
          `Invalid non-string value for "onFail" within "${engine}"`
        )
      }
      if (!recognizedOnFail.has(wanted.onFail)) {
        throw new Error(
          `Invalid onFail value "${wanted.onFail}" for "${engine}"`
        )
      }
    }
    if (wanted.name !== current.name) {
      return new Error(
        `Invalid name "${wanted.name}" does not match "${current.name}" for "${engine}"`
      )
    }
    if (properties.includes('version')) {
      if (typeof wanted.version !== 'string') {
        throw new Error(
          `Invalid non-string value for "version" within "${engine}"`
        )
      }
      if (typeof current.version !== 'string' || current.version === '') {
        throw new Error(
          `Unable to determine "version" for "${engine}" "${wanted.name}"`
        )
      }
      if (validRange(wanted.version)) {
        if (!satisfies(current.version, wanted.version, opts.semver)) {
          return new Error(
            // eslint-disable-next-line max-len
            `Invalid semver version "${wanted.version}" does not match "${current.version}" for "${engine}"`
          )
        }
      } else if (wanted.version !== current.version) {
        return new Error(
          `Invalid version "${wanted.version}" does not match "${current.version}" for "${engine}"`
        )
      }
    }
  }

  /** checks devEngines package property and returns array of warnings / errors */
  function checkDevEngines(wanted, current = {}, opts = {}) {
    if (
      typeof wanted !== 'object' ||
      wanted === null ||
      Array.isArray(wanted)
    ) {
      throw new Error(`Invalid non-object value for devEngines`)
    }
    const errors = []
    for (const engine of Object.keys(wanted)) {
      if (!recognizedEngines.includes(engine)) {
        throw new Error(`Invalid property "${engine}"`)
      }
      const dependencyAsAuthored = wanted[engine]
      const dependencies = [dependencyAsAuthored].flat()
      const currentEngine = current[engine] || {}

      // this accounts for empty array eg { runtime: [] } and ignores it
      if (dependencies.length === 0) {
        continue
      }
      const depErrors = []
      for (const dep of dependencies) {
        const result = checkDependency(dep, currentEngine, {
          ...opts,
          engine
        })
        if (result) {
          depErrors.push(result)
        }
      }
      const invalid = depErrors.length === dependencies.length
      if (invalid) {
        const lastDependency = dependencies[dependencies.length - 1]
        let onFail = lastDependency.onFail || 'error'
        if (onFail === 'download') {
          onFail = 'error'
        }
        const err = Object.assign(new Error(`Invalid engine "${engine}"`), {
          errors: depErrors,
          engine,
          isWarn: onFail === 'warn',
          isError: onFail === 'error',
          current: currentEngine,
          required: dependencyAsAuthored
        })
        errors.push(err)
      }
    }
    return errors
  }
  devEngines = {
    checkDevEngines
  }
  return devEngines
}

let lib$o
let hasRequiredLib$o
function requireLib$o() {
  if (hasRequiredLib$o) {
    return lib$o
  }
  hasRequiredLib$o = 1
  const semver = requireSemver()
  const currentEnv = requireCurrentEnv()
  const { checkDevEngines } = requireDevEngines()
  const checkEngine = (target, npmVer, nodeVer, force = false) => {
    const nodev = force ? null : nodeVer
    const eng = target.engines
    const opt = {
      includePrerelease: true
    }
    if (!eng) {
      return
    }
    const nodeFail =
      nodev && eng.node && !semver.satisfies(nodev, eng.node, opt)
    const npmFail = npmVer && eng.npm && !semver.satisfies(npmVer, eng.npm, opt)
    if (nodeFail || npmFail) {
      throw Object.assign(new Error('Unsupported engine'), {
        pkgid: target._id,
        current: {
          node: nodeVer,
          npm: npmVer
        },
        required: eng,
        code: 'EBADENGINE'
      })
    }
  }
  const checkPlatform = (target, force = false, environment = {}) => {
    if (force) {
      return
    }
    const os = environment.os || currentEnv.os()
    const cpu = environment.cpu || currentEnv.cpu()
    const libc = environment.libc || currentEnv.libc(os)
    const osOk = target.os ? checkList(os, target.os) : true
    const cpuOk = target.cpu ? checkList(cpu, target.cpu) : true
    let libcOk = target.libc ? checkList(libc, target.libc) : true
    if (target.libc && !libc) {
      libcOk = false
    }
    if (!osOk || !cpuOk || !libcOk) {
      throw Object.assign(new Error('Unsupported platform'), {
        pkgid: target._id,
        current: {
          os,
          cpu,
          libc
        },
        required: {
          os: target.os,
          cpu: target.cpu,
          libc: target.libc
        },
        code: 'EBADPLATFORM'
      })
    }
  }
  const checkList = (value, list) => {
    if (typeof list === 'string') {
      list = [list]
    }
    if (list.length === 1 && list[0] === 'any') {
      return true
    }
    // match none of the negated values, and at least one of the
    // non-negated values, if any are present.
    let negated = 0
    let match = false
    for (const entry of list) {
      const negate = entry.charAt(0) === '!'
      const test = negate ? entry.slice(1) : entry
      if (negate) {
        negated++
        if (value === test) {
          return false
        }
      } else {
        match = match || value === test
      }
    }
    return match || negated === list.length
  }
  lib$o = {
    checkEngine,
    checkPlatform,
    checkDevEngines,
    currentEnv
  }
  return lib$o
}

let lib$n
let hasRequiredLib$n
function requireLib$n() {
  if (hasRequiredLib$n) {
    return lib$n
  }
  hasRequiredLib$n = 1
  // pass in a manifest with a 'bin' field here, and it'll turn it
  // into a properly santized bin object
  const { join, basename } = require$$1$5
  const normalize = pkg =>
    !pkg.bin
      ? removeBin(pkg)
      : typeof pkg.bin === 'string'
        ? normalizeString(pkg)
        : Array.isArray(pkg.bin)
          ? normalizeArray(pkg)
          : typeof pkg.bin === 'object'
            ? normalizeObject(pkg)
            : removeBin(pkg)
  const normalizeString = pkg => {
    if (!pkg.name) {
      return removeBin(pkg)
    }
    pkg.bin = {
      [pkg.name]: pkg.bin
    }
    return normalizeObject(pkg)
  }
  const normalizeArray = pkg => {
    pkg.bin = pkg.bin.reduce((acc, k) => {
      acc[basename(k)] = k
      return acc
    }, {})
    return normalizeObject(pkg)
  }
  const removeBin = pkg => {
    delete pkg.bin
    return pkg
  }
  const normalizeObject = pkg => {
    const orig = pkg.bin
    const clean = {}
    let hasBins = false
    Object.keys(orig).forEach(binKey => {
      const base = join('/', basename(binKey.replace(/\\|:/g, '/'))).slice(1)
      if (typeof orig[binKey] !== 'string' || !base) {
        return
      }
      const binTarget = join('/', orig[binKey].replace(/\\/g, '/'))
        .replace(/\\/g, '/')
        .slice(1)
      if (!binTarget) {
        return
      }
      clean[base] = binTarget
      hasBins = true
    })
    if (hasBins) {
      pkg.bin = clean
    } else {
      delete pkg.bin
    }
    return pkg
  }
  lib$n = normalize
  return lib$n
}

let lib$m
let hasRequiredLib$m
function requireLib$m() {
  if (hasRequiredLib$m) {
    return lib$m
  }
  hasRequiredLib$m = 1
  const npa = requireNpa$2()
  const semver = requireSemver()
  const { checkEngine } = requireLib$o()
  const normalizeBin = requireLib$n()
  const engineOk = (manifest, npmVersion, nodeVersion) => {
    try {
      checkEngine(manifest, npmVersion, nodeVersion)
      return true
    } catch (_) {
      return false
    }
  }
  const isBefore = (verTimes, ver, time) =>
    !verTimes || !verTimes[ver] || Date.parse(verTimes[ver]) <= time
  const avoidSemverOpt = {
    includePrerelease: true,
    loose: true
  }
  const shouldAvoid = (ver, avoid) =>
    avoid && semver.satisfies(ver, avoid, avoidSemverOpt)
  const decorateAvoid = (result, avoid) =>
    result && shouldAvoid(result.version, avoid)
      ? {
          ...result,
          _shouldAvoid: true
        }
      : result
  const pickManifest = (packument, wanted, opts) => {
    const {
      defaultTag = 'latest',
      before = null,
      nodeVersion = process.version,
      npmVersion = null,
      includeStaged = false,
      avoid = null,
      avoidStrict = false
    } = opts
    const { name, time: verTimes } = packument
    const versions = packument.versions || {}
    if (avoidStrict) {
      const looseOpts = {
        ...opts,
        avoidStrict: false
      }
      const result = pickManifest(packument, wanted, looseOpts)
      if (!result || !result._shouldAvoid) {
        return result
      }
      const caret = pickManifest(packument, `^${result.version}`, looseOpts)
      if (!caret || !caret._shouldAvoid) {
        return {
          ...caret,
          _outsideDependencyRange: true,
          _isSemVerMajor: false
        }
      }
      const star = pickManifest(packument, '*', looseOpts)
      if (!star || !star._shouldAvoid) {
        return {
          ...star,
          _outsideDependencyRange: true,
          _isSemVerMajor: true
        }
      }
      throw Object.assign(new Error(`No avoidable versions for ${name}`), {
        code: 'ETARGET',
        name,
        wanted,
        avoid,
        before,
        versions: Object.keys(versions)
      })
    }
    const staged =
      (includeStaged &&
        packument.stagedVersions &&
        packument.stagedVersions.versions) ||
      {}
    const restricted =
      (packument.policyRestrictions && packument.policyRestrictions.versions) ||
      {}
    const time = before && verTimes ? +new Date(before) : Infinity
    const spec = npa.resolve(name, wanted || defaultTag)
    const type = spec.type
    const distTags = packument['dist-tags'] || {}
    if (type !== 'tag' && type !== 'version' && type !== 'range') {
      throw new Error('Only tag, version, and range are supported')
    }

    // if the type is 'tag', and not just the implicit default, then it must
    // be that exactly, or nothing else will do.
    if (wanted && type === 'tag') {
      const ver = distTags[wanted]
      // if the version in the dist-tags is before the before date, then
      // we use that.  Otherwise, we get the highest precedence version
      // prior to the dist-tag.
      if (isBefore(verTimes, ver, time)) {
        return decorateAvoid(
          versions[ver] || staged[ver] || restricted[ver],
          avoid
        )
      } else {
        return pickManifest(packument, `<=${ver}`, opts)
      }
    }

    // similarly, if a specific version, then only that version will do
    if (wanted && type === 'version') {
      const ver = semver.clean(wanted, {
        loose: true
      })
      const mani = versions[ver] || staged[ver] || restricted[ver]
      return isBefore(verTimes, ver, time) ? decorateAvoid(mani, avoid) : null
    }

    // ok, sort based on our heuristics, and pick the best fit
    const range = type === 'range' ? wanted : '*'

    // if the range is *, then we prefer the 'latest' if available
    // but skip this if it should be avoided, in that case we have
    // to try a little harder.
    const defaultVer = distTags[defaultTag]
    if (
      defaultVer &&
      (range === '*' ||
        semver.satisfies(defaultVer, range, {
          loose: true
        })) &&
      !restricted[defaultVer] &&
      !shouldAvoid(defaultVer, avoid)
    ) {
      const mani = versions[defaultVer]
      const ok =
        mani &&
        isBefore(verTimes, defaultVer, time) &&
        engineOk(mani, npmVersion, nodeVersion) &&
        !mani.deprecated &&
        !staged[defaultVer]
      if (ok) {
        return mani
      }
    }

    // ok, actually have to sort the list and take the winner
    const allEntries = Object.entries(versions)
      .concat(Object.entries(staged))
      .concat(Object.entries(restricted))
      .filter(([ver]) => isBefore(verTimes, ver, time))
    if (!allEntries.length) {
      throw Object.assign(new Error(`No versions available for ${name}`), {
        code: 'ENOVERSIONS',
        name,
        type,
        wanted,
        before,
        versions: Object.keys(versions)
      })
    }
    const sortSemverOpt = {
      loose: true
    }
    const entries = allEntries
      .filter(([ver]) =>
        semver.satisfies(ver, range, {
          loose: true
        })
      )
      .sort((a, b) => {
        const [vera, mania] = a
        const [verb, manib] = b
        const notavoida = !shouldAvoid(vera, avoid)
        const notavoidb = !shouldAvoid(verb, avoid)
        const notrestra = !restricted[vera]
        const notrestrb = !restricted[verb]
        const notstagea = !staged[vera]
        const notstageb = !staged[verb]
        const notdepra = !mania.deprecated
        const notdeprb = !manib.deprecated
        const enginea = engineOk(mania, npmVersion, nodeVersion)
        const engineb = engineOk(manib, npmVersion, nodeVersion)
        // sort by:
        // - not an avoided version
        // - not restricted
        // - not staged
        // - not deprecated and engine ok
        // - engine ok
        // - not deprecated
        // - semver
        return (
          notavoidb - notavoida ||
          notrestrb - notrestra ||
          notstageb - notstagea ||
          (notdeprb && engineb) - (notdepra && enginea) ||
          engineb - enginea ||
          notdeprb - notdepra ||
          semver.rcompare(vera, verb, sortSemverOpt)
        )
      })
    return decorateAvoid(entries[0] && entries[0][1], avoid)
  }
  lib$m = (packument, wanted, opts = {}) => {
    const mani = pickManifest(packument, wanted, opts)
    const picked = mani && normalizeBin(mani)
    const policyRestrictions = packument.policyRestrictions
    const restricted = (policyRestrictions && policyRestrictions.versions) || {}
    if (picked && !restricted[picked.version]) {
      return picked
    }
    const { before = null, defaultTag = 'latest' } = opts
    const bstr = before ? new Date(before).toLocaleString() : ''
    const { name } = packument
    const pckg =
      `${name}@${wanted}` + (before ? ` with a date before ${bstr}` : '')
    const isForbidden = picked && !!restricted[picked.version]
    const polMsg = isForbidden ? policyRestrictions.message : ''
    const msg = !isForbidden
      ? `No matching version found for ${pckg}.`
      : `Could not download ${pckg} due to policy violations:\n${polMsg}`
    const code = isForbidden ? 'E403' : 'ETARGET'
    throw Object.assign(new Error(msg), {
      code,
      type: npa.resolve(packument.name, wanted).type,
      wanted,
      versions: Object.keys(packument.versions ?? {}),
      name,
      distTags: packument['dist-tags'],
      defaultTag
    })
  }
  return lib$m
}

let clone_1
let hasRequiredClone
function requireClone() {
  if (hasRequiredClone) {
    return clone_1
  }
  hasRequiredClone = 1
  // The goal here is to minimize both git workload and
  // the number of refs we download over the network.
  //
  // Every method ends up with the checked out working dir
  // at the specified ref, and resolves with the git sha.

  // Only certain whitelisted hosts get shallow cloning.
  // Many hosts (including GHE) don't always support it.
  // A failed shallow fetch takes a LOT longer than a full
  // fetch in most cases, so we skip it entirely.
  // Set opts.gitShallow = true/false to force this behavior
  // one way or the other.
  const shallowHosts = new Set([
    'github.com',
    'gist.github.com',
    'gitlab.com',
    'bitbucket.com',
    'bitbucket.org'
  ])
  // we have to use url.parse until we add the same shim that hosted-git-info has
  // to handle scp:// urls
  const { parse } = require$$0$2 // eslint-disable-line node/no-deprecated-api
  const path = require$$1$5
  const getRevs = requireRevs()
  const spawn = requireSpawn()
  const { isWindows } = requireUtils$3()
  const pickManifest = requireLib$m()
  const fs = require$$0$7
  clone_1 = (repo, ref = 'HEAD', target = null, opts = {}) =>
    getRevs(repo, opts).then(revs =>
      clone(
        repo,
        revs,
        ref,
        resolveRef(revs, ref, opts),
        target || defaultTarget(repo, opts.cwd),
        opts
      )
    )
  const maybeShallow = (repo, opts) => {
    if (opts.gitShallow === false || opts.gitShallow) {
      return opts.gitShallow
    }
    return shallowHosts.has(parse(repo).host)
  }
  const defaultTarget = (
    repo,
    /* istanbul ignore next */ cwd = process.cwd()
  ) => path.resolve(cwd, path.basename(repo.replace(/[/\\]?\.git$/, '')))
  const clone = (repo, revs, ref, revDoc, target, opts) => {
    if (!revDoc) {
      return unresolved(repo, ref, target, opts)
    }
    if (revDoc.sha === revs.refs.HEAD.sha) {
      return plain(repo, revDoc, target, opts)
    }
    if (revDoc.type === 'tag' || revDoc.type === 'branch') {
      return branch(repo, revDoc, target, opts)
    }
    return other(repo, revDoc, target, opts)
  }
  const resolveRef = (revs, ref, opts) => {
    const { spec = {} } = opts
    ref = spec.gitCommittish || ref
    /* istanbul ignore next - will fail anyway, can't pull */
    if (!revs) {
      return null
    }
    if (spec.gitRange) {
      return pickManifest(revs, spec.gitRange, opts)
    }
    if (!ref) {
      return revs.refs.HEAD
    }
    if (revs.refs[ref]) {
      return revs.refs[ref]
    }
    if (revs.shas[ref]) {
      return revs.refs[revs.shas[ref][0]]
    }
    return null
  }

  // pull request or some other kind of advertised ref
  const other = (repo, revDoc, target, opts) => {
    const shallow = maybeShallow(repo, opts)
    const fetchOrigin = ['fetch', 'origin', revDoc.rawRef].concat(
      shallow ? ['--depth=1'] : []
    )
    const git = args =>
      spawn(args, {
        ...opts,
        cwd: target
      })
    return fs
      .mkdir(target, {
        recursive: true
      })
      .then(() => git(['init']))
      .then(() =>
        isWindows(opts)
          ? git(['config', '--local', '--add', 'core.longpaths', 'true'])
          : null
      )
      .then(() => git(['remote', 'add', 'origin', repo]))
      .then(() => git(fetchOrigin))
      .then(() => git(['checkout', revDoc.sha]))
      .then(() => updateSubmodules(target, opts))
      .then(() => revDoc.sha)
  }

  // tag or branches.  use -b
  const branch = (repo, revDoc, target, opts) => {
    const args = [
      'clone',
      '-b',
      revDoc.ref,
      repo,
      target,
      '--recurse-submodules'
    ]
    if (maybeShallow(repo, opts)) {
      args.push('--depth=1')
    }
    if (isWindows(opts)) {
      args.push('--config', 'core.longpaths=true')
    }
    return spawn(args, opts).then(() => revDoc.sha)
  }

  // just the head.  clone it
  const plain = (repo, revDoc, target, opts) => {
    const args = ['clone', repo, target, '--recurse-submodules']
    if (maybeShallow(repo, opts)) {
      args.push('--depth=1')
    }
    if (isWindows(opts)) {
      args.push('--config', 'core.longpaths=true')
    }
    return spawn(args, opts).then(() => revDoc.sha)
  }
  const updateSubmodules = async (target, opts) => {
    const hasSubmodules = await fs
      .stat(`${target}/.gitmodules`)
      .then(() => true)
      .catch(() => false)
    if (!hasSubmodules) {
      return null
    }
    return spawn(['submodule', 'update', '-q', '--init', '--recursive'], {
      ...opts,
      cwd: target
    })
  }
  const unresolved = (repo, ref, target, opts) => {
    // can't do this one shallowly, because the ref isn't advertised
    // but we can avoid checking out the working dir twice, at least
    const lp = isWindows(opts) ? ['--config', 'core.longpaths=true'] : []
    const cloneArgs = ['clone', '--mirror', '-q', repo, target + '/.git']
    const git = args =>
      spawn(args, {
        ...opts,
        cwd: target
      })
    return fs
      .mkdir(target, {
        recursive: true
      })
      .then(() => git(cloneArgs.concat(lp)))
      .then(() => git(['init']))
      .then(() => git(['checkout', ref]))
      .then(() => updateSubmodules(target, opts))
      .then(() => git(['rev-parse', '--revs-only', 'HEAD']))
      .then(({ stdout }) => stdout.trim())
  }
  return clone_1
}

let is
let hasRequiredIs
function requireIs() {
  if (hasRequiredIs) {
    return is
  }
  hasRequiredIs = 1
  // not an airtight indicator, but a good gut-check to even bother trying
  const { stat } = require$$0$7
  is = ({ cwd = process.cwd() } = {}) =>
    stat(cwd + '/.git').then(
      () => true,
      () => false
    )
  return is
}

let find
let hasRequiredFind
function requireFind() {
  if (hasRequiredFind) {
    return find
  }
  hasRequiredFind = 1
  const is = requireIs()
  const { dirname } = require$$1$5
  find = async ({ cwd = process.cwd(), root } = {}) => {
    while (true) {
      if (
        await is({
          cwd
        })
      ) {
        return cwd
      }
      const next = dirname(cwd)
      if (cwd === root || cwd === next) {
        return null
      }
      cwd = next
    }
  }
  return find
}

let isClean
let hasRequiredIsClean
function requireIsClean() {
  if (hasRequiredIsClean) {
    return isClean
  }
  hasRequiredIsClean = 1
  const spawn = requireSpawn()
  isClean = (opts = {}) =>
    spawn(['status', '--porcelain=v1', '-uno'], opts).then(
      res =>
        !res.stdout
          .trim()
          .split(/\r?\n+/)
          .map(l => l.trim())
          .filter(l => l).length
    )
  return isClean
}

let lib$l
let hasRequiredLib$l
function requireLib$l() {
  if (hasRequiredLib$l) {
    return lib$l
  }
  hasRequiredLib$l = 1
  lib$l = {
    clone: requireClone(),
    revs: requireRevs(),
    spawn: requireSpawn(),
    is: requireIs(),
    find: requireFind(),
    isClean: requireIsClean(),
    errors: requireErrors$4()
  }
  return lib$l
}

const require$$1$3 = [
  '0BSD',
  '3D-Slicer-1.0',
  'AAL',
  'ADSL',
  'AFL-1.1',
  'AFL-1.2',
  'AFL-2.0',
  'AFL-2.1',
  'AFL-3.0',
  'AGPL-1.0-only',
  'AGPL-1.0-or-later',
  'AGPL-3.0-only',
  'AGPL-3.0-or-later',
  'AMD-newlib',
  'AMDPLPA',
  'AML',
  'AML-glslang',
  'AMPAS',
  'ANTLR-PD',
  'ANTLR-PD-fallback',
  'APAFML',
  'APL-1.0',
  'APSL-1.0',
  'APSL-1.1',
  'APSL-1.2',
  'APSL-2.0',
  'ASWF-Digital-Assets-1.0',
  'ASWF-Digital-Assets-1.1',
  'Abstyles',
  'AdaCore-doc',
  'Adobe-2006',
  'Adobe-Display-PostScript',
  'Adobe-Glyph',
  'Adobe-Utopia',
  'Afmparse',
  'Aladdin',
  'Apache-1.0',
  'Apache-1.1',
  'Apache-2.0',
  'App-s2p',
  'Arphic-1999',
  'Artistic-1.0',
  'Artistic-1.0-Perl',
  'Artistic-1.0-cl8',
  'Artistic-2.0',
  'BSD-1-Clause',
  'BSD-2-Clause',
  'BSD-2-Clause-Darwin',
  'BSD-2-Clause-Patent',
  'BSD-2-Clause-Views',
  'BSD-2-Clause-first-lines',
  'BSD-3-Clause',
  'BSD-3-Clause-Attribution',
  'BSD-3-Clause-Clear',
  'BSD-3-Clause-HP',
  'BSD-3-Clause-LBNL',
  'BSD-3-Clause-Modification',
  'BSD-3-Clause-No-Military-License',
  'BSD-3-Clause-No-Nuclear-License',
  'BSD-3-Clause-No-Nuclear-License-2014',
  'BSD-3-Clause-No-Nuclear-Warranty',
  'BSD-3-Clause-Open-MPI',
  'BSD-3-Clause-Sun',
  'BSD-3-Clause-acpica',
  'BSD-3-Clause-flex',
  'BSD-4-Clause',
  'BSD-4-Clause-Shortened',
  'BSD-4-Clause-UC',
  'BSD-4.3RENO',
  'BSD-4.3TAHOE',
  'BSD-Advertising-Acknowledgement',
  'BSD-Attribution-HPND-disclaimer',
  'BSD-Inferno-Nettverk',
  'BSD-Protection',
  'BSD-Source-Code',
  'BSD-Source-beginning-file',
  'BSD-Systemics',
  'BSD-Systemics-W3Works',
  'BSL-1.0',
  'BUSL-1.1',
  'Baekmuk',
  'Bahyph',
  'Barr',
  'Beerware',
  'BitTorrent-1.0',
  'BitTorrent-1.1',
  'Bitstream-Charter',
  'Bitstream-Vera',
  'BlueOak-1.0.0',
  'Boehm-GC',
  'Boehm-GC-without-fee',
  'Borceux',
  'Brian-Gladman-2-Clause',
  'Brian-Gladman-3-Clause',
  'C-UDA-1.0',
  'CAL-1.0',
  'CAL-1.0-Combined-Work-Exception',
  'CATOSL-1.1',
  'CC-BY-1.0',
  'CC-BY-2.0',
  'CC-BY-2.5',
  'CC-BY-2.5-AU',
  'CC-BY-3.0',
  'CC-BY-3.0-AT',
  'CC-BY-3.0-AU',
  'CC-BY-3.0-DE',
  'CC-BY-3.0-IGO',
  'CC-BY-3.0-NL',
  'CC-BY-3.0-US',
  'CC-BY-4.0',
  'CC-BY-NC-1.0',
  'CC-BY-NC-2.0',
  'CC-BY-NC-2.5',
  'CC-BY-NC-3.0',
  'CC-BY-NC-3.0-DE',
  'CC-BY-NC-4.0',
  'CC-BY-NC-ND-1.0',
  'CC-BY-NC-ND-2.0',
  'CC-BY-NC-ND-2.5',
  'CC-BY-NC-ND-3.0',
  'CC-BY-NC-ND-3.0-DE',
  'CC-BY-NC-ND-3.0-IGO',
  'CC-BY-NC-ND-4.0',
  'CC-BY-NC-SA-1.0',
  'CC-BY-NC-SA-2.0',
  'CC-BY-NC-SA-2.0-DE',
  'CC-BY-NC-SA-2.0-FR',
  'CC-BY-NC-SA-2.0-UK',
  'CC-BY-NC-SA-2.5',
  'CC-BY-NC-SA-3.0',
  'CC-BY-NC-SA-3.0-DE',
  'CC-BY-NC-SA-3.0-IGO',
  'CC-BY-NC-SA-4.0',
  'CC-BY-ND-1.0',
  'CC-BY-ND-2.0',
  'CC-BY-ND-2.5',
  'CC-BY-ND-3.0',
  'CC-BY-ND-3.0-DE',
  'CC-BY-ND-4.0',
  'CC-BY-SA-1.0',
  'CC-BY-SA-2.0',
  'CC-BY-SA-2.0-UK',
  'CC-BY-SA-2.1-JP',
  'CC-BY-SA-2.5',
  'CC-BY-SA-3.0',
  'CC-BY-SA-3.0-AT',
  'CC-BY-SA-3.0-DE',
  'CC-BY-SA-3.0-IGO',
  'CC-BY-SA-4.0',
  'CC-PDDC',
  'CC-PDM-1.0',
  'CC-SA-1.0',
  'CC0-1.0',
  'CDDL-1.0',
  'CDDL-1.1',
  'CDL-1.0',
  'CDLA-Permissive-1.0',
  'CDLA-Permissive-2.0',
  'CDLA-Sharing-1.0',
  'CECILL-1.0',
  'CECILL-1.1',
  'CECILL-2.0',
  'CECILL-2.1',
  'CECILL-B',
  'CECILL-C',
  'CERN-OHL-1.1',
  'CERN-OHL-1.2',
  'CERN-OHL-P-2.0',
  'CERN-OHL-S-2.0',
  'CERN-OHL-W-2.0',
  'CFITSIO',
  'CMU-Mach',
  'CMU-Mach-nodoc',
  'CNRI-Jython',
  'CNRI-Python',
  'CNRI-Python-GPL-Compatible',
  'COIL-1.0',
  'CPAL-1.0',
  'CPL-1.0',
  'CPOL-1.02',
  'CUA-OPL-1.0',
  'Caldera',
  'Caldera-no-preamble',
  'Catharon',
  'ClArtistic',
  'Clips',
  'Community-Spec-1.0',
  'Condor-1.1',
  'Cornell-Lossless-JPEG',
  'Cronyx',
  'Crossword',
  'CrystalStacker',
  'Cube',
  'D-FSL-1.0',
  'DEC-3-Clause',
  'DL-DE-BY-2.0',
  'DL-DE-ZERO-2.0',
  'DOC',
  'DRL-1.0',
  'DRL-1.1',
  'DSDP',
  'DocBook-Schema',
  'DocBook-Stylesheet',
  'DocBook-XML',
  'Dotseqn',
  'ECL-1.0',
  'ECL-2.0',
  'EFL-1.0',
  'EFL-2.0',
  'EPICS',
  'EPL-1.0',
  'EPL-2.0',
  'EUDatagrid',
  'EUPL-1.0',
  'EUPL-1.1',
  'EUPL-1.2',
  'Elastic-2.0',
  'Entessa',
  'ErlPL-1.1',
  'Eurosym',
  'FBM',
  'FDK-AAC',
  'FSFAP',
  'FSFAP-no-warranty-disclaimer',
  'FSFUL',
  'FSFULLR',
  'FSFULLRWD',
  'FTL',
  'Fair',
  'Ferguson-Twofish',
  'Frameworx-1.0',
  'FreeBSD-DOC',
  'FreeImage',
  'Furuseth',
  'GCR-docs',
  'GD',
  'GFDL-1.1-invariants-only',
  'GFDL-1.1-invariants-or-later',
  'GFDL-1.1-no-invariants-only',
  'GFDL-1.1-no-invariants-or-later',
  'GFDL-1.1-only',
  'GFDL-1.1-or-later',
  'GFDL-1.2-invariants-only',
  'GFDL-1.2-invariants-or-later',
  'GFDL-1.2-no-invariants-only',
  'GFDL-1.2-no-invariants-or-later',
  'GFDL-1.2-only',
  'GFDL-1.2-or-later',
  'GFDL-1.3-invariants-only',
  'GFDL-1.3-invariants-or-later',
  'GFDL-1.3-no-invariants-only',
  'GFDL-1.3-no-invariants-or-later',
  'GFDL-1.3-only',
  'GFDL-1.3-or-later',
  'GL2PS',
  'GLWTPL',
  'GPL-1.0-only',
  'GPL-1.0-or-later',
  'GPL-2.0-only',
  'GPL-2.0-or-later',
  'GPL-3.0-only',
  'GPL-3.0-or-later',
  'Giftware',
  'Glide',
  'Glulxe',
  'Graphics-Gems',
  'Gutmann',
  'HIDAPI',
  'HP-1986',
  'HP-1989',
  'HPND',
  'HPND-DEC',
  'HPND-Fenneberg-Livingston',
  'HPND-INRIA-IMAG',
  'HPND-Intel',
  'HPND-Kevlin-Henney',
  'HPND-MIT-disclaimer',
  'HPND-Markus-Kuhn',
  'HPND-Netrek',
  'HPND-Pbmplus',
  'HPND-UC',
  'HPND-UC-export-US',
  'HPND-doc',
  'HPND-doc-sell',
  'HPND-export-US',
  'HPND-export-US-acknowledgement',
  'HPND-export-US-modify',
  'HPND-export2-US',
  'HPND-merchantability-variant',
  'HPND-sell-MIT-disclaimer-xserver',
  'HPND-sell-regexpr',
  'HPND-sell-variant',
  'HPND-sell-variant-MIT-disclaimer',
  'HPND-sell-variant-MIT-disclaimer-rev',
  'HTMLTIDY',
  'HaskellReport',
  'Hippocratic-2.1',
  'IBM-pibs',
  'ICU',
  'IEC-Code-Components-EULA',
  'IJG',
  'IJG-short',
  'IPA',
  'IPL-1.0',
  'ISC',
  'ISC-Veillard',
  'ImageMagick',
  'Imlib2',
  'Info-ZIP',
  'Inner-Net-2.0',
  'InnoSetup',
  'Intel',
  'Intel-ACPI',
  'Interbase-1.0',
  'JPL-image',
  'JPNIC',
  'JSON',
  'Jam',
  'JasPer-2.0',
  'Kastrup',
  'Kazlib',
  'Knuth-CTAN',
  'LAL-1.2',
  'LAL-1.3',
  'LGPL-2.0-only',
  'LGPL-2.0-or-later',
  'LGPL-2.1-only',
  'LGPL-2.1-or-later',
  'LGPL-3.0-only',
  'LGPL-3.0-or-later',
  'LGPLLR',
  'LOOP',
  'LPD-document',
  'LPL-1.0',
  'LPL-1.02',
  'LPPL-1.0',
  'LPPL-1.1',
  'LPPL-1.2',
  'LPPL-1.3a',
  'LPPL-1.3c',
  'LZMA-SDK-9.11-to-9.20',
  'LZMA-SDK-9.22',
  'Latex2e',
  'Latex2e-translated-notice',
  'Leptonica',
  'LiLiQ-P-1.1',
  'LiLiQ-R-1.1',
  'LiLiQ-Rplus-1.1',
  'Libpng',
  'Linux-OpenIB',
  'Linux-man-pages-1-para',
  'Linux-man-pages-copyleft',
  'Linux-man-pages-copyleft-2-para',
  'Linux-man-pages-copyleft-var',
  'Lucida-Bitmap-Fonts',
  'MIPS',
  'MIT',
  'MIT-0',
  'MIT-CMU',
  'MIT-Click',
  'MIT-Festival',
  'MIT-Khronos-old',
  'MIT-Modern-Variant',
  'MIT-Wu',
  'MIT-advertising',
  'MIT-enna',
  'MIT-feh',
  'MIT-open-group',
  'MIT-testregex',
  'MITNFA',
  'MMIXware',
  'MPEG-SSG',
  'MPL-1.0',
  'MPL-1.1',
  'MPL-2.0',
  'MPL-2.0-no-copyleft-exception',
  'MS-LPL',
  'MS-PL',
  'MS-RL',
  'MTLL',
  'Mackerras-3-Clause',
  'Mackerras-3-Clause-acknowledgment',
  'MakeIndex',
  'Martin-Birgmeier',
  'McPhee-slideshow',
  'Minpack',
  'MirOS',
  'Motosoto',
  'MulanPSL-1.0',
  'MulanPSL-2.0',
  'Multics',
  'Mup',
  'NAIST-2003',
  'NASA-1.3',
  'NBPL-1.0',
  'NCBI-PD',
  'NCGL-UK-2.0',
  'NCL',
  'NCSA',
  'NGPL',
  'NICTA-1.0',
  'NIST-PD',
  'NIST-PD-fallback',
  'NIST-Software',
  'NLOD-1.0',
  'NLOD-2.0',
  'NLPL',
  'NOSL',
  'NPL-1.0',
  'NPL-1.1',
  'NPOSL-3.0',
  'NRL',
  'NTP',
  'NTP-0',
  'Naumen',
  'NetCDF',
  'Newsletr',
  'Nokia',
  'Noweb',
  'O-UDA-1.0',
  'OAR',
  'OCCT-PL',
  'OCLC-2.0',
  'ODC-By-1.0',
  'ODbL-1.0',
  'OFFIS',
  'OFL-1.0',
  'OFL-1.0-RFN',
  'OFL-1.0-no-RFN',
  'OFL-1.1',
  'OFL-1.1-RFN',
  'OFL-1.1-no-RFN',
  'OGC-1.0',
  'OGDL-Taiwan-1.0',
  'OGL-Canada-2.0',
  'OGL-UK-1.0',
  'OGL-UK-2.0',
  'OGL-UK-3.0',
  'OGTSL',
  'OLDAP-1.1',
  'OLDAP-1.2',
  'OLDAP-1.3',
  'OLDAP-1.4',
  'OLDAP-2.0',
  'OLDAP-2.0.1',
  'OLDAP-2.1',
  'OLDAP-2.2',
  'OLDAP-2.2.1',
  'OLDAP-2.2.2',
  'OLDAP-2.3',
  'OLDAP-2.4',
  'OLDAP-2.5',
  'OLDAP-2.6',
  'OLDAP-2.7',
  'OLDAP-2.8',
  'OLFL-1.3',
  'OML',
  'OPL-1.0',
  'OPL-UK-3.0',
  'OPUBL-1.0',
  'OSET-PL-2.1',
  'OSL-1.0',
  'OSL-1.1',
  'OSL-2.0',
  'OSL-2.1',
  'OSL-3.0',
  'OpenPBS-2.3',
  'OpenSSL',
  'OpenSSL-standalone',
  'OpenVision',
  'PADL',
  'PDDL-1.0',
  'PHP-3.0',
  'PHP-3.01',
  'PPL',
  'PSF-2.0',
  'Parity-6.0.0',
  'Parity-7.0.0',
  'Pixar',
  'Plexus',
  'PolyForm-Noncommercial-1.0.0',
  'PolyForm-Small-Business-1.0.0',
  'PostgreSQL',
  'Python-2.0',
  'Python-2.0.1',
  'QPL-1.0',
  'QPL-1.0-INRIA-2004',
  'Qhull',
  'RHeCos-1.1',
  'RPL-1.1',
  'RPL-1.5',
  'RPSL-1.0',
  'RSA-MD',
  'RSCPL',
  'Rdisc',
  'Ruby',
  'Ruby-pty',
  'SAX-PD',
  'SAX-PD-2.0',
  'SCEA',
  'SGI-B-1.0',
  'SGI-B-1.1',
  'SGI-B-2.0',
  'SGI-OpenGL',
  'SGP4',
  'SHL-0.5',
  'SHL-0.51',
  'SISSL',
  'SISSL-1.2',
  'SL',
  'SMAIL-GPL',
  'SMLNJ',
  'SMPPL',
  'SNIA',
  'SPL-1.0',
  'SSH-OpenSSH',
  'SSH-short',
  'SSLeay-standalone',
  'SSPL-1.0',
  'SWL',
  'Saxpath',
  'SchemeReport',
  'Sendmail',
  'Sendmail-8.23',
  'Sendmail-Open-Source-1.1',
  'SimPL-2.0',
  'Sleepycat',
  'Soundex',
  'Spencer-86',
  'Spencer-94',
  'Spencer-99',
  'SugarCRM-1.1.3',
  'Sun-PPP',
  'Sun-PPP-2000',
  'SunPro',
  'Symlinks',
  'TAPR-OHL-1.0',
  'TCL',
  'TCP-wrappers',
  'TGPPL-1.0',
  'TMate',
  'TORQUE-1.1',
  'TOSL',
  'TPDL',
  'TPL-1.0',
  'TTWL',
  'TTYP0',
  'TU-Berlin-1.0',
  'TU-Berlin-2.0',
  'TermReadKey',
  'ThirdEye',
  'TrustedQSL',
  'UCAR',
  'UCL-1.0',
  'UMich-Merit',
  'UPL-1.0',
  'URT-RLE',
  'Ubuntu-font-1.0',
  'Unicode-3.0',
  'Unicode-DFS-2015',
  'Unicode-DFS-2016',
  'Unicode-TOU',
  'UnixCrypt',
  'Unlicense',
  'VOSTROM',
  'VSL-1.0',
  'Vim',
  'W3C',
  'W3C-19980720',
  'W3C-20150513',
  'WTFPL',
  'Watcom-1.0',
  'Widget-Workshop',
  'Wsuipa',
  'X11',
  'X11-distribute-modifications-variant',
  'X11-swapped',
  'XFree86-1.1',
  'XSkat',
  'Xdebug-1.03',
  'Xerox',
  'Xfig',
  'Xnet',
  'YPL-1.0',
  'YPL-1.1',
  'ZPL-1.1',
  'ZPL-2.0',
  'ZPL-2.1',
  'Zed',
  'Zeeff',
  'Zend-2.0',
  'Zimbra-1.3',
  'Zimbra-1.4',
  'Zlib',
  'any-OSI',
  'any-OSI-perl-modules',
  'bcrypt-Solar-Designer',
  'blessing',
  'bzip2-1.0.6',
  'check-cvs',
  'checkmk',
  'copyleft-next-0.3.0',
  'copyleft-next-0.3.1',
  'curl',
  'cve-tou',
  'diffmark',
  'dtoa',
  'dvipdfm',
  'eGenix',
  'etalab-2.0',
  'fwlw',
  'gSOAP-1.3b',
  'generic-xts',
  'gnuplot',
  'gtkbook',
  'hdparm',
  'iMatix',
  'libpng-2.0',
  'libselinux-1.0',
  'libtiff',
  'libutil-David-Nugent',
  'lsof',
  'magaz',
  'mailprio',
  'metamail',
  'mpi-permissive',
  'mpich2',
  'mplus',
  'pkgconf',
  'pnmstitch',
  'psfrag',
  'psutils',
  'python-ldap',
  'radvd',
  'snprintf',
  'softSurfer',
  'ssh-keyscan',
  'swrule',
  'threeparttable',
  'ulem',
  'w3m',
  'wwl',
  'xinetd',
  'xkeyboard-config-Zinoviev',
  'xlock',
  'xpp',
  'xzoom',
  'zlib-acknowledgement'
]

const require$$1$2 = [
  'AGPL-1.0',
  'AGPL-3.0',
  'BSD-2-Clause-FreeBSD',
  'BSD-2-Clause-NetBSD',
  'GFDL-1.1',
  'GFDL-1.2',
  'GFDL-1.3',
  'GPL-1.0',
  'GPL-2.0',
  'GPL-2.0-with-GCC-exception',
  'GPL-2.0-with-autoconf-exception',
  'GPL-2.0-with-bison-exception',
  'GPL-2.0-with-classpath-exception',
  'GPL-2.0-with-font-exception',
  'GPL-3.0',
  'GPL-3.0-with-GCC-exception',
  'GPL-3.0-with-autoconf-exception',
  'LGPL-2.0',
  'LGPL-2.1',
  'LGPL-3.0',
  'Net-SNMP',
  'Nunit',
  'StandardML-NJ',
  'bzip2-1.0.5',
  'eCos-2.0',
  'wxWindows'
]

const require$$2$1 = [
  '389-exception',
  'Asterisk-exception',
  'Autoconf-exception-2.0',
  'Autoconf-exception-3.0',
  'Autoconf-exception-generic',
  'Autoconf-exception-generic-3.0',
  'Autoconf-exception-macro',
  'Bison-exception-1.24',
  'Bison-exception-2.2',
  'Bootloader-exception',
  'Classpath-exception-2.0',
  'CLISP-exception-2.0',
  'cryptsetup-OpenSSL-exception',
  'DigiRule-FOSS-exception',
  'eCos-exception-2.0',
  'Fawkes-Runtime-exception',
  'FLTK-exception',
  'fmt-exception',
  'Font-exception-2.0',
  'freertos-exception-2.0',
  'GCC-exception-2.0',
  'GCC-exception-2.0-note',
  'GCC-exception-3.1',
  'Gmsh-exception',
  'GNAT-exception',
  'GNOME-examples-exception',
  'GNU-compiler-exception',
  'gnu-javamail-exception',
  'GPL-3.0-interface-exception',
  'GPL-3.0-linking-exception',
  'GPL-3.0-linking-source-exception',
  'GPL-CC-1.0',
  'GStreamer-exception-2005',
  'GStreamer-exception-2008',
  'i2p-gpl-java-exception',
  'KiCad-libraries-exception',
  'LGPL-3.0-linking-exception',
  'libpri-OpenH323-exception',
  'Libtool-exception',
  'Linux-syscall-note',
  'LLGPL',
  'LLVM-exception',
  'LZMA-exception',
  'mif-exception',
  'OCaml-LGPL-linking-exception',
  'OCCT-exception-1.0',
  'OpenJDK-assembly-exception-1.0',
  'openvpn-openssl-exception',
  'PS-or-PDF-font-exception-20170817',
  'QPL-1.0-INRIA-2004-exception',
  'Qt-GPL-exception-1.0',
  'Qt-LGPL-exception-1.1',
  'Qwt-exception-1.0',
  'SANE-exception',
  'SHL-2.0',
  'SHL-2.1',
  'stunnel-exception',
  'SWI-exception',
  'Swift-exception',
  'Texinfo-exception',
  'u-boot-exception-2.0',
  'UBDL-exception',
  'Universal-FOSS-exception-1.0',
  'vsftpd-openssl-exception',
  'WxWindows-exception-3.1',
  'x11vnc-openssl-exception'
]

let scan$1
let hasRequiredScan$1
function requireScan$1() {
  if (hasRequiredScan$1) {
    return scan$1
  }
  hasRequiredScan$1 = 1
  const licenses = [].concat(require$$1$3).concat(require$$1$2)
  const exceptions = require$$2$1
  scan$1 = function (source) {
    let index = 0
    function hasMore() {
      return index < source.length
    }

    // `value` can be a regexp or a string.
    // If it is recognized, the matching source string is returned and
    // the index is incremented. Otherwise `undefined` is returned.
    function read(value) {
      if (value instanceof RegExp) {
        const chars = source.slice(index)
        const match = chars.match(value)
        if (match) {
          index += match[0].length
          return match[0]
        }
      } else {
        if (source.indexOf(value, index) === index) {
          index += value.length
          return value
        }
      }
    }
    function skipWhitespace() {
      read(/[ ]*/)
    }
    function operator() {
      let string
      const possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']
      for (let i = 0; i < possibilities.length; i++) {
        string = read(possibilities[i])
        if (string) {
          break
        }
      }
      if (string === '+' && index > 1 && source[index - 2] === ' ') {
        throw new Error('Space before `+`')
      }
      return (
        string && {
          type: 'OPERATOR',
          string: string
        }
      )
    }
    function idstring() {
      return read(/[A-Za-z0-9-.]+/)
    }
    function expectIdstring() {
      const string = idstring()
      if (!string) {
        throw new Error('Expected idstring at offset ' + index)
      }
      return string
    }
    function documentRef() {
      if (read('DocumentRef-')) {
        const string = expectIdstring()
        return {
          type: 'DOCUMENTREF',
          string: string
        }
      }
    }
    function licenseRef() {
      if (read('LicenseRef-')) {
        const string = expectIdstring()
        return {
          type: 'LICENSEREF',
          string: string
        }
      }
    }
    function identifier() {
      const begin = index
      const string = idstring()
      if (licenses.indexOf(string) !== -1) {
        return {
          type: 'LICENSE',
          string: string
        }
      } else if (exceptions.indexOf(string) !== -1) {
        return {
          type: 'EXCEPTION',
          string: string
        }
      }
      index = begin
    }

    // Tries to read the next token. Returns `undefined` if no token is
    // recognized.
    function parseToken() {
      // Ordering matters
      return operator() || documentRef() || licenseRef() || identifier()
    }
    const tokens = []
    while (hasMore()) {
      skipWhitespace()
      if (!hasMore()) {
        break
      }
      const token = parseToken()
      if (!token) {
        throw new Error('Unexpected `' + source[index] + '` at offset ' + index)
      }
      tokens.push(token)
    }
    return tokens
  }
  return scan$1
}

let parse$3
let hasRequiredParse$3
function requireParse$3() {
  if (hasRequiredParse$3) {
    return parse$3
  }
  hasRequiredParse$3 = 1

  // The ABNF grammar in the spec is totally ambiguous.
  //
  // This parser follows the operator precedence defined in the
  // `Order of Precedence and Parentheses` section.

  parse$3 = function (tokens) {
    let index = 0
    function hasMore() {
      return index < tokens.length
    }
    function token() {
      return hasMore() ? tokens[index] : null
    }
    function next() {
      if (!hasMore()) {
        throw new Error()
      }
      index++
    }
    function parseOperator(operator) {
      const t = token()
      if (t && t.type === 'OPERATOR' && operator === t.string) {
        next()
        return t.string
      }
    }
    function parseWith() {
      if (parseOperator('WITH')) {
        const t = token()
        if (t && t.type === 'EXCEPTION') {
          next()
          return t.string
        }
        throw new Error('Expected exception after `WITH`')
      }
    }
    function parseLicenseRef() {
      // TODO: Actually, everything is concatenated into one string
      // for backward-compatibility but it could be better to return
      // a nice structure.
      const begin = index
      let string = ''
      let t = token()
      if (t.type === 'DOCUMENTREF') {
        next()
        string += 'DocumentRef-' + t.string + ':'
        if (!parseOperator(':')) {
          throw new Error('Expected `:` after `DocumentRef-...`')
        }
      }
      t = token()
      if (t.type === 'LICENSEREF') {
        next()
        string += 'LicenseRef-' + t.string
        return {
          license: string
        }
      }
      index = begin
    }
    function parseLicense() {
      const t = token()
      if (t && t.type === 'LICENSE') {
        next()
        const node = {
          license: t.string
        }
        if (parseOperator('+')) {
          node.plus = true
        }
        const exception = parseWith()
        if (exception) {
          node.exception = exception
        }
        return node
      }
    }
    function parseParenthesizedExpression() {
      const left = parseOperator('(')
      if (!left) {
        return
      }
      const expr = parseExpression()
      if (!parseOperator(')')) {
        throw new Error('Expected `)`')
      }
      return expr
    }
    function parseAtom() {
      return (
        parseParenthesizedExpression() || parseLicenseRef() || parseLicense()
      )
    }
    function makeBinaryOpParser(operator, nextParser) {
      return function parseBinaryOp() {
        const left = nextParser()
        if (!left) {
          return
        }
        if (!parseOperator(operator)) {
          return left
        }
        const right = parseBinaryOp()
        if (!right) {
          throw new Error('Expected expression')
        }
        return {
          left: left,
          conjunction: operator.toLowerCase(),
          right: right
        }
      }
    }
    const parseAnd = makeBinaryOpParser('AND', parseAtom)
    const parseExpression = makeBinaryOpParser('OR', parseAnd)
    const node = parseExpression()
    if (!node || hasMore()) {
      throw new Error('Syntax error')
    }
    return node
  }
  return parse$3
}

let spdxExpressionParse$1
let hasRequiredSpdxExpressionParse$1
function requireSpdxExpressionParse$1() {
  if (hasRequiredSpdxExpressionParse$1) {
    return spdxExpressionParse$1
  }
  hasRequiredSpdxExpressionParse$1 = 1
  const scan = requireScan$1()
  const parse = requireParse$3()
  spdxExpressionParse$1 = function (source) {
    return parse(scan(source))
  }
  return spdxExpressionParse$1
}

let scan
let hasRequiredScan
function requireScan() {
  if (hasRequiredScan) {
    return scan
  }
  hasRequiredScan = 1
  const licenses = [].concat(require$$1$3).concat(require$$1$2)
  const exceptions = require$$2$1
  scan = function (source) {
    let index = 0
    function hasMore() {
      return index < source.length
    }

    // `value` can be a regexp or a string.
    // If it is recognized, the matching source string is returned and
    // the index is incremented. Otherwise `undefined` is returned.
    function read(value) {
      if (value instanceof RegExp) {
        const chars = source.slice(index)
        const match = chars.match(value)
        if (match) {
          index += match[0].length
          return match[0]
        }
      } else {
        if (source.indexOf(value, index) === index) {
          index += value.length
          return value
        }
      }
    }
    function skipWhitespace() {
      read(/[ ]*/)
    }
    function operator() {
      let string
      const possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']
      for (let i = 0; i < possibilities.length; i++) {
        string = read(possibilities[i])
        if (string) {
          break
        }
      }
      if (string === '+' && index > 1 && source[index - 2] === ' ') {
        throw new Error('Space before `+`')
      }
      return (
        string && {
          type: 'OPERATOR',
          string: string
        }
      )
    }
    function idstring() {
      return read(/[A-Za-z0-9-.]+/)
    }
    function expectIdstring() {
      const string = idstring()
      if (!string) {
        throw new Error('Expected idstring at offset ' + index)
      }
      return string
    }
    function documentRef() {
      if (read('DocumentRef-')) {
        const string = expectIdstring()
        return {
          type: 'DOCUMENTREF',
          string: string
        }
      }
    }
    function licenseRef() {
      if (read('LicenseRef-')) {
        const string = expectIdstring()
        return {
          type: 'LICENSEREF',
          string: string
        }
      }
    }
    function identifier() {
      const begin = index
      const string = idstring()
      if (licenses.indexOf(string) !== -1) {
        return {
          type: 'LICENSE',
          string: string
        }
      } else if (exceptions.indexOf(string) !== -1) {
        return {
          type: 'EXCEPTION',
          string: string
        }
      }
      index = begin
    }

    // Tries to read the next token. Returns `undefined` if no token is
    // recognized.
    function parseToken() {
      // Ordering matters
      return operator() || documentRef() || licenseRef() || identifier()
    }
    const tokens = []
    while (hasMore()) {
      skipWhitespace()
      if (!hasMore()) {
        break
      }
      const token = parseToken()
      if (!token) {
        throw new Error('Unexpected `' + source[index] + '` at offset ' + index)
      }
      tokens.push(token)
    }
    return tokens
  }
  return scan
}

let parse$2
let hasRequiredParse$2
function requireParse$2() {
  if (hasRequiredParse$2) {
    return parse$2
  }
  hasRequiredParse$2 = 1

  // The ABNF grammar in the spec is totally ambiguous.
  //
  // This parser follows the operator precedence defined in the
  // `Order of Precedence and Parentheses` section.

  parse$2 = function (tokens) {
    let index = 0
    function hasMore() {
      return index < tokens.length
    }
    function token() {
      return hasMore() ? tokens[index] : null
    }
    function next() {
      if (!hasMore()) {
        throw new Error()
      }
      index++
    }
    function parseOperator(operator) {
      const t = token()
      if (t && t.type === 'OPERATOR' && operator === t.string) {
        next()
        return t.string
      }
    }
    function parseWith() {
      if (parseOperator('WITH')) {
        const t = token()
        if (t && t.type === 'EXCEPTION') {
          next()
          return t.string
        }
        throw new Error('Expected exception after `WITH`')
      }
    }
    function parseLicenseRef() {
      // TODO: Actually, everything is concatenated into one string
      // for backward-compatibility but it could be better to return
      // a nice structure.
      const begin = index
      let string = ''
      let t = token()
      if (t.type === 'DOCUMENTREF') {
        next()
        string += 'DocumentRef-' + t.string + ':'
        if (!parseOperator(':')) {
          throw new Error('Expected `:` after `DocumentRef-...`')
        }
      }
      t = token()
      if (t.type === 'LICENSEREF') {
        next()
        string += 'LicenseRef-' + t.string
        return {
          license: string
        }
      }
      index = begin
    }
    function parseLicense() {
      const t = token()
      if (t && t.type === 'LICENSE') {
        next()
        const node = {
          license: t.string
        }
        if (parseOperator('+')) {
          node.plus = true
        }
        const exception = parseWith()
        if (exception) {
          node.exception = exception
        }
        return node
      }
    }
    function parseParenthesizedExpression() {
      const left = parseOperator('(')
      if (!left) {
        return
      }
      const expr = parseExpression()
      if (!parseOperator(')')) {
        throw new Error('Expected `)`')
      }
      return expr
    }
    function parseAtom() {
      return (
        parseParenthesizedExpression() || parseLicenseRef() || parseLicense()
      )
    }
    function makeBinaryOpParser(operator, nextParser) {
      return function parseBinaryOp() {
        const left = nextParser()
        if (!left) {
          return
        }
        if (!parseOperator(operator)) {
          return left
        }
        const right = parseBinaryOp()
        if (!right) {
          throw new Error('Expected expression')
        }
        return {
          left: left,
          conjunction: operator.toLowerCase(),
          right: right
        }
      }
    }
    const parseAnd = makeBinaryOpParser('AND', parseAtom)
    const parseExpression = makeBinaryOpParser('OR', parseAnd)
    const node = parseExpression()
    if (!node || hasMore()) {
      throw new Error('Syntax error')
    }
    return node
  }
  return parse$2
}

let spdxExpressionParse
let hasRequiredSpdxExpressionParse
function requireSpdxExpressionParse() {
  if (hasRequiredSpdxExpressionParse) {
    return spdxExpressionParse
  }
  hasRequiredSpdxExpressionParse = 1
  const scan = requireScan()
  const parse = requireParse$2()
  spdxExpressionParse = function (source) {
    return parse(scan(source))
  }
  return spdxExpressionParse
}

/*
Copyright spdx-correct.js contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let spdxCorrect
let hasRequiredSpdxCorrect
function requireSpdxCorrect() {
  if (hasRequiredSpdxCorrect) {
    return spdxCorrect
  }
  hasRequiredSpdxCorrect = 1
  const parse = requireSpdxExpressionParse()
  const spdxLicenseIds = require$$1$3
  function valid(string) {
    try {
      parse(string)
      return true
    } catch (error) {
      return false
    }
  }

  // Sorting function that orders the given array of transpositions such
  // that a transposition with the longer pattern comes before a transposition
  // with a shorter pattern. This is to prevent e.g. the transposition
  // ["General Public License", "GPL"] from matching to "Lesser General Public License"
  // before a longer and more accurate transposition ["Lesser General Public License", "LGPL"]
  // has a chance to be recognized.
  function sortTranspositions(a, b) {
    const length = b[0].length - a[0].length
    if (length !== 0) {
      return length
    }
    return a[0].toUpperCase().localeCompare(b[0].toUpperCase())
  }

  // Common transpositions of license identifier acronyms
  const transpositions = [
    ['APGL', 'AGPL'],
    ['Gpl', 'GPL'],
    ['GLP', 'GPL'],
    ['APL', 'Apache'],
    ['ISD', 'ISC'],
    ['GLP', 'GPL'],
    ['IST', 'ISC'],
    ['Claude', 'Clause'],
    [' or later', '+'],
    [' International', ''],
    ['GNU', 'GPL'],
    ['GUN', 'GPL'],
    ['+', ''],
    ['GNU GPL', 'GPL'],
    ['GNU LGPL', 'LGPL'],
    ['GNU/GPL', 'GPL'],
    ['GNU GLP', 'GPL'],
    ['GNU LESSER GENERAL PUBLIC LICENSE', 'LGPL'],
    ['GNU Lesser General Public License', 'LGPL'],
    ['GNU LESSER GENERAL PUBLIC LICENSE', 'LGPL-2.1'],
    ['GNU Lesser General Public License', 'LGPL-2.1'],
    ['LESSER GENERAL PUBLIC LICENSE', 'LGPL'],
    ['Lesser General Public License', 'LGPL'],
    ['LESSER GENERAL PUBLIC LICENSE', 'LGPL-2.1'],
    ['Lesser General Public License', 'LGPL-2.1'],
    ['GNU General Public License', 'GPL'],
    ['Gnu public license', 'GPL'],
    ['GNU Public License', 'GPL'],
    ['GNU GENERAL PUBLIC LICENSE', 'GPL'],
    ['MTI', 'MIT'],
    ['Mozilla Public License', 'MPL'],
    ['Universal Permissive License', 'UPL'],
    ['WTH', 'WTF'],
    ['WTFGPL', 'WTFPL'],
    ['-License', '']
  ].sort(sortTranspositions)
  const TRANSPOSED = 0
  const CORRECT = 1

  // Simple corrections to nearly valid identifiers.
  const transforms = [
    // e.g. 'mit'
    function (argument) {
      return argument.toUpperCase()
    },
    // e.g. 'MIT '
    function (argument) {
      return argument.trim()
    },
    // e.g. 'M.I.T.'
    function (argument) {
      return argument.replace(/\./g, '')
    },
    // e.g. 'Apache- 2.0'
    function (argument) {
      return argument.replace(/\s+/g, '')
    },
    // e.g. 'CC BY 4.0''
    function (argument) {
      return argument.replace(/\s+/g, '-')
    },
    // e.g. 'LGPLv2.1'
    function (argument) {
      return argument.replace('v', '-')
    },
    // e.g. 'Apache 2.0'
    function (argument) {
      return argument.replace(/,?\s*(\d)/, '-$1')
    },
    // e.g. 'GPL 2'
    function (argument) {
      return argument.replace(/,?\s*(\d)/, '-$1.0')
    },
    // e.g. 'Apache Version 2.0'
    function (argument) {
      return argument.replace(
        /,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/,
        '-$2'
      )
    },
    // e.g. 'Apache Version 2'
    function (argument) {
      return argument.replace(
        /,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/,
        '-$2.0'
      )
    },
    // e.g. 'ZLIB'
    function (argument) {
      return argument[0].toUpperCase() + argument.slice(1)
    },
    // e.g. 'MPL/2.0'
    function (argument) {
      return argument.replace('/', '-')
    },
    // e.g. 'Apache 2'
    function (argument) {
      return argument.replace(/\s*V\s*(\d)/, '-$1').replace(/(\d)$/, '$1.0')
    },
    // e.g. 'GPL-2.0', 'GPL-3.0'
    function (argument) {
      if (argument.indexOf('3.0') !== -1) {
        return argument + '-or-later'
      } else {
        return argument + '-only'
      }
    },
    // e.g. 'GPL-2.0-'
    function (argument) {
      return argument + 'only'
    },
    // e.g. 'GPL2'
    function (argument) {
      return argument.replace(/(\d)$/, '-$1.0')
    },
    // e.g. 'BSD 3'
    function (argument) {
      return argument.replace(/(-| )?(\d)$/, '-$2-Clause')
    },
    // e.g. 'BSD clause 3'
    function (argument) {
      return argument.replace(/(-| )clause(-| )(\d)/, '-$3-Clause')
    },
    // e.g. 'New BSD license'
    function (argument) {
      return argument.replace(
        /\b(Modified|New|Revised)(-| )?BSD((-| )License)?/i,
        'BSD-3-Clause'
      )
    },
    // e.g. 'Simplified BSD license'
    function (argument) {
      return argument.replace(
        /\bSimplified(-| )?BSD((-| )License)?/i,
        'BSD-2-Clause'
      )
    },
    // e.g. 'Free BSD license'
    function (argument) {
      return argument.replace(
        /\b(Free|Net)(-| )?BSD((-| )License)?/i,
        'BSD-2-Clause-$1BSD'
      )
    },
    // e.g. 'Clear BSD license'
    function (argument) {
      return argument.replace(
        /\bClear(-| )?BSD((-| )License)?/i,
        'BSD-3-Clause-Clear'
      )
    },
    // e.g. 'Old BSD License'
    function (argument) {
      return argument.replace(
        /\b(Old|Original)(-| )?BSD((-| )License)?/i,
        'BSD-4-Clause'
      )
    },
    // e.g. 'BY-NC-4.0'
    function (argument) {
      return 'CC-' + argument
    },
    // e.g. 'BY-NC'
    function (argument) {
      return 'CC-' + argument + '-4.0'
    },
    // e.g. 'Attribution-NonCommercial'
    function (argument) {
      return argument
        .replace('Attribution', 'BY')
        .replace('NonCommercial', 'NC')
        .replace('NoDerivatives', 'ND')
        .replace(/ (\d)/, '-$1')
        .replace(/ ?International/, '')
    },
    // e.g. 'Attribution-NonCommercial'
    function (argument) {
      return (
        'CC-' +
        argument
          .replace('Attribution', 'BY')
          .replace('NonCommercial', 'NC')
          .replace('NoDerivatives', 'ND')
          .replace(/ (\d)/, '-$1')
          .replace(/ ?International/, '') +
        '-4.0'
      )
    }
  ]
  let licensesWithVersions = spdxLicenseIds
    .map(function (id) {
      const match = /^(.*)-\d+\.\d+$/.exec(id)
      return match ? [match[0], match[1]] : [id, null]
    })
    .reduce(function (objectMap, item) {
      const key = item[1]
      objectMap[key] = objectMap[key] || []
      objectMap[key].push(item[0])
      return objectMap
    }, {})
  const licensesWithOneVersion = Object.keys(licensesWithVersions)
    .map(function makeEntries(key) {
      return [key, licensesWithVersions[key]]
    })
    .filter(function identifySoleVersions(item) {
      return (
        // Licenses has just one valid version suffix.
        item[1].length === 1 &&
        item[0] !== null &&
        // APL will be considered Apache, rather than APL-1.0
        item[0] !== 'APL'
      )
    })
    .map(function createLastResorts(item) {
      return [item[0], item[1][0]]
    })
  licensesWithVersions = undefined

  // If all else fails, guess that strings containing certain substrings
  // meant to identify certain licenses.
  const lastResorts = [
    ['UNLI', 'Unlicense'],
    ['WTF', 'WTFPL'],
    ['2 CLAUSE', 'BSD-2-Clause'],
    ['2-CLAUSE', 'BSD-2-Clause'],
    ['3 CLAUSE', 'BSD-3-Clause'],
    ['3-CLAUSE', 'BSD-3-Clause'],
    ['AFFERO', 'AGPL-3.0-or-later'],
    ['AGPL', 'AGPL-3.0-or-later'],
    ['APACHE', 'Apache-2.0'],
    ['ARTISTIC', 'Artistic-2.0'],
    ['Affero', 'AGPL-3.0-or-later'],
    ['BEER', 'Beerware'],
    ['BOOST', 'BSL-1.0'],
    ['BSD', 'BSD-2-Clause'],
    ['CDDL', 'CDDL-1.1'],
    ['ECLIPSE', 'EPL-1.0'],
    ['FUCK', 'WTFPL'],
    ['GNU', 'GPL-3.0-or-later'],
    ['LGPL', 'LGPL-3.0-or-later'],
    ['GPLV1', 'GPL-1.0-only'],
    ['GPL-1', 'GPL-1.0-only'],
    ['GPLV2', 'GPL-2.0-only'],
    ['GPL-2', 'GPL-2.0-only'],
    ['GPL', 'GPL-3.0-or-later'],
    ['MIT +NO-FALSE-ATTRIBS', 'MITNFA'],
    ['MIT', 'MIT'],
    ['MPL', 'MPL-2.0'],
    ['X11', 'X11'],
    ['ZLIB', 'Zlib']
  ]
    .concat(licensesWithOneVersion)
    .sort(sortTranspositions)
  const SUBSTRING = 0
  const IDENTIFIER = 1
  const validTransformation = function (identifier) {
    for (let i = 0; i < transforms.length; i++) {
      const transformed = transforms[i](identifier).trim()
      if (transformed !== identifier && valid(transformed)) {
        return transformed
      }
    }
    return null
  }
  const validLastResort = function (identifier) {
    const upperCased = identifier.toUpperCase()
    for (let i = 0; i < lastResorts.length; i++) {
      const lastResort = lastResorts[i]
      if (upperCased.indexOf(lastResort[SUBSTRING]) > -1) {
        return lastResort[IDENTIFIER]
      }
    }
    return null
  }
  const anyCorrection = function (identifier, check) {
    for (let i = 0; i < transpositions.length; i++) {
      const transposition = transpositions[i]
      const transposed = transposition[TRANSPOSED]
      if (identifier.indexOf(transposed) > -1) {
        const corrected = identifier.replace(transposed, transposition[CORRECT])
        const checked = check(corrected)
        if (checked !== null) {
          return checked
        }
      }
    }
    return null
  }
  spdxCorrect = function (identifier, options) {
    options = options || {}
    const upgrade = options.upgrade === undefined ? true : !!options.upgrade
    function postprocess(value) {
      return upgrade ? upgradeGPLs(value) : value
    }
    const validArugment =
      typeof identifier === 'string' && identifier.trim().length !== 0
    if (!validArugment) {
      throw Error('Invalid argument. Expected non-empty string.')
    }
    identifier = identifier.trim()
    if (valid(identifier)) {
      return postprocess(identifier)
    }
    const noPlus = identifier.replace(/\+$/, '').trim()
    if (valid(noPlus)) {
      return postprocess(noPlus)
    }
    let transformed = validTransformation(identifier)
    if (transformed !== null) {
      return postprocess(transformed)
    }
    transformed = anyCorrection(identifier, function (argument) {
      if (valid(argument)) {
        return argument
      }
      return validTransformation(argument)
    })
    if (transformed !== null) {
      return postprocess(transformed)
    }
    transformed = validLastResort(identifier)
    if (transformed !== null) {
      return postprocess(transformed)
    }
    transformed = anyCorrection(identifier, validLastResort)
    if (transformed !== null) {
      return postprocess(transformed)
    }
    return null
  }
  function upgradeGPLs(value) {
    if (
      [
        'GPL-1.0',
        'LGPL-1.0',
        'AGPL-1.0',
        'GPL-2.0',
        'LGPL-2.0',
        'AGPL-2.0',
        'LGPL-2.1'
      ].indexOf(value) !== -1
    ) {
      return value + '-only'
    } else if (
      [
        'GPL-1.0+',
        'GPL-2.0+',
        'GPL-3.0+',
        'LGPL-2.0+',
        'LGPL-2.1+',
        'LGPL-3.0+',
        'AGPL-1.0+',
        'AGPL-3.0+'
      ].indexOf(value) !== -1
    ) {
      return value.replace(/\+$/, '-or-later')
    } else if (['GPL-3.0', 'LGPL-3.0', 'AGPL-3.0'].indexOf(value) !== -1) {
      return value + '-or-later'
    } else {
      return value
    }
  }
  return spdxCorrect
}

let validateNpmPackageLicense
let hasRequiredValidateNpmPackageLicense
function requireValidateNpmPackageLicense() {
  if (hasRequiredValidateNpmPackageLicense) {
    return validateNpmPackageLicense
  }
  hasRequiredValidateNpmPackageLicense = 1
  const parse = requireSpdxExpressionParse$1()
  const correct = requireSpdxCorrect()
  const genericWarning =
    'license should be ' +
    'a valid SPDX license expression (without "LicenseRef"), ' +
    '"UNLICENSED", or ' +
    '"SEE LICENSE IN <filename>"'
  const fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/
  function startsWith(prefix, string) {
    return string.slice(0, prefix.length) === prefix
  }
  function usesLicenseRef(ast) {
    if (ast.hasOwnProperty('license')) {
      const license = ast.license
      return (
        startsWith('LicenseRef', license) || startsWith('DocumentRef', license)
      )
    } else {
      return usesLicenseRef(ast.left) || usesLicenseRef(ast.right)
    }
  }
  validateNpmPackageLicense = function (argument) {
    let ast
    try {
      ast = parse(argument)
    } catch (e) {
      let match
      if (argument === 'UNLICENSED' || argument === 'UNLICENCED') {
        return {
          validForOldPackages: true,
          validForNewPackages: true,
          unlicensed: true
        }
      } else if ((match = fileReferenceRE.exec(argument))) {
        return {
          validForOldPackages: true,
          validForNewPackages: true,
          inFile: match[1]
        }
      } else {
        const result = {
          validForOldPackages: false,
          validForNewPackages: false,
          warnings: [genericWarning]
        }
        if (argument.trim().length !== 0) {
          const corrected = correct(argument)
          if (corrected) {
            result.warnings.push(
              'license is similar to the valid expression "' + corrected + '"'
            )
          }
        }
        return result
      }
    }
    if (usesLicenseRef(ast)) {
      return {
        validForNewPackages: false,
        validForOldPackages: false,
        spdx: true,
        warnings: [genericWarning]
      }
    } else {
      return {
        validForNewPackages: true,
        validForOldPackages: true,
        spdx: true
      }
    }
  }
  return validateNpmPackageLicense
}

let normalizeData_1
let hasRequiredNormalizeData
function requireNormalizeData() {
  if (hasRequiredNormalizeData) {
    return normalizeData_1
  }
  hasRequiredNormalizeData = 1
  const hostedGitInfo = requireLib$s()
  const validateLicense = requireValidateNpmPackageLicense()
  const typos = {
    dependancies: 'dependencies',
    dependecies: 'dependencies',
    depdenencies: 'dependencies',
    devEependencies: 'devDependencies',
    depends: 'dependencies',
    'dev-dependencies': 'devDependencies',
    devDependences: 'devDependencies',
    devDepenencies: 'devDependencies',
    devdependencies: 'devDependencies',
    repostitory: 'repository',
    repo: 'repository',
    prefereGlobal: 'preferGlobal',
    hompage: 'homepage',
    hampage: 'homepage',
    autohr: 'author',
    autor: 'author',
    contributers: 'contributors',
    publicationConfig: 'publishConfig',
    script: 'scripts'
  }
  const isEmail = str =>
    str.includes('@') && str.indexOf('@') < str.lastIndexOf('.')

  // Extracts description from contents of a readme file in markdown format
  function extractDescription(description) {
    // the first block of text before the first heading that isn't the first line heading
    const lines = description.trim().split('\n')
    let start = 0
    // skip initial empty lines and lines that start with #
    while (lines[start]?.trim().match(/^(#|$)/)) {
      start++
    }
    let end = start + 1
    // keep going till we get to the end or an empty line
    while (end < lines.length && lines[end].trim()) {
      end++
    }
    return lines.slice(start, end).join(' ').trim()
  }
  function stringifyPerson(person) {
    if (typeof person !== 'string') {
      const name = person.name || ''
      const u = person.url || person.web
      const wrappedUrl = u ? ' (' + u + ')' : ''
      const e = person.email || person.mail
      const wrappedEmail = e ? ' <' + e + '>' : ''
      person = name + wrappedEmail + wrappedUrl
    }
    const matchedName = person.match(/^([^(<]+)/)
    const matchedUrl = person.match(/\(([^()]+)\)/)
    const matchedEmail = person.match(/<([^<>]+)>/)
    const parsed = {}
    if (matchedName?.[0].trim()) {
      parsed.name = matchedName[0].trim()
    }
    if (matchedEmail) {
      parsed.email = matchedEmail[1]
    }
    if (matchedUrl) {
      parsed.url = matchedUrl[1]
    }
    return parsed
  }
  function normalizeData(data, changes) {
    // fixDescriptionField
    if (data.description && typeof data.description !== 'string') {
      changes?.push(`'description' field should be a string`)
      delete data.description
    }
    if (
      data.readme &&
      !data.description &&
      data.readme !== 'ERROR: No README data found!'
    ) {
      data.description = extractDescription(data.readme)
    }
    if (data.description === undefined) {
      delete data.description
    }
    if (!data.description) {
      changes?.push('No description')
    }

    // fixModulesField
    if (data.modules) {
      changes?.push(`modules field is deprecated`)
      delete data.modules
    }

    // fixFilesField
    const files = data.files
    if (files && !Array.isArray(files)) {
      changes?.push(`Invalid 'files' member`)
      delete data.files
    } else if (data.files) {
      data.files = data.files.filter(function (file) {
        if (!file || typeof file !== 'string') {
          changes?.push(`Invalid filename in 'files' list: ${file}`)
          return false
        } else {
          return true
        }
      })
    }

    // fixManField
    if (data.man && typeof data.man === 'string') {
      data.man = [data.man]
    }

    // fixBugsField
    if (!data.bugs && data.repository?.url) {
      const hosted = hostedGitInfo.fromUrl(data.repository.url)
      if (hosted && hosted.bugs()) {
        data.bugs = {
          url: hosted.bugs()
        }
      }
    } else if (data.bugs) {
      if (typeof data.bugs === 'string') {
        if (isEmail(data.bugs)) {
          data.bugs = {
            email: data.bugs
          }
          /* eslint-disable-next-line node/no-deprecated-api */
        } else if (new URL(data.bugs).protocol) {
          data.bugs = {
            url: data.bugs
          }
        } else {
          changes?.push(`Bug string field must be url, email, or {email,url}`)
        }
      } else {
        for (const k in data.bugs) {
          if (['web', 'name'].includes(k)) {
            changes?.push(`bugs['${k}'] should probably be bugs['url'].`)
            data.bugs.url = data.bugs[k]
            delete data.bugs[k]
          }
        }
        const oldBugs = data.bugs
        data.bugs = {}
        if (oldBugs.url) {
          /* eslint-disable-next-line node/no-deprecated-api */
          if (
            typeof oldBugs.url === 'string' &&
            new URL(oldBugs.url).protocol
          ) {
            data.bugs.url = oldBugs.url
          } else {
            changes?.push('bugs.url field must be a string url. Deleted.')
          }
        }
        if (oldBugs.email) {
          if (typeof oldBugs.email === 'string' && isEmail(oldBugs.email)) {
            data.bugs.email = oldBugs.email
          } else {
            changes?.push('bugs.email field must be a string email. Deleted.')
          }
        }
      }
      if (!data.bugs.email && !data.bugs.url) {
        delete data.bugs
        changes?.push(
          'Normalized value of bugs field is an empty object. Deleted.'
        )
      }
    }
    // fixKeywordsField
    if (typeof data.keywords === 'string') {
      data.keywords = data.keywords.split(/,\s+/)
    }
    if (data.keywords && !Array.isArray(data.keywords)) {
      delete data.keywords
      changes?.push(`keywords should be an array of strings`)
    } else if (data.keywords) {
      data.keywords = data.keywords.filter(function (kw) {
        if (typeof kw !== 'string' || !kw) {
          changes?.push(`keywords should be an array of strings`)
          return false
        } else {
          return true
        }
      })
    }
    // fixBundleDependenciesField
    const bdd = 'bundledDependencies'
    const bd = 'bundleDependencies'
    if (data[bdd] && !data[bd]) {
      data[bd] = data[bdd]
      delete data[bdd]
    }
    if (data[bd] && !Array.isArray(data[bd])) {
      changes?.push(
        `Invalid 'bundleDependencies' list. Must be array of package names`
      )
      delete data[bd]
    } else if (data[bd]) {
      data[bd] = data[bd].filter(function (filtered) {
        if (!filtered || typeof filtered !== 'string') {
          changes?.push(`Invalid bundleDependencies member: ${filtered}`)
          return false
        } else {
          if (!data.dependencies) {
            data.dependencies = {}
          }
          if (
            !Object.prototype.hasOwnProperty.call(data.dependencies, filtered)
          ) {
            changes?.push(`Non-dependency in bundleDependencies: ${filtered}`)
            data.dependencies[filtered] = '*'
          }
          return true
        }
      })
    }
    // fixHomepageField
    if (!data.homepage && data.repository && data.repository.url) {
      const hosted = hostedGitInfo.fromUrl(data.repository.url)
      if (hosted) {
        data.homepage = hosted.docs()
      }
    }
    if (data.homepage) {
      if (typeof data.homepage !== 'string') {
        changes?.push('homepage field must be a string url. Deleted.')
        delete data.homepage
      } else {
        /* eslint-disable-next-line node/no-deprecated-api */
        if (!new URL(data.homepage).protocol) {
          data.homepage = 'http://' + data.homepage
        }
      }
    }
    // fixReadmeField
    if (!data.readme) {
      changes?.push('No README data')
      data.readme = 'ERROR: No README data found!'
    }
    // fixLicenseField
    const license = data.license || data.licence
    if (!license) {
      changes?.push('No license field.')
    } else if (
      typeof license !== 'string' ||
      license.length < 1 ||
      license.trim() === ''
    ) {
      changes?.push('license should be a valid SPDX license expression')
    } else if (!validateLicense(license).validForNewPackages) {
      changes?.push('license should be a valid SPDX license expression')
    }
    // fixPeople
    if (data.author) {
      data.author = stringifyPerson(data.author)
    }
    ;['maintainers', 'contributors'].forEach(function (set) {
      if (!Array.isArray(data[set])) {
        return
      }
      data[set] = data[set].map(stringifyPerson)
    })
    // fixTypos
    for (const d in typos) {
      if (Object.prototype.hasOwnProperty.call(data, d)) {
        changes?.push(`${d} should probably be ${typos[d]}.`)
      }
    }
  }
  normalizeData_1 = {
    normalizeData
  }
  return normalizeData_1
}

let normalize_1
let hasRequiredNormalize
function requireNormalize() {
  if (hasRequiredNormalize) {
    return normalize_1
  }
  hasRequiredNormalize = 1
  const valid = requireValid$1()
  const clean = requireClean()
  const fs = require$$0$5
  const path = require$$2$3
  const { log } = requireLib$t()
  const moduleBuiltin = require$$5$2

  /**
   * @type {import('hosted-git-info')}
   */
  let _hostedGitInfo
  function lazyHostedGitInfo() {
    if (!_hostedGitInfo) {
      _hostedGitInfo = requireLib$s()
    }
    return _hostedGitInfo
  }

  /**
   * @type {import('glob').glob}
   */
  let _glob
  function lazyLoadGlob() {
    if (!_glob) {
      _glob = requireCommonjs$5().glob
    }
    return _glob
  }

  // used to be npm-normalize-package-bin
  function normalizePackageBin(pkg, changes) {
    if (pkg.bin) {
      if (typeof pkg.bin === 'string' && pkg.name) {
        changes?.push('"bin" was converted to an object')
        pkg.bin = {
          [pkg.name]: pkg.bin
        }
      } else if (Array.isArray(pkg.bin)) {
        changes?.push('"bin" was converted to an object')
        pkg.bin = pkg.bin.reduce((acc, k) => {
          acc[path.basename(k)] = k
          return acc
        }, {})
      }
      if (typeof pkg.bin === 'object') {
        for (const binKey in pkg.bin) {
          if (typeof pkg.bin[binKey] !== 'string') {
            delete pkg.bin[binKey]
            changes?.push(`removed invalid "bin[${binKey}]"`)
            continue
          }
          const base = path.basename(secureAndUnixifyPath(binKey))
          if (!base) {
            delete pkg.bin[binKey]
            changes?.push(`removed invalid "bin[${binKey}]"`)
            continue
          }
          const binTarget = secureAndUnixifyPath(pkg.bin[binKey])
          if (!binTarget) {
            delete pkg.bin[binKey]
            changes?.push(`removed invalid "bin[${binKey}]"`)
            continue
          }
          if (base !== binKey) {
            delete pkg.bin[binKey]
            changes?.push(`"bin[${binKey}]" was renamed to "bin[${base}]"`)
          }
          if (binTarget !== pkg.bin[binKey]) {
            changes?.push(`"bin[${base}]" script name was cleaned`)
          }
          pkg.bin[base] = binTarget
        }
        if (Object.keys(pkg.bin).length === 0) {
          changes?.push('empty "bin" was removed')
          delete pkg.bin
        }
        return pkg
      }
    }
    delete pkg.bin
  }
  function normalizePackageMan(pkg, changes) {
    if (pkg.man) {
      const mans = []
      for (const man of Array.isArray(pkg.man) ? pkg.man : [pkg.man]) {
        if (typeof man !== 'string') {
          changes?.push(`removed invalid "man [${man}]"`)
        } else {
          mans.push(secureAndUnixifyPath(man))
        }
      }
      if (!mans.length) {
        changes?.push('empty "man" was removed')
      } else {
        pkg.man = mans
        return pkg
      }
    }
    delete pkg.man
  }
  function isCorrectlyEncodedName(spec) {
    return !spec.match(/[/@\s+%:]/) && spec === encodeURIComponent(spec)
  }
  function isValidScopedPackageName(spec) {
    if (spec.charAt(0) !== '@') {
      return false
    }
    const rest = spec.slice(1).split('/')
    if (rest.length !== 2) {
      return false
    }
    return (
      rest[0] &&
      rest[1] &&
      rest[0] === encodeURIComponent(rest[0]) &&
      rest[1] === encodeURIComponent(rest[1])
    )
  }
  function unixifyPath(ref) {
    return ref.replace(/\\|:/g, '/')
  }
  function secureAndUnixifyPath(ref) {
    const secured = unixifyPath(
      path.join('.', path.join('/', unixifyPath(ref)))
    )
    return secured.startsWith('./') ? '' : secured
  }

  // We don't want the `changes` array in here by default because this is a hot
  // path for parsing packuments during install.  So the calling method passes it
  // in if it wants to track changes.
  const normalize = async (
    pkg,
    { strict, steps, root, changes, allowLegacyCase }
  ) => {
    if (!pkg.content) {
      throw new Error('Can not normalize without content')
    }
    const data = pkg.content
    const scripts = data.scripts || {}
    const pkgId = `${data.name ?? ''}@${data.version ?? ''}`

    // name and version are load bearing so we have to clean them up first
    if (
      steps.includes('fixName') ||
      steps.includes('fixNameField') ||
      steps.includes('normalizeData')
    ) {
      if (!data.name && !strict) {
        changes?.push('Missing "name" field was set to an empty string')
        data.name = ''
      } else {
        if (typeof data.name !== 'string') {
          throw new Error('name field must be a string.')
        }
        if (!strict) {
          const name = data.name.trim()
          if (data.name !== name) {
            changes?.push(`Whitespace was trimmed from "name"`)
            data.name = name
          }
        }
        if (
          data.name.startsWith('.') ||
          !(
            isValidScopedPackageName(data.name) ||
            isCorrectlyEncodedName(data.name)
          ) ||
          (strict &&
            !allowLegacyCase &&
            data.name !== data.name.toLowerCase()) ||
          data.name.toLowerCase() === 'node_modules' ||
          data.name.toLowerCase() === 'favicon.ico'
        ) {
          throw new Error('Invalid name: ' + JSON.stringify(data.name))
        }
      }
    }
    if (steps.includes('fixName')) {
      // Check for conflicts with builtin modules
      if (moduleBuiltin.builtinModules.includes(data.name)) {
        log.warn(
          'package-json',
          pkgId,
          `Package name "${data.name}" conflicts with a Node.js built-in module name`
        )
      }
    }
    if (steps.includes('fixVersionField') || steps.includes('normalizeData')) {
      // allow "loose" semver 1.0 versions in non-strict mode
      // enforce strict semver 2.0 compliance in strict mode
      const loose = !strict
      if (!data.version) {
        data.version = ''
      } else {
        if (!valid(data.version, loose)) {
          throw new Error(`Invalid version: "${data.version}"`)
        }
        const version = clean(data.version, loose)
        if (version !== data.version) {
          changes?.push(`"version" was cleaned and set to "${version}"`)
          data.version = version
        }
      }
    }
    // remove attributes that start with "_"
    if (steps.includes('_attributes')) {
      for (const key in data) {
        if (key.startsWith('_')) {
          changes?.push(`"${key}" was removed`)
          delete pkg.content[key]
        }
      }
    }

    // build the "_id" attribute
    if (steps.includes('_id')) {
      if (data.name && data.version) {
        changes?.push(`"_id" was set to ${pkgId}`)
        data._id = pkgId
      }
    }

    // fix bundledDependencies typo
    // normalize bundleDependencies
    if (steps.includes('bundledDependencies')) {
      if (
        data.bundleDependencies === undefined &&
        data.bundledDependencies !== undefined
      ) {
        data.bundleDependencies = data.bundledDependencies
      }
      changes?.push(`Deleted incorrect "bundledDependencies"`)
      delete data.bundledDependencies
    }
    // expand "bundleDependencies: true or translate from object"
    if (steps.includes('bundleDependencies')) {
      const bd = data.bundleDependencies
      if (bd === false && !steps.includes('bundleDependenciesDeleteFalse')) {
        changes?.push(`"bundleDependencies" was changed from "false" to "[]"`)
        data.bundleDependencies = []
      } else if (bd === true) {
        changes?.push(
          `"bundleDependencies" was auto-populated from "dependencies"`
        )
        data.bundleDependencies = Object.keys(data.dependencies || {})
      } else if (bd && typeof bd === 'object') {
        if (!Array.isArray(bd)) {
          changes?.push(
            `"bundleDependencies" was changed from an object to an array`
          )
          data.bundleDependencies = Object.keys(bd)
        }
      } else if ('bundleDependencies' in data) {
        changes?.push(`"bundleDependencies" was removed`)
        delete data.bundleDependencies
      }
    }

    // it was once common practice to list deps both in optionalDependencies and
    // in dependencies, to support npm versions that did not know about
    // optionalDependencies.  This is no longer a relevant need, so duplicating
    // the deps in two places is unnecessary and excessive.
    if (steps.includes('optionalDedupe')) {
      if (
        data.dependencies &&
        data.optionalDependencies &&
        typeof data.optionalDependencies === 'object'
      ) {
        for (const name in data.optionalDependencies) {
          changes?.push(`optionalDependencies."${name}" was removed`)
          delete data.dependencies[name]
        }
        if (!Object.keys(data.dependencies).length) {
          changes?.push(`Empty "optionalDependencies" was removed`)
          delete data.dependencies
        }
      }
    }

    // add "install" attribute if any "*.gyp" files exist
    if (steps.includes('gypfile')) {
      if (!scripts.install && !scripts.preinstall && data.gypfile !== false) {
        const files = await lazyLoadGlob()('*.gyp', {
          cwd: pkg.path
        })
        if (files.length) {
          scripts.install = 'node-gyp rebuild'
          data.scripts = scripts
          data.gypfile = true
          changes?.push(`"scripts.install" was set to "node-gyp rebuild"`)
          changes?.push(`"gypfile" was set to "true"`)
        }
      }
    }

    // add "start" attribute if "server.js" exists
    if (steps.includes('serverjs') && !scripts.start) {
      try {
        await fs.access(path.join(pkg.path, 'server.js'))
        scripts.start = 'node server.js'
        data.scripts = scripts
        changes?.push('"scripts.start" was set to "node server.js"')
      } catch {
        // do nothing
      }
    }

    // strip "node_modules/.bin" from scripts entries
    // remove invalid scripts entries (non-strings)
    if (
      (steps.includes('scripts') || steps.includes('scriptpath')) &&
      data.scripts !== undefined
    ) {
      const spre = /^(\.[/\\])?node_modules[/\\].bin[\\/]/
      if (typeof data.scripts === 'object') {
        for (const name in data.scripts) {
          if (typeof data.scripts[name] !== 'string') {
            delete data.scripts[name]
            changes?.push(`Invalid scripts."${name}" was removed`)
          } else if (
            steps.includes('scriptpath') &&
            spre.test(data.scripts[name])
          ) {
            data.scripts[name] = data.scripts[name].replace(spre, '')
            changes?.push(
              `scripts entry "${name}" was fixed to remove node_modules/.bin reference`
            )
          }
        }
      } else {
        changes?.push(`Removed invalid "scripts"`)
        delete data.scripts
      }
    }
    if (steps.includes('funding')) {
      if (data.funding && typeof data.funding === 'string') {
        data.funding = {
          url: data.funding
        }
        changes?.push(`"funding" was changed to an object with a url attribute`)
      }
    }

    // populate "authors" attribute
    if (steps.includes('authors') && !data.contributors) {
      try {
        const authorData = await fs.readFile(
          path.join(pkg.path, 'AUTHORS'),
          'utf8'
        )
        const authors = authorData
          .split(/\r?\n/g)
          .map(line => line.replace(/^\s*#.*$/, '').trim())
          .filter(line => line)
        data.contributors = authors
        changes?.push(
          '"contributors" was auto-populated with the contents of the "AUTHORS" file'
        )
      } catch {
        // do nothing
      }
    }

    // populate "readme" attribute
    if (steps.includes('readme') && !data.readme) {
      const mdre = /\.m?a?r?k?d?o?w?n?$/i
      const files = await lazyLoadGlob()('{README,README.*}', {
        cwd: pkg.path,
        nocase: true,
        mark: true
      })
      let readmeFile
      for (const file of files) {
        // don't accept directories.
        if (!file.endsWith(path.sep)) {
          if (file.match(mdre)) {
            readmeFile = file
            break
          }
          if (file.endsWith('README')) {
            readmeFile = file
          }
        }
      }
      if (readmeFile) {
        const readmeData = await fs.readFile(
          path.join(pkg.path, readmeFile),
          'utf8'
        )
        data.readme = readmeData
        data.readmeFilename = readmeFile
        changes?.push(`"readme" was set to the contents of ${readmeFile}`)
        changes?.push(`"readmeFilename" was set to ${readmeFile}`)
      }
      if (!data.readme) {
        data.readme = 'ERROR: No README data found!'
      }
    }

    // expand directories.man
    if (steps.includes('mans')) {
      if (data.directories?.man && !data.man) {
        const manDir = secureAndUnixifyPath(data.directories.man)
        const cwd = path.resolve(pkg.path, manDir)
        const files = await lazyLoadGlob()('**/*.[0-9]', {
          cwd
        })
        data.man = files.map(man =>
          path.relative(pkg.path, path.join(cwd, man)).split(path.sep).join('/')
        )
      }
      normalizePackageMan(data, changes)
    }
    if (
      steps.includes('bin') ||
      steps.includes('binDir') ||
      steps.includes('binRefs')
    ) {
      normalizePackageBin(data, changes)
    }

    // expand "directories.bin"
    if (steps.includes('binDir') && data.directories?.bin && !data.bin) {
      const binsDir = path.resolve(
        pkg.path,
        secureAndUnixifyPath(data.directories.bin)
      )
      const bins = await lazyLoadGlob()('**', {
        cwd: binsDir
      })
      data.bin = bins.reduce((acc, binFile) => {
        if (binFile && !binFile.startsWith('.')) {
          const binName = path.basename(binFile)
          acc[binName] = path.join(data.directories.bin, binFile)
        }
        return acc
      }, {})
      // *sigh*
      normalizePackageBin(data, changes)
    }

    // populate "gitHead" attribute
    if (steps.includes('gitHead') && !data.gitHead) {
      const git = requireLib$l()
      const gitRoot = await git.find({
        cwd: pkg.path,
        root
      })
      let head
      if (gitRoot) {
        try {
          head = await fs.readFile(path.resolve(gitRoot, '.git/HEAD'), 'utf8')
        } catch (err) {
          // do nothing
        }
      }
      let headData
      if (head) {
        if (head.startsWith('ref: ')) {
          const headRef = head.replace(/^ref: /, '').trim()
          const headFile = path.resolve(gitRoot, '.git', headRef)
          try {
            headData = await fs.readFile(headFile, 'utf8')
            headData = headData.replace(/^ref: /, '').trim()
          } catch (err) {
            // do nothing
          }
          if (!headData) {
            const packFile = path.resolve(gitRoot, '.git/packed-refs')
            try {
              let refs = await fs.readFile(packFile, 'utf8')
              if (refs) {
                refs = refs.split('\n')
                for (let i = 0; i < refs.length; i++) {
                  const match = refs[i].match(/^([0-9a-f]{40}) (.+)$/)
                  if (match && match[2].trim() === headRef) {
                    headData = match[1]
                    break
                  }
                }
              }
            } catch {
              // do nothing
            }
          }
        } else {
          headData = head.trim()
        }
      }
      if (headData) {
        data.gitHead = headData
      }
    }

    // populate "types" attribute
    if (steps.includes('fillTypes')) {
      const index = data.main || 'index.js'
      if (typeof index !== 'string') {
        throw new TypeError('The "main" attribute must be of type string.')
      }

      // TODO exports is much more complicated than this in verbose format
      // We need to support for instance

      // "exports": {
      //   ".": [
      //     {
      //       "default": "./lib/npm.js"
      //     },
      //     "./lib/npm.js"
      //   ],
      //   "./package.json": "./package.json"
      // },
      // as well as conditional exports

      // if (data.exports && typeof data.exports === 'string') {
      //   index = data.exports
      // }

      // if (data.exports && data.exports['.']) {
      //   index = data.exports['.']
      //   if (typeof index !== 'string') {
      //   }
      // }
      const extless = path.join(
        path.dirname(index),
        path.basename(index, path.extname(index))
      )
      const dts = `./${extless}.d.ts`
      const hasDTSFields = 'types' in data || 'typings' in data
      if (!hasDTSFields) {
        try {
          await fs.access(path.join(pkg.path, dts))
          data.types = dts.split(path.sep).join('/')
        } catch {
          // do nothing
        }
      }
    }

    // "normalizeData" from "read-package-json", which was just a call through to
    // "normalize-package-data".  We only call the "fixer" functions because
    // outside of that it was also clobbering _id (which we already conditionally
    // do) and also adding the gypfile script (which we also already
    // conditionally do)

    // Some steps are isolated so we can do a limited subset of these in `fix`
    if (
      steps.includes('fixRepositoryField') ||
      steps.includes('normalizeData')
    ) {
      if (data.repositories) {
        changes?.push(
          `"repository" was set to the first entry in "repositories" (${data.repository})`
        )
        data.repository = data.repositories[0]
      }
      if (data.repository) {
        if (typeof data.repository === 'string') {
          changes?.push('"repository" was changed from a string to an object')
          data.repository = {
            type: 'git',
            url: data.repository
          }
        }
        if (data.repository.url) {
          const hosted = lazyHostedGitInfo().fromUrl(data.repository.url)
          let r
          if (hosted) {
            if (hosted.getDefaultRepresentation() === 'shortcut') {
              r = hosted.https()
            } else {
              r = hosted.toString()
            }
            if (r !== data.repository.url) {
              changes?.push(`"repository.url" was normalized to "${r}"`)
              data.repository.url = r
            }
          }
        }
      }
    }
    if (steps.includes('fixDependencies') || steps.includes('normalizeData')) {
      // peerDependencies?
      // devDependencies is meaningless here, it's ignored on an installed package
      for (const type of [
        'dependencies',
        'devDependencies',
        'optionalDependencies'
      ]) {
        if (data[type]) {
          let secondWarning = true
          if (typeof data[type] === 'string') {
            changes?.push(
              `"${type}" was converted from a string into an object`
            )
            data[type] = data[type].trim().split(/[\n\r\s\t ,]+/)
            secondWarning = false
          }
          if (Array.isArray(data[type])) {
            if (secondWarning) {
              changes?.push(
                `"${type}" was converted from an array into an object`
              )
            }
            const o = {}
            for (const d of data[type]) {
              if (typeof d === 'string') {
                const dep = d.trim().split(/(:?[@\s><=])/)
                const dn = dep.shift()
                const dv = dep.join('').replace(/^@/, '').trim()
                o[dn] = dv
              }
            }
            data[type] = o
          }
        }
      }
      // normalize-package-data used to put optional dependencies BACK into
      // dependencies here, we no longer do this

      for (const deps of ['dependencies', 'devDependencies']) {
        if (deps in data) {
          if (!data[deps] || typeof data[deps] !== 'object') {
            changes?.push(`Removed invalid "${deps}"`)
            delete data[deps]
          } else {
            for (const d in data[deps]) {
              const r = data[deps][d]
              if (typeof r !== 'string') {
                changes?.push(`Removed invalid "${deps}.${d}"`)
                delete data[deps][d]
              }
              const hosted = lazyHostedGitInfo()
                .fromUrl(data[deps][d])
                ?.toString()
              if (hosted && hosted !== data[deps][d]) {
                changes?.push(`Normalized git reference to "${deps}.${d}"`)
                data[deps][d] = hosted.toString()
              }
            }
          }
        }
      }
    }

    // TODO some of this is duplicated in other steps here, a future breaking change may be able to remove the duplicates involved in this step
    if (steps.includes('normalizeData')) {
      const { normalizeData } = requireNormalizeData()
      normalizeData(data, changes)
    }

    // Warn if the bin references don't point to anything.  This might be better
    // in normalize-package-data if it had access to the file path.
    if (steps.includes('binRefs') && data.bin instanceof Object) {
      for (const key in data.bin) {
        try {
          await fs.access(path.resolve(pkg.path, data.bin[key]))
        } catch {
          log.warn(
            'package-json',
            pkgId,
            `No bin file found at ${data.bin[key]}`
          )
          // XXX: should a future breaking change delete bin entries that cannot be accessed?
        }
      }
    }
  }
  normalize_1 = normalize
  return normalize_1
}

let readPackage_1
let hasRequiredReadPackage
function requireReadPackage() {
  if (hasRequiredReadPackage) {
    return readPackage_1
  }
  hasRequiredReadPackage = 1
  // This is JUST the code needed to open a package.json file and parse it.
  // It's isolated out so that code needing to parse a package.json file can do so in the same way as this module does, without needing to require the whole module, or needing to require the underlying parsing library.

  const { readFile } = require$$0$7
  const parseJSON = requireLib$u()
  async function read(filename) {
    try {
      const data = await readFile(filename, 'utf8')
      return data
    } catch (err) {
      err.message = `Could not read package.json: ${err}`
      throw err
    }
  }
  function parse(data) {
    try {
      const content = parseJSON(data)
      return content
    } catch (err) {
      err.message = `Invalid package.json: ${err}`
      throw err
    }
  }

  // This is what most external libs will use.
  // PackageJson will call read and parse separately
  async function readPackage(filename) {
    const data = await read(filename)
    const content = parse(data)
    return content
  }
  readPackage_1 = {
    read,
    parse,
    readPackage
  }
  return readPackage_1
}

/**
 * arbitrary sort order for package.json largely pulled from:
 * https://github.com/keithamus/sort-package-json/blob/main/defaultRules.md
 *
 * cross checked with:
 * https://github.com/npm/types/blob/main/types/index.d.ts#L104
 * https://docs.npmjs.com/cli/configuring-npm/package-json
 */
let sort
let hasRequiredSort
function requireSort() {
  if (hasRequiredSort) {
    return sort
  }
  hasRequiredSort = 1
  function packageSort(json) {
    const {
      name,
      version,
      private: isPrivate,
      description,
      keywords,
      homepage,
      bugs,
      repository,
      funding,
      license,
      author,
      maintainers,
      contributors,
      type,
      imports,
      exports,
      main,
      browser,
      types,
      bin,
      man,
      directories,
      files,
      workspaces,
      scripts,
      config,
      dependencies,
      devDependencies,
      peerDependencies,
      peerDependenciesMeta,
      optionalDependencies,
      bundledDependencies,
      bundleDependencies,
      engines,
      os,
      cpu,
      publishConfig,
      devEngines,
      licenses,
      overrides,
      ...rest
    } = json
    return {
      ...(typeof name !== 'undefined'
        ? {
            name
          }
        : {}),
      ...(typeof version !== 'undefined'
        ? {
            version
          }
        : {}),
      ...(typeof isPrivate !== 'undefined'
        ? {
            private: isPrivate
          }
        : {}),
      ...(typeof description !== 'undefined'
        ? {
            description
          }
        : {}),
      ...(typeof keywords !== 'undefined'
        ? {
            keywords
          }
        : {}),
      ...(typeof homepage !== 'undefined'
        ? {
            homepage
          }
        : {}),
      ...(typeof bugs !== 'undefined'
        ? {
            bugs
          }
        : {}),
      ...(typeof repository !== 'undefined'
        ? {
            repository
          }
        : {}),
      ...(typeof funding !== 'undefined'
        ? {
            funding
          }
        : {}),
      ...(typeof license !== 'undefined'
        ? {
            license
          }
        : {}),
      ...(typeof author !== 'undefined'
        ? {
            author
          }
        : {}),
      ...(typeof maintainers !== 'undefined'
        ? {
            maintainers
          }
        : {}),
      ...(typeof contributors !== 'undefined'
        ? {
            contributors
          }
        : {}),
      ...(typeof type !== 'undefined'
        ? {
            type
          }
        : {}),
      ...(typeof imports !== 'undefined'
        ? {
            imports
          }
        : {}),
      ...(typeof exports !== 'undefined'
        ? {
            exports
          }
        : {}),
      ...(typeof main !== 'undefined'
        ? {
            main
          }
        : {}),
      ...(typeof browser !== 'undefined'
        ? {
            browser
          }
        : {}),
      ...(typeof types !== 'undefined'
        ? {
            types
          }
        : {}),
      ...(typeof bin !== 'undefined'
        ? {
            bin
          }
        : {}),
      ...(typeof man !== 'undefined'
        ? {
            man
          }
        : {}),
      ...(typeof directories !== 'undefined'
        ? {
            directories
          }
        : {}),
      ...(typeof files !== 'undefined'
        ? {
            files
          }
        : {}),
      ...(typeof workspaces !== 'undefined'
        ? {
            workspaces
          }
        : {}),
      ...(typeof scripts !== 'undefined'
        ? {
            scripts
          }
        : {}),
      ...(typeof config !== 'undefined'
        ? {
            config
          }
        : {}),
      ...(typeof dependencies !== 'undefined'
        ? {
            dependencies
          }
        : {}),
      ...(typeof devDependencies !== 'undefined'
        ? {
            devDependencies
          }
        : {}),
      ...(typeof peerDependencies !== 'undefined'
        ? {
            peerDependencies
          }
        : {}),
      ...(typeof peerDependenciesMeta !== 'undefined'
        ? {
            peerDependenciesMeta
          }
        : {}),
      ...(typeof optionalDependencies !== 'undefined'
        ? {
            optionalDependencies
          }
        : {}),
      ...(typeof bundledDependencies !== 'undefined'
        ? {
            bundledDependencies
          }
        : {}),
      ...(typeof bundleDependencies !== 'undefined'
        ? {
            bundleDependencies
          }
        : {}),
      ...(typeof engines !== 'undefined'
        ? {
            engines
          }
        : {}),
      ...(typeof os !== 'undefined'
        ? {
            os
          }
        : {}),
      ...(typeof cpu !== 'undefined'
        ? {
            cpu
          }
        : {}),
      ...(typeof publishConfig !== 'undefined'
        ? {
            publishConfig
          }
        : {}),
      ...(typeof devEngines !== 'undefined'
        ? {
            devEngines
          }
        : {}),
      ...(typeof licenses !== 'undefined'
        ? {
            licenses
          }
        : {}),
      ...(typeof overrides !== 'undefined'
        ? {
            overrides
          }
        : {}),
      ...rest
    }
  }
  sort = {
    packageSort
  }
  return sort
}

let lib$k
let hasRequiredLib$k
function requireLib$k() {
  if (hasRequiredLib$k) {
    return lib$k
  }
  hasRequiredLib$k = 1
  const { readFile, writeFile } = require$$0$5
  const { resolve } = require$$2$3
  const parseJSON = requireLib$u()
  const updateDeps = requireUpdateDependencies()
  const updateScripts = requireUpdateScripts()
  const updateWorkspaces = requireUpdateWorkspaces()
  const normalize = requireNormalize()
  const { read, parse } = requireReadPackage()
  const { packageSort } = requireSort()

  // a list of handy specialized helper functions that take
  // care of special cases that are handled by the npm cli
  const knownSteps = new Set([updateDeps, updateScripts, updateWorkspaces])

  // list of all keys that are handled by "knownSteps" helpers
  const knownKeys = new Set([...updateDeps.knownKeys, 'scripts', 'workspaces'])
  class PackageJson {
    static normalizeSteps = Object.freeze([
      '_id',
      '_attributes',
      'bundledDependencies',
      'bundleDependencies',
      'optionalDedupe',
      'scripts',
      'funding',
      'bin'
    ])

    // npm pkg fix
    static fixSteps = Object.freeze([
      'binRefs',
      'bundleDependencies',
      'bundleDependenciesFalse',
      'fixName',
      'fixNameField',
      'fixVersionField',
      'fixRepositoryField',
      'fixDependencies',
      'devDependencies',
      'scriptpath'
    ])
    static prepareSteps = Object.freeze([
      '_id',
      '_attributes',
      'bundledDependencies',
      'bundleDependencies',
      'bundleDependenciesDeleteFalse',
      'gypfile',
      'serverjs',
      'scriptpath',
      'authors',
      'readme',
      'mans',
      'binDir',
      'gitHead',
      'fillTypes',
      'normalizeData',
      'binRefs'
    ])

    // create a new empty package.json, so we can save at the given path even
    // though we didn't start from a parsed file
    static async create(path, opts = {}) {
      const p = new PackageJson()
      await p.create(path)
      if (opts.data) {
        return p.update(opts.data)
      }
      return p
    }

    // Loads a package.json at given path and JSON parses
    static async load(path, opts = {}) {
      const p = new PackageJson()
      // Avoid try/catch if we aren't going to create
      if (!opts.create) {
        return p.load(path)
      }
      try {
        return await p.load(path)
      } catch (err) {
        if (!err.message.startsWith('Could not read package.json')) {
          throw err
        }
        return await p.create(path)
      }
    }

    // npm pkg fix
    static async fix(path, opts) {
      const p = new PackageJson()
      await p.load(path, true)
      return p.fix(opts)
    }

    // read-package-json compatible behavior
    static async prepare(path, opts) {
      const p = new PackageJson()
      await p.load(path, true)
      return p.prepare(opts)
    }

    // read-package-json-fast compatible behavior
    static async normalize(path, opts) {
      const p = new PackageJson()
      await p.load(path)
      return p.normalize(opts)
    }
    #path
    #manifest
    #readFileContent = ''
    #canSave = true

    // Load content from given path
    async load(path, parseIndex) {
      this.#path = path
      let parseErr
      try {
        this.#readFileContent = await read(this.filename)
      } catch (err) {
        if (!parseIndex) {
          throw err
        }
        parseErr = err
      }
      if (parseErr) {
        const indexFile = resolve(this.path, 'index.js')
        let indexFileContent
        try {
          indexFileContent = await readFile(indexFile, 'utf8')
        } catch (err) {
          throw parseErr
        }
        try {
          this.fromComment(indexFileContent)
        } catch (err) {
          throw parseErr
        }
        // This wasn't a package.json so prevent saving
        this.#canSave = false
        return this
      }
      return this.fromJSON(this.#readFileContent)
    }

    // Load data from a JSON string/buffer
    fromJSON(data) {
      this.#manifest = parse(data)
      return this
    }
    fromContent(data) {
      this.#manifest = data
      this.#canSave = false
      return this
    }

    // Load data from a comment
    // /**package { "name": "foo", "version": "1.2.3", ... } **/
    fromComment(data) {
      data = data.split(/^\/\*\*package(?:\s|$)/m)
      if (data.length < 2) {
        throw new Error('File has no package in comments')
      }
      data = data[1]
      data = data.split(/\*\*\/$/m)
      if (data.length < 2) {
        throw new Error('File has no package in comments')
      }
      data = data[0]
      data = data.replace(/^\s*\*/gm, '')
      this.#manifest = parseJSON(data)
      return this
    }
    get content() {
      return this.#manifest
    }
    get path() {
      return this.#path
    }
    get filename() {
      if (this.path) {
        return resolve(this.path, 'package.json')
      }
      return undefined
    }
    create(path) {
      this.#path = path
      this.#manifest = {}
      return this
    }

    // This should be the ONLY way to set content in the manifest
    update(content) {
      if (!this.content) {
        throw new Error(
          'Can not update without content.  Please `load` or `create`'
        )
      }
      for (const step of knownSteps) {
        this.#manifest = step({
          content,
          originalContent: this.content
        })
      }

      // unknown properties will just be overwitten
      for (const [key, value] of Object.entries(content)) {
        if (!knownKeys.has(key)) {
          this.content[key] = value
        }
      }
      return this
    }
    async save({ sort } = {}) {
      if (!this.#canSave) {
        throw new Error('No package.json to save to')
      }
      const {
        [Symbol.for('indent')]: indent,
        [Symbol.for('newline')]: newline,
        ...rest
      } = this.content
      const format = indent === undefined ? '  ' : indent
      const eol = newline === undefined ? '\n' : newline
      const content = sort ? packageSort(rest) : rest
      const fileContent = `${JSON.stringify(content, null, format)}\n`.replace(
        /\n/g,
        eol
      )
      if (fileContent.trim() !== this.#readFileContent.trim()) {
        const written = await writeFile(this.filename, fileContent)
        this.#readFileContent = fileContent
        return written
      }
    }
    async normalize(opts = {}) {
      if (!opts.steps) {
        opts.steps = this.constructor.normalizeSteps
      }
      await normalize(this, opts)
      return this
    }
    async prepare(opts = {}) {
      if (!opts.steps) {
        opts.steps = this.constructor.prepareSteps
      }
      await normalize(this, opts)
      return this
    }
    async fix(opts = {}) {
      // This one is not overridable
      opts.steps = this.constructor.fixSteps
      await normalize(this, opts)
      return this
    }
  }
  lib$k = PackageJson
  return lib$k
}

const lib$j = { exports: {} }

const get$1 = { exports: {} }

const minipassCollect = { exports: {} }

let hasRequiredMinipassCollect
function requireMinipassCollect() {
  if (hasRequiredMinipassCollect) {
    return minipassCollect.exports
  }
  hasRequiredMinipassCollect = 1
  const { Minipass } = requireCommonjs$7()
  const _data = Symbol('_data')
  const _length = Symbol('_length')
  class Collect extends Minipass {
    constructor(options) {
      super(options)
      this[_data] = []
      this[_length] = 0
    }
    write(chunk, encoding, cb) {
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding)
      this[_data].push(c)
      this[_length] += c.length
      if (cb) {
        cb()
      }
      return true
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      const result = Buffer.concat(this[_data], this[_length])
      super.write(result)
      return super.end(cb)
    }
  }
  minipassCollect.exports = Collect

  // it would be possible to DRY this a bit by doing something like
  // this.collector = new Collect() and listening on its data event,
  // but it's not much code, and we may as well save the extra obj
  class CollectPassThrough extends Minipass {
    constructor(options) {
      super(options)
      this[_data] = []
      this[_length] = 0
    }
    write(chunk, encoding, cb) {
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding)
      this[_data].push(c)
      this[_length] += c.length
      return super.write(chunk, encoding, cb)
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      const result = Buffer.concat(this[_data], this[_length])
      this.emit('collect', result)
      return super.end(cb)
    }
  }
  minipassCollect.exports.PassThrough = CollectPassThrough
  return minipassCollect.exports
}

let minipass$5
let hasRequiredMinipass$5
function requireMinipass$5() {
  if (hasRequiredMinipass$5) {
    return minipass$5
  }
  hasRequiredMinipass$5 = 1
  const proc =
    typeof process === 'object' && process
      ? process
      : {
          stdout: null,
          stderr: null
        }
  const EE = require$$0$c
  const Stream = require$$1$8
  const SD = require$$2$4.StringDecoder
  const EOF = Symbol('EOF')
  const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
  const EMITTED_END = Symbol('emittedEnd')
  const EMITTING_END = Symbol('emittingEnd')
  const EMITTED_ERROR = Symbol('emittedError')
  const CLOSED = Symbol('closed')
  const READ = Symbol('read')
  const FLUSH = Symbol('flush')
  const FLUSHCHUNK = Symbol('flushChunk')
  const ENCODING = Symbol('encoding')
  const DECODER = Symbol('decoder')
  const FLOWING = Symbol('flowing')
  const PAUSED = Symbol('paused')
  const RESUME = Symbol('resume')
  const BUFFERLENGTH = Symbol('bufferLength')
  const BUFFERPUSH = Symbol('bufferPush')
  const BUFFERSHIFT = Symbol('bufferShift')
  const OBJECTMODE = Symbol('objectMode')
  const DESTROYED = Symbol('destroyed')
  const EMITDATA = Symbol('emitData')
  const EMITEND = Symbol('emitEnd')
  const EMITEND2 = Symbol('emitEnd2')
  const ASYNC = Symbol('async')
  const defer = fn => Promise.resolve().then(fn)

  // TODO remove when Node v8 support drops
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'
  const ASYNCITERATOR =
    (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')
  const ITERATOR =
    (doIter && Symbol.iterator) || Symbol('iterator not implemented')

  // events that mean 'the stream is over'
  // these are treated specially, and re-emitted
  // if they are listened for after emitting.
  const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
  const isArrayBuffer = b =>
    b instanceof ArrayBuffer ||
    (typeof b === 'object' &&
      b.constructor &&
      b.constructor.name === 'ArrayBuffer' &&
      b.byteLength >= 0)
  const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
  class Pipe {
    constructor(src, dest, opts) {
      this.src = src
      this.dest = dest
      this.opts = opts
      this.ondrain = () => src[RESUME]()
      dest.on('drain', this.ondrain)
    }
    unpipe() {
      this.dest.removeListener('drain', this.ondrain)
    }
    // istanbul ignore next - only here for the prototype
    proxyErrors() {}
    end() {
      this.unpipe()
      if (this.opts.end) {
        this.dest.end()
      }
    }
  }
  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener('error', this.proxyErrors)
      super.unpipe()
    }
    constructor(src, dest, opts) {
      super(src, dest, opts)
      this.proxyErrors = er => dest.emit('error', er)
      src.on('error', this.proxyErrors)
    }
  }
  minipass$5 = class Minipass extends Stream {
    constructor(options) {
      super()
      this[FLOWING] = false
      // whether we're explicitly paused
      this[PAUSED] = false
      this.pipes = []
      this.buffer = []
      this[OBJECTMODE] = (options && options.objectMode) || false
      if (this[OBJECTMODE]) {
        this[ENCODING] = null
      } else {
        this[ENCODING] = (options && options.encoding) || null
      }
      if (this[ENCODING] === 'buffer') {
        this[ENCODING] = null
      }
      this[ASYNC] = (options && !!options.async) || false
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null
      this[EOF] = false
      this[EMITTED_END] = false
      this[EMITTING_END] = false
      this[CLOSED] = false
      this[EMITTED_ERROR] = null
      this.writable = true
      this.readable = true
      this[BUFFERLENGTH] = 0
      this[DESTROYED] = false
    }
    get bufferLength() {
      return this[BUFFERLENGTH]
    }
    get encoding() {
      return this[ENCODING]
    }
    set encoding(enc) {
      if (this[OBJECTMODE]) {
        throw new Error('cannot set encoding in objectMode')
      }
      if (
        this[ENCODING] &&
        enc !== this[ENCODING] &&
        ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])
      ) {
        throw new Error('cannot change encoding')
      }
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null
        if (this.buffer.length) {
          this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))
        }
      }
      this[ENCODING] = enc
    }
    setEncoding(enc) {
      this.encoding = enc
    }
    get objectMode() {
      return this[OBJECTMODE]
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om
    }
    get ['async']() {
      return this[ASYNC]
    }
    set ['async'](a) {
      this[ASYNC] = this[ASYNC] || !!a
    }
    write(chunk, encoding, cb) {
      if (this[EOF]) {
        throw new Error('write after end')
      }
      if (this[DESTROYED]) {
        this.emit(
          'error',
          Object.assign(
            new Error('Cannot call write after a stream was destroyed'),
            {
              code: 'ERR_STREAM_DESTROYED'
            }
          )
        )
        return true
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const fn = this[ASYNC] ? defer : f => f()

      // convert array buffers and typed array views into buffers
      // at some point in the future, we may want to do the opposite!
      // leave strings and buffers as-is
      // anything else switches us into object mode
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)
        } else if (isArrayBuffer(chunk)) {
          chunk = Buffer.from(chunk)
        } else if (typeof chunk !== 'string') {
          // use the setter so we throw if we have encoding set
          this.objectMode = true
        }
      }

      // handle object mode up front, since it's simpler
      // this yields better performance, fewer checks later.
      if (this[OBJECTMODE]) {
        /* istanbul ignore if - maybe impossible? */
        if (this.flowing && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this.flowing) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // at this point the chunk is a buffer or string
      // don't buffer it up or send it to the decoder
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // fast-path writing strings of same encoding to a stream with
      // an empty buffer, skipping the buffer/decoder dance
      if (
        typeof chunk === 'string' &&
        // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)
      ) {
        chunk = Buffer.from(chunk, encoding)
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk)
      }

      // Note: flushing CAN potentially switch us into not-flowing mode
      if (this.flowing && this[BUFFERLENGTH] !== 0) {
        this[FLUSH](true)
      }
      if (this.flowing) {
        this.emit('data', chunk)
      } else {
        this[BUFFERPUSH](chunk)
      }
      if (this[BUFFERLENGTH] !== 0) {
        this.emit('readable')
      }
      if (cb) {
        fn(cb)
      }
      return this.flowing
    }
    read(n) {
      if (this[DESTROYED]) {
        return null
      }
      if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]()
        return null
      }
      if (this[OBJECTMODE]) {
        n = null
      }
      if (this.buffer.length > 1 && !this[OBJECTMODE]) {
        if (this.encoding) {
          this.buffer = [this.buffer.join('')]
        } else {
          this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]
        }
      }
      const ret = this[READ](n || null, this.buffer[0])
      this[MAYBE_EMIT_END]()
      return ret
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null) {
        this[BUFFERSHIFT]()
      } else {
        this.buffer[0] = chunk.slice(n)
        chunk = chunk.slice(0, n)
        this[BUFFERLENGTH] -= n
      }
      this.emit('data', chunk)
      if (!this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
      return chunk
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      if (cb) {
        this.once('end', cb)
      }
      this[EOF] = true
      this.writable = false

      // if we haven't written anything, then go ahead and emit,
      // even if we're not reading.
      // we'll re-emit if a new 'end' listener is added anyway.
      // This makes MP more suitable to write-only use cases.
      if (this.flowing || !this[PAUSED]) {
        this[MAYBE_EMIT_END]()
      }
      return this
    }

    // don't let the internal resume be overwritten
    [RESUME]() {
      if (this[DESTROYED]) {
        return
      }
      this[PAUSED] = false
      this[FLOWING] = true
      this.emit('resume')
      if (this.buffer.length) {
        this[FLUSH]()
      } else if (this[EOF]) {
        this[MAYBE_EMIT_END]()
      } else {
        this.emit('drain')
      }
    }
    resume() {
      return this[RESUME]()
    }
    pause() {
      this[FLOWING] = false
      this[PAUSED] = true
    }
    get destroyed() {
      return this[DESTROYED]
    }
    get flowing() {
      return this[FLOWING]
    }
    get paused() {
      return this[PAUSED]
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] += 1
      } else {
        this[BUFFERLENGTH] += chunk.length
      }
      this.buffer.push(chunk)
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this.buffer[0].length
        }
      }
      return this.buffer.shift()
    }
    [FLUSH](noDrain) {
      do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))
      if (!noDrain && !this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit('data', chunk), this.flowing) : false
    }
    pipe(dest, opts) {
      if (this[DESTROYED]) {
        return
      }
      const ended = this[EMITTED_END]
      opts = opts || {}
      if (dest === proc.stdout || dest === proc.stderr) {
        opts.end = false
      } else {
        opts.end = opts.end !== false
      }
      opts.proxyErrors = !!opts.proxyErrors

      // piping an ended stream ends immediately
      if (ended) {
        if (opts.end) {
          dest.end()
        }
      } else {
        this.pipes.push(
          !opts.proxyErrors
            ? new Pipe(this, dest, opts)
            : new PipeProxyErrors(this, dest, opts)
        )
        if (this[ASYNC]) {
          defer(() => this[RESUME]())
        } else {
          this[RESUME]()
        }
      }
      return dest
    }
    unpipe(dest) {
      const p = this.pipes.find(p => p.dest === dest)
      if (p) {
        this.pipes.splice(this.pipes.indexOf(p), 1)
        p.unpipe()
      }
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'data' && !this.pipes.length && !this.flowing) {
        this[RESUME]()
      } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
        super.emit('readable')
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev)
        this.removeAllListeners(ev)
      } else if (ev === 'error' && this[EMITTED_ERROR]) {
        if (this[ASYNC]) {
          defer(() => fn.call(this, this[EMITTED_ERROR]))
        } else {
          fn.call(this, this[EMITTED_ERROR])
        }
      }
      return ret
    }
    get emittedEnd() {
      return this[EMITTED_END]
    }
    [MAYBE_EMIT_END]() {
      if (
        !this[EMITTING_END] &&
        !this[EMITTED_END] &&
        !this[DESTROYED] &&
        this.buffer.length === 0 &&
        this[EOF]
      ) {
        this[EMITTING_END] = true
        this.emit('end')
        this.emit('prefinish')
        this.emit('finish')
        if (this[CLOSED]) {
          this.emit('close')
        }
        this[EMITTING_END] = false
      }
    }
    emit(ev, data, ...extra) {
      // error and close are only events allowed after calling destroy()
      if (
        ev !== 'error' &&
        ev !== 'close' &&
        ev !== DESTROYED &&
        this[DESTROYED]
      ) {
        return
      } else if (ev === 'data') {
        return !data
          ? false
          : this[ASYNC]
            ? defer(() => this[EMITDATA](data))
            : this[EMITDATA](data)
      } else if (ev === 'end') {
        return this[EMITEND]()
      } else if (ev === 'close') {
        this[CLOSED] = true
        // don't emit close before 'end' and 'finish'
        if (!this[EMITTED_END] && !this[DESTROYED]) {
          return
        }
        const ret = super.emit('close')
        this.removeAllListeners('close')
        return ret
      } else if (ev === 'error') {
        this[EMITTED_ERROR] = data
        const ret = super.emit('error', data)
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'resume') {
        const ret = super.emit('resume')
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'finish' || ev === 'prefinish') {
        const ret = super.emit(ev)
        this.removeAllListeners(ev)
        return ret
      }

      // Some other unknown event
      const ret = super.emit(ev, data, ...extra)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITDATA](data) {
      for (const p of this.pipes) {
        if (p.dest.write(data) === false) {
          this.pause()
        }
      }
      const ret = super.emit('data', data)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITEND]() {
      if (this[EMITTED_END]) {
        return
      }
      this[EMITTED_END] = true
      this.readable = false
      if (this[ASYNC]) {
        defer(() => this[EMITEND2]())
      } else {
        this[EMITEND2]()
      }
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end()
        if (data) {
          for (const p of this.pipes) {
            p.dest.write(data)
          }
          super.emit('data', data)
        }
      }
      for (const p of this.pipes) {
        p.end()
      }
      const ret = super.emit('end')
      this.removeAllListeners('end')
      return ret
    }

    // const all = await stream.collect()
    collect() {
      const buf = []
      if (!this[OBJECTMODE]) {
        buf.dataLength = 0
      }
      // set the promise first, in case an error is raised
      // by triggering the flow here.
      const p = this.promise()
      this.on('data', c => {
        buf.push(c)
        if (!this[OBJECTMODE]) {
          buf.dataLength += c.length
        }
      })
      return p.then(() => buf)
    }

    // const data = await stream.concat()
    concat() {
      return this[OBJECTMODE]
        ? Promise.reject(new Error('cannot concat in objectMode'))
        : this.collect().then(buf =>
            this[OBJECTMODE]
              ? Promise.reject(new Error('cannot concat in objectMode'))
              : this[ENCODING]
                ? buf.join('')
                : Buffer.concat(buf, buf.dataLength)
          )
    }

    // stream.promise().then(() => done, er => emitted error)
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error('stream destroyed')))
        this.on('error', er => reject(er))
        this.on('end', () => resolve())
      })
    }

    // for await (let chunk of stream)
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read()
        if (res !== null) {
          return Promise.resolve({
            done: false,
            value: res
          })
        }
        if (this[EOF]) {
          return Promise.resolve({
            done: true
          })
        }
        let resolve = null
        let reject = null
        const onerr = er => {
          this.removeListener('data', ondata)
          this.removeListener('end', onend)
          reject(er)
        }
        const ondata = value => {
          this.removeListener('error', onerr)
          this.removeListener('end', onend)
          this.pause()
          resolve({
            value: value,
            done: !!this[EOF]
          })
        }
        const onend = () => {
          this.removeListener('error', onerr)
          this.removeListener('data', ondata)
          resolve({
            done: true
          })
        }
        const ondestroy = () => onerr(new Error('stream destroyed'))
        return new Promise((res, rej) => {
          reject = rej
          resolve = res
          this.once(DESTROYED, ondestroy)
          this.once('error', onerr)
          this.once('end', onend)
          this.once('data', ondata)
        })
      }
      return {
        next
      }
    }

    // for (let chunk of stream)
    [ITERATOR]() {
      const next = () => {
        const value = this.read()
        const done = value === null
        return {
          value,
          done
        }
      }
      return {
        next
      }
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er) {
          this.emit('error', er)
        } else {
          this.emit(DESTROYED)
        }
        return this
      }
      this[DESTROYED] = true

      // throw away all buffered data, it's never coming out
      this.buffer.length = 0
      this[BUFFERLENGTH] = 0
      if (typeof this.close === 'function' && !this[CLOSED]) {
        this.close()
      }
      if (er) {
        this.emit('error', er)
      }
      // if no error to emit, still reject pending promises
      else {
        this.emit(DESTROYED)
      }
      return this
    }
    static isStream(s) {
      return (
        !!s &&
        (s instanceof Minipass ||
          s instanceof Stream ||
          (s instanceof EE &&
            (typeof s.pipe === 'function' ||
              // readable
              (typeof s.write === 'function' && typeof s.end === 'function')))) // writable
      )
    }
  }
  return minipass$5
}

let minipassPipeline
let hasRequiredMinipassPipeline
function requireMinipassPipeline() {
  if (hasRequiredMinipassPipeline) {
    return minipassPipeline
  }
  hasRequiredMinipassPipeline = 1
  const Minipass = requireMinipass$5()
  const EE = require$$0$c
  const isStream = s =>
    s &&
    s instanceof EE &&
    (typeof s.pipe === 'function' ||
      // readable
      (typeof s.write === 'function' && typeof s.end === 'function')) // writable
  const _head = Symbol('_head')
  const _tail = Symbol('_tail')
  const _linkStreams = Symbol('_linkStreams')
  const _setHead = Symbol('_setHead')
  const _setTail = Symbol('_setTail')
  const _onError = Symbol('_onError')
  const _onData = Symbol('_onData')
  const _onEnd = Symbol('_onEnd')
  const _onDrain = Symbol('_onDrain')
  const _streams = Symbol('_streams')
  class Pipeline extends Minipass {
    constructor(opts, ...streams) {
      if (isStream(opts)) {
        streams.unshift(opts)
        opts = {}
      }
      super(opts)
      this[_streams] = []
      if (streams.length) {
        this.push(...streams)
      }
    }
    [_linkStreams](streams) {
      // reduce takes (left,right), and we return right to make it the
      // new left value.
      return streams.reduce((src, dest) => {
        src.on('error', er => dest.emit('error', er))
        src.pipe(dest)
        return dest
      })
    }
    push(...streams) {
      this[_streams].push(...streams)
      if (this[_tail]) {
        streams.unshift(this[_tail])
      }
      const linkRet = this[_linkStreams](streams)
      this[_setTail](linkRet)
      if (!this[_head]) {
        this[_setHead](streams[0])
      }
    }
    unshift(...streams) {
      this[_streams].unshift(...streams)
      if (this[_head]) {
        streams.push(this[_head])
      }
      const linkRet = this[_linkStreams](streams)
      this[_setHead](streams[0])
      if (!this[_tail]) {
        this[_setTail](linkRet)
      }
    }
    destroy(er) {
      // set fire to the whole thing.
      this[_streams].forEach(
        s => typeof s.destroy === 'function' && s.destroy()
      )
      return super.destroy(er)
    }

    // readable interface -> tail
    [_setTail](stream) {
      this[_tail] = stream
      stream.on('error', er => this[_onError](stream, er))
      stream.on('data', chunk => this[_onData](stream, chunk))
      stream.on('end', () => this[_onEnd](stream))
      stream.on('finish', () => this[_onEnd](stream))
    }

    // errors proxied down the pipeline
    // they're considered part of the "read" interface
    [_onError](stream, er) {
      if (stream === this[_tail]) {
        this.emit('error', er)
      }
    }
    [_onData](stream, chunk) {
      if (stream === this[_tail]) {
        super.write(chunk)
      }
    }
    [_onEnd](stream) {
      if (stream === this[_tail]) {
        super.end()
      }
    }
    pause() {
      super.pause()
      return this[_tail] && this[_tail].pause && this[_tail].pause()
    }

    // NB: Minipass calls its internal private [RESUME] method during
    // pipe drains, to avoid hazards where stream.resume() is overridden.
    // Thus, we need to listen to the resume *event*, not override the
    // resume() method, and proxy *that* to the tail.
    emit(ev, ...args) {
      if (ev === 'resume' && this[_tail] && this[_tail].resume) {
        this[_tail].resume()
      }
      return super.emit(ev, ...args)
    }

    // writable interface -> head
    [_setHead](stream) {
      this[_head] = stream
      stream.on('drain', () => this[_onDrain](stream))
    }
    [_onDrain](stream) {
      if (stream === this[_head]) {
        this.emit('drain')
      }
    }
    write(chunk, enc, cb) {
      return (
        this[_head].write(chunk, enc, cb) &&
        (this.flowing || this.buffer.length === 0)
      )
    }
    end(chunk, enc, cb) {
      this[_head].end(chunk, enc, cb)
      return this
    }
  }
  minipassPipeline = Pipeline
  return minipassPipeline
}

const entryIndex$1 = {}

const lib$i = {}

let hasRequiredLib$j
function requireLib$j() {
  if (hasRequiredLib$j) {
    return lib$i
  }
  hasRequiredLib$j = 1
  const crypto = require$$0$d
  const { Minipass } = requireCommonjs$7()
  const SPEC_ALGORITHMS = ['sha512', 'sha384', 'sha256']
  const DEFAULT_ALGORITHMS = ['sha512']

  // TODO: this should really be a hardcoded list of algorithms we support,
  // rather than [a-z0-9].
  const BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i
  const SRI_REGEX = /^([a-z0-9]+)-([^?]+)([?\S*]*)$/
  const STRICT_SRI_REGEX =
    /^([a-z0-9]+)-([A-Za-z0-9+/=]{44,88})(\?[\x21-\x7E]*)?$/
  const VCHAR_REGEX = /^[\x21-\x7E]+$/
  const getOptString = options =>
    options?.length ? `?${options.join('?')}` : ''
  class IntegrityStream extends Minipass {
    #emittedIntegrity
    #emittedSize
    #emittedVerified
    constructor(opts) {
      super()
      this.size = 0
      this.opts = opts

      // may be overridden later, but set now for class consistency
      this.#getOptions()

      // options used for calculating stream.  can't be changed.
      if (opts?.algorithms) {
        this.algorithms = [...opts.algorithms]
      } else {
        this.algorithms = [...DEFAULT_ALGORITHMS]
      }
      if (
        this.algorithm !== null &&
        !this.algorithms.includes(this.algorithm)
      ) {
        this.algorithms.push(this.algorithm)
      }
      this.hashes = this.algorithms.map(crypto.createHash)
    }
    #getOptions() {
      // For verification
      this.sri = this.opts?.integrity
        ? parse(this.opts?.integrity, this.opts)
        : null
      this.expectedSize = this.opts?.size
      if (!this.sri) {
        this.algorithm = null
      } else if (this.sri.isHash) {
        this.goodSri = true
        this.algorithm = this.sri.algorithm
      } else {
        this.goodSri = !this.sri.isEmpty()
        this.algorithm = this.sri.pickAlgorithm(this.opts)
      }
      this.digests = this.goodSri ? this.sri[this.algorithm] : null
      this.optString = getOptString(this.opts?.options)
    }
    on(ev, handler) {
      if (ev === 'size' && this.#emittedSize) {
        return handler(this.#emittedSize)
      }
      if (ev === 'integrity' && this.#emittedIntegrity) {
        return handler(this.#emittedIntegrity)
      }
      if (ev === 'verified' && this.#emittedVerified) {
        return handler(this.#emittedVerified)
      }
      return super.on(ev, handler)
    }
    emit(ev, data) {
      if (ev === 'end') {
        this.#onEnd()
      }
      return super.emit(ev, data)
    }
    write(data) {
      this.size += data.length
      this.hashes.forEach(h => h.update(data))
      return super.write(data)
    }
    #onEnd() {
      if (!this.goodSri) {
        this.#getOptions()
      }
      const newSri = parse(
        this.hashes
          .map((h, i) => {
            return `${this.algorithms[i]}-${h.digest('base64')}${this.optString}`
          })
          .join(' '),
        this.opts
      )
      // Integrity verification mode
      const match = this.goodSri && newSri.match(this.sri, this.opts)
      if (
        typeof this.expectedSize === 'number' &&
        this.size !== this.expectedSize
      ) {
        /* eslint-disable-next-line max-len */
        const err = new Error(
          `stream size mismatch when checking ${this.sri}.\n  Wanted: ${this.expectedSize}\n  Found: ${this.size}`
        )
        err.code = 'EBADSIZE'
        err.found = this.size
        err.expected = this.expectedSize
        err.sri = this.sri
        this.emit('error', err)
      } else if (this.sri && !match) {
        /* eslint-disable-next-line max-len */
        const err = new Error(
          `${this.sri} integrity checksum failed when using ${this.algorithm}: wanted ${this.digests} but got ${newSri}. (${this.size} bytes)`
        )
        err.code = 'EINTEGRITY'
        err.found = newSri
        err.expected = this.digests
        err.algorithm = this.algorithm
        err.sri = this.sri
        this.emit('error', err)
      } else {
        this.#emittedSize = this.size
        this.emit('size', this.size)
        this.#emittedIntegrity = newSri
        this.emit('integrity', newSri)
        if (match) {
          this.#emittedVerified = match
          this.emit('verified', match)
        }
      }
    }
  }
  class Hash {
    get isHash() {
      return true
    }
    constructor(hash, opts) {
      const strict = opts?.strict
      this.source = hash.trim()

      // set default values so that we make V8 happy to
      // always see a familiar object template.
      this.digest = ''
      this.algorithm = ''
      this.options = []

      // 3.1. Integrity metadata (called "Hash" by ssri)
      // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description
      const match = this.source.match(strict ? STRICT_SRI_REGEX : SRI_REGEX)
      if (!match) {
        return
      }
      if (strict && !SPEC_ALGORITHMS.includes(match[1])) {
        return
      }
      this.algorithm = match[1]
      this.digest = match[2]
      const rawOpts = match[3]
      if (rawOpts) {
        this.options = rawOpts.slice(1).split('?')
      }
    }
    hexDigest() {
      return this.digest && Buffer.from(this.digest, 'base64').toString('hex')
    }
    toJSON() {
      return this.toString()
    }
    match(integrity, opts) {
      const other = parse(integrity, opts)
      if (!other) {
        return false
      }
      if (other.isIntegrity) {
        const algo = other.pickAlgorithm(opts, [this.algorithm])
        if (!algo) {
          return false
        }
        const foundHash = other[algo].find(hash => hash.digest === this.digest)
        if (foundHash) {
          return foundHash
        }
        return false
      }
      return other.digest === this.digest ? other : false
    }
    toString(opts) {
      if (opts?.strict) {
        // Strict mode enforces the standard as close to the foot of the
        // letter as it can.
        if (
          !(
            // The spec has very restricted productions for algorithms.
            // https://www.w3.org/TR/CSP2/#source-list-syntax
            (
              SPEC_ALGORITHMS.includes(this.algorithm) &&
              // Usually, if someone insists on using a "different" base64, we
              // leave it as-is, since there's multiple standards, and the
              // specified is not a URL-safe variant.
              // https://www.w3.org/TR/CSP2/#base64_value
              this.digest.match(BASE64_REGEX) &&
              // Option syntax is strictly visual chars.
              // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression
              // https://tools.ietf.org/html/rfc5234#appendix-B.1
              this.options.every(opt => opt.match(VCHAR_REGEX))
            )
          )
        ) {
          return ''
        }
      }
      return `${this.algorithm}-${this.digest}${getOptString(this.options)}`
    }
  }
  function integrityHashToString(toString, sep, opts, hashes) {
    const toStringIsNotEmpty = toString !== ''
    let shouldAddFirstSep = false
    let complement = ''
    const lastIndex = hashes.length - 1
    for (let i = 0; i < lastIndex; i++) {
      const hashString = Hash.prototype.toString.call(hashes[i], opts)
      if (hashString) {
        shouldAddFirstSep = true
        complement += hashString
        complement += sep
      }
    }
    const finalHashString = Hash.prototype.toString.call(
      hashes[lastIndex],
      opts
    )
    if (finalHashString) {
      shouldAddFirstSep = true
      complement += finalHashString
    }
    if (toStringIsNotEmpty && shouldAddFirstSep) {
      return toString + sep + complement
    }
    return toString + complement
  }
  class Integrity {
    get isIntegrity() {
      return true
    }
    toJSON() {
      return this.toString()
    }
    isEmpty() {
      return Object.keys(this).length === 0
    }
    toString(opts) {
      let sep = opts?.sep || ' '
      let toString = ''
      if (opts?.strict) {
        // Entries must be separated by whitespace, according to spec.
        sep = sep.replace(/\S+/g, ' ')
        for (const hash of SPEC_ALGORITHMS) {
          if (this[hash]) {
            toString = integrityHashToString(toString, sep, opts, this[hash])
          }
        }
      } else {
        for (const hash of Object.keys(this)) {
          toString = integrityHashToString(toString, sep, opts, this[hash])
        }
      }
      return toString
    }
    concat(integrity, opts) {
      const other =
        typeof integrity === 'string' ? integrity : stringify(integrity, opts)
      return parse(`${this.toString(opts)} ${other}`, opts)
    }
    hexDigest() {
      return parse(this, {
        single: true
      }).hexDigest()
    }

    // add additional hashes to an integrity value, but prevent
    // *changing* an existing integrity hash.
    merge(integrity, opts) {
      const other = parse(integrity, opts)
      for (const algo in other) {
        if (this[algo]) {
          if (
            !this[algo].find(hash =>
              other[algo].find(otherhash => hash.digest === otherhash.digest)
            )
          ) {
            throw new Error('hashes do not match, cannot update integrity')
          }
        } else {
          this[algo] = other[algo]
        }
      }
    }
    match(integrity, opts) {
      const other = parse(integrity, opts)
      if (!other) {
        return false
      }
      const algo = other.pickAlgorithm(opts, Object.keys(this))
      return (
        (!!algo &&
          this[algo] &&
          other[algo] &&
          this[algo].find(hash =>
            other[algo].find(otherhash => hash.digest === otherhash.digest)
          )) ||
        false
      )
    }

    // Pick the highest priority algorithm present, optionally also limited to a
    // set of hashes found in another integrity.  When limiting it may return
    // nothing.
    pickAlgorithm(opts, hashes) {
      const pickAlgorithm = opts?.pickAlgorithm || getPrioritizedHash
      const keys = Object.keys(this).filter(k => {
        if (hashes?.length) {
          return hashes.includes(k)
        }
        return true
      })
      if (keys.length) {
        return keys.reduce((acc, algo) => pickAlgorithm(acc, algo) || acc)
      }
      // no intersection between this and hashes,
      return null
    }
  }
  lib$i.parse = parse
  function parse(sri, opts) {
    if (!sri) {
      return null
    }
    if (typeof sri === 'string') {
      return _parse(sri, opts)
    } else if (sri.algorithm && sri.digest) {
      const fullSri = new Integrity()
      fullSri[sri.algorithm] = [sri]
      return _parse(stringify(fullSri, opts), opts)
    } else {
      return _parse(stringify(sri, opts), opts)
    }
  }
  function _parse(integrity, opts) {
    // 3.4.3. Parse metadata
    // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
    if (opts?.single) {
      return new Hash(integrity, opts)
    }
    const hashes = integrity
      .trim()
      .split(/\s+/)
      .reduce((acc, string) => {
        const hash = new Hash(string, opts)
        if (hash.algorithm && hash.digest) {
          const algo = hash.algorithm
          if (!acc[algo]) {
            acc[algo] = []
          }
          acc[algo].push(hash)
        }
        return acc
      }, new Integrity())
    return hashes.isEmpty() ? null : hashes
  }
  lib$i.stringify = stringify
  function stringify(obj, opts) {
    if (obj.algorithm && obj.digest) {
      return Hash.prototype.toString.call(obj, opts)
    } else if (typeof obj === 'string') {
      return stringify(parse(obj, opts), opts)
    } else {
      return Integrity.prototype.toString.call(obj, opts)
    }
  }
  lib$i.fromHex = fromHex
  function fromHex(hexDigest, algorithm, opts) {
    const optString = getOptString(opts?.options)
    return parse(
      `${algorithm}-${Buffer.from(hexDigest, 'hex').toString('base64')}${optString}`,
      opts
    )
  }
  lib$i.fromData = fromData
  function fromData(data, opts) {
    const algorithms = opts?.algorithms || [...DEFAULT_ALGORITHMS]
    const optString = getOptString(opts?.options)
    return algorithms.reduce((acc, algo) => {
      const digest = crypto.createHash(algo).update(data).digest('base64')
      const hash = new Hash(`${algo}-${digest}${optString}`, opts)
      /* istanbul ignore else - it would be VERY strange if the string we
       * just calculated with an algo did not have an algo or digest.
       */
      if (hash.algorithm && hash.digest) {
        const hashAlgo = hash.algorithm
        if (!acc[hashAlgo]) {
          acc[hashAlgo] = []
        }
        acc[hashAlgo].push(hash)
      }
      return acc
    }, new Integrity())
  }
  lib$i.fromStream = fromStream
  function fromStream(stream, opts) {
    const istream = integrityStream(opts)
    return new Promise((resolve, reject) => {
      stream.pipe(istream)
      stream.on('error', reject)
      istream.on('error', reject)
      let sri
      istream.on('integrity', s => {
        sri = s
      })
      istream.on('end', () => resolve(sri))
      istream.resume()
    })
  }
  lib$i.checkData = checkData
  function checkData(data, sri, opts) {
    sri = parse(sri, opts)
    if (!sri || !Object.keys(sri).length) {
      if (opts?.error) {
        throw Object.assign(
          new Error('No valid integrity hashes to check against'),
          {
            code: 'EINTEGRITY'
          }
        )
      } else {
        return false
      }
    }
    const algorithm = sri.pickAlgorithm(opts)
    const digest = crypto.createHash(algorithm).update(data).digest('base64')
    const newSri = parse({
      algorithm,
      digest
    })
    const match = newSri.match(sri, opts)
    opts = opts || {}
    if (match || !opts.error) {
      return match
    } else if (typeof opts.size === 'number' && data.length !== opts.size) {
      /* eslint-disable-next-line max-len */
      const err = new Error(
        `data size mismatch when checking ${sri}.\n  Wanted: ${opts.size}\n  Found: ${data.length}`
      )
      err.code = 'EBADSIZE'
      err.found = data.length
      err.expected = opts.size
      err.sri = sri
      throw err
    } else {
      /* eslint-disable-next-line max-len */
      const err = new Error(
        `Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`
      )
      err.code = 'EINTEGRITY'
      err.found = newSri
      err.expected = sri
      err.algorithm = algorithm
      err.sri = sri
      throw err
    }
  }
  lib$i.checkStream = checkStream
  function checkStream(stream, sri, opts) {
    opts = opts || Object.create(null)
    opts.integrity = sri
    sri = parse(sri, opts)
    if (!sri || !Object.keys(sri).length) {
      return Promise.reject(
        Object.assign(new Error('No valid integrity hashes to check against'), {
          code: 'EINTEGRITY'
        })
      )
    }
    const checker = integrityStream(opts)
    return new Promise((resolve, reject) => {
      stream.pipe(checker)
      stream.on('error', reject)
      checker.on('error', reject)
      let verified
      checker.on('verified', s => {
        verified = s
      })
      checker.on('end', () => resolve(verified))
      checker.resume()
    })
  }
  lib$i.integrityStream = integrityStream
  function integrityStream(opts = Object.create(null)) {
    return new IntegrityStream(opts)
  }
  lib$i.create = createIntegrity
  function createIntegrity(opts) {
    const algorithms = opts?.algorithms || [...DEFAULT_ALGORITHMS]
    const optString = getOptString(opts?.options)
    const hashes = algorithms.map(crypto.createHash)
    return {
      update: function (chunk, enc) {
        hashes.forEach(h => h.update(chunk, enc))
        return this
      },
      digest: function () {
        const integrity = algorithms.reduce((acc, algo) => {
          const digest = hashes.shift().digest('base64')
          const hash = new Hash(`${algo}-${digest}${optString}`, opts)
          /* istanbul ignore else - it would be VERY strange if the hash we
           * just calculated with an algo did not have an algo or digest.
           */
          if (hash.algorithm && hash.digest) {
            const hashAlgo = hash.algorithm
            if (!acc[hashAlgo]) {
              acc[hashAlgo] = []
            }
            acc[hashAlgo].push(hash)
          }
          return acc
        }, new Integrity())
        return integrity
      }
    }
  }
  const NODE_HASHES = crypto.getHashes()

  // This is a Best Effort™ at a reasonable priority for hash algos
  const DEFAULT_PRIORITY = [
    'md5',
    'whirlpool',
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    // TODO - it's unclear _which_ of these Node will actually use as its name
    //        for the algorithm, so we guesswork it based on the OpenSSL names.
    'sha3',
    'sha3-256',
    'sha3-384',
    'sha3-512',
    'sha3_256',
    'sha3_384',
    'sha3_512'
  ].filter(algo => NODE_HASHES.includes(algo))
  function getPrioritizedHash(algo1, algo2) {
    /* eslint-disable-next-line max-len */
    return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >=
      DEFAULT_PRIORITY.indexOf(algo2.toLowerCase())
      ? algo1
      : algo2
  }
  return lib$i
}

const imurmurhash = { exports: {} }

/**
 * @preserve
 * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
 *
 * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
 * @see http://github.com/homebrewing/brauhaus-diff
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 */
let hasRequiredImurmurhash
function requireImurmurhash() {
  if (hasRequiredImurmurhash) {
    return imurmurhash.exports
  }
  hasRequiredImurmurhash = 1
  ;(function (module) {
    ;(function () {
      let cache

      // Call this function without `new` to use the cached object (good for
      // single-threaded environments), or with `new` to create a new object.
      //
      // @param {string} key A UTF-16 or ASCII string
      // @param {number} seed An optional positive integer
      // @return {object} A MurmurHash3 object for incremental hashing
      function MurmurHash3(key, seed) {
        const m = this instanceof MurmurHash3 ? this : cache
        m.reset(seed)
        if (typeof key === 'string' && key.length > 0) {
          m.hash(key)
        }
        if (m !== this) {
          return m
        }
      }

      // Incrementally add a string to this hash
      //
      // @param {string} key A UTF-16 or ASCII string
      // @return {object} this
      MurmurHash3.prototype.hash = function (key) {
        let h1, k1, i, top, len
        len = key.length
        this.len += len
        k1 = this.k1
        i = 0
        switch (this.rem) {
          case 0:
            k1 ^= len > i ? key.charCodeAt(i++) & 0xffff : 0
          case 1:
            k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0
          case 2:
            k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0
          case 3:
            k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0
            k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0
        }
        this.rem = (len + this.rem) & 3 // & 3 is same as % 4
        len -= this.rem
        if (len > 0) {
          h1 = this.h1
          while (1) {
            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff
            k1 = (k1 << 15) | (k1 >>> 17)
            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff
            h1 ^= k1
            h1 = (h1 << 13) | (h1 >>> 19)
            h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff
            if (i >= len) {
              break
            }
            k1 =
              (key.charCodeAt(i++) & 0xffff) ^
              ((key.charCodeAt(i++) & 0xffff) << 8) ^
              ((key.charCodeAt(i++) & 0xffff) << 16)
            top = key.charCodeAt(i++)
            k1 ^= ((top & 0xff) << 24) ^ ((top & 0xff00) >> 8)
          }
          k1 = 0
          switch (this.rem) {
            case 3:
              k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16
            case 2:
              k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8
            case 1:
              k1 ^= key.charCodeAt(i) & 0xffff
          }
          this.h1 = h1
        }
        this.k1 = k1
        return this
      }

      // Get the result of this hash
      //
      // @return {number} The 32-bit hash
      MurmurHash3.prototype.result = function () {
        let k1, h1
        k1 = this.k1
        h1 = this.h1
        if (k1 > 0) {
          k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff
          k1 = (k1 << 15) | (k1 >>> 17)
          k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff
          h1 ^= k1
        }
        h1 ^= this.len
        h1 ^= h1 >>> 16
        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff
        h1 ^= h1 >>> 13
        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff
        h1 ^= h1 >>> 16
        return h1 >>> 0
      }

      // Reset the hash object for reuse
      //
      // @param {number} seed An optional positive integer
      MurmurHash3.prototype.reset = function (seed) {
        this.h1 = typeof seed === 'number' ? seed : 0
        this.rem = this.k1 = this.len = 0
        return this
      }

      // A cached object to use. This can be safely used if you're in a single-
      // threaded environment, otherwise you need to create new hashes to use.
      cache = new MurmurHash3()
      {
        module.exports = MurmurHash3
      }
    })()
  })(imurmurhash)
  return imurmurhash.exports
}

let lib$h
let hasRequiredLib$i
function requireLib$i() {
  if (hasRequiredLib$i) {
    return lib$h
  }
  hasRequiredLib$i = 1
  const MurmurHash3 = requireImurmurhash()
  lib$h = function (uniq) {
    if (uniq) {
      const hash = new MurmurHash3(uniq)
      return ('00000000' + hash.result().toString(16)).slice(-8)
    } else {
      return (Math.random().toString(16) + '0000000').slice(2, 10)
    }
  }
  return lib$h
}

let lib$g
let hasRequiredLib$h
function requireLib$h() {
  if (hasRequiredLib$h) {
    return lib$g
  }
  hasRequiredLib$h = 1
  const path = require$$1$5
  const uniqueSlug = requireLib$i()
  lib$g = function (filepath, prefix, uniq) {
    return path.join(filepath, (prefix ? prefix + '-' : '') + uniqueSlug(uniq))
  }
  return lib$g
}

const path$1 = { exports: {} }

const require$$8$1 = {
  'cache-version': {
    content: '2',
    index: '5'
  }
}

let hashToSegments_1$1
let hasRequiredHashToSegments$1
function requireHashToSegments$1() {
  if (hasRequiredHashToSegments$1) {
    return hashToSegments_1$1
  }
  hasRequiredHashToSegments$1 = 1
  hashToSegments_1$1 = hashToSegments
  function hashToSegments(hash) {
    return [hash.slice(0, 2), hash.slice(2, 4), hash.slice(4)]
  }
  return hashToSegments_1$1
}

let hasRequiredPath$1
function requirePath$1() {
  if (hasRequiredPath$1) {
    return path$1.exports
  }
  hasRequiredPath$1 = 1
  const contentVer = require$$8$1['cache-version'].content
  const hashToSegments = requireHashToSegments$1()
  const path = require$$1$5
  const ssri = requireLib$j()

  // Current format of content file path:
  //
  // sha512-BaSE64Hex= ->
  // ~/.my-cache/content-v2/sha512/ba/da/55deadbeefc0ffee
  //
  path$1.exports = contentPath
  function contentPath(cache, integrity) {
    const sri = ssri.parse(integrity, {
      single: true
    })
    // contentPath is the *strongest* algo given
    return path.join(
      contentDir(cache),
      sri.algorithm,
      ...hashToSegments(sri.hexDigest())
    )
  }
  path$1.exports.contentDir = contentDir
  function contentDir(cache) {
    return path.join(cache, `content-v${contentVer}`)
  }
  return path$1.exports
}

let getOptions_1
let hasRequiredGetOptions
function requireGetOptions() {
  if (hasRequiredGetOptions) {
    return getOptions_1
  }
  hasRequiredGetOptions = 1
  // given an input that may or may not be an object, return an object that has
  // a copy of every defined property listed in 'copy'. if the input is not an
  // object, assign it to the property named by 'wrap'
  const getOptions = (input, { copy, wrap }) => {
    const result = {}
    if (input && typeof input === 'object') {
      for (const prop of copy) {
        if (input[prop] !== undefined) {
          result[prop] = input[prop]
        }
      }
    } else {
      result[wrap] = input
    }
    return result
  }
  getOptions_1 = getOptions
  return getOptions_1
}

let node$1
let hasRequiredNode$1
function requireNode$1() {
  if (hasRequiredNode$1) {
    return node$1
  }
  hasRequiredNode$1 = 1
  const semver = requireSemver()
  const satisfies = range => {
    return semver.satisfies(process.version, range, {
      includePrerelease: true
    })
  }
  node$1 = {
    satisfies
  }
  return node$1
}

const errors$3 = { exports: {} }

let hasRequiredErrors$3
function requireErrors$3() {
  if (hasRequiredErrors$3) {
    return errors$3.exports
  }
  hasRequiredErrors$3 = 1
  ;(function (module) {
    const { inspect } = require$$0$e

    // adapted from node's internal/errors
    // https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js

    // close copy of node's internal SystemError class.
    class SystemError {
      constructor(code, prefix, context) {
        // XXX context.code is undefined in all constructors used in cp/polyfill
        // that may be a bug copied from node, maybe the constructor should use
        // `code` not `errno`?  nodejs/node#41104
        let message =
          `${prefix}: ${context.syscall} returned ` +
          `${context.code} (${context.message})`
        if (context.path !== undefined) {
          message += ` ${context.path}`
        }
        if (context.dest !== undefined) {
          message += ` => ${context.dest}`
        }
        this.code = code
        Object.defineProperties(this, {
          name: {
            value: 'SystemError',
            enumerable: false,
            writable: true,
            configurable: true
          },
          message: {
            value: message,
            enumerable: false,
            writable: true,
            configurable: true
          },
          info: {
            value: context,
            enumerable: true,
            configurable: true,
            writable: false
          },
          errno: {
            get() {
              return context.errno
            },
            set(value) {
              context.errno = value
            },
            enumerable: true,
            configurable: true
          },
          syscall: {
            get() {
              return context.syscall
            },
            set(value) {
              context.syscall = value
            },
            enumerable: true,
            configurable: true
          }
        })
        if (context.path !== undefined) {
          Object.defineProperty(this, 'path', {
            get() {
              return context.path
            },
            set(value) {
              context.path = value
            },
            enumerable: true,
            configurable: true
          })
        }
        if (context.dest !== undefined) {
          Object.defineProperty(this, 'dest', {
            get() {
              return context.dest
            },
            set(value) {
              context.dest = value
            },
            enumerable: true,
            configurable: true
          })
        }
      }
      toString() {
        return `${this.name} [${this.code}]: ${this.message}`
      }
      [Symbol.for('nodejs.util.inspect.custom')](_recurseTimes, ctx) {
        return inspect(this, {
          ...ctx,
          getters: true,
          customInspect: false
        })
      }
    }
    function E(code, message) {
      module.exports[code] = class NodeError extends SystemError {
        constructor(ctx) {
          super(code, message, ctx)
        }
      }
    }
    E(
      'ERR_FS_CP_DIR_TO_NON_DIR',
      'Cannot overwrite directory with non-directory'
    )
    E('ERR_FS_CP_EEXIST', 'Target already exists')
    E('ERR_FS_CP_EINVAL', 'Invalid src or dest')
    E('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe')
    E(
      'ERR_FS_CP_NON_DIR_TO_DIR',
      'Cannot overwrite non-directory with directory'
    )
    E('ERR_FS_CP_SOCKET', 'Cannot copy a socket file')
    E(
      'ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY',
      'Cannot overwrite symlink in subdirectory of self'
    )
    E('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type')
    E('ERR_FS_EISDIR', 'Path is a directory')
    module.exports.ERR_INVALID_ARG_TYPE = class ERR_INVALID_ARG_TYPE extends (
      Error
    ) {
      constructor(name, expected, actual) {
        super()
        this.code = 'ERR_INVALID_ARG_TYPE'
        this.message = `The ${name} argument must be ${expected}. Received ${typeof actual}`
      }
    }
  })(errors$3)
  return errors$3.exports
}

let polyfill
let hasRequiredPolyfill
function requirePolyfill() {
  if (hasRequiredPolyfill) {
    return polyfill
  }
  hasRequiredPolyfill = 1
  const {
    ERR_FS_CP_DIR_TO_NON_DIR,
    ERR_FS_CP_EEXIST,
    ERR_FS_CP_EINVAL,
    ERR_FS_CP_FIFO_PIPE,
    ERR_FS_CP_NON_DIR_TO_DIR,
    ERR_FS_CP_SOCKET,
    ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY,
    ERR_FS_CP_UNKNOWN,
    ERR_FS_EISDIR,
    ERR_INVALID_ARG_TYPE
  } = requireErrors$3()
  const {
    constants: {
      errno: { EEXIST, EISDIR, EINVAL, ENOTDIR }
    }
  } = require$$0$9
  const {
    chmod,
    copyFile,
    lstat,
    mkdir,
    readdir,
    readlink,
    stat,
    symlink,
    unlink,
    utimes
  } = require$$0$7
  const { dirname, isAbsolute, join, parse, resolve, sep, toNamespacedPath } =
    require$$1$5
  const { fileURLToPath } = require$$0$2
  const defaultOptions = {
    dereference: false,
    errorOnExist: false,
    filter: undefined,
    force: true,
    preserveTimestamps: false,
    recursive: false
  }
  async function cp(src, dest, opts) {
    if (opts != null && typeof opts !== 'object') {
      throw new ERR_INVALID_ARG_TYPE('options', ['Object'], opts)
    }
    return cpFn(
      toNamespacedPath(getValidatedPath(src)),
      toNamespacedPath(getValidatedPath(dest)),
      {
        ...defaultOptions,
        ...opts
      }
    )
  }
  function getValidatedPath(fileURLOrPath) {
    const path =
      fileURLOrPath != null && fileURLOrPath.href && fileURLOrPath.origin
        ? fileURLToPath(fileURLOrPath)
        : fileURLOrPath
    return path
  }
  async function cpFn(src, dest, opts) {
    // Warn about using preserveTimestamps on 32-bit node
    // istanbul ignore next
    if (opts.preserveTimestamps && process.arch === 'ia32') {
      const warning =
        'Using the preserveTimestamps option in 32-bit ' +
        'node is not recommended'
      process.emitWarning(warning, 'TimestampPrecisionWarning')
    }
    const stats = await checkPaths(src, dest, opts)
    const { srcStat, destStat } = stats
    await checkParentPaths(src, srcStat, dest)
    if (opts.filter) {
      return handleFilter(checkParentDir, destStat, src, dest, opts)
    }
    return checkParentDir(destStat, src, dest, opts)
  }
  async function checkPaths(src, dest, opts) {
    const { 0: srcStat, 1: destStat } = await getStats(src, dest, opts)
    if (destStat) {
      if (areIdentical(srcStat, destStat)) {
        throw new ERR_FS_CP_EINVAL({
          message: 'src and dest cannot be the same',
          path: dest,
          syscall: 'cp',
          errno: EINVAL
        })
      }
      if (srcStat.isDirectory() && !destStat.isDirectory()) {
        throw new ERR_FS_CP_DIR_TO_NON_DIR({
          message:
            `cannot overwrite directory ${src} ` + `with non-directory ${dest}`,
          path: dest,
          syscall: 'cp',
          errno: EISDIR
        })
      }
      if (!srcStat.isDirectory() && destStat.isDirectory()) {
        throw new ERR_FS_CP_NON_DIR_TO_DIR({
          message:
            `cannot overwrite non-directory ${src} ` + `with directory ${dest}`,
          path: dest,
          syscall: 'cp',
          errno: ENOTDIR
        })
      }
    }
    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
      throw new ERR_FS_CP_EINVAL({
        message: `cannot copy ${src} to a subdirectory of self ${dest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    return {
      srcStat,
      destStat
    }
  }
  function areIdentical(srcStat, destStat) {
    return (
      destStat.ino &&
      destStat.dev &&
      destStat.ino === srcStat.ino &&
      destStat.dev === srcStat.dev
    )
  }
  function getStats(src, dest, opts) {
    const statFunc = opts.dereference
      ? file =>
          stat(file, {
            bigint: true
          })
      : file =>
          lstat(file, {
            bigint: true
          })
    return Promise.all([
      statFunc(src),
      statFunc(dest).catch(err => {
        // istanbul ignore next: unsure how to cover.
        if (err.code === 'ENOENT') {
          return null
        }
        // istanbul ignore next: unsure how to cover.
        throw err
      })
    ])
  }
  async function checkParentDir(destStat, src, dest, opts) {
    const destParent = dirname(dest)
    const dirExists = await pathExists(destParent)
    if (dirExists) {
      return getStatsForCopy(destStat, src, dest, opts)
    }
    await mkdir(destParent, {
      recursive: true
    })
    return getStatsForCopy(destStat, src, dest, opts)
  }
  function pathExists(dest) {
    return stat(dest).then(
      () => true,
      // istanbul ignore next: not sure when this would occur
      err => (err.code === 'ENOENT' ? false : Promise.reject(err))
    )
  }

  // Recursively check if dest parent is a subdirectory of src.
  // It works for all file types including symlinks since it
  // checks the src and dest inodes. It starts from the deepest
  // parent and stops once it reaches the src parent or the root path.
  async function checkParentPaths(src, srcStat, dest) {
    const srcParent = resolve(dirname(src))
    const destParent = resolve(dirname(dest))
    if (destParent === srcParent || destParent === parse(destParent).root) {
      return
    }
    let destStat
    try {
      destStat = await stat(destParent, {
        bigint: true
      })
    } catch (err) {
      // istanbul ignore else: not sure when this would occur
      if (err.code === 'ENOENT') {
        return
      }
      // istanbul ignore next: not sure when this would occur
      throw err
    }
    if (areIdentical(srcStat, destStat)) {
      throw new ERR_FS_CP_EINVAL({
        message: `cannot copy ${src} to a subdirectory of self ${dest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    return checkParentPaths(src, srcStat, destParent)
  }
  const normalizePathToArray = path => resolve(path).split(sep).filter(Boolean)

  // Return true if dest is a subdir of src, otherwise false.
  // It only checks the path strings.
  function isSrcSubdir(src, dest) {
    const srcArr = normalizePathToArray(src)
    const destArr = normalizePathToArray(dest)
    return srcArr.every((cur, i) => destArr[i] === cur)
  }
  async function handleFilter(onInclude, destStat, src, dest, opts, cb) {
    const include = await opts.filter(src, dest)
    if (include) {
      return onInclude(destStat, src, dest, opts, cb)
    }
  }
  function startCopy(destStat, src, dest, opts) {
    if (opts.filter) {
      return handleFilter(getStatsForCopy, destStat, src, dest, opts)
    }
    return getStatsForCopy(destStat, src, dest, opts)
  }
  async function getStatsForCopy(destStat, src, dest, opts) {
    const statFn = opts.dereference ? stat : lstat
    const srcStat = await statFn(src)
    // istanbul ignore else: can't portably test FIFO
    if (srcStat.isDirectory() && opts.recursive) {
      return onDir(srcStat, destStat, src, dest, opts)
    } else if (srcStat.isDirectory()) {
      throw new ERR_FS_EISDIR({
        message: `${src} is a directory (not copied)`,
        path: src,
        syscall: 'cp',
        errno: EINVAL
      })
    } else if (
      srcStat.isFile() ||
      srcStat.isCharacterDevice() ||
      srcStat.isBlockDevice()
    ) {
      return onFile(srcStat, destStat, src, dest, opts)
    } else if (srcStat.isSymbolicLink()) {
      return onLink(destStat, src, dest)
    } else if (srcStat.isSocket()) {
      throw new ERR_FS_CP_SOCKET({
        message: `cannot copy a socket file: ${dest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    } else if (srcStat.isFIFO()) {
      throw new ERR_FS_CP_FIFO_PIPE({
        message: `cannot copy a FIFO pipe: ${dest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    // istanbul ignore next: should be unreachable
    throw new ERR_FS_CP_UNKNOWN({
      message: `cannot copy an unknown file type: ${dest}`,
      path: dest,
      syscall: 'cp',
      errno: EINVAL
    })
  }
  function onFile(srcStat, destStat, src, dest, opts) {
    if (!destStat) {
      return _copyFile(srcStat, src, dest, opts)
    }
    return mayCopyFile(srcStat, src, dest, opts)
  }
  async function mayCopyFile(srcStat, src, dest, opts) {
    if (opts.force) {
      await unlink(dest)
      return _copyFile(srcStat, src, dest, opts)
    } else if (opts.errorOnExist) {
      throw new ERR_FS_CP_EEXIST({
        message: `${dest} already exists`,
        path: dest,
        syscall: 'cp',
        errno: EEXIST
      })
    }
  }
  async function _copyFile(srcStat, src, dest, opts) {
    await copyFile(src, dest)
    if (opts.preserveTimestamps) {
      return handleTimestampsAndMode(srcStat.mode, src, dest)
    }
    return setDestMode(dest, srcStat.mode)
  }
  async function handleTimestampsAndMode(srcMode, src, dest) {
    // Make sure the file is writable before setting the timestamp
    // otherwise open fails with EPERM when invoked with 'r+'
    // (through utimes call)
    if (fileIsNotWritable(srcMode)) {
      await makeFileWritable(dest, srcMode)
      return setDestTimestampsAndMode(srcMode, src, dest)
    }
    return setDestTimestampsAndMode(srcMode, src, dest)
  }
  function fileIsNotWritable(srcMode) {
    return (srcMode & 0o200) === 0
  }
  function makeFileWritable(dest, srcMode) {
    return setDestMode(dest, srcMode | 0o200)
  }
  async function setDestTimestampsAndMode(srcMode, src, dest) {
    await setDestTimestamps(src, dest)
    return setDestMode(dest, srcMode)
  }
  function setDestMode(dest, srcMode) {
    return chmod(dest, srcMode)
  }
  async function setDestTimestamps(src, dest) {
    // The initial srcStat.atime cannot be trusted
    // because it is modified by the read(2) system call
    // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
    const updatedSrcStat = await stat(src)
    return utimes(dest, updatedSrcStat.atime, updatedSrcStat.mtime)
  }
  function onDir(srcStat, destStat, src, dest, opts) {
    if (!destStat) {
      return mkDirAndCopy(srcStat.mode, src, dest, opts)
    }
    return copyDir(src, dest, opts)
  }
  async function mkDirAndCopy(srcMode, src, dest, opts) {
    await mkdir(dest)
    await copyDir(src, dest, opts)
    return setDestMode(dest, srcMode)
  }
  async function copyDir(src, dest, opts) {
    const dir = await readdir(src)
    for (let i = 0; i < dir.length; i++) {
      const item = dir[i]
      const srcItem = join(src, item)
      const destItem = join(dest, item)
      const { destStat } = await checkPaths(srcItem, destItem, opts)
      await startCopy(destStat, srcItem, destItem, opts)
    }
  }
  async function onLink(destStat, src, dest) {
    let resolvedSrc = await readlink(src)
    if (!isAbsolute(resolvedSrc)) {
      resolvedSrc = resolve(dirname(src), resolvedSrc)
    }
    if (!destStat) {
      return symlink(resolvedSrc, dest)
    }
    let resolvedDest
    try {
      resolvedDest = await readlink(dest)
    } catch (err) {
      // Dest exists and is a regular file or directory,
      // Windows may throw UNKNOWN error. If dest already exists,
      // fs throws error anyway, so no need to guard against it here.
      // istanbul ignore next: can only test on windows
      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') {
        return symlink(resolvedSrc, dest)
      }
      // istanbul ignore next: should not be possible
      throw err
    }
    if (!isAbsolute(resolvedDest)) {
      resolvedDest = resolve(dirname(dest), resolvedDest)
    }
    if (isSrcSubdir(resolvedSrc, resolvedDest)) {
      throw new ERR_FS_CP_EINVAL({
        message:
          `cannot copy ${resolvedSrc} to a subdirectory of self ` +
          `${resolvedDest}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    // Do not copy if src is a subdir of dest since unlinking
    // dest in this case would result in removing src contents
    // and therefore a broken symlink would be created.
    const srcStat = await stat(src)
    if (srcStat.isDirectory() && isSrcSubdir(resolvedDest, resolvedSrc)) {
      throw new ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY({
        message: `cannot overwrite ${resolvedDest} with ${resolvedSrc}`,
        path: dest,
        syscall: 'cp',
        errno: EINVAL
      })
    }
    return copyLink(resolvedSrc, dest)
  }
  async function copyLink(resolvedSrc, dest) {
    await unlink(dest)
    return symlink(resolvedSrc, dest)
  }
  polyfill = cp
  return polyfill
}

let cp_1
let hasRequiredCp
function requireCp() {
  if (hasRequiredCp) {
    return cp_1
  }
  hasRequiredCp = 1
  const fs = require$$0$7
  const getOptions = requireGetOptions()
  const node = requireNode$1()
  const polyfill = requirePolyfill()

  // node 16.7.0 added fs.cp
  const useNative = node.satisfies('>=16.7.0')
  const cp = async (src, dest, opts) => {
    const options = getOptions(opts, {
      copy: [
        'dereference',
        'errorOnExist',
        'filter',
        'force',
        'preserveTimestamps',
        'recursive'
      ]
    })

    // the polyfill is tested separately from this module, no need to hack
    // process.version to try to trigger it just for coverage
    // istanbul ignore next
    return useNative ? fs.cp(src, dest, options) : polyfill(src, dest, options)
  }
  cp_1 = cp
  return cp_1
}

let withTempDir_1
let hasRequiredWithTempDir
function requireWithTempDir() {
  if (hasRequiredWithTempDir) {
    return withTempDir_1
  }
  hasRequiredWithTempDir = 1
  const { join, sep } = require$$1$5
  const getOptions = requireGetOptions()
  const { mkdir, mkdtemp, rm } = require$$0$7

  // create a temp directory, ensure its permissions match its parent, then call
  // the supplied function passing it the path to the directory. clean up after
  // the function finishes, whether it throws or not
  const withTempDir = async (root, fn, opts) => {
    const options = getOptions(opts, {
      copy: ['tmpPrefix']
    })
    // create the directory
    await mkdir(root, {
      recursive: true
    })
    const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''))
    let err
    let result
    try {
      result = await fn(target)
    } catch (_err) {
      err = _err
    }
    try {
      await rm(target, {
        force: true,
        recursive: true
      })
    } catch {
      // ignore errors
    }
    if (err) {
      throw err
    }
    return result
  }
  withTempDir_1 = withTempDir
  return withTempDir_1
}

let readdirScoped_1
let hasRequiredReaddirScoped
function requireReaddirScoped() {
  if (hasRequiredReaddirScoped) {
    return readdirScoped_1
  }
  hasRequiredReaddirScoped = 1
  const { readdir } = require$$0$7
  const { join } = require$$1$5
  const readdirScoped = async dir => {
    const results = []
    for (const item of await readdir(dir)) {
      if (item.startsWith('@')) {
        for (const scopedItem of await readdir(join(dir, item))) {
          results.push(join(item, scopedItem))
        }
      } else {
        results.push(item)
      }
    }
    return results
  }
  readdirScoped_1 = readdirScoped
  return readdirScoped_1
}

let moveFile_1
let hasRequiredMoveFile
function requireMoveFile() {
  if (hasRequiredMoveFile) {
    return moveFile_1
  }
  hasRequiredMoveFile = 1
  const { dirname, join, resolve, relative, isAbsolute } = require$$1$5
  const fs = require$$0$7
  const pathExists = async path => {
    try {
      await fs.access(path)
      return true
    } catch (er) {
      return er.code !== 'ENOENT'
    }
  }
  const moveFile = async (
    source,
    destination,
    options = {},
    root = true,
    symlinks = []
  ) => {
    if (!source || !destination) {
      throw new TypeError('`source` and `destination` file required')
    }
    options = {
      overwrite: true,
      ...options
    }
    if (!options.overwrite && (await pathExists(destination))) {
      throw new Error(`The destination file exists: ${destination}`)
    }
    await fs.mkdir(dirname(destination), {
      recursive: true
    })
    try {
      await fs.rename(source, destination)
    } catch (error) {
      if (error.code === 'EXDEV' || error.code === 'EPERM') {
        const sourceStat = await fs.lstat(source)
        if (sourceStat.isDirectory()) {
          const files = await fs.readdir(source)
          await Promise.all(
            files.map(file =>
              moveFile(
                join(source, file),
                join(destination, file),
                options,
                false,
                symlinks
              )
            )
          )
        } else if (sourceStat.isSymbolicLink()) {
          symlinks.push({
            source,
            destination
          })
        } else {
          await fs.copyFile(source, destination)
        }
      } else {
        throw error
      }
    }
    if (root) {
      await Promise.all(
        symlinks.map(
          async ({ source: symSource, destination: symDestination }) => {
            let target = await fs.readlink(symSource)
            // junction symlinks in windows will be absolute paths, so we need to
            // make sure they point to the symlink destination
            if (isAbsolute(target)) {
              target = resolve(symDestination, relative(symSource, target))
            }
            // try to determine what the actual file is so we can create the correct
            // type of symlink in windows
            let targetStat = 'file'
            try {
              targetStat = await fs.stat(resolve(dirname(symSource), target))
              if (targetStat.isDirectory()) {
                targetStat = 'junction'
              }
            } catch {
              // targetStat remains 'file'
            }
            await fs.symlink(target, symDestination, targetStat)
          }
        )
      )
      await fs.rm(source, {
        recursive: true,
        force: true
      })
    }
  }
  moveFile_1 = moveFile
  return moveFile_1
}

let lib$f
let hasRequiredLib$g
function requireLib$g() {
  if (hasRequiredLib$g) {
    return lib$f
  }
  hasRequiredLib$g = 1
  const cp = requireCp()
  const withTempDir = requireWithTempDir()
  const readdirScoped = requireReaddirScoped()
  const moveFile = requireMoveFile()
  lib$f = {
    cp,
    withTempDir,
    readdirScoped,
    moveFile
  }
  return lib$f
}

let hasRequiredEntryIndex$1
function requireEntryIndex$1() {
  if (hasRequiredEntryIndex$1) {
    return entryIndex$1
  }
  hasRequiredEntryIndex$1 = 1
  const crypto = require$$0$d
  const { appendFile, mkdir, readFile, readdir, rm, writeFile } = require$$0$7
  const { Minipass } = requireCommonjs$7()
  const path = require$$1$5
  const ssri = requireLib$j()
  const uniqueFilename = requireLib$h()
  const contentPath = requirePath$1()
  const hashToSegments = requireHashToSegments$1()
  const indexV = require$$8$1['cache-version'].index
  const { moveFile } = requireLib$g()
  const lsStreamConcurrency = 5
  entryIndex$1.NotFoundError = class NotFoundError extends Error {
    constructor(cache, key) {
      super(`No cache entry for ${key} found in ${cache}`)
      this.code = 'ENOENT'
      this.cache = cache
      this.key = key
    }
  }
  entryIndex$1.compact = compact
  async function compact(cache, key, matchFn, opts = {}) {
    const bucket = bucketPath(cache, key)
    const entries = await bucketEntries(bucket)
    const newEntries = []
    // we loop backwards because the bottom-most result is the newest
    // since we add new entries with appendFile
    for (let i = entries.length - 1; i >= 0; --i) {
      const entry = entries[i]
      // a null integrity could mean either a delete was appended
      // or the user has simply stored an index that does not map
      // to any content. we determine if the user wants to keep the
      // null integrity based on the validateEntry function passed in options.
      // if the integrity is null and no validateEntry is provided, we break
      // as we consider the null integrity to be a deletion of everything
      // that came before it.
      if (entry.integrity === null && !opts.validateEntry) {
        break
      }

      // if this entry is valid, and it is either the first entry or
      // the newEntries array doesn't already include an entry that
      // matches this one based on the provided matchFn, then we add
      // it to the beginning of our list
      if (
        (!opts.validateEntry || opts.validateEntry(entry) === true) &&
        (newEntries.length === 0 ||
          !newEntries.find(oldEntry => matchFn(oldEntry, entry)))
      ) {
        newEntries.unshift(entry)
      }
    }
    const newIndex =
      '\n' +
      newEntries
        .map(entry => {
          const stringified = JSON.stringify(entry)
          const hash = hashEntry(stringified)
          return `${hash}\t${stringified}`
        })
        .join('\n')
    const setup = async () => {
      const target = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)
      await mkdir(path.dirname(target), {
        recursive: true
      })
      return {
        target,
        moved: false
      }
    }
    const teardown = async tmp => {
      if (!tmp.moved) {
        return rm(tmp.target, {
          recursive: true,
          force: true
        })
      }
    }
    const write = async tmp => {
      await writeFile(tmp.target, newIndex, {
        flag: 'wx'
      })
      await mkdir(path.dirname(bucket), {
        recursive: true
      })
      // we use @npmcli/move-file directly here because we
      // want to overwrite the existing file
      await moveFile(tmp.target, bucket)
      tmp.moved = true
    }

    // write the file atomically
    const tmp = await setup()
    try {
      await write(tmp)
    } finally {
      await teardown(tmp)
    }

    // we reverse the list we generated such that the newest
    // entries come first in order to make looping through them easier
    // the true passed to formatEntry tells it to keep null
    // integrity values, if they made it this far it's because
    // validateEntry returned true, and as such we should return it
    return newEntries.reverse().map(entry => formatEntry(cache, entry, true))
  }
  entryIndex$1.insert = insert
  async function insert(cache, key, integrity, opts = {}) {
    const { metadata, size, time } = opts
    const bucket = bucketPath(cache, key)
    const entry = {
      key,
      integrity: integrity && ssri.stringify(integrity),
      time: time || Date.now(),
      size,
      metadata
    }
    try {
      await mkdir(path.dirname(bucket), {
        recursive: true
      })
      const stringified = JSON.stringify(entry)
      // NOTE - Cleverness ahoy!
      //
      // This works because it's tremendously unlikely for an entry to corrupt
      // another while still preserving the string length of the JSON in
      // question. So, we just slap the length in there and verify it on read.
      //
      // Thanks to @isaacs for the whiteboarding session that ended up with
      // this.
      await appendFile(bucket, `\n${hashEntry(stringified)}\t${stringified}`)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return undefined
      }
      throw err
    }
    return formatEntry(cache, entry)
  }
  entryIndex$1.find = find
  async function find(cache, key) {
    const bucket = bucketPath(cache, key)
    try {
      const entries = await bucketEntries(bucket)
      return entries.reduce((latest, next) => {
        if (next && next.key === key) {
          return formatEntry(cache, next)
        } else {
          return latest
        }
      }, null)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return null
      } else {
        throw err
      }
    }
  }
  entryIndex$1.delete = del
  function del(cache, key, opts = {}) {
    if (!opts.removeFully) {
      return insert(cache, key, null, opts)
    }
    const bucket = bucketPath(cache, key)
    return rm(bucket, {
      recursive: true,
      force: true
    })
  }
  entryIndex$1.lsStream = lsStream
  function lsStream(cache) {
    const indexDir = bucketDir(cache)
    const stream = new Minipass({
      objectMode: true
    })

    // Set all this up to run on the stream and then just return the stream
    Promise.resolve()
      .then(async () => {
        const { default: pMap } = await Promise.resolve().then(function () {
          return index
        })
        const buckets = await readdirOrEmpty(indexDir)
        await pMap(
          buckets,
          async bucket => {
            const bucketPath = path.join(indexDir, bucket)
            const subbuckets = await readdirOrEmpty(bucketPath)
            await pMap(
              subbuckets,
              async subbucket => {
                const subbucketPath = path.join(bucketPath, subbucket)

                // "/cachename/<bucket 0xFF>/<bucket 0xFF>./*"
                const subbucketEntries = await readdirOrEmpty(subbucketPath)
                await pMap(
                  subbucketEntries,
                  async entry => {
                    const entryPath = path.join(subbucketPath, entry)
                    try {
                      const entries = await bucketEntries(entryPath)
                      // using a Map here prevents duplicate keys from showing up
                      // twice, I guess?
                      const reduced = entries.reduce((acc, entry) => {
                        acc.set(entry.key, entry)
                        return acc
                      }, new Map())
                      // reduced is a map of key => entry
                      for (const entry of reduced.values()) {
                        const formatted = formatEntry(cache, entry)
                        if (formatted) {
                          stream.write(formatted)
                        }
                      }
                    } catch (err) {
                      if (err.code === 'ENOENT') {
                        return undefined
                      }
                      throw err
                    }
                  },
                  {
                    concurrency: lsStreamConcurrency
                  }
                )
              },
              {
                concurrency: lsStreamConcurrency
              }
            )
          },
          {
            concurrency: lsStreamConcurrency
          }
        )
        stream.end()
        return stream
      })
      .catch(err => stream.emit('error', err))
    return stream
  }
  entryIndex$1.ls = ls
  async function ls(cache) {
    const entries = await lsStream(cache).collect()
    return entries.reduce((acc, xs) => {
      acc[xs.key] = xs
      return acc
    }, {})
  }
  entryIndex$1.bucketEntries = bucketEntries
  async function bucketEntries(bucket, filter) {
    const data = await readFile(bucket, 'utf8')
    return _bucketEntries(data)
  }
  function _bucketEntries(data) {
    const entries = []
    data.split('\n').forEach(entry => {
      if (!entry) {
        return
      }
      const pieces = entry.split('\t')
      if (!pieces[1] || hashEntry(pieces[1]) !== pieces[0]) {
        // Hash is no good! Corruption or malice? Doesn't matter!
        // EJECT EJECT
        return
      }
      let obj
      try {
        obj = JSON.parse(pieces[1])
      } catch (_) {
        // eslint-ignore-next-line no-empty-block
      }
      // coverage disabled here, no need to test with an entry that parses to something falsey
      // istanbul ignore else
      if (obj) {
        entries.push(obj)
      }
    })
    return entries
  }
  entryIndex$1.bucketDir = bucketDir
  function bucketDir(cache) {
    return path.join(cache, `index-v${indexV}`)
  }
  entryIndex$1.bucketPath = bucketPath
  function bucketPath(cache, key) {
    const hashed = hashKey(key)
    return path.join.apply(
      path,
      [bucketDir(cache)].concat(hashToSegments(hashed))
    )
  }
  entryIndex$1.hashKey = hashKey
  function hashKey(key) {
    return hash(key, 'sha256')
  }
  entryIndex$1.hashEntry = hashEntry
  function hashEntry(str) {
    return hash(str, 'sha1')
  }
  function hash(str, digest) {
    return crypto.createHash(digest).update(str).digest('hex')
  }
  function formatEntry(cache, entry, keepAll) {
    // Treat null digests as deletions. They'll shadow any previous entries.
    if (!entry.integrity && !keepAll) {
      return null
    }
    return {
      key: entry.key,
      integrity: entry.integrity,
      path: entry.integrity ? contentPath(cache, entry.integrity) : undefined,
      size: entry.size,
      time: entry.time,
      metadata: entry.metadata
    }
  }
  function readdirOrEmpty(dir) {
    return readdir(dir).catch(err => {
      if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
        return []
      }
      throw err
    })
  }
  return entryIndex$1
}

const memoization$1 = { exports: {} }

let hasRequiredMemoization$1
function requireMemoization$1() {
  if (hasRequiredMemoization$1) {
    return memoization$1.exports
  }
  hasRequiredMemoization$1 = 1
  ;(function (module) {
    const { LRUCache } = /*@__PURE__*/ requireCommonjs$9()
    const MEMOIZED = new LRUCache({
      max: 500,
      maxSize: 50 * 1024 * 1024,
      // 50MB
      ttl: 3 * 60 * 1000,
      // 3 minutes
      sizeCalculation: (entry, key) =>
        key.startsWith('key:') ? entry.data.length : entry.length
    })
    module.exports.clearMemoized = clearMemoized
    function clearMemoized() {
      const old = {}
      MEMOIZED.forEach((v, k) => {
        old[k] = v
      })
      MEMOIZED.clear()
      return old
    }
    module.exports.put = put
    function put(cache, entry, data, opts) {
      pickMem(opts).set(`key:${cache}:${entry.key}`, {
        entry,
        data
      })
      putDigest(cache, entry.integrity, data, opts)
    }
    module.exports.put.byDigest = putDigest
    function putDigest(cache, integrity, data, opts) {
      pickMem(opts).set(`digest:${cache}:${integrity}`, data)
    }
    module.exports.get = get
    function get(cache, key, opts) {
      return pickMem(opts).get(`key:${cache}:${key}`)
    }
    module.exports.get.byDigest = getDigest
    function getDigest(cache, integrity, opts) {
      return pickMem(opts).get(`digest:${cache}:${integrity}`)
    }
    class ObjProxy {
      constructor(obj) {
        this.obj = obj
      }
      get(key) {
        return this.obj[key]
      }
      set(key, val) {
        this.obj[key] = val
      }
    }
    function pickMem(opts) {
      if (!opts || !opts.memoize) {
        return MEMOIZED
      } else if (opts.memoize.get && opts.memoize.set) {
        return opts.memoize
      } else if (typeof opts.memoize === 'object') {
        return new ObjProxy(opts.memoize)
      } else {
        return MEMOIZED
      }
    }
  })(memoization$1)
  return memoization$1.exports
}

const read$1 = { exports: {} }

const lib$e = {}

let hasRequiredLib$f
function requireLib$f() {
  if (hasRequiredLib$f) {
    return lib$e
  }
  hasRequiredLib$f = 1
  const { Minipass } = requireCommonjs$7()
  const EE = require$$0$c.EventEmitter
  const fs = require$$0$4
  const writev = fs.writev
  const _autoClose = Symbol('_autoClose')
  const _close = Symbol('_close')
  const _ended = Symbol('_ended')
  const _fd = Symbol('_fd')
  const _finished = Symbol('_finished')
  const _flags = Symbol('_flags')
  const _flush = Symbol('_flush')
  const _handleChunk = Symbol('_handleChunk')
  const _makeBuf = Symbol('_makeBuf')
  const _mode = Symbol('_mode')
  const _needDrain = Symbol('_needDrain')
  const _onerror = Symbol('_onerror')
  const _onopen = Symbol('_onopen')
  const _onread = Symbol('_onread')
  const _onwrite = Symbol('_onwrite')
  const _open = Symbol('_open')
  const _path = Symbol('_path')
  const _pos = Symbol('_pos')
  const _queue = Symbol('_queue')
  const _read = Symbol('_read')
  const _readSize = Symbol('_readSize')
  const _reading = Symbol('_reading')
  const _remain = Symbol('_remain')
  const _size = Symbol('_size')
  const _write = Symbol('_write')
  const _writing = Symbol('_writing')
  const _defaultFlag = Symbol('_defaultFlag')
  const _errored = Symbol('_errored')
  class ReadStream extends Minipass {
    constructor(path, opt) {
      opt = opt || {}
      super(opt)
      this.readable = true
      this.writable = false
      if (typeof path !== 'string') {
        throw new TypeError('path must be a string')
      }
      this[_errored] = false
      this[_fd] = typeof opt.fd === 'number' ? opt.fd : null
      this[_path] = path
      this[_readSize] = opt.readSize || 16 * 1024 * 1024
      this[_reading] = false
      this[_size] = typeof opt.size === 'number' ? opt.size : Infinity
      this[_remain] = this[_size]
      this[_autoClose] =
        typeof opt.autoClose === 'boolean' ? opt.autoClose : true
      if (typeof this[_fd] === 'number') {
        this[_read]()
      } else {
        this[_open]()
      }
    }
    get fd() {
      return this[_fd]
    }
    get path() {
      return this[_path]
    }
    write() {
      throw new TypeError('this is a readable stream')
    }
    end() {
      throw new TypeError('this is a readable stream')
    }
    [_open]() {
      fs.open(this[_path], 'r', (er, fd) => this[_onopen](er, fd))
    }
    [_onopen](er, fd) {
      if (er) {
        this[_onerror](er)
      } else {
        this[_fd] = fd
        this.emit('open', fd)
        this[_read]()
      }
    }
    [_makeBuf]() {
      return Buffer.allocUnsafe(Math.min(this[_readSize], this[_remain]))
    }
    [_read]() {
      if (!this[_reading]) {
        this[_reading] = true
        const buf = this[_makeBuf]()
        /* istanbul ignore if */
        if (buf.length === 0) {
          return process.nextTick(() => this[_onread](null, 0, buf))
        }
        fs.read(this[_fd], buf, 0, buf.length, null, (er, br, b) =>
          this[_onread](er, br, b)
        )
      }
    }
    [_onread](er, br, buf) {
      this[_reading] = false
      if (er) {
        this[_onerror](er)
      } else if (this[_handleChunk](br, buf)) {
        this[_read]()
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.close(fd, er => (er ? this.emit('error', er) : this.emit('close')))
      }
    }
    [_onerror](er) {
      this[_reading] = true
      this[_close]()
      this.emit('error', er)
    }
    [_handleChunk](br, buf) {
      let ret = false
      // no effect if infinite
      this[_remain] -= br
      if (br > 0) {
        ret = super.write(br < buf.length ? buf.slice(0, br) : buf)
      }
      if (br === 0 || this[_remain] <= 0) {
        ret = false
        this[_close]()
        super.end()
      }
      return ret
    }
    emit(ev, data) {
      switch (ev) {
        case 'prefinish':
        case 'finish':
          break
        case 'drain':
          if (typeof this[_fd] === 'number') {
            this[_read]()
          }
          break
        case 'error':
          if (this[_errored]) {
            return
          }
          this[_errored] = true
          return super.emit(ev, data)
        default:
          return super.emit(ev, data)
      }
    }
  }
  class ReadStreamSync extends ReadStream {
    [_open]() {
      let threw = true
      try {
        this[_onopen](null, fs.openSync(this[_path], 'r'))
        threw = false
      } finally {
        if (threw) {
          this[_close]()
        }
      }
    }
    [_read]() {
      let threw = true
      try {
        if (!this[_reading]) {
          this[_reading] = true
          do {
            const buf = this[_makeBuf]()
            /* istanbul ignore next */
            const br =
              buf.length === 0
                ? 0
                : fs.readSync(this[_fd], buf, 0, buf.length, null)
            if (!this[_handleChunk](br, buf)) {
              break
            }
          } while (true)
          this[_reading] = false
        }
        threw = false
      } finally {
        if (threw) {
          this[_close]()
        }
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.closeSync(fd)
        this.emit('close')
      }
    }
  }
  class WriteStream extends EE {
    constructor(path, opt) {
      opt = opt || {}
      super(opt)
      this.readable = false
      this.writable = true
      this[_errored] = false
      this[_writing] = false
      this[_ended] = false
      this[_needDrain] = false
      this[_queue] = []
      this[_path] = path
      this[_fd] = typeof opt.fd === 'number' ? opt.fd : null
      this[_mode] = opt.mode === undefined ? 0o666 : opt.mode
      this[_pos] = typeof opt.start === 'number' ? opt.start : null
      this[_autoClose] =
        typeof opt.autoClose === 'boolean' ? opt.autoClose : true

      // truncating makes no sense when writing into the middle
      const defaultFlag = this[_pos] !== null ? 'r+' : 'w'
      this[_defaultFlag] = opt.flags === undefined
      this[_flags] = this[_defaultFlag] ? defaultFlag : opt.flags
      if (this[_fd] === null) {
        this[_open]()
      }
    }
    emit(ev, data) {
      if (ev === 'error') {
        if (this[_errored]) {
          return
        }
        this[_errored] = true
      }
      return super.emit(ev, data)
    }
    get fd() {
      return this[_fd]
    }
    get path() {
      return this[_path]
    }
    [_onerror](er) {
      this[_close]()
      this[_writing] = true
      this.emit('error', er)
    }
    [_open]() {
      fs.open(this[_path], this[_flags], this[_mode], (er, fd) =>
        this[_onopen](er, fd)
      )
    }
    [_onopen](er, fd) {
      if (
        this[_defaultFlag] &&
        this[_flags] === 'r+' &&
        er &&
        er.code === 'ENOENT'
      ) {
        this[_flags] = 'w'
        this[_open]()
      } else if (er) {
        this[_onerror](er)
      } else {
        this[_fd] = fd
        this.emit('open', fd)
        if (!this[_writing]) {
          this[_flush]()
        }
      }
    }
    end(buf, enc) {
      if (buf) {
        this.write(buf, enc)
      }
      this[_ended] = true

      // synthetic after-write logic, where drain/finish live
      if (
        !this[_writing] &&
        !this[_queue].length &&
        typeof this[_fd] === 'number'
      ) {
        this[_onwrite](null, 0)
      }
      return this
    }
    write(buf, enc) {
      if (typeof buf === 'string') {
        buf = Buffer.from(buf, enc)
      }
      if (this[_ended]) {
        this.emit('error', new Error('write() after end()'))
        return false
      }
      if (this[_fd] === null || this[_writing] || this[_queue].length) {
        this[_queue].push(buf)
        this[_needDrain] = true
        return false
      }
      this[_writing] = true
      this[_write](buf)
      return true
    }
    [_write](buf) {
      fs.write(this[_fd], buf, 0, buf.length, this[_pos], (er, bw) =>
        this[_onwrite](er, bw)
      )
    }
    [_onwrite](er, bw) {
      if (er) {
        this[_onerror](er)
      } else {
        if (this[_pos] !== null) {
          this[_pos] += bw
        }
        if (this[_queue].length) {
          this[_flush]()
        } else {
          this[_writing] = false
          if (this[_ended] && !this[_finished]) {
            this[_finished] = true
            this[_close]()
            this.emit('finish')
          } else if (this[_needDrain]) {
            this[_needDrain] = false
            this.emit('drain')
          }
        }
      }
    }
    [_flush]() {
      if (this[_queue].length === 0) {
        if (this[_ended]) {
          this[_onwrite](null, 0)
        }
      } else if (this[_queue].length === 1) {
        this[_write](this[_queue].pop())
      } else {
        const iovec = this[_queue]
        this[_queue] = []
        writev(this[_fd], iovec, this[_pos], (er, bw) => this[_onwrite](er, bw))
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.close(fd, er => (er ? this.emit('error', er) : this.emit('close')))
      }
    }
  }
  class WriteStreamSync extends WriteStream {
    [_open]() {
      let fd
      // only wrap in a try{} block if we know we'll retry, to avoid
      // the rethrow obscuring the error's source frame in most cases.
      if (this[_defaultFlag] && this[_flags] === 'r+') {
        try {
          fd = fs.openSync(this[_path], this[_flags], this[_mode])
        } catch (er) {
          if (er.code === 'ENOENT') {
            this[_flags] = 'w'
            return this[_open]()
          } else {
            throw er
          }
        }
      } else {
        fd = fs.openSync(this[_path], this[_flags], this[_mode])
      }
      this[_onopen](null, fd)
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.closeSync(fd)
        this.emit('close')
      }
    }
    [_write](buf) {
      // throw the original, but try to close if it fails
      let threw = true
      try {
        this[_onwrite](
          null,
          fs.writeSync(this[_fd], buf, 0, buf.length, this[_pos])
        )
        threw = false
      } finally {
        if (threw) {
          try {
            this[_close]()
          } catch {
            // ok error
          }
        }
      }
    }
  }
  lib$e.ReadStream = ReadStream
  lib$e.ReadStreamSync = ReadStreamSync
  lib$e.WriteStream = WriteStream
  lib$e.WriteStreamSync = WriteStreamSync
  return lib$e
}

let hasRequiredRead$1
function requireRead$1() {
  if (hasRequiredRead$1) {
    return read$1.exports
  }
  hasRequiredRead$1 = 1
  const fs = require$$0$7
  const fsm = requireLib$f()
  const ssri = requireLib$j()
  const contentPath = requirePath$1()
  const Pipeline = requireMinipassPipeline()
  read$1.exports = read
  const MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024
  async function read(cache, integrity, opts = {}) {
    const { size } = opts
    const { stat, cpath, sri } = await withContentSri(
      cache,
      integrity,
      async (cpath, sri) => {
        // get size
        const stat = size
          ? {
              size
            }
          : await fs.stat(cpath)
        return {
          stat,
          cpath,
          sri
        }
      }
    )
    if (stat.size > MAX_SINGLE_READ_SIZE) {
      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()
    }
    const data = await fs.readFile(cpath, {
      encoding: null
    })
    if (stat.size !== data.length) {
      throw sizeError(stat.size, data.length)
    }
    if (!ssri.checkData(data, sri)) {
      throw integrityError(sri, cpath)
    }
    return data
  }
  const readPipeline = (cpath, size, sri, stream) => {
    stream.push(
      new fsm.ReadStream(cpath, {
        size,
        readSize: MAX_SINGLE_READ_SIZE
      }),
      ssri.integrityStream({
        integrity: sri,
        size
      })
    )
    return stream
  }
  read$1.exports.stream = readStream
  read$1.exports.readStream = readStream
  function readStream(cache, integrity, opts = {}) {
    const { size } = opts
    const stream = new Pipeline()
    // Set all this up to run on the stream and then just return the stream
    Promise.resolve()
      .then(async () => {
        const { stat, cpath, sri } = await withContentSri(
          cache,
          integrity,
          async (cpath, sri) => {
            // get size
            const stat = size
              ? {
                  size
                }
              : await fs.stat(cpath)
            return {
              stat,
              cpath,
              sri
            }
          }
        )
        return readPipeline(cpath, stat.size, sri, stream)
      })
      .catch(err => stream.emit('error', err))
    return stream
  }
  read$1.exports.copy = copy
  function copy(cache, integrity, dest) {
    return withContentSri(cache, integrity, cpath => {
      return fs.copyFile(cpath, dest)
    })
  }
  read$1.exports.hasContent = hasContent
  async function hasContent(cache, integrity) {
    if (!integrity) {
      return false
    }
    try {
      return await withContentSri(cache, integrity, async (cpath, sri) => {
        const stat = await fs.stat(cpath)
        return {
          size: stat.size,
          sri,
          stat
        }
      })
    } catch (err) {
      if (err.code === 'ENOENT') {
        return false
      }
      if (err.code === 'EPERM') {
        /* istanbul ignore else */
        if (process.platform !== 'win32') {
          throw err
        } else {
          return false
        }
      }
    }
  }
  async function withContentSri(cache, integrity, fn) {
    const sri = ssri.parse(integrity)
    // If `integrity` has multiple entries, pick the first digest
    // with available local data.
    const algo = sri.pickAlgorithm()
    const digests = sri[algo]
    if (digests.length <= 1) {
      const cpath = contentPath(cache, digests[0])
      return fn(cpath, digests[0])
    } else {
      // Can't use race here because a generic error can happen before
      // a ENOENT error, and can happen before a valid result
      const results = await Promise.all(
        digests.map(async meta => {
          try {
            return await withContentSri(cache, meta, fn)
          } catch (err) {
            if (err.code === 'ENOENT') {
              return Object.assign(
                new Error('No matching content found for ' + sri.toString()),
                {
                  code: 'ENOENT'
                }
              )
            }
            return err
          }
        })
      )
      // Return the first non error if it is found
      const result = results.find(r => !(r instanceof Error))
      if (result) {
        return result
      }

      // Throw the No matching content found error
      const enoentError = results.find(r => r.code === 'ENOENT')
      if (enoentError) {
        throw enoentError
      }

      // Throw generic error
      throw results.find(r => r instanceof Error)
    }
  }
  function sizeError(expected, found) {
    /* eslint-disable-next-line max-len */
    const err = new Error(
      `Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`
    )
    err.expected = expected
    err.found = found
    err.code = 'EBADSIZE'
    return err
  }
  function integrityError(sri, path) {
    const err = new Error(`Integrity verification failed for ${sri} (${path})`)
    err.code = 'EINTEGRITY'
    err.sri = sri
    err.path = path
    return err
  }
  return read$1.exports
}

let hasRequiredGet$1
function requireGet$1() {
  if (hasRequiredGet$1) {
    return get$1.exports
  }
  hasRequiredGet$1 = 1
  ;(function (module) {
    const Collect = requireMinipassCollect()
    const { Minipass } = requireCommonjs$7()
    const Pipeline = requireMinipassPipeline()
    const index = requireEntryIndex$1()
    const memo = requireMemoization$1()
    const read = requireRead$1()
    async function getData(cache, key, opts = {}) {
      const { integrity, memoize, size } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return {
          metadata: memoized.entry.metadata,
          data: memoized.data,
          integrity: memoized.entry.integrity,
          size: memoized.entry.size
        }
      }
      const entry = await index.find(cache, key, opts)
      if (!entry) {
        throw new index.NotFoundError(cache, key)
      }
      const data = await read(cache, entry.integrity, {
        integrity,
        size
      })
      if (memoize) {
        memo.put(cache, entry, data, opts)
      }
      return {
        data,
        metadata: entry.metadata,
        size: entry.size,
        integrity: entry.integrity
      }
    }
    module.exports = getData
    async function getDataByDigest(cache, key, opts = {}) {
      const { integrity, memoize, size } = opts
      const memoized = memo.get.byDigest(cache, key, opts)
      if (memoized && memoize !== false) {
        return memoized
      }
      const res = await read(cache, key, {
        integrity,
        size
      })
      if (memoize) {
        memo.put.byDigest(cache, key, res, opts)
      }
      return res
    }
    module.exports.byDigest = getDataByDigest
    const getMemoizedStream = memoized => {
      const stream = new Minipass()
      stream.on('newListener', function (ev, cb) {
        ev === 'metadata' && cb(memoized.entry.metadata)
        ev === 'integrity' && cb(memoized.entry.integrity)
        ev === 'size' && cb(memoized.entry.size)
      })
      stream.end(memoized.data)
      return stream
    }
    function getStream(cache, key, opts = {}) {
      const { memoize, size } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return getMemoizedStream(memoized)
      }
      const stream = new Pipeline()
      // Set all this up to run on the stream and then just return the stream
      Promise.resolve()
        .then(async () => {
          const entry = await index.find(cache, key)
          if (!entry) {
            throw new index.NotFoundError(cache, key)
          }
          stream.emit('metadata', entry.metadata)
          stream.emit('integrity', entry.integrity)
          stream.emit('size', entry.size)
          stream.on('newListener', function (ev, cb) {
            ev === 'metadata' && cb(entry.metadata)
            ev === 'integrity' && cb(entry.integrity)
            ev === 'size' && cb(entry.size)
          })
          const src = read.readStream(cache, entry.integrity, {
            ...opts,
            size: typeof size !== 'number' ? entry.size : size
          })
          if (memoize) {
            const memoStream = new Collect.PassThrough()
            memoStream.on('collect', data => memo.put(cache, entry, data, opts))
            stream.unshift(memoStream)
          }
          stream.unshift(src)
          return stream
        })
        .catch(err => stream.emit('error', err))
      return stream
    }
    module.exports.stream = getStream
    function getStreamDigest(cache, integrity, opts = {}) {
      const { memoize } = opts
      const memoized = memo.get.byDigest(cache, integrity, opts)
      if (memoized && memoize !== false) {
        const stream = new Minipass()
        stream.end(memoized)
        return stream
      } else {
        const stream = read.readStream(cache, integrity, opts)
        if (!memoize) {
          return stream
        }
        const memoStream = new Collect.PassThrough()
        memoStream.on('collect', data =>
          memo.put.byDigest(cache, integrity, data, opts)
        )
        return new Pipeline(stream, memoStream)
      }
    }
    module.exports.stream.byDigest = getStreamDigest
    function info(cache, key, opts = {}) {
      const { memoize } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return Promise.resolve(memoized.entry)
      } else {
        return index.find(cache, key)
      }
    }
    module.exports.info = info
    async function copy(cache, key, dest, opts = {}) {
      const entry = await index.find(cache, key, opts)
      if (!entry) {
        throw new index.NotFoundError(cache, key)
      }
      await read.copy(cache, entry.integrity, dest, opts)
      return {
        metadata: entry.metadata,
        size: entry.size,
        integrity: entry.integrity
      }
    }
    module.exports.copy = copy
    async function copyByDigest(cache, key, dest, opts = {}) {
      await read.copy(cache, key, dest, opts)
      return key
    }
    module.exports.copy.byDigest = copyByDigest
    module.exports.hasContent = read.hasContent
  })(get$1)
  return get$1.exports
}

const put$1 = { exports: {} }

const write$1 = { exports: {} }

let minipass$4
let hasRequiredMinipass$4
function requireMinipass$4() {
  if (hasRequiredMinipass$4) {
    return minipass$4
  }
  hasRequiredMinipass$4 = 1
  const proc =
    typeof process === 'object' && process
      ? process
      : {
          stdout: null,
          stderr: null
        }
  const EE = require$$0$c
  const Stream = require$$1$8
  const SD = require$$2$4.StringDecoder
  const EOF = Symbol('EOF')
  const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
  const EMITTED_END = Symbol('emittedEnd')
  const EMITTING_END = Symbol('emittingEnd')
  const EMITTED_ERROR = Symbol('emittedError')
  const CLOSED = Symbol('closed')
  const READ = Symbol('read')
  const FLUSH = Symbol('flush')
  const FLUSHCHUNK = Symbol('flushChunk')
  const ENCODING = Symbol('encoding')
  const DECODER = Symbol('decoder')
  const FLOWING = Symbol('flowing')
  const PAUSED = Symbol('paused')
  const RESUME = Symbol('resume')
  const BUFFERLENGTH = Symbol('bufferLength')
  const BUFFERPUSH = Symbol('bufferPush')
  const BUFFERSHIFT = Symbol('bufferShift')
  const OBJECTMODE = Symbol('objectMode')
  const DESTROYED = Symbol('destroyed')
  const EMITDATA = Symbol('emitData')
  const EMITEND = Symbol('emitEnd')
  const EMITEND2 = Symbol('emitEnd2')
  const ASYNC = Symbol('async')
  const defer = fn => Promise.resolve().then(fn)

  // TODO remove when Node v8 support drops
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'
  const ASYNCITERATOR =
    (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')
  const ITERATOR =
    (doIter && Symbol.iterator) || Symbol('iterator not implemented')

  // events that mean 'the stream is over'
  // these are treated specially, and re-emitted
  // if they are listened for after emitting.
  const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
  const isArrayBuffer = b =>
    b instanceof ArrayBuffer ||
    (typeof b === 'object' &&
      b.constructor &&
      b.constructor.name === 'ArrayBuffer' &&
      b.byteLength >= 0)
  const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
  class Pipe {
    constructor(src, dest, opts) {
      this.src = src
      this.dest = dest
      this.opts = opts
      this.ondrain = () => src[RESUME]()
      dest.on('drain', this.ondrain)
    }
    unpipe() {
      this.dest.removeListener('drain', this.ondrain)
    }
    // istanbul ignore next - only here for the prototype
    proxyErrors() {}
    end() {
      this.unpipe()
      if (this.opts.end) {
        this.dest.end()
      }
    }
  }
  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener('error', this.proxyErrors)
      super.unpipe()
    }
    constructor(src, dest, opts) {
      super(src, dest, opts)
      this.proxyErrors = er => dest.emit('error', er)
      src.on('error', this.proxyErrors)
    }
  }
  minipass$4 = class Minipass extends Stream {
    constructor(options) {
      super()
      this[FLOWING] = false
      // whether we're explicitly paused
      this[PAUSED] = false
      this.pipes = []
      this.buffer = []
      this[OBJECTMODE] = (options && options.objectMode) || false
      if (this[OBJECTMODE]) {
        this[ENCODING] = null
      } else {
        this[ENCODING] = (options && options.encoding) || null
      }
      if (this[ENCODING] === 'buffer') {
        this[ENCODING] = null
      }
      this[ASYNC] = (options && !!options.async) || false
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null
      this[EOF] = false
      this[EMITTED_END] = false
      this[EMITTING_END] = false
      this[CLOSED] = false
      this[EMITTED_ERROR] = null
      this.writable = true
      this.readable = true
      this[BUFFERLENGTH] = 0
      this[DESTROYED] = false
    }
    get bufferLength() {
      return this[BUFFERLENGTH]
    }
    get encoding() {
      return this[ENCODING]
    }
    set encoding(enc) {
      if (this[OBJECTMODE]) {
        throw new Error('cannot set encoding in objectMode')
      }
      if (
        this[ENCODING] &&
        enc !== this[ENCODING] &&
        ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])
      ) {
        throw new Error('cannot change encoding')
      }
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null
        if (this.buffer.length) {
          this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))
        }
      }
      this[ENCODING] = enc
    }
    setEncoding(enc) {
      this.encoding = enc
    }
    get objectMode() {
      return this[OBJECTMODE]
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om
    }
    get ['async']() {
      return this[ASYNC]
    }
    set ['async'](a) {
      this[ASYNC] = this[ASYNC] || !!a
    }
    write(chunk, encoding, cb) {
      if (this[EOF]) {
        throw new Error('write after end')
      }
      if (this[DESTROYED]) {
        this.emit(
          'error',
          Object.assign(
            new Error('Cannot call write after a stream was destroyed'),
            {
              code: 'ERR_STREAM_DESTROYED'
            }
          )
        )
        return true
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const fn = this[ASYNC] ? defer : f => f()

      // convert array buffers and typed array views into buffers
      // at some point in the future, we may want to do the opposite!
      // leave strings and buffers as-is
      // anything else switches us into object mode
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)
        } else if (isArrayBuffer(chunk)) {
          chunk = Buffer.from(chunk)
        } else if (typeof chunk !== 'string') {
          // use the setter so we throw if we have encoding set
          this.objectMode = true
        }
      }

      // handle object mode up front, since it's simpler
      // this yields better performance, fewer checks later.
      if (this[OBJECTMODE]) {
        /* istanbul ignore if - maybe impossible? */
        if (this.flowing && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this.flowing) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // at this point the chunk is a buffer or string
      // don't buffer it up or send it to the decoder
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // fast-path writing strings of same encoding to a stream with
      // an empty buffer, skipping the buffer/decoder dance
      if (
        typeof chunk === 'string' &&
        // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)
      ) {
        chunk = Buffer.from(chunk, encoding)
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk)
      }

      // Note: flushing CAN potentially switch us into not-flowing mode
      if (this.flowing && this[BUFFERLENGTH] !== 0) {
        this[FLUSH](true)
      }
      if (this.flowing) {
        this.emit('data', chunk)
      } else {
        this[BUFFERPUSH](chunk)
      }
      if (this[BUFFERLENGTH] !== 0) {
        this.emit('readable')
      }
      if (cb) {
        fn(cb)
      }
      return this.flowing
    }
    read(n) {
      if (this[DESTROYED]) {
        return null
      }
      if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]()
        return null
      }
      if (this[OBJECTMODE]) {
        n = null
      }
      if (this.buffer.length > 1 && !this[OBJECTMODE]) {
        if (this.encoding) {
          this.buffer = [this.buffer.join('')]
        } else {
          this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]
        }
      }
      const ret = this[READ](n || null, this.buffer[0])
      this[MAYBE_EMIT_END]()
      return ret
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null) {
        this[BUFFERSHIFT]()
      } else {
        this.buffer[0] = chunk.slice(n)
        chunk = chunk.slice(0, n)
        this[BUFFERLENGTH] -= n
      }
      this.emit('data', chunk)
      if (!this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
      return chunk
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      if (cb) {
        this.once('end', cb)
      }
      this[EOF] = true
      this.writable = false

      // if we haven't written anything, then go ahead and emit,
      // even if we're not reading.
      // we'll re-emit if a new 'end' listener is added anyway.
      // This makes MP more suitable to write-only use cases.
      if (this.flowing || !this[PAUSED]) {
        this[MAYBE_EMIT_END]()
      }
      return this
    }

    // don't let the internal resume be overwritten
    [RESUME]() {
      if (this[DESTROYED]) {
        return
      }
      this[PAUSED] = false
      this[FLOWING] = true
      this.emit('resume')
      if (this.buffer.length) {
        this[FLUSH]()
      } else if (this[EOF]) {
        this[MAYBE_EMIT_END]()
      } else {
        this.emit('drain')
      }
    }
    resume() {
      return this[RESUME]()
    }
    pause() {
      this[FLOWING] = false
      this[PAUSED] = true
    }
    get destroyed() {
      return this[DESTROYED]
    }
    get flowing() {
      return this[FLOWING]
    }
    get paused() {
      return this[PAUSED]
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] += 1
      } else {
        this[BUFFERLENGTH] += chunk.length
      }
      this.buffer.push(chunk)
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this.buffer[0].length
        }
      }
      return this.buffer.shift()
    }
    [FLUSH](noDrain) {
      do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))
      if (!noDrain && !this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit('data', chunk), this.flowing) : false
    }
    pipe(dest, opts) {
      if (this[DESTROYED]) {
        return
      }
      const ended = this[EMITTED_END]
      opts = opts || {}
      if (dest === proc.stdout || dest === proc.stderr) {
        opts.end = false
      } else {
        opts.end = opts.end !== false
      }
      opts.proxyErrors = !!opts.proxyErrors

      // piping an ended stream ends immediately
      if (ended) {
        if (opts.end) {
          dest.end()
        }
      } else {
        this.pipes.push(
          !opts.proxyErrors
            ? new Pipe(this, dest, opts)
            : new PipeProxyErrors(this, dest, opts)
        )
        if (this[ASYNC]) {
          defer(() => this[RESUME]())
        } else {
          this[RESUME]()
        }
      }
      return dest
    }
    unpipe(dest) {
      const p = this.pipes.find(p => p.dest === dest)
      if (p) {
        this.pipes.splice(this.pipes.indexOf(p), 1)
        p.unpipe()
      }
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'data' && !this.pipes.length && !this.flowing) {
        this[RESUME]()
      } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
        super.emit('readable')
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev)
        this.removeAllListeners(ev)
      } else if (ev === 'error' && this[EMITTED_ERROR]) {
        if (this[ASYNC]) {
          defer(() => fn.call(this, this[EMITTED_ERROR]))
        } else {
          fn.call(this, this[EMITTED_ERROR])
        }
      }
      return ret
    }
    get emittedEnd() {
      return this[EMITTED_END]
    }
    [MAYBE_EMIT_END]() {
      if (
        !this[EMITTING_END] &&
        !this[EMITTED_END] &&
        !this[DESTROYED] &&
        this.buffer.length === 0 &&
        this[EOF]
      ) {
        this[EMITTING_END] = true
        this.emit('end')
        this.emit('prefinish')
        this.emit('finish')
        if (this[CLOSED]) {
          this.emit('close')
        }
        this[EMITTING_END] = false
      }
    }
    emit(ev, data, ...extra) {
      // error and close are only events allowed after calling destroy()
      if (
        ev !== 'error' &&
        ev !== 'close' &&
        ev !== DESTROYED &&
        this[DESTROYED]
      ) {
        return
      } else if (ev === 'data') {
        return !data
          ? false
          : this[ASYNC]
            ? defer(() => this[EMITDATA](data))
            : this[EMITDATA](data)
      } else if (ev === 'end') {
        return this[EMITEND]()
      } else if (ev === 'close') {
        this[CLOSED] = true
        // don't emit close before 'end' and 'finish'
        if (!this[EMITTED_END] && !this[DESTROYED]) {
          return
        }
        const ret = super.emit('close')
        this.removeAllListeners('close')
        return ret
      } else if (ev === 'error') {
        this[EMITTED_ERROR] = data
        const ret = super.emit('error', data)
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'resume') {
        const ret = super.emit('resume')
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'finish' || ev === 'prefinish') {
        const ret = super.emit(ev)
        this.removeAllListeners(ev)
        return ret
      }

      // Some other unknown event
      const ret = super.emit(ev, data, ...extra)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITDATA](data) {
      for (const p of this.pipes) {
        if (p.dest.write(data) === false) {
          this.pause()
        }
      }
      const ret = super.emit('data', data)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITEND]() {
      if (this[EMITTED_END]) {
        return
      }
      this[EMITTED_END] = true
      this.readable = false
      if (this[ASYNC]) {
        defer(() => this[EMITEND2]())
      } else {
        this[EMITEND2]()
      }
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end()
        if (data) {
          for (const p of this.pipes) {
            p.dest.write(data)
          }
          super.emit('data', data)
        }
      }
      for (const p of this.pipes) {
        p.end()
      }
      const ret = super.emit('end')
      this.removeAllListeners('end')
      return ret
    }

    // const all = await stream.collect()
    collect() {
      const buf = []
      if (!this[OBJECTMODE]) {
        buf.dataLength = 0
      }
      // set the promise first, in case an error is raised
      // by triggering the flow here.
      const p = this.promise()
      this.on('data', c => {
        buf.push(c)
        if (!this[OBJECTMODE]) {
          buf.dataLength += c.length
        }
      })
      return p.then(() => buf)
    }

    // const data = await stream.concat()
    concat() {
      return this[OBJECTMODE]
        ? Promise.reject(new Error('cannot concat in objectMode'))
        : this.collect().then(buf =>
            this[OBJECTMODE]
              ? Promise.reject(new Error('cannot concat in objectMode'))
              : this[ENCODING]
                ? buf.join('')
                : Buffer.concat(buf, buf.dataLength)
          )
    }

    // stream.promise().then(() => done, er => emitted error)
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error('stream destroyed')))
        this.on('error', er => reject(er))
        this.on('end', () => resolve())
      })
    }

    // for await (let chunk of stream)
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read()
        if (res !== null) {
          return Promise.resolve({
            done: false,
            value: res
          })
        }
        if (this[EOF]) {
          return Promise.resolve({
            done: true
          })
        }
        let resolve = null
        let reject = null
        const onerr = er => {
          this.removeListener('data', ondata)
          this.removeListener('end', onend)
          reject(er)
        }
        const ondata = value => {
          this.removeListener('error', onerr)
          this.removeListener('end', onend)
          this.pause()
          resolve({
            value: value,
            done: !!this[EOF]
          })
        }
        const onend = () => {
          this.removeListener('error', onerr)
          this.removeListener('data', ondata)
          resolve({
            done: true
          })
        }
        const ondestroy = () => onerr(new Error('stream destroyed'))
        return new Promise((res, rej) => {
          reject = rej
          resolve = res
          this.once(DESTROYED, ondestroy)
          this.once('error', onerr)
          this.once('end', onend)
          this.once('data', ondata)
        })
      }
      return {
        next
      }
    }

    // for (let chunk of stream)
    [ITERATOR]() {
      const next = () => {
        const value = this.read()
        const done = value === null
        return {
          value,
          done
        }
      }
      return {
        next
      }
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er) {
          this.emit('error', er)
        } else {
          this.emit(DESTROYED)
        }
        return this
      }
      this[DESTROYED] = true

      // throw away all buffered data, it's never coming out
      this.buffer.length = 0
      this[BUFFERLENGTH] = 0
      if (typeof this.close === 'function' && !this[CLOSED]) {
        this.close()
      }
      if (er) {
        this.emit('error', er)
      }
      // if no error to emit, still reject pending promises
      else {
        this.emit(DESTROYED)
      }
      return this
    }
    static isStream(s) {
      return (
        !!s &&
        (s instanceof Minipass ||
          s instanceof Stream ||
          (s instanceof EE &&
            (typeof s.pipe === 'function' ||
              // readable
              (typeof s.write === 'function' && typeof s.end === 'function')))) // writable
      )
    }
  }
  return minipass$4
}

let minipassFlush
let hasRequiredMinipassFlush
function requireMinipassFlush() {
  if (hasRequiredMinipassFlush) {
    return minipassFlush
  }
  hasRequiredMinipassFlush = 1
  const Minipass = requireMinipass$4()
  const _flush = Symbol('_flush')
  const _flushed = Symbol('_flushed')
  const _flushing = Symbol('_flushing')
  class Flush extends Minipass {
    constructor(opt = {}) {
      if (typeof opt === 'function') {
        opt = {
          flush: opt
        }
      }
      super(opt)

      // or extend this class and provide a 'flush' method in your subclass
      if (typeof opt.flush !== 'function' && typeof this.flush !== 'function') {
        throw new TypeError('must provide flush function in options')
      }
      this[_flush] = opt.flush || this.flush
    }
    emit(ev, ...data) {
      if ((ev !== 'end' && ev !== 'finish') || this[_flushed]) {
        return super.emit(ev, ...data)
      }
      if (this[_flushing]) {
        return
      }
      this[_flushing] = true
      const afterFlush = er => {
        this[_flushed] = true
        er ? super.emit('error', er) : super.emit('end')
      }
      const ret = this[_flush](afterFlush)
      if (ret && ret.then) {
        ret.then(
          () => afterFlush(),
          er => afterFlush(er)
        )
      }
    }
  }
  minipassFlush = Flush
  return minipassFlush
}

let hasRequiredWrite$1
function requireWrite$1() {
  if (hasRequiredWrite$1) {
    return write$1.exports
  }
  hasRequiredWrite$1 = 1
  const events = require$$0$c
  const contentPath = requirePath$1()
  const fs = require$$0$7
  const { moveFile } = requireLib$g()
  const { Minipass } = requireCommonjs$7()
  const Pipeline = requireMinipassPipeline()
  const Flush = requireMinipassFlush()
  const path = require$$1$5
  const ssri = requireLib$j()
  const uniqueFilename = requireLib$h()
  const fsm = requireLib$f()
  write$1.exports = write

  // Cache of move operations in process so we don't duplicate
  const moveOperations = new Map()
  async function write(cache, data, opts = {}) {
    const { algorithms, size, integrity } = opts
    if (typeof size === 'number' && data.length !== size) {
      throw sizeError(size, data.length)
    }
    const sri = ssri.fromData(
      data,
      algorithms
        ? {
            algorithms
          }
        : {}
    )
    if (integrity && !ssri.checkData(data, integrity, opts)) {
      throw checksumError(integrity, sri)
    }
    for (const algo in sri) {
      const tmp = await makeTmp(cache, opts)
      const hash = sri[algo].toString()
      try {
        await fs.writeFile(tmp.target, data, {
          flag: 'wx'
        })
        await moveToDestination(tmp, cache, hash, opts)
      } finally {
        if (!tmp.moved) {
          await fs.rm(tmp.target, {
            recursive: true,
            force: true
          })
        }
      }
    }
    return {
      integrity: sri,
      size: data.length
    }
  }
  write$1.exports.stream = writeStream

  // writes proxied to the 'inputStream' that is passed to the Promise
  // 'end' is deferred until content is handled.
  class CacacheWriteStream extends Flush {
    constructor(cache, opts) {
      super()
      this.opts = opts
      this.cache = cache
      this.inputStream = new Minipass()
      this.inputStream.on('error', er => this.emit('error', er))
      this.inputStream.on('drain', () => this.emit('drain'))
      this.handleContentP = null
    }
    write(chunk, encoding, cb) {
      if (!this.handleContentP) {
        this.handleContentP = handleContent(
          this.inputStream,
          this.cache,
          this.opts
        )
        this.handleContentP.catch(error => this.emit('error', error))
      }
      return this.inputStream.write(chunk, encoding, cb)
    }
    flush(cb) {
      this.inputStream.end(() => {
        if (!this.handleContentP) {
          const e = new Error('Cache input stream was empty')
          e.code = 'ENODATA'
          // empty streams are probably emitting end right away.
          // defer this one tick by rejecting a promise on it.
          return Promise.reject(e).catch(cb)
        }
        // eslint-disable-next-line promise/catch-or-return
        this.handleContentP.then(
          res => {
            res.integrity && this.emit('integrity', res.integrity)
            // eslint-disable-next-line promise/always-return
            res.size !== null && this.emit('size', res.size)
            cb()
          },
          er => cb(er)
        )
      })
    }
  }
  function writeStream(cache, opts = {}) {
    return new CacacheWriteStream(cache, opts)
  }
  async function handleContent(inputStream, cache, opts) {
    const tmp = await makeTmp(cache, opts)
    try {
      const res = await pipeToTmp(inputStream, cache, tmp.target, opts)
      await moveToDestination(tmp, cache, res.integrity, opts)
      return res
    } finally {
      if (!tmp.moved) {
        await fs.rm(tmp.target, {
          recursive: true,
          force: true
        })
      }
    }
  }
  async function pipeToTmp(inputStream, cache, tmpTarget, opts) {
    const outStream = new fsm.WriteStream(tmpTarget, {
      flags: 'wx'
    })
    if (opts.integrityEmitter) {
      // we need to create these all simultaneously since they can fire in any order
      const [integrity, size] = await Promise.all([
        events.once(opts.integrityEmitter, 'integrity').then(res => res[0]),
        events.once(opts.integrityEmitter, 'size').then(res => res[0]),
        new Pipeline(inputStream, outStream).promise()
      ])
      return {
        integrity,
        size
      }
    }
    let integrity
    let size
    const hashStream = ssri.integrityStream({
      integrity: opts.integrity,
      algorithms: opts.algorithms,
      size: opts.size
    })
    hashStream.on('integrity', i => {
      integrity = i
    })
    hashStream.on('size', s => {
      size = s
    })
    const pipeline = new Pipeline(inputStream, hashStream, outStream)
    await pipeline.promise()
    return {
      integrity,
      size
    }
  }
  async function makeTmp(cache, opts) {
    const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)
    await fs.mkdir(path.dirname(tmpTarget), {
      recursive: true
    })
    return {
      target: tmpTarget,
      moved: false
    }
  }
  async function moveToDestination(tmp, cache, sri) {
    const destination = contentPath(cache, sri)
    const destDir = path.dirname(destination)
    if (moveOperations.has(destination)) {
      return moveOperations.get(destination)
    }
    moveOperations.set(
      destination,
      fs
        .mkdir(destDir, {
          recursive: true
        })
        .then(async () => {
          await moveFile(tmp.target, destination, {
            overwrite: false
          })
          tmp.moved = true
          return tmp.moved
        })
        .catch(err => {
          if (!err.message.startsWith('The destination file exists')) {
            throw Object.assign(err, {
              code: 'EEXIST'
            })
          }
        })
        .finally(() => {
          moveOperations.delete(destination)
        })
    )
    return moveOperations.get(destination)
  }
  function sizeError(expected, found) {
    /* eslint-disable-next-line max-len */
    const err = new Error(
      `Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`
    )
    err.expected = expected
    err.found = found
    err.code = 'EBADSIZE'
    return err
  }
  function checksumError(expected, found) {
    const err = new Error(`Integrity check failed:
  Wanted: ${expected}
   Found: ${found}`)
    err.code = 'EINTEGRITY'
    err.expected = expected
    err.found = found
    return err
  }
  return write$1.exports
}

let hasRequiredPut$1
function requirePut$1() {
  if (hasRequiredPut$1) {
    return put$1.exports
  }
  hasRequiredPut$1 = 1
  const index = requireEntryIndex$1()
  const memo = requireMemoization$1()
  const write = requireWrite$1()
  const Flush = requireMinipassFlush()
  const { PassThrough } = requireMinipassCollect()
  const Pipeline = requireMinipassPipeline()
  const putOpts = opts => ({
    algorithms: ['sha512'],
    ...opts
  })
  put$1.exports = putData
  async function putData(cache, key, data, opts = {}) {
    const { memoize } = opts
    opts = putOpts(opts)
    const res = await write(cache, data, opts)
    const entry = await index.insert(cache, key, res.integrity, {
      ...opts,
      size: res.size
    })
    if (memoize) {
      memo.put(cache, entry, data, opts)
    }
    return res.integrity
  }
  put$1.exports.stream = putStream
  function putStream(cache, key, opts = {}) {
    const { memoize } = opts
    opts = putOpts(opts)
    let integrity
    let size
    let error
    let memoData
    const pipeline = new Pipeline()
    // first item in the pipeline is the memoizer, because we need
    // that to end first and get the collected data.
    if (memoize) {
      const memoizer = new PassThrough().on('collect', data => {
        memoData = data
      })
      pipeline.push(memoizer)
    }

    // contentStream is a write-only, not a passthrough
    // no data comes out of it.
    const contentStream = write
      .stream(cache, opts)
      .on('integrity', int => {
        integrity = int
      })
      .on('size', s => {
        size = s
      })
      .on('error', err => {
        error = err
      })
    pipeline.push(contentStream)

    // last but not least, we write the index and emit hash and size,
    // and memoize if we're doing that
    pipeline.push(
      new Flush({
        async flush() {
          if (!error) {
            const entry = await index.insert(cache, key, integrity, {
              ...opts,
              size
            })
            if (memoize && memoData) {
              memo.put(cache, entry, memoData, opts)
            }
            pipeline.emit('integrity', integrity)
            pipeline.emit('size', size)
          }
        }
      })
    )
    return pipeline
  }
  return put$1.exports
}

const rm$1 = { exports: {} }

let glob_1$1
let hasRequiredGlob$1
function requireGlob$1() {
  if (hasRequiredGlob$1) {
    return glob_1$1
  }
  hasRequiredGlob$1 = 1
  const { glob } = requireCommonjs$5()
  const path = require$$1$5
  const globify = pattern => pattern.split(path.win32.sep).join(path.posix.sep)
  glob_1$1 = (path, options) => glob(globify(path), options)
  return glob_1$1
}

let rm_1$1
let hasRequiredRm$3
function requireRm$3() {
  if (hasRequiredRm$3) {
    return rm_1$1
  }
  hasRequiredRm$3 = 1
  const fs = require$$0$7
  const contentPath = requirePath$1()
  const { hasContent } = requireRead$1()
  rm_1$1 = rm
  async function rm(cache, integrity) {
    const content = await hasContent(cache, integrity)
    // ~pretty~ sure we can't end up with a content lacking sri, but be safe
    if (content && content.sri) {
      await fs.rm(contentPath(cache, content.sri), {
        recursive: true,
        force: true
      })
      return true
    } else {
      return false
    }
  }
  return rm_1$1
}

let hasRequiredRm$2
function requireRm$2() {
  if (hasRequiredRm$2) {
    return rm$1.exports
  }
  hasRequiredRm$2 = 1
  const { rm } = require$$0$7
  const glob = requireGlob$1()
  const index = requireEntryIndex$1()
  const memo = requireMemoization$1()
  const path = require$$1$5
  const rmContent = requireRm$3()
  rm$1.exports = entry
  rm$1.exports.entry = entry
  function entry(cache, key, opts) {
    memo.clearMemoized()
    return index.delete(cache, key, opts)
  }
  rm$1.exports.content = content
  function content(cache, integrity) {
    memo.clearMemoized()
    return rmContent(cache, integrity)
  }
  rm$1.exports.all = all
  async function all(cache) {
    memo.clearMemoized()
    const paths = await glob(path.join(cache, '*(content-*|index-*)'), {
      silent: true,
      nosort: true
    })
    return Promise.all(
      paths.map(p =>
        rm(p, {
          recursive: true,
          force: true
        })
      )
    )
  }
  return rm$1.exports
}

const verify$2 = { exports: {} }

let hasRequiredVerify$2
function requireVerify$2() {
  if (hasRequiredVerify$2) {
    return verify$2.exports
  }
  hasRequiredVerify$2 = 1
  const { mkdir, readFile, rm, stat, truncate, writeFile } = require$$0$7
  const contentPath = requirePath$1()
  const fsm = requireLib$f()
  const glob = requireGlob$1()
  const index$1 = requireEntryIndex$1()
  const path = require$$1$5
  const ssri = requireLib$j()
  const hasOwnProperty = (obj, key) =>
    Object.prototype.hasOwnProperty.call(obj, key)
  const verifyOpts = opts => ({
    concurrency: 20,
    log: {
      silly() {}
    },
    ...opts
  })
  verify$2.exports = verify
  async function verify(cache, opts) {
    opts = verifyOpts(opts)
    opts.log.silly('verify', 'verifying cache at', cache)
    const steps = [
      markStartTime,
      fixPerms,
      garbageCollect,
      rebuildIndex,
      cleanTmp,
      writeVerifile,
      markEndTime
    ]
    const stats = {}
    for (const step of steps) {
      const label = step.name
      const start = new Date()
      const s = await step(cache, opts)
      if (s) {
        Object.keys(s).forEach(k => {
          stats[k] = s[k]
        })
      }
      const end = new Date()
      if (!stats.runTime) {
        stats.runTime = {}
      }
      stats.runTime[label] = end - start
    }
    stats.runTime.total = stats.endTime - stats.startTime
    opts.log.silly(
      'verify',
      'verification finished for',
      cache,
      'in',
      `${stats.runTime.total}ms`
    )
    return stats
  }
  async function markStartTime() {
    return {
      startTime: new Date()
    }
  }
  async function markEndTime() {
    return {
      endTime: new Date()
    }
  }
  async function fixPerms(cache, opts) {
    opts.log.silly('verify', 'fixing cache permissions')
    await mkdir(cache, {
      recursive: true
    })
    return null
  }

  // Implements a naive mark-and-sweep tracing garbage collector.
  //
  // The algorithm is basically as follows:
  // 1. Read (and filter) all index entries ("pointers")
  // 2. Mark each integrity value as "live"
  // 3. Read entire filesystem tree in `content-vX/` dir
  // 4. If content is live, verify its checksum and delete it if it fails
  // 5. If content is not marked as live, rm it.
  //
  async function garbageCollect(cache, opts) {
    opts.log.silly('verify', 'garbage collecting content')
    const { default: pMap } = await Promise.resolve().then(function () {
      return index
    })
    const indexStream = index$1.lsStream(cache)
    const liveContent = new Set()
    indexStream.on('data', entry => {
      if (opts.filter && !opts.filter(entry)) {
        return
      }

      // integrity is stringified, re-parse it so we can get each hash
      const integrity = ssri.parse(entry.integrity)
      for (const algo in integrity) {
        liveContent.add(integrity[algo].toString())
      }
    })
    await new Promise((resolve, reject) => {
      indexStream.on('end', resolve).on('error', reject)
    })
    const contentDir = contentPath.contentDir(cache)
    const files = await glob(path.join(contentDir, '**'), {
      follow: false,
      nodir: true,
      nosort: true
    })
    const stats = {
      verifiedContent: 0,
      reclaimedCount: 0,
      reclaimedSize: 0,
      badContentCount: 0,
      keptSize: 0
    }
    await pMap(
      files,
      async f => {
        const split = f.split(/[/\\]/)
        const digest = split.slice(split.length - 3).join('')
        const algo = split[split.length - 4]
        const integrity = ssri.fromHex(digest, algo)
        if (liveContent.has(integrity.toString())) {
          const info = await verifyContent(f, integrity)
          if (!info.valid) {
            stats.reclaimedCount++
            stats.badContentCount++
            stats.reclaimedSize += info.size
          } else {
            stats.verifiedContent++
            stats.keptSize += info.size
          }
        } else {
          // No entries refer to this content. We can delete.
          stats.reclaimedCount++
          const s = await stat(f)
          await rm(f, {
            recursive: true,
            force: true
          })
          stats.reclaimedSize += s.size
        }
        return stats
      },
      {
        concurrency: opts.concurrency
      }
    )
    return stats
  }
  async function verifyContent(filepath, sri) {
    const contentInfo = {}
    try {
      const { size } = await stat(filepath)
      contentInfo.size = size
      contentInfo.valid = true
      await ssri.checkStream(new fsm.ReadStream(filepath), sri)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return {
          size: 0,
          valid: false
        }
      }
      if (err.code !== 'EINTEGRITY') {
        throw err
      }
      await rm(filepath, {
        recursive: true,
        force: true
      })
      contentInfo.valid = false
    }
    return contentInfo
  }
  async function rebuildIndex(cache, opts) {
    opts.log.silly('verify', 'rebuilding index')
    const { default: pMap } = await Promise.resolve().then(function () {
      return index
    })
    const entries = await index$1.ls(cache)
    const stats = {
      missingContent: 0,
      rejectedEntries: 0,
      totalEntries: 0
    }
    const buckets = {}
    for (const k in entries) {
      /* istanbul ignore else */
      if (hasOwnProperty(entries, k)) {
        const hashed = index$1.hashKey(k)
        const entry = entries[k]
        const excluded = opts.filter && !opts.filter(entry)
        excluded && stats.rejectedEntries++
        if (buckets[hashed] && !excluded) {
          buckets[hashed].push(entry)
        } else if (buckets[hashed] && excluded) {
        } else if (excluded) {
          buckets[hashed] = []
          buckets[hashed]._path = index$1.bucketPath(cache, k)
        } else {
          buckets[hashed] = [entry]
          buckets[hashed]._path = index$1.bucketPath(cache, k)
        }
      }
    }
    await pMap(
      Object.keys(buckets),
      key => {
        return rebuildBucket(cache, buckets[key], stats)
      },
      {
        concurrency: opts.concurrency
      }
    )
    return stats
  }
  async function rebuildBucket(cache, bucket, stats) {
    await truncate(bucket._path)
    // This needs to be serialized because cacache explicitly
    // lets very racy bucket conflicts clobber each other.
    for (const entry of bucket) {
      const content = contentPath(cache, entry.integrity)
      try {
        await stat(content)
        await index$1.insert(cache, entry.key, entry.integrity, {
          metadata: entry.metadata,
          size: entry.size,
          time: entry.time
        })
        stats.totalEntries++
      } catch (err) {
        if (err.code === 'ENOENT') {
          stats.rejectedEntries++
          stats.missingContent++
        } else {
          throw err
        }
      }
    }
  }
  function cleanTmp(cache, opts) {
    opts.log.silly('verify', 'cleaning tmp directory')
    return rm(path.join(cache, 'tmp'), {
      recursive: true,
      force: true
    })
  }
  async function writeVerifile(cache, opts) {
    const verifile = path.join(cache, '_lastverified')
    opts.log.silly('verify', 'writing verifile to ' + verifile)
    return writeFile(verifile, `${Date.now()}`)
  }
  verify$2.exports.lastRun = lastRun
  async function lastRun(cache) {
    const data = await readFile(path.join(cache, '_lastverified'), {
      encoding: 'utf8'
    })
    return new Date(+data)
  }
  return verify$2.exports
}

const tmp$1 = {}

let hasRequiredTmp$1
function requireTmp$1() {
  if (hasRequiredTmp$1) {
    return tmp$1
  }
  hasRequiredTmp$1 = 1
  const { withTempDir } = requireLib$g()
  const fs = require$$0$7
  const path = require$$1$5
  tmp$1.mkdir = mktmpdir
  async function mktmpdir(cache, opts = {}) {
    const { tmpPrefix } = opts
    const tmpDir = path.join(cache, 'tmp')
    await fs.mkdir(tmpDir, {
      recursive: true,
      owner: 'inherit'
    })
    // do not use path.join(), it drops the trailing / if tmpPrefix is unset
    const target = `${tmpDir}${path.sep}${tmpPrefix || ''}`
    return fs.mkdtemp(target, {
      owner: 'inherit'
    })
  }
  tmp$1.withTmp = withTmp
  function withTmp(cache, opts, cb) {
    if (!cb) {
      cb = opts
      opts = {}
    }
    return withTempDir(path.join(cache, 'tmp'), cb, opts)
  }
  return tmp$1
}

lib$j.exports
let hasRequiredLib$e
function requireLib$e() {
  if (hasRequiredLib$e) {
    return lib$j.exports
  }
  hasRequiredLib$e = 1
  ;(function (module) {
    const get = requireGet$1()
    const put = requirePut$1()
    const rm = requireRm$2()
    const verify = requireVerify$2()
    const { clearMemoized } = requireMemoization$1()
    const tmp = requireTmp$1()
    const index = requireEntryIndex$1()
    module.exports.index = {}
    module.exports.index.compact = index.compact
    module.exports.index.insert = index.insert
    module.exports.ls = index.ls
    module.exports.ls.stream = index.lsStream
    module.exports.get = get
    module.exports.get.byDigest = get.byDigest
    module.exports.get.stream = get.stream
    module.exports.get.stream.byDigest = get.stream.byDigest
    module.exports.get.copy = get.copy
    module.exports.get.copy.byDigest = get.copy.byDigest
    module.exports.get.info = get.info
    module.exports.get.hasContent = get.hasContent
    module.exports.put = put
    module.exports.put.stream = put.stream
    module.exports.rm = rm.entry
    module.exports.rm.all = rm.all
    module.exports.rm.entry = module.exports.rm
    module.exports.rm.content = rm.content
    module.exports.clearMemoized = clearMemoized
    module.exports.tmp = {}
    module.exports.tmp.mkdir = tmp.mkdir
    module.exports.tmp.withTmp = tmp.withTmp
    module.exports.verify = verify
    module.exports.verify.lastRun = verify.lastRun
  })(lib$j)
  return lib$j.exports
}

let lib$d
let hasRequiredLib$d
function requireLib$d() {
  if (hasRequiredLib$d) {
    return lib$d
  }
  hasRequiredLib$d = 1

  // walk the tree of deps starting from the top level list of bundled deps
  // Any deps at the top level that are depended on by a bundled dep that
  // does not have that dep in its own node_modules folder are considered
  // bundled deps as well.  This list of names can be passed to npm-packlist
  // as the "bundled" argument.  Additionally, packageJsonCache is shared so
  // packlist doesn't have to re-read files already consumed in this pass

  const fs = require$$0$4
  const path = require$$1$5
  const EE = require$$0$c.EventEmitter
  // we don't care about the package bins, but we share a pj cache
  // with other modules that DO care about it, so keep it nice.
  const normalizePackageBin = requireLib$n()
  class BundleWalker extends EE {
    constructor(opt) {
      opt = opt || {}
      super(opt)
      this.path = path.resolve(opt.path || process.cwd())
      this.parent = opt.parent || null
      if (this.parent) {
        this.result = this.parent.result
        // only collect results in node_modules folders at the top level
        // since the node_modules in a bundled dep is included always
        if (!this.parent.parent) {
          const base = path.basename(this.path)
          const scope = path.basename(path.dirname(this.path))
          this.result.add(/^@/.test(scope) ? scope + '/' + base : base)
        }
        this.root = this.parent.root
        this.packageJsonCache = this.parent.packageJsonCache
      } else {
        this.result = new Set()
        this.root = this.path
        this.packageJsonCache = opt.packageJsonCache || new Map()
      }
      this.seen = new Set()
      this.didDone = false
      this.children = 0
      this.node_modules = []
      this.package = null
      this.bundle = null
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'done' && this.didDone) {
        this.emit('done', this.result)
      }
      return ret
    }
    done() {
      if (!this.didDone) {
        this.didDone = true
        if (!this.parent) {
          const res = Array.from(this.result)
          this.result = res
          this.emit('done', res)
        } else {
          this.emit('done')
        }
      }
    }
    start() {
      const pj = path.resolve(this.path, 'package.json')
      if (this.packageJsonCache.has(pj)) {
        this.onPackage(this.packageJsonCache.get(pj))
      } else {
        this.readPackageJson(pj)
      }
      return this
    }
    readPackageJson(pj) {
      fs.readFile(pj, (er, data) =>
        er ? this.done() : this.onPackageJson(pj, data)
      )
    }
    onPackageJson(pj, data) {
      try {
        this.package = normalizePackageBin(JSON.parse(data + ''))
      } catch (er) {
        return this.done()
      }
      this.packageJsonCache.set(pj, this.package)
      this.onPackage(this.package)
    }
    allDepsBundled(pkg) {
      return Object.keys(pkg.dependencies || {}).concat(
        Object.keys(pkg.optionalDependencies || {})
      )
    }
    onPackage(pkg) {
      // all deps are bundled if we got here as a child.
      // otherwise, only bundle bundledDeps
      // Get a unique-ified array with a short-lived Set
      const bdRaw = this.parent
        ? this.allDepsBundled(pkg)
        : pkg.bundleDependencies || pkg.bundledDependencies || []
      const bd = Array.from(
        new Set(
          Array.isArray(bdRaw)
            ? bdRaw
            : bdRaw === true
              ? this.allDepsBundled(pkg)
              : Object.keys(bdRaw)
        )
      )
      if (!bd.length) {
        return this.done()
      }
      this.bundle = bd
      this.readModules()
    }
    readModules() {
      readdirNodeModules(this.path + '/node_modules', (er, nm) =>
        er ? this.onReaddir([]) : this.onReaddir(nm)
      )
    }
    onReaddir(nm) {
      // keep track of what we have, in case children need it
      this.node_modules = nm
      this.bundle.forEach(dep => this.childDep(dep))
      if (this.children === 0) {
        this.done()
      }
    }
    childDep(dep) {
      if (this.node_modules.indexOf(dep) !== -1) {
        if (!this.seen.has(dep)) {
          this.seen.add(dep)
          this.child(dep)
        }
      } else if (this.parent) {
        this.parent.childDep(dep)
      }
    }
    child(dep) {
      const p = this.path + '/node_modules/' + dep
      this.children += 1
      const child = new BundleWalker({
        path: p,
        parent: this
      })
      child.on('done', () => {
        if (--this.children === 0) {
          this.done()
        }
      })
      child.start()
    }
  }
  class BundleWalkerSync extends BundleWalker {
    start() {
      super.start()
      this.done()
      return this
    }
    readPackageJson(pj) {
      try {
        this.onPackageJson(pj, fs.readFileSync(pj))
      } catch {
        // empty catch
      }
      return this
    }
    readModules() {
      try {
        this.onReaddir(readdirNodeModulesSync(this.path + '/node_modules'))
      } catch {
        this.onReaddir([])
      }
    }
    child(dep) {
      new BundleWalkerSync({
        path: this.path + '/node_modules/' + dep,
        parent: this
      }).start()
    }
  }
  const readdirNodeModules = (nm, cb) => {
    fs.readdir(nm, (er, set) => {
      if (er) {
        cb(er)
      } else {
        const scopes = set.filter(f => /^@/.test(f))
        if (!scopes.length) {
          cb(null, set)
        } else {
          const unscoped = set.filter(f => !/^@/.test(f))
          let count = scopes.length
          scopes.forEach(scope => {
            fs.readdir(nm + '/' + scope, (readdirEr, pkgs) => {
              if (readdirEr || !pkgs.length) {
                unscoped.push(scope)
              } else {
                unscoped.push.apply(
                  unscoped,
                  pkgs.map(p => scope + '/' + p)
                )
              }
              if (--count === 0) {
                cb(null, unscoped)
              }
            })
          })
        }
      }
    })
  }
  const readdirNodeModulesSync = nm => {
    const set = fs.readdirSync(nm)
    const unscoped = set.filter(f => !/^@/.test(f))
    const scopes = set
      .filter(f => /^@/.test(f))
      .map(scope => {
        try {
          const pkgs = fs.readdirSync(nm + '/' + scope)
          return pkgs.length ? pkgs.map(p => scope + '/' + p) : [scope]
        } catch (er) {
          return [scope]
        }
      })
      .reduce((a, b) => a.concat(b), [])
    return unscoped.concat(scopes)
  }
  const walk = (options, callback) => {
    const p = new Promise((resolve, reject) => {
      new BundleWalker(options).on('done', resolve).on('error', reject).start()
    })
    return callback ? p.then(res => callback(null, res), callback) : p
  }
  const walkSync = options => {
    return new BundleWalkerSync(options).start().result
  }
  lib$d = walk
  walk.sync = walkSync
  walk.BundleWalker = BundleWalker
  walk.BundleWalkerSync = BundleWalkerSync
  return lib$d
}

let lib$c
let hasRequiredLib$c
function requireLib$c() {
  if (hasRequiredLib$c) {
    return lib$c
  }
  hasRequiredLib$c = 1
  // to GET CONTENTS for folder at PATH (which may be a PACKAGE):
  // - if PACKAGE, read path/package.json
  //   - if bins in ../node_modules/.bin, add those to result
  // - if depth >= maxDepth, add PATH to result, and finish
  // - readdir(PATH, with file types)
  // - add all FILEs in PATH to result
  // - if PARENT:
  //   - if depth < maxDepth, add GET CONTENTS of all DIRs in PATH
  //   - else, add all DIRs in PATH
  // - if no parent
  //   - if no bundled deps,
  //     - if depth < maxDepth, add GET CONTENTS of DIRs in path except
  //       node_modules
  //     - else, add all DIRs in path other than node_modules
  //   - if has bundled deps,
  //     - get list of bundled deps
  //     - add GET CONTENTS of bundled deps, PACKAGE=true, depth + 1

  const bundled = requireLib$d()
  const { readFile, readdir, stat } = require$$0$7
  const { resolve, basename, dirname } = require$$1$5
  const normalizePackageBin = requireLib$n()
  const readPackage = ({ path, packageJsonCache }) =>
    packageJsonCache.has(path)
      ? Promise.resolve(packageJsonCache.get(path))
      : readFile(path)
          .then(json => {
            const pkg = normalizePackageBin(JSON.parse(json))
            packageJsonCache.set(path, pkg)
            return pkg
          })
          .catch(() => null)

  // just normalize bundle deps and bin, that's all we care about here.
  const normalized = Symbol('package data has been normalized')
  const rpj = ({ path, packageJsonCache }) =>
    readPackage({
      path,
      packageJsonCache
    }).then(pkg => {
      if (!pkg || pkg[normalized]) {
        return pkg
      }
      if (pkg.bundledDependencies && !pkg.bundleDependencies) {
        pkg.bundleDependencies = pkg.bundledDependencies
        delete pkg.bundledDependencies
      }
      const bd = pkg.bundleDependencies
      if (bd === true) {
        pkg.bundleDependencies = [
          ...Object.keys(pkg.dependencies || {}),
          ...Object.keys(pkg.optionalDependencies || {})
        ]
      }
      if (typeof bd === 'object' && !Array.isArray(bd)) {
        pkg.bundleDependencies = Object.keys(bd)
      }
      pkg[normalized] = true
      return pkg
    })
  const pkgContents = async ({
    path,
    depth = 1,
    currentDepth = 0,
    pkg = null,
    result = null,
    packageJsonCache = null
  }) => {
    if (!result) {
      result = new Set()
    }
    if (!packageJsonCache) {
      packageJsonCache = new Map()
    }
    if (pkg === true) {
      return rpj({
        path: path + '/package.json',
        packageJsonCache
      }).then(p =>
        pkgContents({
          path,
          depth,
          currentDepth,
          pkg: p,
          result,
          packageJsonCache
        })
      )
    }
    if (pkg) {
      // add all bins to result if they exist
      if (pkg.bin) {
        const dir = dirname(path)
        const scope = basename(dir)
        const nm = /^@.+/.test(scope) ? dirname(dir) : dir
        const binFiles = []
        Object.keys(pkg.bin).forEach(b => {
          const base = resolve(nm, '.bin', b)
          binFiles.push(base, base + '.cmd', base + '.ps1')
        })
        const bins = await Promise.all(
          binFiles.map(b =>
            stat(b)
              .then(() => b)
              .catch(() => null)
          )
        )
        bins.filter(b => b).forEach(b => result.add(b))
      }
    }
    if (currentDepth >= depth) {
      result.add(path)
      return result
    }

    // we'll need bundle list later, so get that now in parallel
    const [dirEntries, bundleDeps] = await Promise.all([
      readdir(path, {
        withFileTypes: true
      }),
      currentDepth === 0 && pkg && pkg.bundleDependencies
        ? bundled({
            path,
            packageJsonCache
          })
        : null
    ]).catch(() => [])

    // not a thing, probably a missing folder
    if (!dirEntries) {
      return result
    }

    // empty folder, just add the folder itself to the result
    if (!dirEntries.length && !bundleDeps && currentDepth !== 0) {
      result.add(path)
      return result
    }
    const recursePromises = []
    for (const entry of dirEntries) {
      const p = resolve(path, entry.name)
      if (entry.isDirectory() === false) {
        result.add(p)
        continue
      }
      if (currentDepth !== 0 || entry.name !== 'node_modules') {
        if (currentDepth < depth - 1) {
          recursePromises.push(
            pkgContents({
              path: p,
              packageJsonCache,
              depth,
              currentDepth: currentDepth + 1,
              result
            })
          )
        } else {
          result.add(p)
        }
        continue
      }
    }
    if (bundleDeps) {
      // bundle deps are all folders
      // we always recurse to get pkg bins, but if currentDepth is too high,
      // it'll return early before walking their contents.
      recursePromises.push(
        ...bundleDeps.map(dep => {
          const p = resolve(path, 'node_modules', dep)
          return pkgContents({
            path: p,
            packageJsonCache,
            pkg: true,
            depth,
            currentDepth: currentDepth + 1,
            result
          })
        })
      )
    }
    if (recursePromises.length) {
      await Promise.all(recursePromises)
    }
    return result
  }
  lib$c = ({ path, ...opts }) =>
    pkgContents({
      path: resolve(path),
      ...opts,
      pkg: true
    }).then(results => [...results])
  return lib$c
}

const npa$1 = { exports: {} }

let hasRequiredNpa$1
function requireNpa$1() {
  if (hasRequiredNpa$1) {
    return npa$1.exports
  }
  hasRequiredNpa$1 = 1
  const isWindows = process.platform === 'win32'
  const { URL } = require$$0$6
  // We need to use path/win32 so that we get consistent results in tests, but this also means we need to manually convert backslashes to forward slashes when generating file: urls with paths.
  const path = isWindows ? require$$1$7 : require$$2$3
  const { homedir } = require$$1$6
  const HostedGit = requireLib$s()
  const semver = requireSemver()
  const validatePackageName = requireLib$p()
  const { log } = requireLib$t()
  const hasSlashes = isWindows ? /\\|[/]/ : /[/]/
  const isURL = /^(?:git[+])?[a-z]+:/i
  const isGit = /^[^@]+@[^:.]+\.[^:]+:.+$/i
  const isFileType = /[.](?:tgz|tar.gz|tar)$/i
  const isPortNumber = /:[0-9]+(\/|$)/i
  const isWindowsFile = /^(?:[.]|~[/]|[/\\]|[a-zA-Z]:)/
  const isPosixFile = /^(?:[.]|~[/]|[/]|[a-zA-Z]:)/
  const defaultRegistry = 'https://registry.npmjs.org'
  function npa(arg, where) {
    let name
    let spec
    if (typeof arg === 'object') {
      if (arg instanceof Result && (!where || where === arg.where)) {
        return arg
      } else if (arg.name && arg.rawSpec) {
        return npa.resolve(arg.name, arg.rawSpec, where || arg.where)
      } else {
        return npa(arg.raw, where || arg.where)
      }
    }
    const nameEndsAt = arg.indexOf('@', 1) // Skip possible leading @
    const namePart = nameEndsAt > 0 ? arg.slice(0, nameEndsAt) : arg
    if (isURL.test(arg)) {
      spec = arg
    } else if (isGit.test(arg)) {
      spec = `git+ssh://${arg}`
      // eslint-disable-next-line max-len
    } else if (
      !namePart.startsWith('@') &&
      (hasSlashes.test(namePart) || isFileType.test(namePart))
    ) {
      spec = arg
    } else if (nameEndsAt > 0) {
      name = namePart
      spec = arg.slice(nameEndsAt + 1) || '*'
    } else {
      const valid = validatePackageName(arg)
      if (valid.validForOldPackages) {
        name = arg
        spec = '*'
      } else {
        spec = arg
      }
    }
    return resolve(name, spec, where, arg)
  }
  function isFileSpec(spec) {
    if (!spec) {
      return false
    }
    if (spec.toLowerCase().startsWith('file:')) {
      return true
    }
    if (isWindows) {
      return isWindowsFile.test(spec)
    }
    // We never hit this in windows tests, obviously
    /* istanbul ignore next */
    return isPosixFile.test(spec)
  }
  function isAliasSpec(spec) {
    if (!spec) {
      return false
    }
    return spec.toLowerCase().startsWith('npm:')
  }
  function resolve(name, spec, where, arg) {
    const res = new Result({
      raw: arg,
      name: name,
      rawSpec: spec,
      fromArgument: arg != null
    })
    if (name) {
      res.name = name
    }
    if (!where) {
      where = process.cwd()
    }
    if (isFileSpec(spec)) {
      return fromFile(res, where)
    } else if (isAliasSpec(spec)) {
      return fromAlias(res, where)
    }
    const hosted = HostedGit.fromUrl(spec, {
      noGitPlus: true,
      noCommittish: true
    })
    if (hosted) {
      return fromHostedGit(res, hosted)
    } else if (spec && isURL.test(spec)) {
      return fromURL(res)
    } else if (spec && (hasSlashes.test(spec) || isFileType.test(spec))) {
      return fromFile(res, where)
    } else {
      return fromRegistry(res)
    }
  }
  function toPurl(arg, reg = defaultRegistry) {
    const res = npa(arg)
    if (res.type !== 'version') {
      throw invalidPurlType(res.type, res.raw)
    }

    // URI-encode leading @ of scoped packages
    let purl = 'pkg:npm/' + res.name.replace(/^@/, '%40') + '@' + res.rawSpec
    if (reg !== defaultRegistry) {
      purl += '?repository_url=' + reg
    }
    return purl
  }
  function invalidPackageName(name, valid, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid package name "${name}" of package "${raw}": ${valid.errors.join('; ')}.`
    )
    err.code = 'EINVALIDPACKAGENAME'
    return err
  }
  function invalidTagName(name, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid tag name "${name}" of package "${raw}": Tags may not have any characters that encodeURIComponent encodes.`
    )
    err.code = 'EINVALIDTAGNAME'
    return err
  }
  function invalidPurlType(type, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid type "${type}" of package "${raw}": Purl can only be generated for "version" types.`
    )
    err.code = 'EINVALIDPURLTYPE'
    return err
  }
  class Result {
    constructor(opts) {
      this.type = opts.type
      this.registry = opts.registry
      this.where = opts.where
      if (opts.raw == null) {
        this.raw = opts.name ? `${opts.name}@${opts.rawSpec}` : opts.rawSpec
      } else {
        this.raw = opts.raw
      }
      this.name = undefined
      this.escapedName = undefined
      this.scope = undefined
      this.rawSpec = opts.rawSpec || ''
      this.saveSpec = opts.saveSpec
      this.fetchSpec = opts.fetchSpec
      if (opts.name) {
        this.setName(opts.name)
      }
      this.gitRange = opts.gitRange
      this.gitCommittish = opts.gitCommittish
      this.gitSubdir = opts.gitSubdir
      this.hosted = opts.hosted
    }

    // TODO move this to a getter/setter in a semver major
    setName(name) {
      const valid = validatePackageName(name)
      if (!valid.validForOldPackages) {
        throw invalidPackageName(name, valid, this.raw)
      }
      this.name = name
      this.scope =
        name[0] === '@' ? name.slice(0, name.indexOf('/')) : undefined
      // scoped packages in couch must have slash url-encoded, e.g. @foo%2Fbar
      this.escapedName = name.replace('/', '%2f')
      return this
    }
    toString() {
      const full = []
      if (this.name != null && this.name !== '') {
        full.push(this.name)
      }
      const spec = this.saveSpec || this.fetchSpec || this.rawSpec
      if (spec != null && spec !== '') {
        full.push(spec)
      }
      return full.length ? full.join('@') : this.raw
    }
    toJSON() {
      const result = Object.assign({}, this)
      delete result.hosted
      return result
    }
  }

  // sets res.gitCommittish, res.gitRange, and res.gitSubdir
  function setGitAttrs(res, committish) {
    if (!committish) {
      res.gitCommittish = null
      return
    }

    // for each :: separated item:
    for (const part of committish.split('::')) {
      // if the item has no : the n it is a commit-ish
      if (!part.includes(':')) {
        if (res.gitRange) {
          throw new Error(
            'cannot override existing semver range with a committish'
          )
        }
        if (res.gitCommittish) {
          throw new Error(
            'cannot override existing committish with a second committish'
          )
        }
        res.gitCommittish = part
        continue
      }
      // split on name:value
      const [name, value] = part.split(':')
      // if name is semver do semver lookup of ref or tag
      if (name === 'semver') {
        if (res.gitCommittish) {
          throw new Error(
            'cannot override existing committish with a semver range'
          )
        }
        if (res.gitRange) {
          throw new Error(
            'cannot override existing semver range with a second semver range'
          )
        }
        res.gitRange = decodeURIComponent(value)
        continue
      }
      if (name === 'path') {
        if (res.gitSubdir) {
          throw new Error('cannot override existing path with a second path')
        }
        res.gitSubdir = `/${value}`
        continue
      }
      log.warn('npm-package-arg', `ignoring unknown key "${name}"`)
    }
  }

  // Taken from: EncodePathChars and lookup_table in src/node_url.cc
  // url.pathToFileURL only returns absolute references.  We can't use it to encode paths.
  // encodeURI mangles windows paths. We can't use it to encode paths.
  // Under the hood, url.pathToFileURL does a limited set of encoding, with an extra windows step, and then calls path.resolve.
  // The encoding node does without path.resolve is not available outside of the source, so we are recreating it here.
  const encodedPathChars = new Map([
    ['\0', '%00'],
    ['\t', '%09'],
    ['\n', '%0A'],
    ['\r', '%0D'],
    [' ', '%20'],
    ['"', '%22'],
    ['#', '%23'],
    ['%', '%25'],
    ['?', '%3F'],
    ['[', '%5B'],
    ['\\', isWindows ? '/' : '%5C'],
    [']', '%5D'],
    ['^', '%5E'],
    ['|', '%7C'],
    ['~', '%7E']
  ])
  function pathToFileURL(str) {
    let result = ''
    for (let i = 0; i < str.length; i++) {
      result = `${result}${encodedPathChars.get(str[i]) ?? str[i]}`
    }
    if (result.startsWith('file:')) {
      return result
    }
    return `file:${result}`
  }
  function fromFile(res, where) {
    res.type = isFileType.test(res.rawSpec) ? 'file' : 'directory'
    res.where = where
    let rawSpec = pathToFileURL(res.rawSpec)
    if (rawSpec.startsWith('file:/')) {
      // XXX backwards compatibility lack of compliance with RFC 8089

      // turn file://path into file:/path
      if (/^file:\/\/[^/]/.test(rawSpec)) {
        rawSpec = `file:/${rawSpec.slice(5)}`
      }

      // turn file:/../path into file:../path
      // for 1 or 3 leading slashes (2 is already ruled out from handling file:// explicitly above)
      if (/^\/{1,3}\.\.?(\/|$)/.test(rawSpec.slice(5))) {
        rawSpec = rawSpec.replace(/^file:\/{1,3}/, 'file:')
      }
    }
    let resolvedUrl
    let specUrl
    try {
      // always put the '/' on "where", or else file:foo from /path/to/bar goes to /path/to/foo, when we want it to be /path/to/bar/foo
      resolvedUrl = new URL(rawSpec, `${pathToFileURL(path.resolve(where))}/`)
      specUrl = new URL(rawSpec)
    } catch (originalError) {
      const er = new Error('Invalid file: URL, must comply with RFC 8089')
      throw Object.assign(er, {
        raw: res.rawSpec,
        spec: res,
        where,
        originalError
      })
    }

    // turn /C:/blah into just C:/blah on windows
    let specPath = decodeURIComponent(specUrl.pathname)
    let resolvedPath = decodeURIComponent(resolvedUrl.pathname)
    if (isWindows) {
      specPath = specPath.replace(/^\/+([a-z]:\/)/i, '$1')
      resolvedPath = resolvedPath.replace(/^\/+([a-z]:\/)/i, '$1')
    }

    // replace ~ with homedir, but keep the ~ in the saveSpec
    // otherwise, make it relative to where param
    if (/^\/~(\/|$)/.test(specPath)) {
      res.saveSpec = `file:${specPath.substr(1)}`
      resolvedPath = path.resolve(homedir(), specPath.substr(3))
    } else if (!path.isAbsolute(rawSpec.slice(5))) {
      res.saveSpec = `file:${path.relative(where, resolvedPath)}`
    } else {
      res.saveSpec = `file:${path.resolve(resolvedPath)}`
    }
    res.fetchSpec = path.resolve(where, resolvedPath)
    // re-normalize the slashes in saveSpec due to node:path/win32 behavior in windows
    res.saveSpec = res.saveSpec.split('\\').join('/')
    // Ignoring because this only happens in windows
    /* istanbul ignore next */
    if (res.saveSpec.startsWith('file://')) {
      // normalization of \\win32\root paths can cause a double / which we don't want
      res.saveSpec = `file:/${res.saveSpec.slice(7)}`
    }
    return res
  }
  function fromHostedGit(res, hosted) {
    res.type = 'git'
    res.hosted = hosted
    res.saveSpec = hosted.toString({
      noGitPlus: false,
      noCommittish: false
    })
    res.fetchSpec =
      hosted.getDefaultRepresentation() === 'shortcut'
        ? null
        : hosted.toString()
    setGitAttrs(res, hosted.committish)
    return res
  }
  function unsupportedURLType(protocol, spec) {
    const err = new Error(`Unsupported URL Type "${protocol}": ${spec}`)
    err.code = 'EUNSUPPORTEDPROTOCOL'
    return err
  }
  function fromURL(res) {
    let rawSpec = res.rawSpec
    res.saveSpec = rawSpec
    if (rawSpec.startsWith('git+ssh:')) {
      // git ssh specifiers are overloaded to also use scp-style git
      // specifiers, so we have to parse those out and treat them special.
      // They are NOT true URIs, so we can't hand them to URL.

      // This regex looks for things that look like:
      // git+ssh://git@my.custom.git.com:username/project.git#deadbeef
      // ...and various combinations. The username in the beginning is *required*.
      const matched = rawSpec.match(
        /^git\+ssh:\/\/([^:#]+:[^#]+(?:\.git)?)(?:#(.*))?$/i
      )
      // Filter out all-number "usernames" which are really port numbers
      // They can either be :1234 :1234/ or :1234/path but not :12abc
      if (matched && !matched[1].match(isPortNumber)) {
        res.type = 'git'
        setGitAttrs(res, matched[2])
        res.fetchSpec = matched[1]
        return res
      }
    } else if (rawSpec.startsWith('git+file://')) {
      // URL can't handle windows paths
      rawSpec = rawSpec.replace(/\\/g, '/')
    }
    const parsedUrl = new URL(rawSpec)
    // check the protocol, and then see if it's git or not
    switch (parsedUrl.protocol) {
      case 'git:':
      case 'git+http:':
      case 'git+https:':
      case 'git+rsync:':
      case 'git+ftp:':
      case 'git+file:':
      case 'git+ssh:':
        res.type = 'git'
        setGitAttrs(res, parsedUrl.hash.slice(1))
        if (
          parsedUrl.protocol === 'git+file:' &&
          /^git\+file:\/\/[a-z]:/i.test(rawSpec)
        ) {
          // URL can't handle drive letters on windows file paths, the host can't contain a :
          res.fetchSpec = `git+file://${parsedUrl.host.toLowerCase()}:${parsedUrl.pathname}`
        } else {
          parsedUrl.hash = ''
          res.fetchSpec = parsedUrl.toString()
        }
        if (res.fetchSpec.startsWith('git+')) {
          res.fetchSpec = res.fetchSpec.slice(4)
        }
        break
      case 'http:':
      case 'https:':
        res.type = 'remote'
        res.fetchSpec = res.saveSpec
        break
      default:
        throw unsupportedURLType(parsedUrl.protocol, rawSpec)
    }
    return res
  }
  function fromAlias(res, where) {
    const subSpec = npa(res.rawSpec.substr(4), where)
    if (subSpec.type === 'alias') {
      throw new Error('nested aliases not supported')
    }
    if (!subSpec.registry) {
      throw new Error('aliases only work for registry deps')
    }
    if (!subSpec.name) {
      throw new Error('aliases must have a name')
    }
    res.subSpec = subSpec
    res.registry = true
    res.type = 'alias'
    res.saveSpec = null
    res.fetchSpec = null
    return res
  }
  function fromRegistry(res) {
    res.registry = true
    const spec = res.rawSpec.trim()
    // no save spec for registry components as we save based on the fetched
    // version, not on the argument so this can't compute that.
    res.saveSpec = null
    res.fetchSpec = spec
    const version = semver.valid(spec, true)
    const range = semver.validRange(spec, true)
    if (version) {
      res.type = 'version'
    } else if (range) {
      res.type = 'range'
    } else {
      if (encodeURIComponent(spec) !== spec) {
        throw invalidTagName(spec, res.raw)
      }
      res.type = 'tag'
    }
    return res
  }
  npa$1.exports = npa
  npa$1.exports.resolve = resolve
  npa$1.exports.toPurl = toPurl
  npa$1.exports.Result = Result
  return npa$1.exports
}

const tar = {}

let highLevelOpt
let hasRequiredHighLevelOpt
function requireHighLevelOpt() {
  if (hasRequiredHighLevelOpt) {
    return highLevelOpt
  }
  hasRequiredHighLevelOpt = 1

  // turn tar(1) style args like `C` into the more verbose things like `cwd`

  const argmap = new Map([
    ['C', 'cwd'],
    ['f', 'file'],
    ['z', 'gzip'],
    ['P', 'preservePaths'],
    ['U', 'unlink'],
    ['strip-components', 'strip'],
    ['stripComponents', 'strip'],
    ['keep-newer', 'newer'],
    ['keepNewer', 'newer'],
    ['keep-newer-files', 'newer'],
    ['keepNewerFiles', 'newer'],
    ['k', 'keep'],
    ['keep-existing', 'keep'],
    ['keepExisting', 'keep'],
    ['m', 'noMtime'],
    ['no-mtime', 'noMtime'],
    ['p', 'preserveOwner'],
    ['L', 'follow'],
    ['h', 'follow']
  ])
  highLevelOpt = opt =>
    opt
      ? Object.keys(opt)
          .map(k => [argmap.has(k) ? argmap.get(k) : k, opt[k]])
          .reduce((set, kv) => ((set[kv[0]] = kv[1]), set), Object.create(null))
      : {}
  return highLevelOpt
}

const minipass$3 = {}

let hasRequiredMinipass$3
function requireMinipass$3() {
  if (hasRequiredMinipass$3) {
    return minipass$3
  }
  hasRequiredMinipass$3 = 1
  const proc =
    typeof process === 'object' && process
      ? process
      : {
          stdout: null,
          stderr: null
        }
  const EE = require$$0$c
  const Stream = require$$1$8
  const stringdecoder = require$$2$4
  const SD = stringdecoder.StringDecoder
  const EOF = Symbol('EOF')
  const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
  const EMITTED_END = Symbol('emittedEnd')
  const EMITTING_END = Symbol('emittingEnd')
  const EMITTED_ERROR = Symbol('emittedError')
  const CLOSED = Symbol('closed')
  const READ = Symbol('read')
  const FLUSH = Symbol('flush')
  const FLUSHCHUNK = Symbol('flushChunk')
  const ENCODING = Symbol('encoding')
  const DECODER = Symbol('decoder')
  const FLOWING = Symbol('flowing')
  const PAUSED = Symbol('paused')
  const RESUME = Symbol('resume')
  const BUFFER = Symbol('buffer')
  const PIPES = Symbol('pipes')
  const BUFFERLENGTH = Symbol('bufferLength')
  const BUFFERPUSH = Symbol('bufferPush')
  const BUFFERSHIFT = Symbol('bufferShift')
  const OBJECTMODE = Symbol('objectMode')
  // internal event when stream is destroyed
  const DESTROYED = Symbol('destroyed')
  // internal event when stream has an error
  const ERROR = Symbol('error')
  const EMITDATA = Symbol('emitData')
  const EMITEND = Symbol('emitEnd')
  const EMITEND2 = Symbol('emitEnd2')
  const ASYNC = Symbol('async')
  const ABORT = Symbol('abort')
  const ABORTED = Symbol('aborted')
  const SIGNAL = Symbol('signal')
  const defer = fn => Promise.resolve().then(fn)

  // TODO remove when Node v8 support drops
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'
  const ASYNCITERATOR =
    (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')
  const ITERATOR =
    (doIter && Symbol.iterator) || Symbol('iterator not implemented')

  // events that mean 'the stream is over'
  // these are treated specially, and re-emitted
  // if they are listened for after emitting.
  const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
  const isArrayBuffer = b =>
    b instanceof ArrayBuffer ||
    (typeof b === 'object' &&
      b.constructor &&
      b.constructor.name === 'ArrayBuffer' &&
      b.byteLength >= 0)
  const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
  class Pipe {
    constructor(src, dest, opts) {
      this.src = src
      this.dest = dest
      this.opts = opts
      this.ondrain = () => src[RESUME]()
      dest.on('drain', this.ondrain)
    }
    unpipe() {
      this.dest.removeListener('drain', this.ondrain)
    }
    // istanbul ignore next - only here for the prototype
    proxyErrors() {}
    end() {
      this.unpipe()
      if (this.opts.end) {
        this.dest.end()
      }
    }
  }
  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener('error', this.proxyErrors)
      super.unpipe()
    }
    constructor(src, dest, opts) {
      super(src, dest, opts)
      this.proxyErrors = er => dest.emit('error', er)
      src.on('error', this.proxyErrors)
    }
  }
  class Minipass extends Stream {
    constructor(options) {
      super()
      this[FLOWING] = false
      // whether we're explicitly paused
      this[PAUSED] = false
      this[PIPES] = []
      this[BUFFER] = []
      this[OBJECTMODE] = (options && options.objectMode) || false
      if (this[OBJECTMODE]) {
        this[ENCODING] = null
      } else {
        this[ENCODING] = (options && options.encoding) || null
      }
      if (this[ENCODING] === 'buffer') {
        this[ENCODING] = null
      }
      this[ASYNC] = (options && !!options.async) || false
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null
      this[EOF] = false
      this[EMITTED_END] = false
      this[EMITTING_END] = false
      this[CLOSED] = false
      this[EMITTED_ERROR] = null
      this.writable = true
      this.readable = true
      this[BUFFERLENGTH] = 0
      this[DESTROYED] = false
      if (options && options.debugExposeBuffer === true) {
        Object.defineProperty(this, 'buffer', {
          get: () => this[BUFFER]
        })
      }
      if (options && options.debugExposePipes === true) {
        Object.defineProperty(this, 'pipes', {
          get: () => this[PIPES]
        })
      }
      this[SIGNAL] = options && options.signal
      this[ABORTED] = false
      if (this[SIGNAL]) {
        this[SIGNAL].addEventListener('abort', () => this[ABORT]())
        if (this[SIGNAL].aborted) {
          this[ABORT]()
        }
      }
    }
    get bufferLength() {
      return this[BUFFERLENGTH]
    }
    get encoding() {
      return this[ENCODING]
    }
    set encoding(enc) {
      if (this[OBJECTMODE]) {
        throw new Error('cannot set encoding in objectMode')
      }
      if (
        this[ENCODING] &&
        enc !== this[ENCODING] &&
        ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])
      ) {
        throw new Error('cannot change encoding')
      }
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null
        if (this[BUFFER].length) {
          this[BUFFER] = this[BUFFER].map(chunk => this[DECODER].write(chunk))
        }
      }
      this[ENCODING] = enc
    }
    setEncoding(enc) {
      this.encoding = enc
    }
    get objectMode() {
      return this[OBJECTMODE]
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om
    }
    get ['async']() {
      return this[ASYNC]
    }
    set ['async'](a) {
      this[ASYNC] = this[ASYNC] || !!a
    }

    // drop everything and get out of the flow completely
    [ABORT]() {
      this[ABORTED] = true
      this.emit('abort', this[SIGNAL].reason)
      this.destroy(this[SIGNAL].reason)
    }
    get aborted() {
      return this[ABORTED]
    }
    set aborted(_) {}
    write(chunk, encoding, cb) {
      if (this[ABORTED]) {
        return false
      }
      if (this[EOF]) {
        throw new Error('write after end')
      }
      if (this[DESTROYED]) {
        this.emit(
          'error',
          Object.assign(
            new Error('Cannot call write after a stream was destroyed'),
            {
              code: 'ERR_STREAM_DESTROYED'
            }
          )
        )
        return true
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const fn = this[ASYNC] ? defer : f => f()

      // convert array buffers and typed array views into buffers
      // at some point in the future, we may want to do the opposite!
      // leave strings and buffers as-is
      // anything else switches us into object mode
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)
        } else if (isArrayBuffer(chunk)) {
          chunk = Buffer.from(chunk)
        } else if (typeof chunk !== 'string') {
          // use the setter so we throw if we have encoding set
          this.objectMode = true
        }
      }

      // handle object mode up front, since it's simpler
      // this yields better performance, fewer checks later.
      if (this[OBJECTMODE]) {
        /* istanbul ignore if - maybe impossible? */
        if (this.flowing && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this.flowing) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // at this point the chunk is a buffer or string
      // don't buffer it up or send it to the decoder
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // fast-path writing strings of same encoding to a stream with
      // an empty buffer, skipping the buffer/decoder dance
      if (
        typeof chunk === 'string' &&
        // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)
      ) {
        chunk = Buffer.from(chunk, encoding)
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk)
      }

      // Note: flushing CAN potentially switch us into not-flowing mode
      if (this.flowing && this[BUFFERLENGTH] !== 0) {
        this[FLUSH](true)
      }
      if (this.flowing) {
        this.emit('data', chunk)
      } else {
        this[BUFFERPUSH](chunk)
      }
      if (this[BUFFERLENGTH] !== 0) {
        this.emit('readable')
      }
      if (cb) {
        fn(cb)
      }
      return this.flowing
    }
    read(n) {
      if (this[DESTROYED]) {
        return null
      }
      if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]()
        return null
      }
      if (this[OBJECTMODE]) {
        n = null
      }
      if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {
        if (this.encoding) {
          this[BUFFER] = [this[BUFFER].join('')]
        } else {
          this[BUFFER] = [Buffer.concat(this[BUFFER], this[BUFFERLENGTH])]
        }
      }
      const ret = this[READ](n || null, this[BUFFER][0])
      this[MAYBE_EMIT_END]()
      return ret
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null) {
        this[BUFFERSHIFT]()
      } else {
        this[BUFFER][0] = chunk.slice(n)
        chunk = chunk.slice(0, n)
        this[BUFFERLENGTH] -= n
      }
      this.emit('data', chunk)
      if (!this[BUFFER].length && !this[EOF]) {
        this.emit('drain')
      }
      return chunk
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      if (cb) {
        this.once('end', cb)
      }
      this[EOF] = true
      this.writable = false

      // if we haven't written anything, then go ahead and emit,
      // even if we're not reading.
      // we'll re-emit if a new 'end' listener is added anyway.
      // This makes MP more suitable to write-only use cases.
      if (this.flowing || !this[PAUSED]) {
        this[MAYBE_EMIT_END]()
      }
      return this
    }

    // don't let the internal resume be overwritten
    [RESUME]() {
      if (this[DESTROYED]) {
        return
      }
      this[PAUSED] = false
      this[FLOWING] = true
      this.emit('resume')
      if (this[BUFFER].length) {
        this[FLUSH]()
      } else if (this[EOF]) {
        this[MAYBE_EMIT_END]()
      } else {
        this.emit('drain')
      }
    }
    resume() {
      return this[RESUME]()
    }
    pause() {
      this[FLOWING] = false
      this[PAUSED] = true
    }
    get destroyed() {
      return this[DESTROYED]
    }
    get flowing() {
      return this[FLOWING]
    }
    get paused() {
      return this[PAUSED]
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] += 1
      } else {
        this[BUFFERLENGTH] += chunk.length
      }
      this[BUFFER].push(chunk)
    }
    [BUFFERSHIFT]() {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] -= 1
      } else {
        this[BUFFERLENGTH] -= this[BUFFER][0].length
      }
      return this[BUFFER].shift()
    }
    [FLUSH](noDrain) {
      do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length)
      if (!noDrain && !this[BUFFER].length && !this[EOF]) {
        this.emit('drain')
      }
    }
    [FLUSHCHUNK](chunk) {
      this.emit('data', chunk)
      return this.flowing
    }
    pipe(dest, opts) {
      if (this[DESTROYED]) {
        return
      }
      const ended = this[EMITTED_END]
      opts = opts || {}
      if (dest === proc.stdout || dest === proc.stderr) {
        opts.end = false
      } else {
        opts.end = opts.end !== false
      }
      opts.proxyErrors = !!opts.proxyErrors

      // piping an ended stream ends immediately
      if (ended) {
        if (opts.end) {
          dest.end()
        }
      } else {
        this[PIPES].push(
          !opts.proxyErrors
            ? new Pipe(this, dest, opts)
            : new PipeProxyErrors(this, dest, opts)
        )
        if (this[ASYNC]) {
          defer(() => this[RESUME]())
        } else {
          this[RESUME]()
        }
      }
      return dest
    }
    unpipe(dest) {
      const p = this[PIPES].find(p => p.dest === dest)
      if (p) {
        this[PIPES].splice(this[PIPES].indexOf(p), 1)
        p.unpipe()
      }
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'data' && !this[PIPES].length && !this.flowing) {
        this[RESUME]()
      } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
        super.emit('readable')
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev)
        this.removeAllListeners(ev)
      } else if (ev === 'error' && this[EMITTED_ERROR]) {
        if (this[ASYNC]) {
          defer(() => fn.call(this, this[EMITTED_ERROR]))
        } else {
          fn.call(this, this[EMITTED_ERROR])
        }
      }
      return ret
    }
    get emittedEnd() {
      return this[EMITTED_END]
    }
    [MAYBE_EMIT_END]() {
      if (
        !this[EMITTING_END] &&
        !this[EMITTED_END] &&
        !this[DESTROYED] &&
        this[BUFFER].length === 0 &&
        this[EOF]
      ) {
        this[EMITTING_END] = true
        this.emit('end')
        this.emit('prefinish')
        this.emit('finish')
        if (this[CLOSED]) {
          this.emit('close')
        }
        this[EMITTING_END] = false
      }
    }
    emit(ev, data, ...extra) {
      // error and close are only events allowed after calling destroy()
      if (
        ev !== 'error' &&
        ev !== 'close' &&
        ev !== DESTROYED &&
        this[DESTROYED]
      ) {
        return
      } else if (ev === 'data') {
        return !this[OBJECTMODE] && !data
          ? false
          : this[ASYNC]
            ? defer(() => this[EMITDATA](data))
            : this[EMITDATA](data)
      } else if (ev === 'end') {
        return this[EMITEND]()
      } else if (ev === 'close') {
        this[CLOSED] = true
        // don't emit close before 'end' and 'finish'
        if (!this[EMITTED_END] && !this[DESTROYED]) {
          return
        }
        const ret = super.emit('close')
        this.removeAllListeners('close')
        return ret
      } else if (ev === 'error') {
        this[EMITTED_ERROR] = data
        super.emit(ERROR, data)
        const ret =
          !this[SIGNAL] || this.listeners('error').length
            ? super.emit('error', data)
            : false
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'resume') {
        const ret = super.emit('resume')
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'finish' || ev === 'prefinish') {
        const ret = super.emit(ev)
        this.removeAllListeners(ev)
        return ret
      }

      // Some other unknown event
      const ret = super.emit(ev, data, ...extra)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITDATA](data) {
      for (const p of this[PIPES]) {
        if (p.dest.write(data) === false) {
          this.pause()
        }
      }
      const ret = super.emit('data', data)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITEND]() {
      if (this[EMITTED_END]) {
        return
      }
      this[EMITTED_END] = true
      this.readable = false
      if (this[ASYNC]) {
        defer(() => this[EMITEND2]())
      } else {
        this[EMITEND2]()
      }
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end()
        if (data) {
          for (const p of this[PIPES]) {
            p.dest.write(data)
          }
          super.emit('data', data)
        }
      }
      for (const p of this[PIPES]) {
        p.end()
      }
      const ret = super.emit('end')
      this.removeAllListeners('end')
      return ret
    }

    // const all = await stream.collect()
    collect() {
      const buf = []
      if (!this[OBJECTMODE]) {
        buf.dataLength = 0
      }
      // set the promise first, in case an error is raised
      // by triggering the flow here.
      const p = this.promise()
      this.on('data', c => {
        buf.push(c)
        if (!this[OBJECTMODE]) {
          buf.dataLength += c.length
        }
      })
      return p.then(() => buf)
    }

    // const data = await stream.concat()
    concat() {
      return this[OBJECTMODE]
        ? Promise.reject(new Error('cannot concat in objectMode'))
        : this.collect().then(buf =>
            this[OBJECTMODE]
              ? Promise.reject(new Error('cannot concat in objectMode'))
              : this[ENCODING]
                ? buf.join('')
                : Buffer.concat(buf, buf.dataLength)
          )
    }

    // stream.promise().then(() => done, er => emitted error)
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error('stream destroyed')))
        this.on('error', er => reject(er))
        this.on('end', () => resolve())
      })
    }

    // for await (let chunk of stream)
    [ASYNCITERATOR]() {
      let stopped = false
      const stop = () => {
        this.pause()
        stopped = true
        return Promise.resolve({
          done: true
        })
      }
      const next = () => {
        if (stopped) {
          return stop()
        }
        const res = this.read()
        if (res !== null) {
          return Promise.resolve({
            done: false,
            value: res
          })
        }
        if (this[EOF]) {
          return stop()
        }
        let resolve = null
        let reject = null
        const onerr = er => {
          this.removeListener('data', ondata)
          this.removeListener('end', onend)
          this.removeListener(DESTROYED, ondestroy)
          stop()
          reject(er)
        }
        const ondata = value => {
          this.removeListener('error', onerr)
          this.removeListener('end', onend)
          this.removeListener(DESTROYED, ondestroy)
          this.pause()
          resolve({
            value: value,
            done: !!this[EOF]
          })
        }
        const onend = () => {
          this.removeListener('error', onerr)
          this.removeListener('data', ondata)
          this.removeListener(DESTROYED, ondestroy)
          stop()
          resolve({
            done: true
          })
        }
        const ondestroy = () => onerr(new Error('stream destroyed'))
        return new Promise((res, rej) => {
          reject = rej
          resolve = res
          this.once(DESTROYED, ondestroy)
          this.once('error', onerr)
          this.once('end', onend)
          this.once('data', ondata)
        })
      }
      return {
        next,
        throw: stop,
        return: stop,
        [ASYNCITERATOR]() {
          return this
        }
      }
    }

    // for (let chunk of stream)
    [ITERATOR]() {
      let stopped = false
      const stop = () => {
        this.pause()
        this.removeListener(ERROR, stop)
        this.removeListener(DESTROYED, stop)
        this.removeListener('end', stop)
        stopped = true
        return {
          done: true
        }
      }
      const next = () => {
        if (stopped) {
          return stop()
        }
        const value = this.read()
        return value === null
          ? stop()
          : {
              value
            }
      }
      this.once('end', stop)
      this.once(ERROR, stop)
      this.once(DESTROYED, stop)
      return {
        next,
        throw: stop,
        return: stop,
        [ITERATOR]() {
          return this
        }
      }
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er) {
          this.emit('error', er)
        } else {
          this.emit(DESTROYED)
        }
        return this
      }
      this[DESTROYED] = true

      // throw away all buffered data, it's never coming out
      this[BUFFER].length = 0
      this[BUFFERLENGTH] = 0
      if (typeof this.close === 'function' && !this[CLOSED]) {
        this.close()
      }
      if (er) {
        this.emit('error', er)
      }
      // if no error to emit, still reject pending promises
      else {
        this.emit(DESTROYED)
      }
      return this
    }
    static isStream(s) {
      return (
        !!s &&
        (s instanceof Minipass ||
          s instanceof Stream ||
          (s instanceof EE &&
            // readable
            (typeof s.pipe === 'function' ||
              // writable
              (typeof s.write === 'function' && typeof s.end === 'function'))))
      )
    }
  }
  minipass$3.Minipass = Minipass
  return minipass$3
}

const minizlib = {}

let constants$4
let hasRequiredConstants$4
function requireConstants$4() {
  if (hasRequiredConstants$4) {
    return constants$4
  }
  hasRequiredConstants$4 = 1
  // Update with any zlib constants that are added or changed in the future.
  // Node v6 didn't export this, so we just hard code the version and rely
  // on all the other hard-coded values from zlib v4736.  When node v6
  // support drops, we can just export the realZlibConstants object.
  const realZlibConstants =
    require$$0$f.constants || /* istanbul ignore next */ {
      ZLIB_VERNUM: 4736
    }
  constants$4 = Object.freeze(
    Object.assign(
      Object.create(null),
      {
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        Z_MEM_ERROR: -4,
        Z_BUF_ERROR: -5,
        Z_VERSION_ERROR: -6,
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,
        DEFLATE: 1,
        INFLATE: 2,
        GZIP: 3,
        GUNZIP: 4,
        DEFLATERAW: 5,
        INFLATERAW: 6,
        UNZIP: 7,
        BROTLI_DECODE: 8,
        BROTLI_ENCODE: 9,
        Z_MIN_WINDOWBITS: 8,
        Z_MAX_WINDOWBITS: 15,
        Z_DEFAULT_WINDOWBITS: 15,
        Z_MIN_CHUNK: 64,
        Z_MAX_CHUNK: Infinity,
        Z_DEFAULT_CHUNK: 16384,
        Z_MIN_MEMLEVEL: 1,
        Z_MAX_MEMLEVEL: 9,
        Z_DEFAULT_MEMLEVEL: 8,
        Z_MIN_LEVEL: -1,
        Z_MAX_LEVEL: 9,
        Z_DEFAULT_LEVEL: -1,
        BROTLI_OPERATION_PROCESS: 0,
        BROTLI_OPERATION_FLUSH: 1,
        BROTLI_OPERATION_FINISH: 2,
        BROTLI_OPERATION_EMIT_METADATA: 3,
        BROTLI_MODE_GENERIC: 0,
        BROTLI_MODE_TEXT: 1,
        BROTLI_MODE_FONT: 2,
        BROTLI_DEFAULT_MODE: 0,
        BROTLI_MIN_QUALITY: 0,
        BROTLI_MAX_QUALITY: 11,
        BROTLI_DEFAULT_QUALITY: 11,
        BROTLI_MIN_WINDOW_BITS: 10,
        BROTLI_MAX_WINDOW_BITS: 24,
        BROTLI_LARGE_MAX_WINDOW_BITS: 30,
        BROTLI_DEFAULT_WINDOW: 22,
        BROTLI_MIN_INPUT_BLOCK_BITS: 16,
        BROTLI_MAX_INPUT_BLOCK_BITS: 24,
        BROTLI_PARAM_MODE: 0,
        BROTLI_PARAM_QUALITY: 1,
        BROTLI_PARAM_LGWIN: 2,
        BROTLI_PARAM_LGBLOCK: 3,
        BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,
        BROTLI_PARAM_SIZE_HINT: 5,
        BROTLI_PARAM_LARGE_WINDOW: 6,
        BROTLI_PARAM_NPOSTFIX: 7,
        BROTLI_PARAM_NDIRECT: 8,
        BROTLI_DECODER_RESULT_ERROR: 0,
        BROTLI_DECODER_RESULT_SUCCESS: 1,
        BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,
        BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,
        BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,
        BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,
        BROTLI_DECODER_NO_ERROR: 0,
        BROTLI_DECODER_SUCCESS: 1,
        BROTLI_DECODER_NEEDS_MORE_INPUT: 2,
        BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,
        BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,
        BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,
        BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,
        BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,
        BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,
        BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,
        BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,
        BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,
        BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,
        BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,
        BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,
        BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,
        BROTLI_DECODER_ERROR_UNREACHABLE: -31
      },
      realZlibConstants
    )
  )
  return constants$4
}

let minipass$2
let hasRequiredMinipass$2
function requireMinipass$2() {
  if (hasRequiredMinipass$2) {
    return minipass$2
  }
  hasRequiredMinipass$2 = 1
  const proc =
    typeof process === 'object' && process
      ? process
      : {
          stdout: null,
          stderr: null
        }
  const EE = require$$0$c
  const Stream = require$$1$8
  const SD = require$$2$4.StringDecoder
  const EOF = Symbol('EOF')
  const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
  const EMITTED_END = Symbol('emittedEnd')
  const EMITTING_END = Symbol('emittingEnd')
  const EMITTED_ERROR = Symbol('emittedError')
  const CLOSED = Symbol('closed')
  const READ = Symbol('read')
  const FLUSH = Symbol('flush')
  const FLUSHCHUNK = Symbol('flushChunk')
  const ENCODING = Symbol('encoding')
  const DECODER = Symbol('decoder')
  const FLOWING = Symbol('flowing')
  const PAUSED = Symbol('paused')
  const RESUME = Symbol('resume')
  const BUFFERLENGTH = Symbol('bufferLength')
  const BUFFERPUSH = Symbol('bufferPush')
  const BUFFERSHIFT = Symbol('bufferShift')
  const OBJECTMODE = Symbol('objectMode')
  const DESTROYED = Symbol('destroyed')
  const EMITDATA = Symbol('emitData')
  const EMITEND = Symbol('emitEnd')
  const EMITEND2 = Symbol('emitEnd2')
  const ASYNC = Symbol('async')
  const defer = fn => Promise.resolve().then(fn)

  // TODO remove when Node v8 support drops
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'
  const ASYNCITERATOR =
    (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')
  const ITERATOR =
    (doIter && Symbol.iterator) || Symbol('iterator not implemented')

  // events that mean 'the stream is over'
  // these are treated specially, and re-emitted
  // if they are listened for after emitting.
  const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
  const isArrayBuffer = b =>
    b instanceof ArrayBuffer ||
    (typeof b === 'object' &&
      b.constructor &&
      b.constructor.name === 'ArrayBuffer' &&
      b.byteLength >= 0)
  const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
  class Pipe {
    constructor(src, dest, opts) {
      this.src = src
      this.dest = dest
      this.opts = opts
      this.ondrain = () => src[RESUME]()
      dest.on('drain', this.ondrain)
    }
    unpipe() {
      this.dest.removeListener('drain', this.ondrain)
    }
    // istanbul ignore next - only here for the prototype
    proxyErrors() {}
    end() {
      this.unpipe()
      if (this.opts.end) {
        this.dest.end()
      }
    }
  }
  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener('error', this.proxyErrors)
      super.unpipe()
    }
    constructor(src, dest, opts) {
      super(src, dest, opts)
      this.proxyErrors = er => dest.emit('error', er)
      src.on('error', this.proxyErrors)
    }
  }
  minipass$2 = class Minipass extends Stream {
    constructor(options) {
      super()
      this[FLOWING] = false
      // whether we're explicitly paused
      this[PAUSED] = false
      this.pipes = []
      this.buffer = []
      this[OBJECTMODE] = (options && options.objectMode) || false
      if (this[OBJECTMODE]) {
        this[ENCODING] = null
      } else {
        this[ENCODING] = (options && options.encoding) || null
      }
      if (this[ENCODING] === 'buffer') {
        this[ENCODING] = null
      }
      this[ASYNC] = (options && !!options.async) || false
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null
      this[EOF] = false
      this[EMITTED_END] = false
      this[EMITTING_END] = false
      this[CLOSED] = false
      this[EMITTED_ERROR] = null
      this.writable = true
      this.readable = true
      this[BUFFERLENGTH] = 0
      this[DESTROYED] = false
    }
    get bufferLength() {
      return this[BUFFERLENGTH]
    }
    get encoding() {
      return this[ENCODING]
    }
    set encoding(enc) {
      if (this[OBJECTMODE]) {
        throw new Error('cannot set encoding in objectMode')
      }
      if (
        this[ENCODING] &&
        enc !== this[ENCODING] &&
        ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])
      ) {
        throw new Error('cannot change encoding')
      }
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null
        if (this.buffer.length) {
          this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))
        }
      }
      this[ENCODING] = enc
    }
    setEncoding(enc) {
      this.encoding = enc
    }
    get objectMode() {
      return this[OBJECTMODE]
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om
    }
    get ['async']() {
      return this[ASYNC]
    }
    set ['async'](a) {
      this[ASYNC] = this[ASYNC] || !!a
    }
    write(chunk, encoding, cb) {
      if (this[EOF]) {
        throw new Error('write after end')
      }
      if (this[DESTROYED]) {
        this.emit(
          'error',
          Object.assign(
            new Error('Cannot call write after a stream was destroyed'),
            {
              code: 'ERR_STREAM_DESTROYED'
            }
          )
        )
        return true
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const fn = this[ASYNC] ? defer : f => f()

      // convert array buffers and typed array views into buffers
      // at some point in the future, we may want to do the opposite!
      // leave strings and buffers as-is
      // anything else switches us into object mode
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)
        } else if (isArrayBuffer(chunk)) {
          chunk = Buffer.from(chunk)
        } else if (typeof chunk !== 'string') {
          // use the setter so we throw if we have encoding set
          this.objectMode = true
        }
      }

      // handle object mode up front, since it's simpler
      // this yields better performance, fewer checks later.
      if (this[OBJECTMODE]) {
        /* istanbul ignore if - maybe impossible? */
        if (this.flowing && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this.flowing) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // at this point the chunk is a buffer or string
      // don't buffer it up or send it to the decoder
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // fast-path writing strings of same encoding to a stream with
      // an empty buffer, skipping the buffer/decoder dance
      if (
        typeof chunk === 'string' &&
        // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)
      ) {
        chunk = Buffer.from(chunk, encoding)
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk)
      }

      // Note: flushing CAN potentially switch us into not-flowing mode
      if (this.flowing && this[BUFFERLENGTH] !== 0) {
        this[FLUSH](true)
      }
      if (this.flowing) {
        this.emit('data', chunk)
      } else {
        this[BUFFERPUSH](chunk)
      }
      if (this[BUFFERLENGTH] !== 0) {
        this.emit('readable')
      }
      if (cb) {
        fn(cb)
      }
      return this.flowing
    }
    read(n) {
      if (this[DESTROYED]) {
        return null
      }
      if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]()
        return null
      }
      if (this[OBJECTMODE]) {
        n = null
      }
      if (this.buffer.length > 1 && !this[OBJECTMODE]) {
        if (this.encoding) {
          this.buffer = [this.buffer.join('')]
        } else {
          this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]
        }
      }
      const ret = this[READ](n || null, this.buffer[0])
      this[MAYBE_EMIT_END]()
      return ret
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null) {
        this[BUFFERSHIFT]()
      } else {
        this.buffer[0] = chunk.slice(n)
        chunk = chunk.slice(0, n)
        this[BUFFERLENGTH] -= n
      }
      this.emit('data', chunk)
      if (!this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
      return chunk
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      if (cb) {
        this.once('end', cb)
      }
      this[EOF] = true
      this.writable = false

      // if we haven't written anything, then go ahead and emit,
      // even if we're not reading.
      // we'll re-emit if a new 'end' listener is added anyway.
      // This makes MP more suitable to write-only use cases.
      if (this.flowing || !this[PAUSED]) {
        this[MAYBE_EMIT_END]()
      }
      return this
    }

    // don't let the internal resume be overwritten
    [RESUME]() {
      if (this[DESTROYED]) {
        return
      }
      this[PAUSED] = false
      this[FLOWING] = true
      this.emit('resume')
      if (this.buffer.length) {
        this[FLUSH]()
      } else if (this[EOF]) {
        this[MAYBE_EMIT_END]()
      } else {
        this.emit('drain')
      }
    }
    resume() {
      return this[RESUME]()
    }
    pause() {
      this[FLOWING] = false
      this[PAUSED] = true
    }
    get destroyed() {
      return this[DESTROYED]
    }
    get flowing() {
      return this[FLOWING]
    }
    get paused() {
      return this[PAUSED]
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] += 1
      } else {
        this[BUFFERLENGTH] += chunk.length
      }
      this.buffer.push(chunk)
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this.buffer[0].length
        }
      }
      return this.buffer.shift()
    }
    [FLUSH](noDrain) {
      do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))
      if (!noDrain && !this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit('data', chunk), this.flowing) : false
    }
    pipe(dest, opts) {
      if (this[DESTROYED]) {
        return
      }
      const ended = this[EMITTED_END]
      opts = opts || {}
      if (dest === proc.stdout || dest === proc.stderr) {
        opts.end = false
      } else {
        opts.end = opts.end !== false
      }
      opts.proxyErrors = !!opts.proxyErrors

      // piping an ended stream ends immediately
      if (ended) {
        if (opts.end) {
          dest.end()
        }
      } else {
        this.pipes.push(
          !opts.proxyErrors
            ? new Pipe(this, dest, opts)
            : new PipeProxyErrors(this, dest, opts)
        )
        if (this[ASYNC]) {
          defer(() => this[RESUME]())
        } else {
          this[RESUME]()
        }
      }
      return dest
    }
    unpipe(dest) {
      const p = this.pipes.find(p => p.dest === dest)
      if (p) {
        this.pipes.splice(this.pipes.indexOf(p), 1)
        p.unpipe()
      }
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'data' && !this.pipes.length && !this.flowing) {
        this[RESUME]()
      } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
        super.emit('readable')
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev)
        this.removeAllListeners(ev)
      } else if (ev === 'error' && this[EMITTED_ERROR]) {
        if (this[ASYNC]) {
          defer(() => fn.call(this, this[EMITTED_ERROR]))
        } else {
          fn.call(this, this[EMITTED_ERROR])
        }
      }
      return ret
    }
    get emittedEnd() {
      return this[EMITTED_END]
    }
    [MAYBE_EMIT_END]() {
      if (
        !this[EMITTING_END] &&
        !this[EMITTED_END] &&
        !this[DESTROYED] &&
        this.buffer.length === 0 &&
        this[EOF]
      ) {
        this[EMITTING_END] = true
        this.emit('end')
        this.emit('prefinish')
        this.emit('finish')
        if (this[CLOSED]) {
          this.emit('close')
        }
        this[EMITTING_END] = false
      }
    }
    emit(ev, data, ...extra) {
      // error and close are only events allowed after calling destroy()
      if (
        ev !== 'error' &&
        ev !== 'close' &&
        ev !== DESTROYED &&
        this[DESTROYED]
      ) {
        return
      } else if (ev === 'data') {
        return !data
          ? false
          : this[ASYNC]
            ? defer(() => this[EMITDATA](data))
            : this[EMITDATA](data)
      } else if (ev === 'end') {
        return this[EMITEND]()
      } else if (ev === 'close') {
        this[CLOSED] = true
        // don't emit close before 'end' and 'finish'
        if (!this[EMITTED_END] && !this[DESTROYED]) {
          return
        }
        const ret = super.emit('close')
        this.removeAllListeners('close')
        return ret
      } else if (ev === 'error') {
        this[EMITTED_ERROR] = data
        const ret = super.emit('error', data)
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'resume') {
        const ret = super.emit('resume')
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'finish' || ev === 'prefinish') {
        const ret = super.emit(ev)
        this.removeAllListeners(ev)
        return ret
      }

      // Some other unknown event
      const ret = super.emit(ev, data, ...extra)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITDATA](data) {
      for (const p of this.pipes) {
        if (p.dest.write(data) === false) {
          this.pause()
        }
      }
      const ret = super.emit('data', data)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITEND]() {
      if (this[EMITTED_END]) {
        return
      }
      this[EMITTED_END] = true
      this.readable = false
      if (this[ASYNC]) {
        defer(() => this[EMITEND2]())
      } else {
        this[EMITEND2]()
      }
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end()
        if (data) {
          for (const p of this.pipes) {
            p.dest.write(data)
          }
          super.emit('data', data)
        }
      }
      for (const p of this.pipes) {
        p.end()
      }
      const ret = super.emit('end')
      this.removeAllListeners('end')
      return ret
    }

    // const all = await stream.collect()
    collect() {
      const buf = []
      if (!this[OBJECTMODE]) {
        buf.dataLength = 0
      }
      // set the promise first, in case an error is raised
      // by triggering the flow here.
      const p = this.promise()
      this.on('data', c => {
        buf.push(c)
        if (!this[OBJECTMODE]) {
          buf.dataLength += c.length
        }
      })
      return p.then(() => buf)
    }

    // const data = await stream.concat()
    concat() {
      return this[OBJECTMODE]
        ? Promise.reject(new Error('cannot concat in objectMode'))
        : this.collect().then(buf =>
            this[OBJECTMODE]
              ? Promise.reject(new Error('cannot concat in objectMode'))
              : this[ENCODING]
                ? buf.join('')
                : Buffer.concat(buf, buf.dataLength)
          )
    }

    // stream.promise().then(() => done, er => emitted error)
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error('stream destroyed')))
        this.on('error', er => reject(er))
        this.on('end', () => resolve())
      })
    }

    // for await (let chunk of stream)
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read()
        if (res !== null) {
          return Promise.resolve({
            done: false,
            value: res
          })
        }
        if (this[EOF]) {
          return Promise.resolve({
            done: true
          })
        }
        let resolve = null
        let reject = null
        const onerr = er => {
          this.removeListener('data', ondata)
          this.removeListener('end', onend)
          reject(er)
        }
        const ondata = value => {
          this.removeListener('error', onerr)
          this.removeListener('end', onend)
          this.pause()
          resolve({
            value: value,
            done: !!this[EOF]
          })
        }
        const onend = () => {
          this.removeListener('error', onerr)
          this.removeListener('data', ondata)
          resolve({
            done: true
          })
        }
        const ondestroy = () => onerr(new Error('stream destroyed'))
        return new Promise((res, rej) => {
          reject = rej
          resolve = res
          this.once(DESTROYED, ondestroy)
          this.once('error', onerr)
          this.once('end', onend)
          this.once('data', ondata)
        })
      }
      return {
        next
      }
    }

    // for (let chunk of stream)
    [ITERATOR]() {
      const next = () => {
        const value = this.read()
        const done = value === null
        return {
          value,
          done
        }
      }
      return {
        next
      }
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er) {
          this.emit('error', er)
        } else {
          this.emit(DESTROYED)
        }
        return this
      }
      this[DESTROYED] = true

      // throw away all buffered data, it's never coming out
      this.buffer.length = 0
      this[BUFFERLENGTH] = 0
      if (typeof this.close === 'function' && !this[CLOSED]) {
        this.close()
      }
      if (er) {
        this.emit('error', er)
      }
      // if no error to emit, still reject pending promises
      else {
        this.emit(DESTROYED)
      }
      return this
    }
    static isStream(s) {
      return (
        !!s &&
        (s instanceof Minipass ||
          s instanceof Stream ||
          (s instanceof EE &&
            (typeof s.pipe === 'function' ||
              // readable
              (typeof s.write === 'function' && typeof s.end === 'function')))) // writable
      )
    }
  }
  return minipass$2
}

let hasRequiredMinizlib
function requireMinizlib() {
  if (hasRequiredMinizlib) {
    return minizlib
  }
  hasRequiredMinizlib = 1
  const assert = require$$0$h
  const Buffer = require$$0$g.Buffer
  const realZlib = require$$0$f
  const constants = (minizlib.constants = requireConstants$4())
  const Minipass = requireMinipass$2()
  const OriginalBufferConcat = Buffer.concat
  const _superWrite = Symbol('_superWrite')
  class ZlibError extends Error {
    constructor(err) {
      super('zlib: ' + err.message)
      this.code = err.code
      this.errno = err.errno
      /* istanbul ignore if */
      if (!this.code) {
        this.code = 'ZLIB_ERROR'
      }
      this.message = 'zlib: ' + err.message
      Error.captureStackTrace(this, this.constructor)
    }
    get name() {
      return 'ZlibError'
    }
  }

  // the Zlib class they all inherit from
  // This thing manages the queue of requests, and returns
  // true or false if there is anything in the queue when
  // you call the .write() method.
  const _opts = Symbol('opts')
  const _flushFlag = Symbol('flushFlag')
  const _finishFlushFlag = Symbol('finishFlushFlag')
  const _fullFlushFlag = Symbol('fullFlushFlag')
  const _handle = Symbol('handle')
  const _onError = Symbol('onError')
  const _sawError = Symbol('sawError')
  const _level = Symbol('level')
  const _strategy = Symbol('strategy')
  const _ended = Symbol('ended')
  class ZlibBase extends Minipass {
    constructor(opts, mode) {
      if (!opts || typeof opts !== 'object') {
        throw new TypeError('invalid options for ZlibBase constructor')
      }
      super(opts)
      this[_sawError] = false
      this[_ended] = false
      this[_opts] = opts
      this[_flushFlag] = opts.flush
      this[_finishFlushFlag] = opts.finishFlush
      // this will throw if any options are invalid for the class selected
      try {
        this[_handle] = new realZlib[mode](opts)
      } catch (er) {
        // make sure that all errors get decorated properly
        throw new ZlibError(er)
      }
      this[_onError] = err => {
        // no sense raising multiple errors, since we abort on the first one.
        if (this[_sawError]) {
          return
        }
        this[_sawError] = true

        // there is no way to cleanly recover.
        // continuing only obscures problems.
        this.close()
        this.emit('error', err)
      }
      this[_handle].on('error', er => this[_onError](new ZlibError(er)))
      this.once('end', () => this.close)
    }
    close() {
      if (this[_handle]) {
        this[_handle].close()
        this[_handle] = null
        this.emit('close')
      }
    }
    reset() {
      if (!this[_sawError]) {
        assert(this[_handle], 'zlib binding closed')
        return this[_handle].reset()
      }
    }
    flush(flushFlag) {
      if (this.ended) {
        return
      }
      if (typeof flushFlag !== 'number') {
        flushFlag = this[_fullFlushFlag]
      }
      this.write(
        Object.assign(Buffer.alloc(0), {
          [_flushFlag]: flushFlag
        })
      )
    }
    end(chunk, encoding, cb) {
      if (chunk) {
        this.write(chunk, encoding)
      }
      this.flush(this[_finishFlushFlag])
      this[_ended] = true
      return super.end(null, null, cb)
    }
    get ended() {
      return this[_ended]
    }
    write(chunk, encoding, cb) {
      // process the chunk using the sync process
      // then super.write() all the outputted chunks
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding)
      }
      if (this[_sawError]) {
        return
      }
      assert(this[_handle], 'zlib binding closed')

      // _processChunk tries to .close() the native handle after it's done, so we
      // intercept that by temporarily making it a no-op.
      const nativeHandle = this[_handle]._handle
      const originalNativeClose = nativeHandle.close
      nativeHandle.close = () => {}
      const originalClose = this[_handle].close
      this[_handle].close = () => {}
      // It also calls `Buffer.concat()` at the end, which may be convenient
      // for some, but which we are not interested in as it slows us down.
      Buffer.concat = args => args
      let result
      try {
        const flushFlag =
          typeof chunk[_flushFlag] === 'number'
            ? chunk[_flushFlag]
            : this[_flushFlag]
        result = this[_handle]._processChunk(chunk, flushFlag)
        // if we don't throw, reset it back how it was
        Buffer.concat = OriginalBufferConcat
      } catch (err) {
        // or if we do, put Buffer.concat() back before we emit error
        // Error events call into user code, which may call Buffer.concat()
        Buffer.concat = OriginalBufferConcat
        this[_onError](new ZlibError(err))
      } finally {
        if (this[_handle]) {
          // Core zlib resets `_handle` to null after attempting to close the
          // native handle. Our no-op handler prevented actual closure, but we
          // need to restore the `._handle` property.
          this[_handle]._handle = nativeHandle
          nativeHandle.close = originalNativeClose
          this[_handle].close = originalClose
          // `_processChunk()` adds an 'error' listener. If we don't remove it
          // after each call, these handlers start piling up.
          this[_handle].removeAllListeners('error')
          // make sure OUR error listener is still attached tho
        }
      }
      if (this[_handle]) {
        this[_handle].on('error', er => this[_onError](new ZlibError(er)))
      }
      let writeReturn
      if (result) {
        if (Array.isArray(result) && result.length > 0) {
          // The first buffer is always `handle._outBuffer`, which would be
          // re-used for later invocations; so, we always have to copy that one.
          writeReturn = this[_superWrite](Buffer.from(result[0]))
          for (let i = 1; i < result.length; i++) {
            writeReturn = this[_superWrite](result[i])
          }
        } else {
          writeReturn = this[_superWrite](Buffer.from(result))
        }
      }
      if (cb) {
        cb()
      }
      return writeReturn
    }
    [_superWrite](data) {
      return super.write(data)
    }
  }
  class Zlib extends ZlibBase {
    constructor(opts, mode) {
      opts = opts || {}
      opts.flush = opts.flush || constants.Z_NO_FLUSH
      opts.finishFlush = opts.finishFlush || constants.Z_FINISH
      super(opts, mode)
      this[_fullFlushFlag] = constants.Z_FULL_FLUSH
      this[_level] = opts.level
      this[_strategy] = opts.strategy
    }
    params(level, strategy) {
      if (this[_sawError]) {
        return
      }
      if (!this[_handle]) {
        throw new Error('cannot switch params when binding is closed')
      }

      // no way to test this without also not supporting params at all
      /* istanbul ignore if */
      if (!this[_handle].params) {
        throw new Error('not supported in this implementation')
      }
      if (this[_level] !== level || this[_strategy] !== strategy) {
        this.flush(constants.Z_SYNC_FLUSH)
        assert(this[_handle], 'zlib binding closed')
        // .params() calls .flush(), but the latter is always async in the
        // core zlib. We override .flush() temporarily to intercept that and
        // flush synchronously.
        const origFlush = this[_handle].flush
        this[_handle].flush = (flushFlag, cb) => {
          this.flush(flushFlag)
          cb()
        }
        try {
          this[_handle].params(level, strategy)
        } finally {
          this[_handle].flush = origFlush
        }
        /* istanbul ignore else */
        if (this[_handle]) {
          this[_level] = level
          this[_strategy] = strategy
        }
      }
    }
  }

  // minimal 2-byte header
  class Deflate extends Zlib {
    constructor(opts) {
      super(opts, 'Deflate')
    }
  }
  class Inflate extends Zlib {
    constructor(opts) {
      super(opts, 'Inflate')
    }
  }

  // gzip - bigger header, same deflate compression
  const _portable = Symbol('_portable')
  class Gzip extends Zlib {
    constructor(opts) {
      super(opts, 'Gzip')
      this[_portable] = opts && !!opts.portable
    }
    [_superWrite](data) {
      if (!this[_portable]) {
        return super[_superWrite](data)
      }

      // we'll always get the header emitted in one first chunk
      // overwrite the OS indicator byte with 0xFF
      this[_portable] = false
      data[9] = 255
      return super[_superWrite](data)
    }
  }
  class Gunzip extends Zlib {
    constructor(opts) {
      super(opts, 'Gunzip')
    }
  }

  // raw - no header
  class DeflateRaw extends Zlib {
    constructor(opts) {
      super(opts, 'DeflateRaw')
    }
  }
  class InflateRaw extends Zlib {
    constructor(opts) {
      super(opts, 'InflateRaw')
    }
  }

  // auto-detect header.
  class Unzip extends Zlib {
    constructor(opts) {
      super(opts, 'Unzip')
    }
  }
  class Brotli extends ZlibBase {
    constructor(opts, mode) {
      opts = opts || {}
      opts.flush = opts.flush || constants.BROTLI_OPERATION_PROCESS
      opts.finishFlush = opts.finishFlush || constants.BROTLI_OPERATION_FINISH
      super(opts, mode)
      this[_fullFlushFlag] = constants.BROTLI_OPERATION_FLUSH
    }
  }
  class BrotliCompress extends Brotli {
    constructor(opts) {
      super(opts, 'BrotliCompress')
    }
  }
  class BrotliDecompress extends Brotli {
    constructor(opts) {
      super(opts, 'BrotliDecompress')
    }
  }
  minizlib.Deflate = Deflate
  minizlib.Inflate = Inflate
  minizlib.Gzip = Gzip
  minizlib.Gunzip = Gunzip
  minizlib.DeflateRaw = DeflateRaw
  minizlib.InflateRaw = InflateRaw
  minizlib.Unzip = Unzip
  /* istanbul ignore else */
  if (typeof realZlib.BrotliCompress === 'function') {
    minizlib.BrotliCompress = BrotliCompress
    minizlib.BrotliDecompress = BrotliDecompress
  } else {
    minizlib.BrotliCompress = minizlib.BrotliDecompress = class {
      constructor() {
        throw new Error('Brotli is not supported in this version of Node.js')
      }
    }
  }
  return minizlib
}

let normalizeWindowsPath
let hasRequiredNormalizeWindowsPath
function requireNormalizeWindowsPath() {
  if (hasRequiredNormalizeWindowsPath) {
    return normalizeWindowsPath
  }
  hasRequiredNormalizeWindowsPath = 1
  // on windows, either \ or / are valid directory separators.
  // on unix, \ is a valid character in filenames.
  // so, on windows, and only on windows, we replace all \ chars with /,
  // so that we can use / as our one and only directory separator char.

  const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform
  normalizeWindowsPath =
    platform !== 'win32' ? p => p : p => p && p.replace(/\\/g, '/')
  return normalizeWindowsPath
}

let readEntry
let hasRequiredReadEntry
function requireReadEntry() {
  if (hasRequiredReadEntry) {
    return readEntry
  }
  hasRequiredReadEntry = 1
  const { Minipass } = requireMinipass$3()
  const normPath = requireNormalizeWindowsPath()
  const SLURP = Symbol('slurp')
  readEntry = class ReadEntry extends Minipass {
    constructor(header, ex, gex) {
      super()
      // read entries always start life paused.  this is to avoid the
      // situation where Minipass's auto-ending empty streams results
      // in an entry ending before we're ready for it.
      this.pause()
      this.extended = ex
      this.globalExtended = gex
      this.header = header
      this.startBlockSize = 512 * Math.ceil(header.size / 512)
      this.blockRemain = this.startBlockSize
      this.remain = header.size
      this.type = header.type
      this.meta = false
      this.ignore = false
      switch (this.type) {
        case 'File':
        case 'OldFile':
        case 'Link':
        case 'SymbolicLink':
        case 'CharacterDevice':
        case 'BlockDevice':
        case 'Directory':
        case 'FIFO':
        case 'ContiguousFile':
        case 'GNUDumpDir':
          break
        case 'NextFileHasLongLinkpath':
        case 'NextFileHasLongPath':
        case 'OldGnuLongPath':
        case 'GlobalExtendedHeader':
        case 'ExtendedHeader':
        case 'OldExtendedHeader':
          this.meta = true
          break

        // NOTE: gnutar and bsdtar treat unrecognized types as 'File'
        // it may be worth doing the same, but with a warning.
        default:
          this.ignore = true
      }
      this.path = normPath(header.path)
      this.mode = header.mode
      if (this.mode) {
        this.mode = this.mode & 0o7777
      }
      this.uid = header.uid
      this.gid = header.gid
      this.uname = header.uname
      this.gname = header.gname
      this.size = header.size
      this.mtime = header.mtime
      this.atime = header.atime
      this.ctime = header.ctime
      this.linkpath = normPath(header.linkpath)
      this.uname = header.uname
      this.gname = header.gname
      if (ex) {
        this[SLURP](ex)
      }
      if (gex) {
        this[SLURP](gex, true)
      }
    }
    write(data) {
      const writeLen = data.length
      if (writeLen > this.blockRemain) {
        throw new Error('writing more to entry than is appropriate')
      }
      const r = this.remain
      const br = this.blockRemain
      this.remain = Math.max(0, r - writeLen)
      this.blockRemain = Math.max(0, br - writeLen)
      if (this.ignore) {
        return true
      }
      if (r >= writeLen) {
        return super.write(data)
      }

      // r < writeLen
      return super.write(data.slice(0, r))
    }
    [SLURP](ex, global) {
      for (const k in ex) {
        // we slurp in everything except for the path attribute in
        // a global extended header, because that's weird.
        if (
          ex[k] !== null &&
          ex[k] !== undefined &&
          !(global && k === 'path')
        ) {
          this[k] = k === 'path' || k === 'linkpath' ? normPath(ex[k]) : ex[k]
        }
      }
    }
  }
  return readEntry
}

const types = {}

let hasRequiredTypes
function requireTypes() {
  if (hasRequiredTypes) {
    return types
  }
  hasRequiredTypes = 1
  ;(function (exports) {
    // map types from key to human-friendly name
    exports.name = new Map([
      ['0', 'File'],
      // same as File
      ['', 'OldFile'],
      ['1', 'Link'],
      ['2', 'SymbolicLink'],
      // Devices and FIFOs aren't fully supported
      // they are parsed, but skipped when unpacking
      ['3', 'CharacterDevice'],
      ['4', 'BlockDevice'],
      ['5', 'Directory'],
      ['6', 'FIFO'],
      // same as File
      ['7', 'ContiguousFile'],
      // pax headers
      ['g', 'GlobalExtendedHeader'],
      ['x', 'ExtendedHeader'],
      // vendor-specific stuff
      // skip
      ['A', 'SolarisACL'],
      // like 5, but with data, which should be skipped
      ['D', 'GNUDumpDir'],
      // metadata only, skip
      ['I', 'Inode'],
      // data = link path of next file
      ['K', 'NextFileHasLongLinkpath'],
      // data = path of next file
      ['L', 'NextFileHasLongPath'],
      // skip
      ['M', 'ContinuationFile'],
      // like L
      ['N', 'OldGnuLongPath'],
      // skip
      ['S', 'SparseFile'],
      // skip
      ['V', 'TapeVolumeHeader'],
      // like x
      ['X', 'OldExtendedHeader']
    ])

    // map the other direction
    exports.code = new Map(Array.from(exports.name).map(kv => [kv[1], kv[0]]))
  })(types)
  return types
}

let largeNumbers
let hasRequiredLargeNumbers
function requireLargeNumbers() {
  if (hasRequiredLargeNumbers) {
    return largeNumbers
  }
  hasRequiredLargeNumbers = 1
  // Tar can encode large and negative numbers using a leading byte of
  // 0xff for negative, and 0x80 for positive.

  const encode = (num, buf) => {
    if (!Number.isSafeInteger(num)) {
      // The number is so large that javascript cannot represent it with integer
      // precision.
      throw Error(
        'cannot encode number outside of javascript safe integer range'
      )
    } else if (num < 0) {
      encodeNegative(num, buf)
    } else {
      encodePositive(num, buf)
    }
    return buf
  }
  const encodePositive = (num, buf) => {
    buf[0] = 0x80
    for (let i = buf.length; i > 1; i--) {
      buf[i - 1] = num & 0xff
      num = Math.floor(num / 0x100)
    }
  }
  const encodeNegative = (num, buf) => {
    buf[0] = 0xff
    let flipped = false
    num = num * -1
    for (let i = buf.length; i > 1; i--) {
      const byte = num & 0xff
      num = Math.floor(num / 0x100)
      if (flipped) {
        buf[i - 1] = onesComp(byte)
      } else if (byte === 0) {
        buf[i - 1] = 0
      } else {
        flipped = true
        buf[i - 1] = twosComp(byte)
      }
    }
  }
  const parse = buf => {
    const pre = buf[0]
    const value =
      pre === 0x80
        ? pos(buf.slice(1, buf.length))
        : pre === 0xff
          ? twos(buf)
          : null
    if (value === null) {
      throw Error('invalid base256 encoding')
    }
    if (!Number.isSafeInteger(value)) {
      // The number is so large that javascript cannot represent it with integer
      // precision.
      throw Error('parsed number outside of javascript safe integer range')
    }
    return value
  }
  const twos = buf => {
    const len = buf.length
    let sum = 0
    let flipped = false
    for (let i = len - 1; i > -1; i--) {
      const byte = buf[i]
      let f
      if (flipped) {
        f = onesComp(byte)
      } else if (byte === 0) {
        f = byte
      } else {
        flipped = true
        f = twosComp(byte)
      }
      if (f !== 0) {
        sum -= f * Math.pow(256, len - i - 1)
      }
    }
    return sum
  }
  const pos = buf => {
    const len = buf.length
    let sum = 0
    for (let i = len - 1; i > -1; i--) {
      const byte = buf[i]
      if (byte !== 0) {
        sum += byte * Math.pow(256, len - i - 1)
      }
    }
    return sum
  }
  const onesComp = byte => (0xff ^ byte) & 0xff
  const twosComp = byte => ((0xff ^ byte) + 1) & 0xff
  largeNumbers = {
    encode,
    parse
  }
  return largeNumbers
}

let header
let hasRequiredHeader
function requireHeader() {
  if (hasRequiredHeader) {
    return header
  }
  hasRequiredHeader = 1
  // parse a 512-byte header block to a data object, or vice-versa
  // encode returns `true` if a pax extended header is needed, because
  // the data could not be faithfully encoded in a simple header.
  // (Also, check header.needPax to see if it needs a pax header.)

  const types = requireTypes()
  const pathModule = require$$1$5.posix
  const large = requireLargeNumbers()
  const SLURP = Symbol('slurp')
  const TYPE = Symbol('type')
  class Header {
    constructor(data, off, ex, gex) {
      this.cksumValid = false
      this.needPax = false
      this.nullBlock = false
      this.block = null
      this.path = null
      this.mode = null
      this.uid = null
      this.gid = null
      this.size = null
      this.mtime = null
      this.cksum = null
      this[TYPE] = '0'
      this.linkpath = null
      this.uname = null
      this.gname = null
      this.devmaj = 0
      this.devmin = 0
      this.atime = null
      this.ctime = null
      if (Buffer.isBuffer(data)) {
        this.decode(data, off || 0, ex, gex)
      } else if (data) {
        this.set(data)
      }
    }
    decode(buf, off, ex, gex) {
      if (!off) {
        off = 0
      }
      if (!buf || !(buf.length >= off + 512)) {
        throw new Error('need 512 bytes for header')
      }
      this.path = decString(buf, off, 100)
      this.mode = decNumber(buf, off + 100, 8)
      this.uid = decNumber(buf, off + 108, 8)
      this.gid = decNumber(buf, off + 116, 8)
      this.size = decNumber(buf, off + 124, 12)
      this.mtime = decDate(buf, off + 136, 12)
      this.cksum = decNumber(buf, off + 148, 12)

      // if we have extended or global extended headers, apply them now
      // See https://github.com/npm/node-tar/pull/187
      this[SLURP](ex)
      this[SLURP](gex, true)

      // old tar versions marked dirs as a file with a trailing /
      this[TYPE] = decString(buf, off + 156, 1)
      if (this[TYPE] === '') {
        this[TYPE] = '0'
      }
      if (this[TYPE] === '0' && this.path.slice(-1) === '/') {
        this[TYPE] = '5'
      }

      // tar implementations sometimes incorrectly put the stat(dir).size
      // as the size in the tarball, even though Directory entries are
      // not able to have any body at all.  In the very rare chance that
      // it actually DOES have a body, we weren't going to do anything with
      // it anyway, and it'll just be a warning about an invalid header.
      if (this[TYPE] === '5') {
        this.size = 0
      }
      this.linkpath = decString(buf, off + 157, 100)
      if (buf.slice(off + 257, off + 265).toString() === 'ustar\u000000') {
        this.uname = decString(buf, off + 265, 32)
        this.gname = decString(buf, off + 297, 32)
        this.devmaj = decNumber(buf, off + 329, 8)
        this.devmin = decNumber(buf, off + 337, 8)
        if (buf[off + 475] !== 0) {
          // definitely a prefix, definitely >130 chars.
          const prefix = decString(buf, off + 345, 155)
          this.path = prefix + '/' + this.path
        } else {
          const prefix = decString(buf, off + 345, 130)
          if (prefix) {
            this.path = prefix + '/' + this.path
          }
          this.atime = decDate(buf, off + 476, 12)
          this.ctime = decDate(buf, off + 488, 12)
        }
      }
      let sum = 8 * 0x20
      for (let i = off; i < off + 148; i++) {
        sum += buf[i]
      }
      for (let i = off + 156; i < off + 512; i++) {
        sum += buf[i]
      }
      this.cksumValid = sum === this.cksum
      if (this.cksum === null && sum === 8 * 0x20) {
        this.nullBlock = true
      }
    }
    [SLURP](ex, global) {
      for (const k in ex) {
        // we slurp in everything except for the path attribute in
        // a global extended header, because that's weird.
        if (
          ex[k] !== null &&
          ex[k] !== undefined &&
          !(global && k === 'path')
        ) {
          this[k] = ex[k]
        }
      }
    }
    encode(buf, off) {
      if (!buf) {
        buf = this.block = Buffer.alloc(512)
        off = 0
      }
      if (!off) {
        off = 0
      }
      if (!(buf.length >= off + 512)) {
        throw new Error('need 512 bytes for header')
      }
      const prefixSize = this.ctime || this.atime ? 130 : 155
      const split = splitPrefix(this.path || '', prefixSize)
      const path = split[0]
      const prefix = split[1]
      this.needPax = split[2]
      this.needPax = encString(buf, off, 100, path) || this.needPax
      this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax
      this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax
      this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax
      this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax
      this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax
      buf[off + 156] = this[TYPE].charCodeAt(0)
      this.needPax =
        encString(buf, off + 157, 100, this.linkpath) || this.needPax
      buf.write('ustar\u000000', off + 257, 8)
      this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax
      this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax
      this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax
      this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax
      this.needPax =
        encString(buf, off + 345, prefixSize, prefix) || this.needPax
      if (buf[off + 475] !== 0) {
        this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax
      } else {
        this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax
        this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax
        this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax
      }
      let sum = 8 * 0x20
      for (let i = off; i < off + 148; i++) {
        sum += buf[i]
      }
      for (let i = off + 156; i < off + 512; i++) {
        sum += buf[i]
      }
      this.cksum = sum
      encNumber(buf, off + 148, 8, this.cksum)
      this.cksumValid = true
      return this.needPax
    }
    set(data) {
      for (const i in data) {
        if (data[i] !== null && data[i] !== undefined) {
          this[i] = data[i]
        }
      }
    }
    get type() {
      return types.name.get(this[TYPE]) || this[TYPE]
    }
    get typeKey() {
      return this[TYPE]
    }
    set type(type) {
      if (types.code.has(type)) {
        this[TYPE] = types.code.get(type)
      } else {
        this[TYPE] = type
      }
    }
  }
  const splitPrefix = (p, prefixSize) => {
    const pathSize = 100
    let pp = p
    let prefix = ''
    let ret
    const root = pathModule.parse(p).root || '.'
    if (Buffer.byteLength(pp) < pathSize) {
      ret = [pp, prefix, false]
    } else {
      // first set prefix to the dir, and path to the base
      prefix = pathModule.dirname(pp)
      pp = pathModule.basename(pp)
      do {
        if (
          Buffer.byteLength(pp) <= pathSize &&
          Buffer.byteLength(prefix) <= prefixSize
        ) {
          // both fit!
          ret = [pp, prefix, false]
        } else if (
          Buffer.byteLength(pp) > pathSize &&
          Buffer.byteLength(prefix) <= prefixSize
        ) {
          // prefix fits in prefix, but path doesn't fit in path
          ret = [pp.slice(0, pathSize - 1), prefix, true]
        } else {
          // make path take a bit from prefix
          pp = pathModule.join(pathModule.basename(prefix), pp)
          prefix = pathModule.dirname(prefix)
        }
      } while (prefix !== root && !ret)

      // at this point, found no resolution, just truncate
      if (!ret) {
        ret = [p.slice(0, pathSize - 1), '', true]
      }
    }
    return ret
  }
  const decString = (buf, off, size) =>
    buf
      .slice(off, off + size)
      .toString('utf8')
      .replace(/\0.*/, '')
  const decDate = (buf, off, size) => numToDate(decNumber(buf, off, size))
  const numToDate = num => (num === null ? null : new Date(num * 1000))
  const decNumber = (buf, off, size) =>
    buf[off] & 0x80
      ? large.parse(buf.slice(off, off + size))
      : decSmallNumber(buf, off, size)
  const nanNull = value => (isNaN(value) ? null : value)
  const decSmallNumber = (buf, off, size) =>
    nanNull(
      parseInt(
        buf
          .slice(off, off + size)
          .toString('utf8')
          .replace(/\0.*$/, '')
          .trim(),
        8
      )
    )

  // the maximum encodable as a null-terminated octal, by field size
  const MAXNUM = {
    12: 0o77777777777,
    8: 0o7777777
  }
  const encNumber = (buf, off, size, number) =>
    number === null
      ? false
      : number > MAXNUM[size] || number < 0
        ? (large.encode(number, buf.slice(off, off + size)), true)
        : (encSmallNumber(buf, off, size, number), false)
  const encSmallNumber = (buf, off, size, number) =>
    buf.write(octalString(number, size), off, size, 'ascii')
  const octalString = (number, size) =>
    padOctal(Math.floor(number).toString(8), size)
  const padOctal = (string, size) =>
    (string.length === size - 1
      ? string
      : new Array(size - string.length - 1).join('0') + string + ' ') + '\0'
  const encDate = (buf, off, size, date) =>
    date === null ? false : encNumber(buf, off, size, date.getTime() / 1000)

  // enough to fill the longest string we've got
  const NULLS = new Array(156).join('\0')
  // pad with nulls, return true if it's longer or non-ascii
  const encString = (buf, off, size, string) =>
    string === null
      ? false
      : (buf.write(string + NULLS, off, size, 'utf8'),
        string.length !== Buffer.byteLength(string) || string.length > size)
  header = Header
  return header
}

let pax
let hasRequiredPax
function requirePax() {
  if (hasRequiredPax) {
    return pax
  }
  hasRequiredPax = 1
  const Header = requireHeader()
  const path = require$$1$5
  class Pax {
    constructor(obj, global) {
      this.atime = obj.atime || null
      this.charset = obj.charset || null
      this.comment = obj.comment || null
      this.ctime = obj.ctime || null
      this.gid = obj.gid || null
      this.gname = obj.gname || null
      this.linkpath = obj.linkpath || null
      this.mtime = obj.mtime || null
      this.path = obj.path || null
      this.size = obj.size || null
      this.uid = obj.uid || null
      this.uname = obj.uname || null
      this.dev = obj.dev || null
      this.ino = obj.ino || null
      this.nlink = obj.nlink || null
      this.global = global || false
    }
    encode() {
      const body = this.encodeBody()
      if (body === '') {
        return null
      }
      const bodyLen = Buffer.byteLength(body)
      // round up to 512 bytes
      // add 512 for header
      const bufLen = 512 * Math.ceil(1 + bodyLen / 512)
      const buf = Buffer.allocUnsafe(bufLen)

      // 0-fill the header section, it might not hit every field
      for (let i = 0; i < 512; i++) {
        buf[i] = 0
      }
      new Header({
        // XXX split the path
        // then the path should be PaxHeader + basename, but less than 99,
        // prepend with the dirname
        path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),
        mode: this.mode || 0o644,
        uid: this.uid || null,
        gid: this.gid || null,
        size: bodyLen,
        mtime: this.mtime || null,
        type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',
        linkpath: '',
        uname: this.uname || '',
        gname: this.gname || '',
        devmaj: 0,
        devmin: 0,
        atime: this.atime || null,
        ctime: this.ctime || null
      }).encode(buf)
      buf.write(body, 512, bodyLen, 'utf8')

      // null pad after the body
      for (let i = bodyLen + 512; i < buf.length; i++) {
        buf[i] = 0
      }
      return buf
    }
    encodeBody() {
      return (
        this.encodeField('path') +
        this.encodeField('ctime') +
        this.encodeField('atime') +
        this.encodeField('dev') +
        this.encodeField('ino') +
        this.encodeField('nlink') +
        this.encodeField('charset') +
        this.encodeField('comment') +
        this.encodeField('gid') +
        this.encodeField('gname') +
        this.encodeField('linkpath') +
        this.encodeField('mtime') +
        this.encodeField('size') +
        this.encodeField('uid') +
        this.encodeField('uname')
      )
    }
    encodeField(field) {
      if (this[field] === null || this[field] === undefined) {
        return ''
      }
      const v =
        this[field] instanceof Date ? this[field].getTime() / 1000 : this[field]
      const s =
        ' ' +
        (field === 'dev' || field === 'ino' || field === 'nlink'
          ? 'SCHILY.'
          : '') +
        field +
        '=' +
        v +
        '\n'
      const byteLen = Buffer.byteLength(s)
      // the digits includes the length of the digits in ascii base-10
      // so if it's 9 characters, then adding 1 for the 9 makes it 10
      // which makes it 11 chars.
      let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1
      if (byteLen + digits >= Math.pow(10, digits)) {
        digits += 1
      }
      const len = digits + byteLen
      return len + s
    }
  }
  Pax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g)
  const merge = (a, b) =>
    b ? Object.keys(a).reduce((s, k) => ((s[k] = a[k]), s), b) : a
  const parseKV = string =>
    string
      .replace(/\n$/, '')
      .split('\n')
      .reduce(parseKVLine, Object.create(null))
  const parseKVLine = (set, line) => {
    const n = parseInt(line, 10)

    // XXX Values with \n in them will fail this.
    // Refactor to not be a naive line-by-line parse.
    if (n !== Buffer.byteLength(line) + 1) {
      return set
    }
    line = line.slice((n + ' ').length)
    const kv = line.split('=')
    const k = kv.shift().replace(/^SCHILY\.(dev|ino|nlink)/, '$1')
    if (!k) {
      return set
    }
    const v = kv.join('=')
    set[k] = /^([A-Z]+\.)?([mac]|birth|creation)time$/.test(k)
      ? new Date(v * 1000)
      : /^[0-9]+$/.test(v)
        ? +v
        : v
    return set
  }
  pax = Pax
  return pax
}

let stripTrailingSlashes
let hasRequiredStripTrailingSlashes
function requireStripTrailingSlashes() {
  if (hasRequiredStripTrailingSlashes) {
    return stripTrailingSlashes
  }
  hasRequiredStripTrailingSlashes = 1
  // warning: extremely hot code path.
  // This has been meticulously optimized for use
  // within npm install on large package trees.
  // Do not edit without careful benchmarking.
  stripTrailingSlashes = str => {
    let i = str.length - 1
    let slashesStart = -1
    while (i > -1 && str.charAt(i) === '/') {
      slashesStart = i
      i--
    }
    return slashesStart === -1 ? str : str.slice(0, slashesStart)
  }
  return stripTrailingSlashes
}

let warnMixin
let hasRequiredWarnMixin
function requireWarnMixin() {
  if (hasRequiredWarnMixin) {
    return warnMixin
  }
  hasRequiredWarnMixin = 1
  warnMixin = Base =>
    class extends Base {
      warn(code, message, data = {}) {
        if (this.file) {
          data.file = this.file
        }
        if (this.cwd) {
          data.cwd = this.cwd
        }
        data.code = (message instanceof Error && message.code) || code
        data.tarCode = code
        if (!this.strict && data.recoverable !== false) {
          if (message instanceof Error) {
            data = Object.assign(message, data)
            message = message.message
          }
          this.emit('warn', data.tarCode, message, data)
        } else if (message instanceof Error) {
          this.emit('error', Object.assign(message, data))
        } else {
          this.emit(
            'error',
            Object.assign(new Error(`${code}: ${message}`), data)
          )
        }
      }
    }
  return warnMixin
}

let winchars
let hasRequiredWinchars
function requireWinchars() {
  if (hasRequiredWinchars) {
    return winchars
  }
  hasRequiredWinchars = 1

  // When writing files on Windows, translate the characters to their
  // 0xf000 higher-encoded versions.

  const raw = ['|', '<', '>', '?', ':']
  const win = raw.map(char => String.fromCharCode(0xf000 + char.charCodeAt(0)))
  const toWin = new Map(raw.map((char, i) => [char, win[i]]))
  const toRaw = new Map(win.map((char, i) => [char, raw[i]]))
  winchars = {
    encode: s => raw.reduce((s, c) => s.split(c).join(toWin.get(c)), s),
    decode: s => win.reduce((s, c) => s.split(c).join(toRaw.get(c)), s)
  }
  return winchars
}

let stripAbsolutePath
let hasRequiredStripAbsolutePath
function requireStripAbsolutePath() {
  if (hasRequiredStripAbsolutePath) {
    return stripAbsolutePath
  }
  hasRequiredStripAbsolutePath = 1
  // unix absolute paths are also absolute on win32, so we use this for both
  const { isAbsolute, parse } = require$$1$5.win32

  // returns [root, stripped]
  // Note that windows will think that //x/y/z/a has a "root" of //x/y, and in
  // those cases, we want to sanitize it to x/y/z/a, not z/a, so we strip /
  // explicitly if it's the first character.
  // drive-specific relative paths on Windows get their root stripped off even
  // though they are not absolute, so `c:../foo` becomes ['c:', '../foo']
  stripAbsolutePath = path => {
    let r = ''
    let parsed = parse(path)
    while (isAbsolute(path) || parsed.root) {
      // windows will think that //x/y/z has a "root" of //x/y/
      // but strip the //?/C:/ off of //?/C:/path
      const root =
        path.charAt(0) === '/' && path.slice(0, 4) !== '//?/'
          ? '/'
          : parsed.root
      path = path.slice(root.length)
      r += root
      parsed = parse(path)
    }
    return [r, path]
  }
  return stripAbsolutePath
}

let modeFix
let hasRequiredModeFix
function requireModeFix() {
  if (hasRequiredModeFix) {
    return modeFix
  }
  hasRequiredModeFix = 1
  modeFix = (mode, isDir, portable) => {
    mode &= 0o7777

    // in portable mode, use the minimum reasonable umask
    // if this system creates files with 0o664 by default
    // (as some linux distros do), then we'll write the
    // archive with 0o644 instead.  Also, don't ever create
    // a file that is not readable/writable by the owner.
    if (portable) {
      mode = (mode | 0o600) & -19
    }

    // if dirs are readable, then they should be listable
    if (isDir) {
      if (mode & 0o400) {
        mode |= 0o100
      }
      if (mode & 0o40) {
        mode |= 0o10
      }
      if (mode & 0o4) {
        mode |= 0o1
      }
    }
    return mode
  }
  return modeFix
}

let writeEntry
let hasRequiredWriteEntry
function requireWriteEntry() {
  if (hasRequiredWriteEntry) {
    return writeEntry
  }
  hasRequiredWriteEntry = 1
  const { Minipass } = requireMinipass$3()
  const Pax = requirePax()
  const Header = requireHeader()
  const fs = require$$0$4
  const path = require$$1$5
  const normPath = requireNormalizeWindowsPath()
  const stripSlash = requireStripTrailingSlashes()
  const prefixPath = (path, prefix) => {
    if (!prefix) {
      return normPath(path)
    }
    path = normPath(path).replace(/^\.(\/|$)/, '')
    return stripSlash(prefix) + '/' + path
  }
  const maxReadSize = 16 * 1024 * 1024
  const PROCESS = Symbol('process')
  const FILE = Symbol('file')
  const DIRECTORY = Symbol('directory')
  const SYMLINK = Symbol('symlink')
  const HARDLINK = Symbol('hardlink')
  const HEADER = Symbol('header')
  const READ = Symbol('read')
  const LSTAT = Symbol('lstat')
  const ONLSTAT = Symbol('onlstat')
  const ONREAD = Symbol('onread')
  const ONREADLINK = Symbol('onreadlink')
  const OPENFILE = Symbol('openfile')
  const ONOPENFILE = Symbol('onopenfile')
  const CLOSE = Symbol('close')
  const MODE = Symbol('mode')
  const AWAITDRAIN = Symbol('awaitDrain')
  const ONDRAIN = Symbol('ondrain')
  const PREFIX = Symbol('prefix')
  const HAD_ERROR = Symbol('hadError')
  const warner = requireWarnMixin()
  const winchars = requireWinchars()
  const stripAbsolutePath = requireStripAbsolutePath()
  const modeFix = requireModeFix()
  const WriteEntry = warner(
    class WriteEntry extends Minipass {
      constructor(p, opt) {
        opt = opt || {}
        super(opt)
        if (typeof p !== 'string') {
          throw new TypeError('path is required')
        }
        this.path = normPath(p)
        // suppress atime, ctime, uid, gid, uname, gname
        this.portable = !!opt.portable
        // until node has builtin pwnam functions, this'll have to do
        this.myuid = (process.getuid && process.getuid()) || 0
        this.myuser = process.env.USER || ''
        this.maxReadSize = opt.maxReadSize || maxReadSize
        this.linkCache = opt.linkCache || new Map()
        this.statCache = opt.statCache || new Map()
        this.preservePaths = !!opt.preservePaths
        this.cwd = normPath(opt.cwd || process.cwd())
        this.strict = !!opt.strict
        this.noPax = !!opt.noPax
        this.noMtime = !!opt.noMtime
        this.mtime = opt.mtime || null
        this.prefix = opt.prefix ? normPath(opt.prefix) : null
        this.fd = null
        this.blockLen = null
        this.blockRemain = null
        this.buf = null
        this.offset = null
        this.length = null
        this.pos = null
        this.remain = null
        if (typeof opt.onwarn === 'function') {
          this.on('warn', opt.onwarn)
        }
        let pathWarn = false
        if (!this.preservePaths) {
          const [root, stripped] = stripAbsolutePath(this.path)
          if (root) {
            this.path = stripped
            pathWarn = root
          }
        }
        this.win32 = !!opt.win32 || process.platform === 'win32'
        if (this.win32) {
          // force the \ to / normalization, since we might not *actually*
          // be on windows, but want \ to be considered a path separator.
          this.path = winchars.decode(this.path.replace(/\\/g, '/'))
          p = p.replace(/\\/g, '/')
        }
        this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p))
        if (this.path === '') {
          this.path = './'
        }
        if (pathWarn) {
          this.warn(
            'TAR_ENTRY_INFO',
            `stripping ${pathWarn} from absolute path`,
            {
              entry: this,
              path: pathWarn + this.path
            }
          )
        }
        if (this.statCache.has(this.absolute)) {
          this[ONLSTAT](this.statCache.get(this.absolute))
        } else {
          this[LSTAT]()
        }
      }
      emit(ev, ...data) {
        if (ev === 'error') {
          this[HAD_ERROR] = true
        }
        return super.emit(ev, ...data)
      }
      [LSTAT]() {
        fs.lstat(this.absolute, (er, stat) => {
          if (er) {
            return this.emit('error', er)
          }
          this[ONLSTAT](stat)
        })
      }
      [ONLSTAT](stat) {
        this.statCache.set(this.absolute, stat)
        this.stat = stat
        if (!stat.isFile()) {
          stat.size = 0
        }
        this.type = getType(stat)
        this.emit('stat', stat)
        this[PROCESS]()
      }
      [PROCESS]() {
        switch (this.type) {
          case 'File':
            return this[FILE]()
          case 'Directory':
            return this[DIRECTORY]()
          case 'SymbolicLink':
            return this[SYMLINK]()
          // unsupported types are ignored.
          default:
            return this.end()
        }
      }
      [MODE](mode) {
        return modeFix(mode, this.type === 'Directory', this.portable)
      }
      [PREFIX](path) {
        return prefixPath(path, this.prefix)
      }
      [HEADER]() {
        if (this.type === 'Directory' && this.portable) {
          this.noMtime = true
        }
        this.header = new Header({
          path: this[PREFIX](this.path),
          // only apply the prefix to hard links.
          linkpath:
            this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,
          // only the permissions and setuid/setgid/sticky bitflags
          // not the higher-order bits that specify file type
          mode: this[MODE](this.stat.mode),
          uid: this.portable ? null : this.stat.uid,
          gid: this.portable ? null : this.stat.gid,
          size: this.stat.size,
          mtime: this.noMtime ? null : this.mtime || this.stat.mtime,
          type: this.type,
          uname: this.portable
            ? null
            : this.stat.uid === this.myuid
              ? this.myuser
              : '',
          atime: this.portable ? null : this.stat.atime,
          ctime: this.portable ? null : this.stat.ctime
        })
        if (this.header.encode() && !this.noPax) {
          super.write(
            new Pax({
              atime: this.portable ? null : this.header.atime,
              ctime: this.portable ? null : this.header.ctime,
              gid: this.portable ? null : this.header.gid,
              mtime: this.noMtime ? null : this.mtime || this.header.mtime,
              path: this[PREFIX](this.path),
              linkpath:
                this.type === 'Link'
                  ? this[PREFIX](this.linkpath)
                  : this.linkpath,
              size: this.header.size,
              uid: this.portable ? null : this.header.uid,
              uname: this.portable ? null : this.header.uname,
              dev: this.portable ? null : this.stat.dev,
              ino: this.portable ? null : this.stat.ino,
              nlink: this.portable ? null : this.stat.nlink
            }).encode()
          )
        }
        super.write(this.header.block)
      }
      [DIRECTORY]() {
        if (this.path.slice(-1) !== '/') {
          this.path += '/'
        }
        this.stat.size = 0
        this[HEADER]()
        this.end()
      }
      [SYMLINK]() {
        fs.readlink(this.absolute, (er, linkpath) => {
          if (er) {
            return this.emit('error', er)
          }
          this[ONREADLINK](linkpath)
        })
      }
      [ONREADLINK](linkpath) {
        this.linkpath = normPath(linkpath)
        this[HEADER]()
        this.end()
      }
      [HARDLINK](linkpath) {
        this.type = 'Link'
        this.linkpath = normPath(path.relative(this.cwd, linkpath))
        this.stat.size = 0
        this[HEADER]()
        this.end()
      }
      [FILE]() {
        if (this.stat.nlink > 1) {
          const linkKey = this.stat.dev + ':' + this.stat.ino
          if (this.linkCache.has(linkKey)) {
            const linkpath = this.linkCache.get(linkKey)
            if (linkpath.indexOf(this.cwd) === 0) {
              return this[HARDLINK](linkpath)
            }
          }
          this.linkCache.set(linkKey, this.absolute)
        }
        this[HEADER]()
        if (this.stat.size === 0) {
          return this.end()
        }
        this[OPENFILE]()
      }
      [OPENFILE]() {
        fs.open(this.absolute, 'r', (er, fd) => {
          if (er) {
            return this.emit('error', er)
          }
          this[ONOPENFILE](fd)
        })
      }
      [ONOPENFILE](fd) {
        this.fd = fd
        if (this[HAD_ERROR]) {
          return this[CLOSE]()
        }
        this.blockLen = 512 * Math.ceil(this.stat.size / 512)
        this.blockRemain = this.blockLen
        const bufLen = Math.min(this.blockLen, this.maxReadSize)
        this.buf = Buffer.allocUnsafe(bufLen)
        this.offset = 0
        this.pos = 0
        this.remain = this.stat.size
        this.length = this.buf.length
        this[READ]()
      }
      [READ]() {
        const { fd, buf, offset, length, pos } = this
        fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {
          if (er) {
            // ignoring the error from close(2) is a bad practice, but at
            // this point we already have an error, don't need another one
            return this[CLOSE](() => this.emit('error', er))
          }
          this[ONREAD](bytesRead)
        })
      }
      [CLOSE](cb) {
        fs.close(this.fd, cb)
      }
      [ONREAD](bytesRead) {
        if (bytesRead <= 0 && this.remain > 0) {
          const er = new Error('encountered unexpected EOF')
          er.path = this.absolute
          er.syscall = 'read'
          er.code = 'EOF'
          return this[CLOSE](() => this.emit('error', er))
        }
        if (bytesRead > this.remain) {
          const er = new Error('did not encounter expected EOF')
          er.path = this.absolute
          er.syscall = 'read'
          er.code = 'EOF'
          return this[CLOSE](() => this.emit('error', er))
        }

        // null out the rest of the buffer, if we could fit the block padding
        // at the end of this loop, we've incremented bytesRead and this.remain
        // to be incremented up to the blockRemain level, as if we had expected
        // to get a null-padded file, and read it until the end.  then we will
        // decrement both remain and blockRemain by bytesRead, and know that we
        // reached the expected EOF, without any null buffer to append.
        if (bytesRead === this.remain) {
          for (
            let i = bytesRead;
            i < this.length && bytesRead < this.blockRemain;
            i++
          ) {
            this.buf[i + this.offset] = 0
            bytesRead++
            this.remain++
          }
        }
        const writeBuf =
          this.offset === 0 && bytesRead === this.buf.length
            ? this.buf
            : this.buf.slice(this.offset, this.offset + bytesRead)
        const flushed = this.write(writeBuf)
        if (!flushed) {
          this[AWAITDRAIN](() => this[ONDRAIN]())
        } else {
          this[ONDRAIN]()
        }
      }
      [AWAITDRAIN](cb) {
        this.once('drain', cb)
      }
      write(writeBuf) {
        if (this.blockRemain < writeBuf.length) {
          const er = new Error('writing more data than expected')
          er.path = this.absolute
          return this.emit('error', er)
        }
        this.remain -= writeBuf.length
        this.blockRemain -= writeBuf.length
        this.pos += writeBuf.length
        this.offset += writeBuf.length
        return super.write(writeBuf)
      }
      [ONDRAIN]() {
        if (!this.remain) {
          if (this.blockRemain) {
            super.write(Buffer.alloc(this.blockRemain))
          }
          return this[CLOSE](er => (er ? this.emit('error', er) : this.end()))
        }
        if (this.offset >= this.length) {
          // if we only have a smaller bit left to read, alloc a smaller buffer
          // otherwise, keep it the same length it was before.
          this.buf = Buffer.allocUnsafe(
            Math.min(this.blockRemain, this.buf.length)
          )
          this.offset = 0
        }
        this.length = this.buf.length - this.offset
        this[READ]()
      }
    }
  )
  class WriteEntrySync extends WriteEntry {
    [LSTAT]() {
      this[ONLSTAT](fs.lstatSync(this.absolute))
    }
    [SYMLINK]() {
      this[ONREADLINK](fs.readlinkSync(this.absolute))
    }
    [OPENFILE]() {
      this[ONOPENFILE](fs.openSync(this.absolute, 'r'))
    }
    [READ]() {
      let threw = true
      try {
        const { fd, buf, offset, length, pos } = this
        const bytesRead = fs.readSync(fd, buf, offset, length, pos)
        this[ONREAD](bytesRead)
        threw = false
      } finally {
        // ignoring the error from close(2) is a bad practice, but at
        // this point we already have an error, don't need another one
        if (threw) {
          try {
            this[CLOSE](() => {})
          } catch (er) {}
        }
      }
    }
    [AWAITDRAIN](cb) {
      cb()
    }
    [CLOSE](cb) {
      fs.closeSync(this.fd)
      cb()
    }
  }
  const WriteEntryTar = warner(
    class WriteEntryTar extends Minipass {
      constructor(readEntry, opt) {
        opt = opt || {}
        super(opt)
        this.preservePaths = !!opt.preservePaths
        this.portable = !!opt.portable
        this.strict = !!opt.strict
        this.noPax = !!opt.noPax
        this.noMtime = !!opt.noMtime
        this.readEntry = readEntry
        this.type = readEntry.type
        if (this.type === 'Directory' && this.portable) {
          this.noMtime = true
        }
        this.prefix = opt.prefix || null
        this.path = normPath(readEntry.path)
        this.mode = this[MODE](readEntry.mode)
        this.uid = this.portable ? null : readEntry.uid
        this.gid = this.portable ? null : readEntry.gid
        this.uname = this.portable ? null : readEntry.uname
        this.gname = this.portable ? null : readEntry.gname
        this.size = readEntry.size
        this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime
        this.atime = this.portable ? null : readEntry.atime
        this.ctime = this.portable ? null : readEntry.ctime
        this.linkpath = normPath(readEntry.linkpath)
        if (typeof opt.onwarn === 'function') {
          this.on('warn', opt.onwarn)
        }
        let pathWarn = false
        if (!this.preservePaths) {
          const [root, stripped] = stripAbsolutePath(this.path)
          if (root) {
            this.path = stripped
            pathWarn = root
          }
        }
        this.remain = readEntry.size
        this.blockRemain = readEntry.startBlockSize
        this.header = new Header({
          path: this[PREFIX](this.path),
          linkpath:
            this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,
          // only the permissions and setuid/setgid/sticky bitflags
          // not the higher-order bits that specify file type
          mode: this.mode,
          uid: this.portable ? null : this.uid,
          gid: this.portable ? null : this.gid,
          size: this.size,
          mtime: this.noMtime ? null : this.mtime,
          type: this.type,
          uname: this.portable ? null : this.uname,
          atime: this.portable ? null : this.atime,
          ctime: this.portable ? null : this.ctime
        })
        if (pathWarn) {
          this.warn(
            'TAR_ENTRY_INFO',
            `stripping ${pathWarn} from absolute path`,
            {
              entry: this,
              path: pathWarn + this.path
            }
          )
        }
        if (this.header.encode() && !this.noPax) {
          super.write(
            new Pax({
              atime: this.portable ? null : this.atime,
              ctime: this.portable ? null : this.ctime,
              gid: this.portable ? null : this.gid,
              mtime: this.noMtime ? null : this.mtime,
              path: this[PREFIX](this.path),
              linkpath:
                this.type === 'Link'
                  ? this[PREFIX](this.linkpath)
                  : this.linkpath,
              size: this.size,
              uid: this.portable ? null : this.uid,
              uname: this.portable ? null : this.uname,
              dev: this.portable ? null : this.readEntry.dev,
              ino: this.portable ? null : this.readEntry.ino,
              nlink: this.portable ? null : this.readEntry.nlink
            }).encode()
          )
        }
        super.write(this.header.block)
        readEntry.pipe(this)
      }
      [PREFIX](path) {
        return prefixPath(path, this.prefix)
      }
      [MODE](mode) {
        return modeFix(mode, this.type === 'Directory', this.portable)
      }
      write(data) {
        const writeLen = data.length
        if (writeLen > this.blockRemain) {
          throw new Error('writing more to entry than is appropriate')
        }
        this.blockRemain -= writeLen
        return super.write(data)
      }
      end() {
        if (this.blockRemain) {
          super.write(Buffer.alloc(this.blockRemain))
        }
        return super.end()
      }
    }
  )
  WriteEntry.Sync = WriteEntrySync
  WriteEntry.Tar = WriteEntryTar
  const getType = stat =>
    stat.isFile()
      ? 'File'
      : stat.isDirectory()
        ? 'Directory'
        : stat.isSymbolicLink()
          ? 'SymbolicLink'
          : 'Unsupported'
  writeEntry = WriteEntry
  return writeEntry
}

let iterator
let hasRequiredIterator
function requireIterator() {
  if (hasRequiredIterator) {
    return iterator
  }
  hasRequiredIterator = 1
  iterator = function (Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next) {
        yield walker.value
      }
    }
  }
  return iterator
}

let yallist
let hasRequiredYallist
function requireYallist() {
  if (hasRequiredYallist) {
    return yallist
  }
  hasRequiredYallist = 1
  yallist = Yallist
  Yallist.Node = Node
  Yallist.create = Yallist
  function Yallist(list) {
    let self = this
    if (!(self instanceof Yallist)) {
      self = new Yallist()
    }
    self.tail = null
    self.head = null
    self.length = 0
    if (list && typeof list.forEach === 'function') {
      list.forEach(function (item) {
        self.push(item)
      })
    } else if (arguments.length > 0) {
      for (let i = 0, l = arguments.length; i < l; i++) {
        self.push(arguments[i])
      }
    }
    return self
  }
  Yallist.prototype.removeNode = function (node) {
    if (node.list !== this) {
      throw new Error('removing node which does not belong to this list')
    }
    const next = node.next
    const prev = node.prev
    if (next) {
      next.prev = prev
    }
    if (prev) {
      prev.next = next
    }
    if (node === this.head) {
      this.head = next
    }
    if (node === this.tail) {
      this.tail = prev
    }
    node.list.length--
    node.next = null
    node.prev = null
    node.list = null
    return next
  }
  Yallist.prototype.unshiftNode = function (node) {
    if (node === this.head) {
      return
    }
    if (node.list) {
      node.list.removeNode(node)
    }
    const head = this.head
    node.list = this
    node.next = head
    if (head) {
      head.prev = node
    }
    this.head = node
    if (!this.tail) {
      this.tail = node
    }
    this.length++
  }
  Yallist.prototype.pushNode = function (node) {
    if (node === this.tail) {
      return
    }
    if (node.list) {
      node.list.removeNode(node)
    }
    const tail = this.tail
    node.list = this
    node.prev = tail
    if (tail) {
      tail.next = node
    }
    this.tail = node
    if (!this.head) {
      this.head = node
    }
    this.length++
  }
  Yallist.prototype.push = function () {
    for (let i = 0, l = arguments.length; i < l; i++) {
      push(this, arguments[i])
    }
    return this.length
  }
  Yallist.prototype.unshift = function () {
    for (let i = 0, l = arguments.length; i < l; i++) {
      unshift(this, arguments[i])
    }
    return this.length
  }
  Yallist.prototype.pop = function () {
    if (!this.tail) {
      return undefined
    }
    const res = this.tail.value
    this.tail = this.tail.prev
    if (this.tail) {
      this.tail.next = null
    } else {
      this.head = null
    }
    this.length--
    return res
  }
  Yallist.prototype.shift = function () {
    if (!this.head) {
      return undefined
    }
    const res = this.head.value
    this.head = this.head.next
    if (this.head) {
      this.head.prev = null
    } else {
      this.tail = null
    }
    this.length--
    return res
  }
  Yallist.prototype.forEach = function (fn, thisp) {
    thisp = thisp || this
    for (let walker = this.head, i = 0; walker !== null; i++) {
      fn.call(thisp, walker.value, i, this)
      walker = walker.next
    }
  }
  Yallist.prototype.forEachReverse = function (fn, thisp) {
    thisp = thisp || this
    for (let walker = this.tail, i = this.length - 1; walker !== null; i--) {
      fn.call(thisp, walker.value, i, this)
      walker = walker.prev
    }
  }
  Yallist.prototype.get = function (n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
      // abort out of the list early if we hit a cycle
      walker = walker.next
    }
    if (i === n && walker !== null) {
      return walker.value
    }
  }
  Yallist.prototype.getReverse = function (n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
      // abort out of the list early if we hit a cycle
      walker = walker.prev
    }
    if (i === n && walker !== null) {
      return walker.value
    }
  }
  Yallist.prototype.map = function (fn, thisp) {
    thisp = thisp || this
    const res = new Yallist()
    for (let walker = this.head; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this))
      walker = walker.next
    }
    return res
  }
  Yallist.prototype.mapReverse = function (fn, thisp) {
    thisp = thisp || this
    const res = new Yallist()
    for (let walker = this.tail; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this))
      walker = walker.prev
    }
    return res
  }
  Yallist.prototype.reduce = function (fn, initial) {
    let acc
    let walker = this.head
    if (arguments.length > 1) {
      acc = initial
    } else if (this.head) {
      walker = this.head.next
      acc = this.head.value
    } else {
      throw new TypeError('Reduce of empty list with no initial value')
    }
    for (let i = 0; walker !== null; i++) {
      acc = fn(acc, walker.value, i)
      walker = walker.next
    }
    return acc
  }
  Yallist.prototype.reduceReverse = function (fn, initial) {
    let acc
    let walker = this.tail
    if (arguments.length > 1) {
      acc = initial
    } else if (this.tail) {
      walker = this.tail.prev
      acc = this.tail.value
    } else {
      throw new TypeError('Reduce of empty list with no initial value')
    }
    for (let i = this.length - 1; walker !== null; i--) {
      acc = fn(acc, walker.value, i)
      walker = walker.prev
    }
    return acc
  }
  Yallist.prototype.toArray = function () {
    const arr = new Array(this.length)
    for (let i = 0, walker = this.head; walker !== null; i++) {
      arr[i] = walker.value
      walker = walker.next
    }
    return arr
  }
  Yallist.prototype.toArrayReverse = function () {
    const arr = new Array(this.length)
    for (let i = 0, walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value
      walker = walker.prev
    }
    return arr
  }
  Yallist.prototype.slice = function (from, to) {
    to = to || this.length
    if (to < 0) {
      to += this.length
    }
    from = from || 0
    if (from < 0) {
      from += this.length
    }
    const ret = new Yallist()
    if (to < from || to < 0) {
      return ret
    }
    if (from < 0) {
      from = 0
    }
    if (to > this.length) {
      to = this.length
    }
    for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next
    }
    for (; walker !== null && i < to; i++, walker = walker.next) {
      ret.push(walker.value)
    }
    return ret
  }
  Yallist.prototype.sliceReverse = function (from, to) {
    to = to || this.length
    if (to < 0) {
      to += this.length
    }
    from = from || 0
    if (from < 0) {
      from += this.length
    }
    const ret = new Yallist()
    if (to < from || to < 0) {
      return ret
    }
    if (from < 0) {
      from = 0
    }
    if (to > this.length) {
      to = this.length
    }
    for (
      var i = this.length, walker = this.tail;
      walker !== null && i > to;
      i--
    ) {
      walker = walker.prev
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value)
    }
    return ret
  }
  Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
    if (start > this.length) {
      start = this.length - 1
    }
    if (start < 0) {
      start = this.length + start
    }
    for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
      walker = walker.next
    }
    const ret = []
    for (var i = 0; walker && i < deleteCount; i++) {
      ret.push(walker.value)
      walker = this.removeNode(walker)
    }
    if (walker === null) {
      walker = this.tail
    }
    if (walker !== this.head && walker !== this.tail) {
      walker = walker.prev
    }
    for (var i = 0; i < nodes.length; i++) {
      walker = insert(this, walker, nodes[i])
    }
    return ret
  }
  Yallist.prototype.reverse = function () {
    const head = this.head
    const tail = this.tail
    for (let walker = head; walker !== null; walker = walker.prev) {
      const p = walker.prev
      walker.prev = walker.next
      walker.next = p
    }
    this.head = tail
    this.tail = head
    return this
  }
  function insert(self, node, value) {
    const inserted =
      node === self.head
        ? new Node(value, null, node, self)
        : new Node(value, node, node.next, self)
    if (inserted.next === null) {
      self.tail = inserted
    }
    if (inserted.prev === null) {
      self.head = inserted
    }
    self.length++
    return inserted
  }
  function push(self, item) {
    self.tail = new Node(item, self.tail, null, self)
    if (!self.head) {
      self.head = self.tail
    }
    self.length++
  }
  function unshift(self, item) {
    self.head = new Node(item, null, self.head, self)
    if (!self.tail) {
      self.tail = self.head
    }
    self.length++
  }
  function Node(value, prev, next, list) {
    if (!(this instanceof Node)) {
      return new Node(value, prev, next, list)
    }
    this.list = list
    this.value = value
    if (prev) {
      prev.next = this
      this.prev = prev
    } else {
      this.prev = null
    }
    if (next) {
      next.prev = this
      this.next = next
    } else {
      this.next = null
    }
  }
  try {
    // add if support for Symbol.iterator is present
    requireIterator()(Yallist)
  } catch (er) {}
  return yallist
}

let pack
let hasRequiredPack
function requirePack() {
  if (hasRequiredPack) {
    return pack
  }
  hasRequiredPack = 1

  // A readable tar stream creator
  // Technically, this is a transform stream that you write paths into,
  // and tar format comes out of.
  // The `add()` method is like `write()` but returns this,
  // and end() return `this` as well, so you can
  // do `new Pack(opt).add('files').add('dir').end().pipe(output)
  // You could also do something like:
  // streamOfPaths().pipe(new Pack()).pipe(new fs.WriteStream('out.tar'))

  class PackJob {
    constructor(path, absolute) {
      this.path = path || './'
      this.absolute = absolute
      this.entry = null
      this.stat = null
      this.readdir = null
      this.pending = false
      this.ignore = false
      this.piped = false
    }
  }
  const { Minipass } = requireMinipass$3()
  const zlib = requireMinizlib()
  const ReadEntry = requireReadEntry()
  const WriteEntry = requireWriteEntry()
  const WriteEntrySync = WriteEntry.Sync
  const WriteEntryTar = WriteEntry.Tar
  const Yallist = requireYallist()
  const EOF = Buffer.alloc(1024)
  const ONSTAT = Symbol('onStat')
  const ENDED = Symbol('ended')
  const QUEUE = Symbol('queue')
  const CURRENT = Symbol('current')
  const PROCESS = Symbol('process')
  const PROCESSING = Symbol('processing')
  const PROCESSJOB = Symbol('processJob')
  const JOBS = Symbol('jobs')
  const JOBDONE = Symbol('jobDone')
  const ADDFSENTRY = Symbol('addFSEntry')
  const ADDTARENTRY = Symbol('addTarEntry')
  const STAT = Symbol('stat')
  const READDIR = Symbol('readdir')
  const ONREADDIR = Symbol('onreaddir')
  const PIPE = Symbol('pipe')
  const ENTRY = Symbol('entry')
  const ENTRYOPT = Symbol('entryOpt')
  const WRITEENTRYCLASS = Symbol('writeEntryClass')
  const WRITE = Symbol('write')
  const ONDRAIN = Symbol('ondrain')
  const fs = require$$0$4
  const path = require$$1$5
  const warner = requireWarnMixin()
  const normPath = requireNormalizeWindowsPath()
  const Pack = warner(
    class Pack extends Minipass {
      constructor(opt) {
        super(opt)
        opt = opt || Object.create(null)
        this.opt = opt
        this.file = opt.file || ''
        this.cwd = opt.cwd || process.cwd()
        this.maxReadSize = opt.maxReadSize
        this.preservePaths = !!opt.preservePaths
        this.strict = !!opt.strict
        this.noPax = !!opt.noPax
        this.prefix = normPath(opt.prefix || '')
        this.linkCache = opt.linkCache || new Map()
        this.statCache = opt.statCache || new Map()
        this.readdirCache = opt.readdirCache || new Map()
        this[WRITEENTRYCLASS] = WriteEntry
        if (typeof opt.onwarn === 'function') {
          this.on('warn', opt.onwarn)
        }
        this.portable = !!opt.portable
        this.zip = null
        if (opt.gzip || opt.brotli) {
          if (opt.gzip && opt.brotli) {
            throw new TypeError('gzip and brotli are mutually exclusive')
          }
          if (opt.gzip) {
            if (typeof opt.gzip !== 'object') {
              opt.gzip = {}
            }
            if (this.portable) {
              opt.gzip.portable = true
            }
            this.zip = new zlib.Gzip(opt.gzip)
          }
          if (opt.brotli) {
            if (typeof opt.brotli !== 'object') {
              opt.brotli = {}
            }
            this.zip = new zlib.BrotliCompress(opt.brotli)
          }
          this.zip.on('data', chunk => super.write(chunk))
          this.zip.on('end', _ => super.end())
          this.zip.on('drain', _ => this[ONDRAIN]())
          this.on('resume', _ => this.zip.resume())
        } else {
          this.on('drain', this[ONDRAIN])
        }
        this.noDirRecurse = !!opt.noDirRecurse
        this.follow = !!opt.follow
        this.noMtime = !!opt.noMtime
        this.mtime = opt.mtime || null
        this.filter = typeof opt.filter === 'function' ? opt.filter : _ => true
        this[QUEUE] = new Yallist()
        this[JOBS] = 0
        this.jobs = +opt.jobs || 4
        this[PROCESSING] = false
        this[ENDED] = false
      }
      [WRITE](chunk) {
        return super.write(chunk)
      }
      add(path) {
        this.write(path)
        return this
      }
      end(path) {
        if (path) {
          this.write(path)
        }
        this[ENDED] = true
        this[PROCESS]()
        return this
      }
      write(path) {
        if (this[ENDED]) {
          throw new Error('write after end')
        }
        if (path instanceof ReadEntry) {
          this[ADDTARENTRY](path)
        } else {
          this[ADDFSENTRY](path)
        }
        return this.flowing
      }
      [ADDTARENTRY](p) {
        const absolute = normPath(path.resolve(this.cwd, p.path))
        // in this case, we don't have to wait for the stat
        if (!this.filter(p.path, p)) {
          p.resume()
        } else {
          const job = new PackJob(p.path, absolute, false)
          job.entry = new WriteEntryTar(p, this[ENTRYOPT](job))
          job.entry.on('end', _ => this[JOBDONE](job))
          this[JOBS] += 1
          this[QUEUE].push(job)
        }
        this[PROCESS]()
      }
      [ADDFSENTRY](p) {
        const absolute = normPath(path.resolve(this.cwd, p))
        this[QUEUE].push(new PackJob(p, absolute))
        this[PROCESS]()
      }
      [STAT](job) {
        job.pending = true
        this[JOBS] += 1
        const stat = this.follow ? 'stat' : 'lstat'
        fs[stat](job.absolute, (er, stat) => {
          job.pending = false
          this[JOBS] -= 1
          if (er) {
            this.emit('error', er)
          } else {
            this[ONSTAT](job, stat)
          }
        })
      }
      [ONSTAT](job, stat) {
        this.statCache.set(job.absolute, stat)
        job.stat = stat

        // now we have the stat, we can filter it.
        if (!this.filter(job.path, stat)) {
          job.ignore = true
        }
        this[PROCESS]()
      }
      [READDIR](job) {
        job.pending = true
        this[JOBS] += 1
        fs.readdir(job.absolute, (er, entries) => {
          job.pending = false
          this[JOBS] -= 1
          if (er) {
            return this.emit('error', er)
          }
          this[ONREADDIR](job, entries)
        })
      }
      [ONREADDIR](job, entries) {
        this.readdirCache.set(job.absolute, entries)
        job.readdir = entries
        this[PROCESS]()
      }
      [PROCESS]() {
        if (this[PROCESSING]) {
          return
        }
        this[PROCESSING] = true
        for (
          let w = this[QUEUE].head;
          w !== null && this[JOBS] < this.jobs;
          w = w.next
        ) {
          this[PROCESSJOB](w.value)
          if (w.value.ignore) {
            const p = w.next
            this[QUEUE].removeNode(w)
            w.next = p
          }
        }
        this[PROCESSING] = false
        if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {
          if (this.zip) {
            this.zip.end(EOF)
          } else {
            super.write(EOF)
            super.end()
          }
        }
      }
      get [CURRENT]() {
        return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value
      }
      [JOBDONE](job) {
        this[QUEUE].shift()
        this[JOBS] -= 1
        this[PROCESS]()
      }
      [PROCESSJOB](job) {
        if (job.pending) {
          return
        }
        if (job.entry) {
          if (job === this[CURRENT] && !job.piped) {
            this[PIPE](job)
          }
          return
        }
        if (!job.stat) {
          if (this.statCache.has(job.absolute)) {
            this[ONSTAT](job, this.statCache.get(job.absolute))
          } else {
            this[STAT](job)
          }
        }
        if (!job.stat) {
          return
        }

        // filtered out!
        if (job.ignore) {
          return
        }
        if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {
          if (this.readdirCache.has(job.absolute)) {
            this[ONREADDIR](job, this.readdirCache.get(job.absolute))
          } else {
            this[READDIR](job)
          }
          if (!job.readdir) {
            return
          }
        }

        // we know it doesn't have an entry, because that got checked above
        job.entry = this[ENTRY](job)
        if (!job.entry) {
          job.ignore = true
          return
        }
        if (job === this[CURRENT] && !job.piped) {
          this[PIPE](job)
        }
      }
      [ENTRYOPT](job) {
        return {
          onwarn: (code, msg, data) => this.warn(code, msg, data),
          noPax: this.noPax,
          cwd: this.cwd,
          absolute: job.absolute,
          preservePaths: this.preservePaths,
          maxReadSize: this.maxReadSize,
          strict: this.strict,
          portable: this.portable,
          linkCache: this.linkCache,
          statCache: this.statCache,
          noMtime: this.noMtime,
          mtime: this.mtime,
          prefix: this.prefix
        }
      }
      [ENTRY](job) {
        this[JOBS] += 1
        try {
          return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job))
            .on('end', () => this[JOBDONE](job))
            .on('error', er => this.emit('error', er))
        } catch (er) {
          this.emit('error', er)
        }
      }
      [ONDRAIN]() {
        if (this[CURRENT] && this[CURRENT].entry) {
          this[CURRENT].entry.resume()
        }
      }

      // like .pipe() but using super, because our write() is special
      [PIPE](job) {
        job.piped = true
        if (job.readdir) {
          job.readdir.forEach(entry => {
            const p = job.path
            const base = p === './' ? '' : p.replace(/\/*$/, '/')
            this[ADDFSENTRY](base + entry)
          })
        }
        const source = job.entry
        const zip = this.zip
        if (zip) {
          source.on('data', chunk => {
            if (!zip.write(chunk)) {
              source.pause()
            }
          })
        } else {
          source.on('data', chunk => {
            if (!super.write(chunk)) {
              source.pause()
            }
          })
        }
      }
      pause() {
        if (this.zip) {
          this.zip.pause()
        }
        return super.pause()
      }
    }
  )
  class PackSync extends Pack {
    constructor(opt) {
      super(opt)
      this[WRITEENTRYCLASS] = WriteEntrySync
    }

    // pause/resume are no-ops in sync streams.
    pause() {}
    resume() {}
    [STAT](job) {
      const stat = this.follow ? 'statSync' : 'lstatSync'
      this[ONSTAT](job, fs[stat](job.absolute))
    }
    [READDIR](job, stat) {
      this[ONREADDIR](job, fs.readdirSync(job.absolute))
    }

    // gotta get it all in this tick
    [PIPE](job) {
      const source = job.entry
      const zip = this.zip
      if (job.readdir) {
        job.readdir.forEach(entry => {
          const p = job.path
          const base = p === './' ? '' : p.replace(/\/*$/, '/')
          this[ADDFSENTRY](base + entry)
        })
      }
      if (zip) {
        source.on('data', chunk => {
          zip.write(chunk)
        })
      } else {
        source.on('data', chunk => {
          super[WRITE](chunk)
        })
      }
    }
  }
  Pack.Sync = PackSync
  pack = Pack
  return pack
}

const fsMinipass = {}

let minipass$1
let hasRequiredMinipass$1
function requireMinipass$1() {
  if (hasRequiredMinipass$1) {
    return minipass$1
  }
  hasRequiredMinipass$1 = 1
  const proc =
    typeof process === 'object' && process
      ? process
      : {
          stdout: null,
          stderr: null
        }
  const EE = require$$0$c
  const Stream = require$$1$8
  const SD = require$$2$4.StringDecoder
  const EOF = Symbol('EOF')
  const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
  const EMITTED_END = Symbol('emittedEnd')
  const EMITTING_END = Symbol('emittingEnd')
  const EMITTED_ERROR = Symbol('emittedError')
  const CLOSED = Symbol('closed')
  const READ = Symbol('read')
  const FLUSH = Symbol('flush')
  const FLUSHCHUNK = Symbol('flushChunk')
  const ENCODING = Symbol('encoding')
  const DECODER = Symbol('decoder')
  const FLOWING = Symbol('flowing')
  const PAUSED = Symbol('paused')
  const RESUME = Symbol('resume')
  const BUFFERLENGTH = Symbol('bufferLength')
  const BUFFERPUSH = Symbol('bufferPush')
  const BUFFERSHIFT = Symbol('bufferShift')
  const OBJECTMODE = Symbol('objectMode')
  const DESTROYED = Symbol('destroyed')
  const EMITDATA = Symbol('emitData')
  const EMITEND = Symbol('emitEnd')
  const EMITEND2 = Symbol('emitEnd2')
  const ASYNC = Symbol('async')
  const defer = fn => Promise.resolve().then(fn)

  // TODO remove when Node v8 support drops
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'
  const ASYNCITERATOR =
    (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')
  const ITERATOR =
    (doIter && Symbol.iterator) || Symbol('iterator not implemented')

  // events that mean 'the stream is over'
  // these are treated specially, and re-emitted
  // if they are listened for after emitting.
  const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
  const isArrayBuffer = b =>
    b instanceof ArrayBuffer ||
    (typeof b === 'object' &&
      b.constructor &&
      b.constructor.name === 'ArrayBuffer' &&
      b.byteLength >= 0)
  const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
  class Pipe {
    constructor(src, dest, opts) {
      this.src = src
      this.dest = dest
      this.opts = opts
      this.ondrain = () => src[RESUME]()
      dest.on('drain', this.ondrain)
    }
    unpipe() {
      this.dest.removeListener('drain', this.ondrain)
    }
    // istanbul ignore next - only here for the prototype
    proxyErrors() {}
    end() {
      this.unpipe()
      if (this.opts.end) {
        this.dest.end()
      }
    }
  }
  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener('error', this.proxyErrors)
      super.unpipe()
    }
    constructor(src, dest, opts) {
      super(src, dest, opts)
      this.proxyErrors = er => dest.emit('error', er)
      src.on('error', this.proxyErrors)
    }
  }
  minipass$1 = class Minipass extends Stream {
    constructor(options) {
      super()
      this[FLOWING] = false
      // whether we're explicitly paused
      this[PAUSED] = false
      this.pipes = []
      this.buffer = []
      this[OBJECTMODE] = (options && options.objectMode) || false
      if (this[OBJECTMODE]) {
        this[ENCODING] = null
      } else {
        this[ENCODING] = (options && options.encoding) || null
      }
      if (this[ENCODING] === 'buffer') {
        this[ENCODING] = null
      }
      this[ASYNC] = (options && !!options.async) || false
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null
      this[EOF] = false
      this[EMITTED_END] = false
      this[EMITTING_END] = false
      this[CLOSED] = false
      this[EMITTED_ERROR] = null
      this.writable = true
      this.readable = true
      this[BUFFERLENGTH] = 0
      this[DESTROYED] = false
    }
    get bufferLength() {
      return this[BUFFERLENGTH]
    }
    get encoding() {
      return this[ENCODING]
    }
    set encoding(enc) {
      if (this[OBJECTMODE]) {
        throw new Error('cannot set encoding in objectMode')
      }
      if (
        this[ENCODING] &&
        enc !== this[ENCODING] &&
        ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])
      ) {
        throw new Error('cannot change encoding')
      }
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null
        if (this.buffer.length) {
          this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))
        }
      }
      this[ENCODING] = enc
    }
    setEncoding(enc) {
      this.encoding = enc
    }
    get objectMode() {
      return this[OBJECTMODE]
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om
    }
    get ['async']() {
      return this[ASYNC]
    }
    set ['async'](a) {
      this[ASYNC] = this[ASYNC] || !!a
    }
    write(chunk, encoding, cb) {
      if (this[EOF]) {
        throw new Error('write after end')
      }
      if (this[DESTROYED]) {
        this.emit(
          'error',
          Object.assign(
            new Error('Cannot call write after a stream was destroyed'),
            {
              code: 'ERR_STREAM_DESTROYED'
            }
          )
        )
        return true
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const fn = this[ASYNC] ? defer : f => f()

      // convert array buffers and typed array views into buffers
      // at some point in the future, we may want to do the opposite!
      // leave strings and buffers as-is
      // anything else switches us into object mode
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)
        } else if (isArrayBuffer(chunk)) {
          chunk = Buffer.from(chunk)
        } else if (typeof chunk !== 'string') {
          // use the setter so we throw if we have encoding set
          this.objectMode = true
        }
      }

      // handle object mode up front, since it's simpler
      // this yields better performance, fewer checks later.
      if (this[OBJECTMODE]) {
        /* istanbul ignore if - maybe impossible? */
        if (this.flowing && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this.flowing) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // at this point the chunk is a buffer or string
      // don't buffer it up or send it to the decoder
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // fast-path writing strings of same encoding to a stream with
      // an empty buffer, skipping the buffer/decoder dance
      if (
        typeof chunk === 'string' &&
        // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)
      ) {
        chunk = Buffer.from(chunk, encoding)
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk)
      }

      // Note: flushing CAN potentially switch us into not-flowing mode
      if (this.flowing && this[BUFFERLENGTH] !== 0) {
        this[FLUSH](true)
      }
      if (this.flowing) {
        this.emit('data', chunk)
      } else {
        this[BUFFERPUSH](chunk)
      }
      if (this[BUFFERLENGTH] !== 0) {
        this.emit('readable')
      }
      if (cb) {
        fn(cb)
      }
      return this.flowing
    }
    read(n) {
      if (this[DESTROYED]) {
        return null
      }
      if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]()
        return null
      }
      if (this[OBJECTMODE]) {
        n = null
      }
      if (this.buffer.length > 1 && !this[OBJECTMODE]) {
        if (this.encoding) {
          this.buffer = [this.buffer.join('')]
        } else {
          this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]
        }
      }
      const ret = this[READ](n || null, this.buffer[0])
      this[MAYBE_EMIT_END]()
      return ret
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null) {
        this[BUFFERSHIFT]()
      } else {
        this.buffer[0] = chunk.slice(n)
        chunk = chunk.slice(0, n)
        this[BUFFERLENGTH] -= n
      }
      this.emit('data', chunk)
      if (!this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
      return chunk
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      if (cb) {
        this.once('end', cb)
      }
      this[EOF] = true
      this.writable = false

      // if we haven't written anything, then go ahead and emit,
      // even if we're not reading.
      // we'll re-emit if a new 'end' listener is added anyway.
      // This makes MP more suitable to write-only use cases.
      if (this.flowing || !this[PAUSED]) {
        this[MAYBE_EMIT_END]()
      }
      return this
    }

    // don't let the internal resume be overwritten
    [RESUME]() {
      if (this[DESTROYED]) {
        return
      }
      this[PAUSED] = false
      this[FLOWING] = true
      this.emit('resume')
      if (this.buffer.length) {
        this[FLUSH]()
      } else if (this[EOF]) {
        this[MAYBE_EMIT_END]()
      } else {
        this.emit('drain')
      }
    }
    resume() {
      return this[RESUME]()
    }
    pause() {
      this[FLOWING] = false
      this[PAUSED] = true
    }
    get destroyed() {
      return this[DESTROYED]
    }
    get flowing() {
      return this[FLOWING]
    }
    get paused() {
      return this[PAUSED]
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] += 1
      } else {
        this[BUFFERLENGTH] += chunk.length
      }
      this.buffer.push(chunk)
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this.buffer[0].length
        }
      }
      return this.buffer.shift()
    }
    [FLUSH](noDrain) {
      do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))
      if (!noDrain && !this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit('data', chunk), this.flowing) : false
    }
    pipe(dest, opts) {
      if (this[DESTROYED]) {
        return
      }
      const ended = this[EMITTED_END]
      opts = opts || {}
      if (dest === proc.stdout || dest === proc.stderr) {
        opts.end = false
      } else {
        opts.end = opts.end !== false
      }
      opts.proxyErrors = !!opts.proxyErrors

      // piping an ended stream ends immediately
      if (ended) {
        if (opts.end) {
          dest.end()
        }
      } else {
        this.pipes.push(
          !opts.proxyErrors
            ? new Pipe(this, dest, opts)
            : new PipeProxyErrors(this, dest, opts)
        )
        if (this[ASYNC]) {
          defer(() => this[RESUME]())
        } else {
          this[RESUME]()
        }
      }
      return dest
    }
    unpipe(dest) {
      const p = this.pipes.find(p => p.dest === dest)
      if (p) {
        this.pipes.splice(this.pipes.indexOf(p), 1)
        p.unpipe()
      }
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'data' && !this.pipes.length && !this.flowing) {
        this[RESUME]()
      } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
        super.emit('readable')
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev)
        this.removeAllListeners(ev)
      } else if (ev === 'error' && this[EMITTED_ERROR]) {
        if (this[ASYNC]) {
          defer(() => fn.call(this, this[EMITTED_ERROR]))
        } else {
          fn.call(this, this[EMITTED_ERROR])
        }
      }
      return ret
    }
    get emittedEnd() {
      return this[EMITTED_END]
    }
    [MAYBE_EMIT_END]() {
      if (
        !this[EMITTING_END] &&
        !this[EMITTED_END] &&
        !this[DESTROYED] &&
        this.buffer.length === 0 &&
        this[EOF]
      ) {
        this[EMITTING_END] = true
        this.emit('end')
        this.emit('prefinish')
        this.emit('finish')
        if (this[CLOSED]) {
          this.emit('close')
        }
        this[EMITTING_END] = false
      }
    }
    emit(ev, data, ...extra) {
      // error and close are only events allowed after calling destroy()
      if (
        ev !== 'error' &&
        ev !== 'close' &&
        ev !== DESTROYED &&
        this[DESTROYED]
      ) {
        return
      } else if (ev === 'data') {
        return !data
          ? false
          : this[ASYNC]
            ? defer(() => this[EMITDATA](data))
            : this[EMITDATA](data)
      } else if (ev === 'end') {
        return this[EMITEND]()
      } else if (ev === 'close') {
        this[CLOSED] = true
        // don't emit close before 'end' and 'finish'
        if (!this[EMITTED_END] && !this[DESTROYED]) {
          return
        }
        const ret = super.emit('close')
        this.removeAllListeners('close')
        return ret
      } else if (ev === 'error') {
        this[EMITTED_ERROR] = data
        const ret = super.emit('error', data)
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'resume') {
        const ret = super.emit('resume')
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'finish' || ev === 'prefinish') {
        const ret = super.emit(ev)
        this.removeAllListeners(ev)
        return ret
      }

      // Some other unknown event
      const ret = super.emit(ev, data, ...extra)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITDATA](data) {
      for (const p of this.pipes) {
        if (p.dest.write(data) === false) {
          this.pause()
        }
      }
      const ret = super.emit('data', data)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITEND]() {
      if (this[EMITTED_END]) {
        return
      }
      this[EMITTED_END] = true
      this.readable = false
      if (this[ASYNC]) {
        defer(() => this[EMITEND2]())
      } else {
        this[EMITEND2]()
      }
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end()
        if (data) {
          for (const p of this.pipes) {
            p.dest.write(data)
          }
          super.emit('data', data)
        }
      }
      for (const p of this.pipes) {
        p.end()
      }
      const ret = super.emit('end')
      this.removeAllListeners('end')
      return ret
    }

    // const all = await stream.collect()
    collect() {
      const buf = []
      if (!this[OBJECTMODE]) {
        buf.dataLength = 0
      }
      // set the promise first, in case an error is raised
      // by triggering the flow here.
      const p = this.promise()
      this.on('data', c => {
        buf.push(c)
        if (!this[OBJECTMODE]) {
          buf.dataLength += c.length
        }
      })
      return p.then(() => buf)
    }

    // const data = await stream.concat()
    concat() {
      return this[OBJECTMODE]
        ? Promise.reject(new Error('cannot concat in objectMode'))
        : this.collect().then(buf =>
            this[OBJECTMODE]
              ? Promise.reject(new Error('cannot concat in objectMode'))
              : this[ENCODING]
                ? buf.join('')
                : Buffer.concat(buf, buf.dataLength)
          )
    }

    // stream.promise().then(() => done, er => emitted error)
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error('stream destroyed')))
        this.on('error', er => reject(er))
        this.on('end', () => resolve())
      })
    }

    // for await (let chunk of stream)
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read()
        if (res !== null) {
          return Promise.resolve({
            done: false,
            value: res
          })
        }
        if (this[EOF]) {
          return Promise.resolve({
            done: true
          })
        }
        let resolve = null
        let reject = null
        const onerr = er => {
          this.removeListener('data', ondata)
          this.removeListener('end', onend)
          reject(er)
        }
        const ondata = value => {
          this.removeListener('error', onerr)
          this.removeListener('end', onend)
          this.pause()
          resolve({
            value: value,
            done: !!this[EOF]
          })
        }
        const onend = () => {
          this.removeListener('error', onerr)
          this.removeListener('data', ondata)
          resolve({
            done: true
          })
        }
        const ondestroy = () => onerr(new Error('stream destroyed'))
        return new Promise((res, rej) => {
          reject = rej
          resolve = res
          this.once(DESTROYED, ondestroy)
          this.once('error', onerr)
          this.once('end', onend)
          this.once('data', ondata)
        })
      }
      return {
        next
      }
    }

    // for (let chunk of stream)
    [ITERATOR]() {
      const next = () => {
        const value = this.read()
        const done = value === null
        return {
          value,
          done
        }
      }
      return {
        next
      }
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er) {
          this.emit('error', er)
        } else {
          this.emit(DESTROYED)
        }
        return this
      }
      this[DESTROYED] = true

      // throw away all buffered data, it's never coming out
      this.buffer.length = 0
      this[BUFFERLENGTH] = 0
      if (typeof this.close === 'function' && !this[CLOSED]) {
        this.close()
      }
      if (er) {
        this.emit('error', er)
      }
      // if no error to emit, still reject pending promises
      else {
        this.emit(DESTROYED)
      }
      return this
    }
    static isStream(s) {
      return (
        !!s &&
        (s instanceof Minipass ||
          s instanceof Stream ||
          (s instanceof EE &&
            (typeof s.pipe === 'function' ||
              // readable
              (typeof s.write === 'function' && typeof s.end === 'function')))) // writable
      )
    }
  }
  return minipass$1
}

let hasRequiredFsMinipass
function requireFsMinipass() {
  if (hasRequiredFsMinipass) {
    return fsMinipass
  }
  hasRequiredFsMinipass = 1
  const MiniPass = requireMinipass$1()
  const EE = require$$0$c.EventEmitter
  const fs = require$$0$4
  let writev = fs.writev
  /* istanbul ignore next */
  if (!writev) {
    // This entire block can be removed if support for earlier than Node.js
    // 12.9.0 is not needed.
    const binding = process.binding('fs')
    const FSReqWrap = binding.FSReqWrap || binding.FSReqCallback
    writev = (fd, iovec, pos, cb) => {
      const done = (er, bw) => cb(er, bw, iovec)
      const req = new FSReqWrap()
      req.oncomplete = done
      binding.writeBuffers(fd, iovec, pos, req)
    }
  }
  const _autoClose = Symbol('_autoClose')
  const _close = Symbol('_close')
  const _ended = Symbol('_ended')
  const _fd = Symbol('_fd')
  const _finished = Symbol('_finished')
  const _flags = Symbol('_flags')
  const _flush = Symbol('_flush')
  const _handleChunk = Symbol('_handleChunk')
  const _makeBuf = Symbol('_makeBuf')
  const _mode = Symbol('_mode')
  const _needDrain = Symbol('_needDrain')
  const _onerror = Symbol('_onerror')
  const _onopen = Symbol('_onopen')
  const _onread = Symbol('_onread')
  const _onwrite = Symbol('_onwrite')
  const _open = Symbol('_open')
  const _path = Symbol('_path')
  const _pos = Symbol('_pos')
  const _queue = Symbol('_queue')
  const _read = Symbol('_read')
  const _readSize = Symbol('_readSize')
  const _reading = Symbol('_reading')
  const _remain = Symbol('_remain')
  const _size = Symbol('_size')
  const _write = Symbol('_write')
  const _writing = Symbol('_writing')
  const _defaultFlag = Symbol('_defaultFlag')
  const _errored = Symbol('_errored')
  class ReadStream extends MiniPass {
    constructor(path, opt) {
      opt = opt || {}
      super(opt)
      this.readable = true
      this.writable = false
      if (typeof path !== 'string') {
        throw new TypeError('path must be a string')
      }
      this[_errored] = false
      this[_fd] = typeof opt.fd === 'number' ? opt.fd : null
      this[_path] = path
      this[_readSize] = opt.readSize || 16 * 1024 * 1024
      this[_reading] = false
      this[_size] = typeof opt.size === 'number' ? opt.size : Infinity
      this[_remain] = this[_size]
      this[_autoClose] =
        typeof opt.autoClose === 'boolean' ? opt.autoClose : true
      if (typeof this[_fd] === 'number') {
        this[_read]()
      } else {
        this[_open]()
      }
    }
    get fd() {
      return this[_fd]
    }
    get path() {
      return this[_path]
    }
    write() {
      throw new TypeError('this is a readable stream')
    }
    end() {
      throw new TypeError('this is a readable stream')
    }
    [_open]() {
      fs.open(this[_path], 'r', (er, fd) => this[_onopen](er, fd))
    }
    [_onopen](er, fd) {
      if (er) {
        this[_onerror](er)
      } else {
        this[_fd] = fd
        this.emit('open', fd)
        this[_read]()
      }
    }
    [_makeBuf]() {
      return Buffer.allocUnsafe(Math.min(this[_readSize], this[_remain]))
    }
    [_read]() {
      if (!this[_reading]) {
        this[_reading] = true
        const buf = this[_makeBuf]()
        /* istanbul ignore if */
        if (buf.length === 0) {
          return process.nextTick(() => this[_onread](null, 0, buf))
        }
        fs.read(this[_fd], buf, 0, buf.length, null, (er, br, buf) =>
          this[_onread](er, br, buf)
        )
      }
    }
    [_onread](er, br, buf) {
      this[_reading] = false
      if (er) {
        this[_onerror](er)
      } else if (this[_handleChunk](br, buf)) {
        this[_read]()
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.close(fd, er => (er ? this.emit('error', er) : this.emit('close')))
      }
    }
    [_onerror](er) {
      this[_reading] = true
      this[_close]()
      this.emit('error', er)
    }
    [_handleChunk](br, buf) {
      let ret = false
      // no effect if infinite
      this[_remain] -= br
      if (br > 0) {
        ret = super.write(br < buf.length ? buf.slice(0, br) : buf)
      }
      if (br === 0 || this[_remain] <= 0) {
        ret = false
        this[_close]()
        super.end()
      }
      return ret
    }
    emit(ev, data) {
      switch (ev) {
        case 'prefinish':
        case 'finish':
          break
        case 'drain':
          if (typeof this[_fd] === 'number') {
            this[_read]()
          }
          break
        case 'error':
          if (this[_errored]) {
            return
          }
          this[_errored] = true
          return super.emit(ev, data)
        default:
          return super.emit(ev, data)
      }
    }
  }
  class ReadStreamSync extends ReadStream {
    [_open]() {
      let threw = true
      try {
        this[_onopen](null, fs.openSync(this[_path], 'r'))
        threw = false
      } finally {
        if (threw) {
          this[_close]()
        }
      }
    }
    [_read]() {
      let threw = true
      try {
        if (!this[_reading]) {
          this[_reading] = true
          do {
            const buf = this[_makeBuf]()
            /* istanbul ignore next */
            const br =
              buf.length === 0
                ? 0
                : fs.readSync(this[_fd], buf, 0, buf.length, null)
            if (!this[_handleChunk](br, buf)) {
              break
            }
          } while (true)
          this[_reading] = false
        }
        threw = false
      } finally {
        if (threw) {
          this[_close]()
        }
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.closeSync(fd)
        this.emit('close')
      }
    }
  }
  class WriteStream extends EE {
    constructor(path, opt) {
      opt = opt || {}
      super(opt)
      this.readable = false
      this.writable = true
      this[_errored] = false
      this[_writing] = false
      this[_ended] = false
      this[_needDrain] = false
      this[_queue] = []
      this[_path] = path
      this[_fd] = typeof opt.fd === 'number' ? opt.fd : null
      this[_mode] = opt.mode === undefined ? 0o666 : opt.mode
      this[_pos] = typeof opt.start === 'number' ? opt.start : null
      this[_autoClose] =
        typeof opt.autoClose === 'boolean' ? opt.autoClose : true

      // truncating makes no sense when writing into the middle
      const defaultFlag = this[_pos] !== null ? 'r+' : 'w'
      this[_defaultFlag] = opt.flags === undefined
      this[_flags] = this[_defaultFlag] ? defaultFlag : opt.flags
      if (this[_fd] === null) {
        this[_open]()
      }
    }
    emit(ev, data) {
      if (ev === 'error') {
        if (this[_errored]) {
          return
        }
        this[_errored] = true
      }
      return super.emit(ev, data)
    }
    get fd() {
      return this[_fd]
    }
    get path() {
      return this[_path]
    }
    [_onerror](er) {
      this[_close]()
      this[_writing] = true
      this.emit('error', er)
    }
    [_open]() {
      fs.open(this[_path], this[_flags], this[_mode], (er, fd) =>
        this[_onopen](er, fd)
      )
    }
    [_onopen](er, fd) {
      if (
        this[_defaultFlag] &&
        this[_flags] === 'r+' &&
        er &&
        er.code === 'ENOENT'
      ) {
        this[_flags] = 'w'
        this[_open]()
      } else if (er) {
        this[_onerror](er)
      } else {
        this[_fd] = fd
        this.emit('open', fd)
        this[_flush]()
      }
    }
    end(buf, enc) {
      if (buf) {
        this.write(buf, enc)
      }
      this[_ended] = true

      // synthetic after-write logic, where drain/finish live
      if (
        !this[_writing] &&
        !this[_queue].length &&
        typeof this[_fd] === 'number'
      ) {
        this[_onwrite](null, 0)
      }
      return this
    }
    write(buf, enc) {
      if (typeof buf === 'string') {
        buf = Buffer.from(buf, enc)
      }
      if (this[_ended]) {
        this.emit('error', new Error('write() after end()'))
        return false
      }
      if (this[_fd] === null || this[_writing] || this[_queue].length) {
        this[_queue].push(buf)
        this[_needDrain] = true
        return false
      }
      this[_writing] = true
      this[_write](buf)
      return true
    }
    [_write](buf) {
      fs.write(this[_fd], buf, 0, buf.length, this[_pos], (er, bw) =>
        this[_onwrite](er, bw)
      )
    }
    [_onwrite](er, bw) {
      if (er) {
        this[_onerror](er)
      } else {
        if (this[_pos] !== null) {
          this[_pos] += bw
        }
        if (this[_queue].length) {
          this[_flush]()
        } else {
          this[_writing] = false
          if (this[_ended] && !this[_finished]) {
            this[_finished] = true
            this[_close]()
            this.emit('finish')
          } else if (this[_needDrain]) {
            this[_needDrain] = false
            this.emit('drain')
          }
        }
      }
    }
    [_flush]() {
      if (this[_queue].length === 0) {
        if (this[_ended]) {
          this[_onwrite](null, 0)
        }
      } else if (this[_queue].length === 1) {
        this[_write](this[_queue].pop())
      } else {
        const iovec = this[_queue]
        this[_queue] = []
        writev(this[_fd], iovec, this[_pos], (er, bw) => this[_onwrite](er, bw))
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.close(fd, er => (er ? this.emit('error', er) : this.emit('close')))
      }
    }
  }
  class WriteStreamSync extends WriteStream {
    [_open]() {
      let fd
      // only wrap in a try{} block if we know we'll retry, to avoid
      // the rethrow obscuring the error's source frame in most cases.
      if (this[_defaultFlag] && this[_flags] === 'r+') {
        try {
          fd = fs.openSync(this[_path], this[_flags], this[_mode])
        } catch (er) {
          if (er.code === 'ENOENT') {
            this[_flags] = 'w'
            return this[_open]()
          } else {
            throw er
          }
        }
      } else {
        fd = fs.openSync(this[_path], this[_flags], this[_mode])
      }
      this[_onopen](null, fd)
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === 'number') {
        const fd = this[_fd]
        this[_fd] = null
        fs.closeSync(fd)
        this.emit('close')
      }
    }
    [_write](buf) {
      // throw the original, but try to close if it fails
      let threw = true
      try {
        this[_onwrite](
          null,
          fs.writeSync(this[_fd], buf, 0, buf.length, this[_pos])
        )
        threw = false
      } finally {
        if (threw) {
          try {
            this[_close]()
          } catch (_) {}
        }
      }
    }
  }
  fsMinipass.ReadStream = ReadStream
  fsMinipass.ReadStreamSync = ReadStreamSync
  fsMinipass.WriteStream = WriteStream
  fsMinipass.WriteStreamSync = WriteStreamSync
  return fsMinipass
}

let parse$1
let hasRequiredParse$1
function requireParse$1() {
  if (hasRequiredParse$1) {
    return parse$1
  }
  hasRequiredParse$1 = 1

  // this[BUFFER] is the remainder of a chunk if we're waiting for
  // the full 512 bytes of a header to come in.  We will Buffer.concat()
  // it to the next write(), which is a mem copy, but a small one.
  //
  // this[QUEUE] is a Yallist of entries that haven't been emitted
  // yet this can only get filled up if the user keeps write()ing after
  // a write() returns false, or does a write() with more than one entry
  //
  // We don't buffer chunks, we always parse them and either create an
  // entry, or push it into the active entry.  The ReadEntry class knows
  // to throw data away if .ignore=true
  //
  // Shift entry off the buffer when it emits 'end', and emit 'entry' for
  // the next one in the list.
  //
  // At any time, we're pushing body chunks into the entry at WRITEENTRY,
  // and waiting for 'end' on the entry at READENTRY
  //
  // ignored entries get .resume() called on them straight away

  const warner = requireWarnMixin()
  const Header = requireHeader()
  const EE = require$$0$c
  const Yallist = requireYallist()
  const maxMetaEntrySize = 1024 * 1024
  const Entry = requireReadEntry()
  const Pax = requirePax()
  const zlib = requireMinizlib()
  const { nextTick } = require$$7$2
  const gzipHeader = Buffer.from([0x1f, 0x8b])
  const STATE = Symbol('state')
  const WRITEENTRY = Symbol('writeEntry')
  const READENTRY = Symbol('readEntry')
  const NEXTENTRY = Symbol('nextEntry')
  const PROCESSENTRY = Symbol('processEntry')
  const EX = Symbol('extendedHeader')
  const GEX = Symbol('globalExtendedHeader')
  const META = Symbol('meta')
  const EMITMETA = Symbol('emitMeta')
  const BUFFER = Symbol('buffer')
  const QUEUE = Symbol('queue')
  const ENDED = Symbol('ended')
  const EMITTEDEND = Symbol('emittedEnd')
  const EMIT = Symbol('emit')
  const UNZIP = Symbol('unzip')
  const CONSUMECHUNK = Symbol('consumeChunk')
  const CONSUMECHUNKSUB = Symbol('consumeChunkSub')
  const CONSUMEBODY = Symbol('consumeBody')
  const CONSUMEMETA = Symbol('consumeMeta')
  const CONSUMEHEADER = Symbol('consumeHeader')
  const CONSUMING = Symbol('consuming')
  const BUFFERCONCAT = Symbol('bufferConcat')
  const MAYBEEND = Symbol('maybeEnd')
  const WRITING = Symbol('writing')
  const ABORTED = Symbol('aborted')
  const DONE = Symbol('onDone')
  const SAW_VALID_ENTRY = Symbol('sawValidEntry')
  const SAW_NULL_BLOCK = Symbol('sawNullBlock')
  const SAW_EOF = Symbol('sawEOF')
  const CLOSESTREAM = Symbol('closeStream')
  const noop = _ => true
  parse$1 = warner(
    class Parser extends EE {
      constructor(opt) {
        opt = opt || {}
        super(opt)
        this.file = opt.file || ''

        // set to boolean false when an entry starts.  1024 bytes of \0
        // is technically a valid tarball, albeit a boring one.
        this[SAW_VALID_ENTRY] = null

        // these BADARCHIVE errors can't be detected early. listen on DONE.
        this.on(DONE, _ => {
          if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {
            // either less than 1 block of data, or all entries were invalid.
            // Either way, probably not even a tarball.
            this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format')
          }
        })
        if (opt.ondone) {
          this.on(DONE, opt.ondone)
        } else {
          this.on(DONE, _ => {
            this.emit('prefinish')
            this.emit('finish')
            this.emit('end')
          })
        }
        this.strict = !!opt.strict
        this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize
        this.filter = typeof opt.filter === 'function' ? opt.filter : noop
        // Unlike gzip, brotli doesn't have any magic bytes to identify it
        // Users need to explicitly tell us they're extracting a brotli file
        // Or we infer from the file extension
        const isTBR =
          opt.file &&
          (opt.file.endsWith('.tar.br') || opt.file.endsWith('.tbr'))
        // if it's a tbr file it MIGHT be brotli, but we don't know until
        // we look at it and verify it's not a valid tar file.
        this.brotli =
          !opt.gzip && opt.brotli !== undefined
            ? opt.brotli
            : isTBR
              ? undefined
              : false

        // have to set this so that streams are ok piping into it
        this.writable = true
        this.readable = false
        this[QUEUE] = new Yallist()
        this[BUFFER] = null
        this[READENTRY] = null
        this[WRITEENTRY] = null
        this[STATE] = 'begin'
        this[META] = ''
        this[EX] = null
        this[GEX] = null
        this[ENDED] = false
        this[UNZIP] = null
        this[ABORTED] = false
        this[SAW_NULL_BLOCK] = false
        this[SAW_EOF] = false
        this.on('end', () => this[CLOSESTREAM]())
        if (typeof opt.onwarn === 'function') {
          this.on('warn', opt.onwarn)
        }
        if (typeof opt.onentry === 'function') {
          this.on('entry', opt.onentry)
        }
      }
      [CONSUMEHEADER](chunk, position) {
        if (this[SAW_VALID_ENTRY] === null) {
          this[SAW_VALID_ENTRY] = false
        }
        let header
        try {
          header = new Header(chunk, position, this[EX], this[GEX])
        } catch (er) {
          return this.warn('TAR_ENTRY_INVALID', er)
        }
        if (header.nullBlock) {
          if (this[SAW_NULL_BLOCK]) {
            this[SAW_EOF] = true
            // ending an archive with no entries.  pointless, but legal.
            if (this[STATE] === 'begin') {
              this[STATE] = 'header'
            }
            this[EMIT]('eof')
          } else {
            this[SAW_NULL_BLOCK] = true
            this[EMIT]('nullBlock')
          }
        } else {
          this[SAW_NULL_BLOCK] = false
          if (!header.cksumValid) {
            this.warn('TAR_ENTRY_INVALID', 'checksum failure', {
              header
            })
          } else if (!header.path) {
            this.warn('TAR_ENTRY_INVALID', 'path is required', {
              header
            })
          } else {
            const type = header.type
            if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) {
              this.warn('TAR_ENTRY_INVALID', 'linkpath required', {
                header
              })
            } else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) {
              this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', {
                header
              })
            } else {
              const entry = (this[WRITEENTRY] = new Entry(
                header,
                this[EX],
                this[GEX]
              ))

              // we do this for meta & ignored entries as well, because they
              // are still valid tar, or else we wouldn't know to ignore them
              if (!this[SAW_VALID_ENTRY]) {
                if (entry.remain) {
                  // this might be the one!
                  const onend = () => {
                    if (!entry.invalid) {
                      this[SAW_VALID_ENTRY] = true
                    }
                  }
                  entry.on('end', onend)
                } else {
                  this[SAW_VALID_ENTRY] = true
                }
              }
              if (entry.meta) {
                if (entry.size > this.maxMetaEntrySize) {
                  entry.ignore = true
                  this[EMIT]('ignoredEntry', entry)
                  this[STATE] = 'ignore'
                  entry.resume()
                } else if (entry.size > 0) {
                  this[META] = ''
                  entry.on('data', c => (this[META] += c))
                  this[STATE] = 'meta'
                }
              } else {
                this[EX] = null
                entry.ignore = entry.ignore || !this.filter(entry.path, entry)
                if (entry.ignore) {
                  // probably valid, just not something we care about
                  this[EMIT]('ignoredEntry', entry)
                  this[STATE] = entry.remain ? 'ignore' : 'header'
                  entry.resume()
                } else {
                  if (entry.remain) {
                    this[STATE] = 'body'
                  } else {
                    this[STATE] = 'header'
                    entry.end()
                  }
                  if (!this[READENTRY]) {
                    this[QUEUE].push(entry)
                    this[NEXTENTRY]()
                  } else {
                    this[QUEUE].push(entry)
                  }
                }
              }
            }
          }
        }
      }
      [CLOSESTREAM]() {
        nextTick(() => this.emit('close'))
      }
      [PROCESSENTRY](entry) {
        let go = true
        if (!entry) {
          this[READENTRY] = null
          go = false
        } else if (Array.isArray(entry)) {
          this.emit.apply(this, entry)
        } else {
          this[READENTRY] = entry
          this.emit('entry', entry)
          if (!entry.emittedEnd) {
            entry.on('end', _ => this[NEXTENTRY]())
            go = false
          }
        }
        return go
      }
      [NEXTENTRY]() {
        do {} while (this[PROCESSENTRY](this[QUEUE].shift()))
        if (!this[QUEUE].length) {
          // At this point, there's nothing in the queue, but we may have an
          // entry which is being consumed (readEntry).
          // If we don't, then we definitely can handle more data.
          // If we do, and either it's flowing, or it has never had any data
          // written to it, then it needs more.
          // The only other possibility is that it has returned false from a
          // write() call, so we wait for the next drain to continue.
          const re = this[READENTRY]
          const drainNow = !re || re.flowing || re.size === re.remain
          if (drainNow) {
            if (!this[WRITING]) {
              this.emit('drain')
            }
          } else {
            re.once('drain', _ => this.emit('drain'))
          }
        }
      }
      [CONSUMEBODY](chunk, position) {
        // write up to but no  more than writeEntry.blockRemain
        const entry = this[WRITEENTRY]
        const br = entry.blockRemain
        const c =
          br >= chunk.length && position === 0
            ? chunk
            : chunk.slice(position, position + br)
        entry.write(c)
        if (!entry.blockRemain) {
          this[STATE] = 'header'
          this[WRITEENTRY] = null
          entry.end()
        }
        return c.length
      }
      [CONSUMEMETA](chunk, position) {
        const entry = this[WRITEENTRY]
        const ret = this[CONSUMEBODY](chunk, position)

        // if we finished, then the entry is reset
        if (!this[WRITEENTRY]) {
          this[EMITMETA](entry)
        }
        return ret
      }
      [EMIT](ev, data, extra) {
        if (!this[QUEUE].length && !this[READENTRY]) {
          this.emit(ev, data, extra)
        } else {
          this[QUEUE].push([ev, data, extra])
        }
      }
      [EMITMETA](entry) {
        this[EMIT]('meta', this[META])
        switch (entry.type) {
          case 'ExtendedHeader':
          case 'OldExtendedHeader':
            this[EX] = Pax.parse(this[META], this[EX], false)
            break
          case 'GlobalExtendedHeader':
            this[GEX] = Pax.parse(this[META], this[GEX], true)
            break
          case 'NextFileHasLongPath':
          case 'OldGnuLongPath':
            this[EX] = this[EX] || Object.create(null)
            this[EX].path = this[META].replace(/\0.*/, '')
            break
          case 'NextFileHasLongLinkpath':
            this[EX] = this[EX] || Object.create(null)
            this[EX].linkpath = this[META].replace(/\0.*/, '')
            break

          /* istanbul ignore next */
          default:
            throw new Error('unknown meta: ' + entry.type)
        }
      }
      abort(error) {
        this[ABORTED] = true
        this.emit('abort', error)
        // always throws, even in non-strict mode
        this.warn('TAR_ABORT', error, {
          recoverable: false
        })
      }
      write(chunk) {
        if (this[ABORTED]) {
          return
        }

        // first write, might be gzipped
        const needSniff =
          this[UNZIP] === null ||
          (this.brotli === undefined && this[UNZIP] === false)
        if (needSniff && chunk) {
          if (this[BUFFER]) {
            chunk = Buffer.concat([this[BUFFER], chunk])
            this[BUFFER] = null
          }
          if (chunk.length < gzipHeader.length) {
            this[BUFFER] = chunk
            return true
          }

          // look for gzip header
          for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {
            if (chunk[i] !== gzipHeader[i]) {
              this[UNZIP] = false
            }
          }
          const maybeBrotli = this.brotli === undefined
          if (this[UNZIP] === false && maybeBrotli) {
            // read the first header to see if it's a valid tar file. If so,
            // we can safely assume that it's not actually brotli, despite the
            // .tbr or .tar.br file extension.
            // if we ended before getting a full chunk, yes, def brotli
            if (chunk.length < 512) {
              if (this[ENDED]) {
                this.brotli = true
              } else {
                this[BUFFER] = chunk
                return true
              }
            } else {
              // if it's tar, it's pretty reliably not brotli, chances of
              // that happening are astronomical.
              try {
                new Header(chunk.slice(0, 512))
                this.brotli = false
              } catch (_) {
                this.brotli = true
              }
            }
          }
          if (this[UNZIP] === null || (this[UNZIP] === false && this.brotli)) {
            const ended = this[ENDED]
            this[ENDED] = false
            this[UNZIP] =
              this[UNZIP] === null
                ? new zlib.Unzip()
                : new zlib.BrotliDecompress()
            this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk))
            this[UNZIP].on('error', er => this.abort(er))
            this[UNZIP].on('end', _ => {
              this[ENDED] = true
              this[CONSUMECHUNK]()
            })
            this[WRITING] = true
            const ret = this[UNZIP][ended ? 'end' : 'write'](chunk)
            this[WRITING] = false
            return ret
          }
        }
        this[WRITING] = true
        if (this[UNZIP]) {
          this[UNZIP].write(chunk)
        } else {
          this[CONSUMECHUNK](chunk)
        }
        this[WRITING] = false

        // return false if there's a queue, or if the current entry isn't flowing
        const ret = this[QUEUE].length
          ? false
          : this[READENTRY]
            ? this[READENTRY].flowing
            : true

        // if we have no queue, then that means a clogged READENTRY
        if (!ret && !this[QUEUE].length) {
          this[READENTRY].once('drain', _ => this.emit('drain'))
        }
        return ret
      }
      [BUFFERCONCAT](c) {
        if (c && !this[ABORTED]) {
          this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c
        }
      }
      [MAYBEEND]() {
        if (
          this[ENDED] &&
          !this[EMITTEDEND] &&
          !this[ABORTED] &&
          !this[CONSUMING]
        ) {
          this[EMITTEDEND] = true
          const entry = this[WRITEENTRY]
          if (entry && entry.blockRemain) {
            // truncated, likely a damaged file
            const have = this[BUFFER] ? this[BUFFER].length : 0
            this.warn(
              'TAR_BAD_ARCHIVE',
              `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`,
              {
                entry
              }
            )
            if (this[BUFFER]) {
              entry.write(this[BUFFER])
            }
            entry.end()
          }
          this[EMIT](DONE)
        }
      }
      [CONSUMECHUNK](chunk) {
        if (this[CONSUMING]) {
          this[BUFFERCONCAT](chunk)
        } else if (!chunk && !this[BUFFER]) {
          this[MAYBEEND]()
        } else {
          this[CONSUMING] = true
          if (this[BUFFER]) {
            this[BUFFERCONCAT](chunk)
            const c = this[BUFFER]
            this[BUFFER] = null
            this[CONSUMECHUNKSUB](c)
          } else {
            this[CONSUMECHUNKSUB](chunk)
          }
          while (
            this[BUFFER] &&
            this[BUFFER].length >= 512 &&
            !this[ABORTED] &&
            !this[SAW_EOF]
          ) {
            const c = this[BUFFER]
            this[BUFFER] = null
            this[CONSUMECHUNKSUB](c)
          }
          this[CONSUMING] = false
        }
        if (!this[BUFFER] || this[ENDED]) {
          this[MAYBEEND]()
        }
      }
      [CONSUMECHUNKSUB](chunk) {
        // we know that we are in CONSUMING mode, so anything written goes into
        // the buffer.  Advance the position and put any remainder in the buffer.
        let position = 0
        const length = chunk.length
        while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {
          switch (this[STATE]) {
            case 'begin':
            case 'header':
              this[CONSUMEHEADER](chunk, position)
              position += 512
              break
            case 'ignore':
            case 'body':
              position += this[CONSUMEBODY](chunk, position)
              break
            case 'meta':
              position += this[CONSUMEMETA](chunk, position)
              break

            /* istanbul ignore next */
            default:
              throw new Error('invalid state: ' + this[STATE])
          }
        }
        if (position < length) {
          if (this[BUFFER]) {
            this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]])
          } else {
            this[BUFFER] = chunk.slice(position)
          }
        }
      }
      end(chunk) {
        if (!this[ABORTED]) {
          if (this[UNZIP]) {
            this[UNZIP].end(chunk)
          } else {
            this[ENDED] = true
            if (this.brotli === undefined) {
              chunk = chunk || Buffer.alloc(0)
            }
            this.write(chunk)
          }
        }
      }
    }
  )
  return parse$1
}

let list_1
let hasRequiredList
function requireList() {
  if (hasRequiredList) {
    return list_1
  }
  hasRequiredList = 1

  // XXX: This shares a lot in common with extract.js
  // maybe some DRY opportunity here?

  // tar -t
  const hlo = requireHighLevelOpt()
  const Parser = requireParse$1()
  const fs = require$$0$4
  const fsm = requireFsMinipass()
  const path = require$$1$5
  const stripSlash = requireStripTrailingSlashes()
  list_1 = (opt_, files, cb) => {
    if (typeof opt_ === 'function') {
      ;(cb = opt_), (files = null), (opt_ = {})
    } else if (Array.isArray(opt_)) {
      ;(files = opt_), (opt_ = {})
    }
    if (typeof files === 'function') {
      ;(cb = files), (files = null)
    }
    if (!files) {
      files = []
    } else {
      files = Array.from(files)
    }
    const opt = hlo(opt_)
    if (opt.sync && typeof cb === 'function') {
      throw new TypeError('callback not supported for sync tar functions')
    }
    if (!opt.file && typeof cb === 'function') {
      throw new TypeError('callback only supported with file option')
    }
    if (files.length) {
      filesFilter(opt, files)
    }
    if (!opt.noResume) {
      onentryFunction(opt)
    }
    return opt.file && opt.sync
      ? listFileSync(opt)
      : opt.file
        ? listFile(opt, cb)
        : list(opt)
  }
  const onentryFunction = opt => {
    const onentry = opt.onentry
    opt.onentry = onentry
      ? e => {
          onentry(e)
          e.resume()
        }
      : e => e.resume()
  }

  // construct a filter that limits the file entries listed
  // include child entries if a dir is included
  const filesFilter = (opt, files) => {
    const map = new Map(files.map(f => [stripSlash(f), true]))
    const filter = opt.filter
    const mapHas = (file, r) => {
      const root = r || path.parse(file).root || '.'
      const ret =
        file === root
          ? false
          : map.has(file)
            ? map.get(file)
            : mapHas(path.dirname(file), root)
      map.set(file, ret)
      return ret
    }
    opt.filter = filter
      ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file))
      : file => mapHas(stripSlash(file))
  }
  const listFileSync = opt => {
    const p = list(opt)
    const file = opt.file
    let threw = true
    let fd
    try {
      const stat = fs.statSync(file)
      const readSize = opt.maxReadSize || 16 * 1024 * 1024
      if (stat.size < readSize) {
        p.end(fs.readFileSync(file))
      } else {
        let pos = 0
        const buf = Buffer.allocUnsafe(readSize)
        fd = fs.openSync(file, 'r')
        while (pos < stat.size) {
          const bytesRead = fs.readSync(fd, buf, 0, readSize, pos)
          pos += bytesRead
          p.write(buf.slice(0, bytesRead))
        }
        p.end()
      }
      threw = false
    } finally {
      if (threw && fd) {
        try {
          fs.closeSync(fd)
        } catch (er) {}
      }
    }
  }
  const listFile = (opt, cb) => {
    const parse = new Parser(opt)
    const readSize = opt.maxReadSize || 16 * 1024 * 1024
    const file = opt.file
    const p = new Promise((resolve, reject) => {
      parse.on('error', reject)
      parse.on('end', resolve)
      fs.stat(file, (er, stat) => {
        if (er) {
          reject(er)
        } else {
          const stream = new fsm.ReadStream(file, {
            readSize: readSize,
            size: stat.size
          })
          stream.on('error', reject)
          stream.pipe(parse)
        }
      })
    })
    return cb ? p.then(cb, cb) : p
  }
  const list = opt => new Parser(opt)
  return list_1
}

let create_1
let hasRequiredCreate
function requireCreate() {
  if (hasRequiredCreate) {
    return create_1
  }
  hasRequiredCreate = 1

  // tar -c
  const hlo = requireHighLevelOpt()
  const Pack = requirePack()
  const fsm = requireFsMinipass()
  const t = requireList()
  const path = require$$1$5
  create_1 = (opt_, files, cb) => {
    if (typeof files === 'function') {
      cb = files
    }
    if (Array.isArray(opt_)) {
      ;(files = opt_), (opt_ = {})
    }
    if (!files || !Array.isArray(files) || !files.length) {
      throw new TypeError('no files or directories specified')
    }
    files = Array.from(files)
    const opt = hlo(opt_)
    if (opt.sync && typeof cb === 'function') {
      throw new TypeError('callback not supported for sync tar functions')
    }
    if (!opt.file && typeof cb === 'function') {
      throw new TypeError('callback only supported with file option')
    }
    return opt.file && opt.sync
      ? createFileSync(opt, files)
      : opt.file
        ? createFile(opt, files, cb)
        : opt.sync
          ? createSync(opt, files)
          : create(opt, files)
  }
  const createFileSync = (opt, files) => {
    const p = new Pack.Sync(opt)
    const stream = new fsm.WriteStreamSync(opt.file, {
      mode: opt.mode || 0o666
    })
    p.pipe(stream)
    addFilesSync(p, files)
  }
  const createFile = (opt, files, cb) => {
    const p = new Pack(opt)
    const stream = new fsm.WriteStream(opt.file, {
      mode: opt.mode || 0o666
    })
    p.pipe(stream)
    const promise = new Promise((res, rej) => {
      stream.on('error', rej)
      stream.on('close', res)
      p.on('error', rej)
    })
    addFilesAsync(p, files)
    return cb ? promise.then(cb, cb) : promise
  }
  const addFilesSync = (p, files) => {
    files.forEach(file => {
      if (file.charAt(0) === '@') {
        t({
          file: path.resolve(p.cwd, file.slice(1)),
          sync: true,
          noResume: true,
          onentry: entry => p.add(entry)
        })
      } else {
        p.add(file)
      }
    })
    p.end()
  }
  const addFilesAsync = (p, files) => {
    while (files.length) {
      const file = files.shift()
      if (file.charAt(0) === '@') {
        return t({
          file: path.resolve(p.cwd, file.slice(1)),
          noResume: true,
          onentry: entry => p.add(entry)
        }).then(_ => addFilesAsync(p, files))
      } else {
        p.add(file)
      }
    }
    p.end()
  }
  const createSync = (opt, files) => {
    const p = new Pack.Sync(opt)
    addFilesSync(p, files)
    return p
  }
  const create = (opt, files) => {
    const p = new Pack(opt)
    addFilesAsync(p, files)
    return p
  }
  return create_1
}

let replace_1
let hasRequiredReplace
function requireReplace() {
  if (hasRequiredReplace) {
    return replace_1
  }
  hasRequiredReplace = 1

  // tar -r
  const hlo = requireHighLevelOpt()
  const Pack = requirePack()
  const fs = require$$0$4
  const fsm = requireFsMinipass()
  const t = requireList()
  const path = require$$1$5

  // starting at the head of the file, read a Header
  // If the checksum is invalid, that's our position to start writing
  // If it is, jump forward by the specified size (round up to 512)
  // and try again.
  // Write the new Pack stream starting there.

  const Header = requireHeader()
  replace_1 = (opt_, files, cb) => {
    const opt = hlo(opt_)
    if (!opt.file) {
      throw new TypeError('file is required')
    }
    if (
      opt.gzip ||
      opt.brotli ||
      opt.file.endsWith('.br') ||
      opt.file.endsWith('.tbr')
    ) {
      throw new TypeError('cannot append to compressed archives')
    }
    if (!files || !Array.isArray(files) || !files.length) {
      throw new TypeError('no files or directories specified')
    }
    files = Array.from(files)
    return opt.sync ? replaceSync(opt, files) : replace(opt, files, cb)
  }
  const replaceSync = (opt, files) => {
    const p = new Pack.Sync(opt)
    let threw = true
    let fd
    let position
    try {
      try {
        fd = fs.openSync(opt.file, 'r+')
      } catch (er) {
        if (er.code === 'ENOENT') {
          fd = fs.openSync(opt.file, 'w+')
        } else {
          throw er
        }
      }
      const st = fs.fstatSync(fd)
      const headBuf = Buffer.alloc(512)
      POSITION: for (position = 0; position < st.size; position += 512) {
        for (let bufPos = 0, bytes = 0; bufPos < 512; bufPos += bytes) {
          bytes = fs.readSync(
            fd,
            headBuf,
            bufPos,
            headBuf.length - bufPos,
            position + bufPos
          )
          if (position === 0 && headBuf[0] === 0x1f && headBuf[1] === 0x8b) {
            throw new Error('cannot append to compressed archives')
          }
          if (!bytes) {
            break POSITION
          }
        }
        const h = new Header(headBuf)
        if (!h.cksumValid) {
          break
        }
        const entryBlockSize = 512 * Math.ceil(h.size / 512)
        if (position + entryBlockSize + 512 > st.size) {
          break
        }
        // the 512 for the header we just parsed will be added as well
        // also jump ahead all the blocks for the body
        position += entryBlockSize
        if (opt.mtimeCache) {
          opt.mtimeCache.set(h.path, h.mtime)
        }
      }
      threw = false
      streamSync(opt, p, position, fd, files)
    } finally {
      if (threw) {
        try {
          fs.closeSync(fd)
        } catch (er) {}
      }
    }
  }
  const streamSync = (opt, p, position, fd, files) => {
    const stream = new fsm.WriteStreamSync(opt.file, {
      fd: fd,
      start: position
    })
    p.pipe(stream)
    addFilesSync(p, files)
  }
  const replace = (opt, files, cb) => {
    files = Array.from(files)
    const p = new Pack(opt)
    const getPos = (fd, size, cb_) => {
      const cb = (er, pos) => {
        if (er) {
          fs.close(fd, _ => cb_(er))
        } else {
          cb_(null, pos)
        }
      }
      let position = 0
      if (size === 0) {
        return cb(null, 0)
      }
      let bufPos = 0
      const headBuf = Buffer.alloc(512)
      const onread = (er, bytes) => {
        if (er) {
          return cb(er)
        }
        bufPos += bytes
        if (bufPos < 512 && bytes) {
          return fs.read(
            fd,
            headBuf,
            bufPos,
            headBuf.length - bufPos,
            position + bufPos,
            onread
          )
        }
        if (position === 0 && headBuf[0] === 0x1f && headBuf[1] === 0x8b) {
          return cb(new Error('cannot append to compressed archives'))
        }

        // truncated header
        if (bufPos < 512) {
          return cb(null, position)
        }
        const h = new Header(headBuf)
        if (!h.cksumValid) {
          return cb(null, position)
        }
        const entryBlockSize = 512 * Math.ceil(h.size / 512)
        if (position + entryBlockSize + 512 > size) {
          return cb(null, position)
        }
        position += entryBlockSize + 512
        if (position >= size) {
          return cb(null, position)
        }
        if (opt.mtimeCache) {
          opt.mtimeCache.set(h.path, h.mtime)
        }
        bufPos = 0
        fs.read(fd, headBuf, 0, 512, position, onread)
      }
      fs.read(fd, headBuf, 0, 512, position, onread)
    }
    const promise = new Promise((resolve, reject) => {
      p.on('error', reject)
      let flag = 'r+'
      const onopen = (er, fd) => {
        if (er && er.code === 'ENOENT' && flag === 'r+') {
          flag = 'w+'
          return fs.open(opt.file, flag, onopen)
        }
        if (er) {
          return reject(er)
        }
        fs.fstat(fd, (er, st) => {
          if (er) {
            return fs.close(fd, () => reject(er))
          }
          getPos(fd, st.size, (er, position) => {
            if (er) {
              return reject(er)
            }
            const stream = new fsm.WriteStream(opt.file, {
              fd: fd,
              start: position
            })
            p.pipe(stream)
            stream.on('error', reject)
            stream.on('close', resolve)
            addFilesAsync(p, files)
          })
        })
      }
      fs.open(opt.file, flag, onopen)
    })
    return cb ? promise.then(cb, cb) : promise
  }
  const addFilesSync = (p, files) => {
    files.forEach(file => {
      if (file.charAt(0) === '@') {
        t({
          file: path.resolve(p.cwd, file.slice(1)),
          sync: true,
          noResume: true,
          onentry: entry => p.add(entry)
        })
      } else {
        p.add(file)
      }
    })
    p.end()
  }
  const addFilesAsync = (p, files) => {
    while (files.length) {
      const file = files.shift()
      if (file.charAt(0) === '@') {
        return t({
          file: path.resolve(p.cwd, file.slice(1)),
          noResume: true,
          onentry: entry => p.add(entry)
        }).then(_ => addFilesAsync(p, files))
      } else {
        p.add(file)
      }
    }
    p.end()
  }
  return replace_1
}

let update
let hasRequiredUpdate
function requireUpdate() {
  if (hasRequiredUpdate) {
    return update
  }
  hasRequiredUpdate = 1

  // tar -u

  const hlo = requireHighLevelOpt()
  const r = requireReplace()
  // just call tar.r with the filter and mtimeCache

  update = (opt_, files, cb) => {
    const opt = hlo(opt_)
    if (!opt.file) {
      throw new TypeError('file is required')
    }
    if (
      opt.gzip ||
      opt.brotli ||
      opt.file.endsWith('.br') ||
      opt.file.endsWith('.tbr')
    ) {
      throw new TypeError('cannot append to compressed archives')
    }
    if (!files || !Array.isArray(files) || !files.length) {
      throw new TypeError('no files or directories specified')
    }
    files = Array.from(files)
    mtimeFilter(opt)
    return r(opt, files, cb)
  }
  const mtimeFilter = opt => {
    const filter = opt.filter
    if (!opt.mtimeCache) {
      opt.mtimeCache = new Map()
    }
    opt.filter = filter
      ? (path, stat) =>
          filter(path, stat) && !(opt.mtimeCache.get(path) > stat.mtime)
      : (path, stat) => !(opt.mtimeCache.get(path) > stat.mtime)
  }
  return update
}

const mkdir = { exports: {} }

let optsArg_1
let hasRequiredOptsArg
function requireOptsArg() {
  if (hasRequiredOptsArg) {
    return optsArg_1
  }
  hasRequiredOptsArg = 1
  const { promisify } = require$$0$e
  const fs = require$$0$4
  const optsArg = opts => {
    if (!opts) {
      opts = {
        mode: 0o777,
        fs
      }
    } else if (typeof opts === 'object') {
      opts = {
        mode: 0o777,
        fs,
        ...opts
      }
    } else if (typeof opts === 'number') {
      opts = {
        mode: opts,
        fs
      }
    } else if (typeof opts === 'string') {
      opts = {
        mode: parseInt(opts, 8),
        fs
      }
    } else {
      throw new TypeError('invalid options argument')
    }
    opts.mkdir = opts.mkdir || opts.fs.mkdir || fs.mkdir
    opts.mkdirAsync = promisify(opts.mkdir)
    opts.stat = opts.stat || opts.fs.stat || fs.stat
    opts.statAsync = promisify(opts.stat)
    opts.statSync = opts.statSync || opts.fs.statSync || fs.statSync
    opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs.mkdirSync
    return opts
  }
  optsArg_1 = optsArg
  return optsArg_1
}

let pathArg_1
let hasRequiredPathArg
function requirePathArg() {
  if (hasRequiredPathArg) {
    return pathArg_1
  }
  hasRequiredPathArg = 1
  const platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform
  const { resolve, parse } = require$$1$5
  const pathArg = path => {
    if (/\0/.test(path)) {
      // simulate same failure that node raises
      throw Object.assign(
        new TypeError('path must be a string without null bytes'),
        {
          path,
          code: 'ERR_INVALID_ARG_VALUE'
        }
      )
    }
    path = resolve(path)
    if (platform === 'win32') {
      const badWinChars = /[*|"<>?:]/
      const { root } = parse(path)
      if (badWinChars.test(path.substr(root.length))) {
        throw Object.assign(new Error('Illegal characters in path.'), {
          path,
          code: 'EINVAL'
        })
      }
    }
    return path
  }
  pathArg_1 = pathArg
  return pathArg_1
}

let findMade_1
let hasRequiredFindMade
function requireFindMade() {
  if (hasRequiredFindMade) {
    return findMade_1
  }
  hasRequiredFindMade = 1
  const { dirname } = require$$1$5
  const findMade = (opts, parent, path = undefined) => {
    // we never want the 'made' return value to be a root directory
    if (path === parent) {
      return Promise.resolve()
    }
    return opts.statAsync(parent).then(
      st => (st.isDirectory() ? path : undefined),
      // will fail later
      er =>
        er.code === 'ENOENT'
          ? findMade(opts, dirname(parent), parent)
          : undefined
    )
  }
  const findMadeSync = (opts, parent, path = undefined) => {
    if (path === parent) {
      return undefined
    }
    try {
      return opts.statSync(parent).isDirectory() ? path : undefined
    } catch (er) {
      return er.code === 'ENOENT'
        ? findMadeSync(opts, dirname(parent), parent)
        : undefined
    }
  }
  findMade_1 = {
    findMade,
    findMadeSync
  }
  return findMade_1
}

let mkdirpManual_1
let hasRequiredMkdirpManual
function requireMkdirpManual() {
  if (hasRequiredMkdirpManual) {
    return mkdirpManual_1
  }
  hasRequiredMkdirpManual = 1
  const { dirname } = require$$1$5
  const mkdirpManual = (path, opts, made) => {
    opts.recursive = false
    const parent = dirname(path)
    if (parent === path) {
      return opts.mkdirAsync(path, opts).catch(er => {
        // swallowed by recursive implementation on posix systems
        // any other error is a failure
        if (er.code !== 'EISDIR') {
          throw er
        }
      })
    }
    return opts.mkdirAsync(path, opts).then(
      () => made || path,
      er => {
        if (er.code === 'ENOENT') {
          return mkdirpManual(parent, opts).then(made =>
            mkdirpManual(path, opts, made)
          )
        }
        if (er.code !== 'EEXIST' && er.code !== 'EROFS') {
          throw er
        }
        return opts.statAsync(path).then(
          st => {
            if (st.isDirectory()) {
              return made
            } else {
              throw er
            }
          },
          () => {
            throw er
          }
        )
      }
    )
  }
  const mkdirpManualSync = (path, opts, made) => {
    const parent = dirname(path)
    opts.recursive = false
    if (parent === path) {
      try {
        return opts.mkdirSync(path, opts)
      } catch (er) {
        // swallowed by recursive implementation on posix systems
        // any other error is a failure
        if (er.code !== 'EISDIR') {
          throw er
        } else {
          return
        }
      }
    }
    try {
      opts.mkdirSync(path, opts)
      return made || path
    } catch (er) {
      if (er.code === 'ENOENT') {
        return mkdirpManualSync(
          path,
          opts,
          mkdirpManualSync(parent, opts, made)
        )
      }
      if (er.code !== 'EEXIST' && er.code !== 'EROFS') {
        throw er
      }
      try {
        if (!opts.statSync(path).isDirectory()) {
          throw er
        }
      } catch (_) {
        throw er
      }
    }
  }
  mkdirpManual_1 = {
    mkdirpManual,
    mkdirpManualSync
  }
  return mkdirpManual_1
}

let mkdirpNative_1
let hasRequiredMkdirpNative
function requireMkdirpNative() {
  if (hasRequiredMkdirpNative) {
    return mkdirpNative_1
  }
  hasRequiredMkdirpNative = 1
  const { dirname } = require$$1$5
  const { findMade, findMadeSync } = requireFindMade()
  const { mkdirpManual, mkdirpManualSync } = requireMkdirpManual()
  const mkdirpNative = (path, opts) => {
    opts.recursive = true
    const parent = dirname(path)
    if (parent === path) {
      return opts.mkdirAsync(path, opts)
    }
    return findMade(opts, path).then(made =>
      opts
        .mkdirAsync(path, opts)
        .then(() => made)
        .catch(er => {
          if (er.code === 'ENOENT') {
            return mkdirpManual(path, opts)
          } else {
            throw er
          }
        })
    )
  }
  const mkdirpNativeSync = (path, opts) => {
    opts.recursive = true
    const parent = dirname(path)
    if (parent === path) {
      return opts.mkdirSync(path, opts)
    }
    const made = findMadeSync(opts, path)
    try {
      opts.mkdirSync(path, opts)
      return made
    } catch (er) {
      if (er.code === 'ENOENT') {
        return mkdirpManualSync(path, opts)
      } else {
        throw er
      }
    }
  }
  mkdirpNative_1 = {
    mkdirpNative,
    mkdirpNativeSync
  }
  return mkdirpNative_1
}

let useNative_1
let hasRequiredUseNative
function requireUseNative() {
  if (hasRequiredUseNative) {
    return useNative_1
  }
  hasRequiredUseNative = 1
  const fs = require$$0$4
  const version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version
  const versArr = version.replace(/^v/, '').split('.')
  const hasNative =
    +versArr[0] > 10 || (+versArr[0] === 10 && +versArr[1] >= 12)
  const useNative = !hasNative ? () => false : opts => opts.mkdir === fs.mkdir
  const useNativeSync = !hasNative
    ? () => false
    : opts => opts.mkdirSync === fs.mkdirSync
  useNative_1 = {
    useNative,
    useNativeSync
  }
  return useNative_1
}

let mkdirp_1
let hasRequiredMkdirp
function requireMkdirp() {
  if (hasRequiredMkdirp) {
    return mkdirp_1
  }
  hasRequiredMkdirp = 1
  const optsArg = requireOptsArg()
  const pathArg = requirePathArg()
  const { mkdirpNative, mkdirpNativeSync } = requireMkdirpNative()
  const { mkdirpManual, mkdirpManualSync } = requireMkdirpManual()
  const { useNative, useNativeSync } = requireUseNative()
  const mkdirp = (path, opts) => {
    path = pathArg(path)
    opts = optsArg(opts)
    return useNative(opts) ? mkdirpNative(path, opts) : mkdirpManual(path, opts)
  }
  const mkdirpSync = (path, opts) => {
    path = pathArg(path)
    opts = optsArg(opts)
    return useNativeSync(opts)
      ? mkdirpNativeSync(path, opts)
      : mkdirpManualSync(path, opts)
  }
  mkdirp.sync = mkdirpSync
  mkdirp.native = (path, opts) => mkdirpNative(pathArg(path), optsArg(opts))
  mkdirp.manual = (path, opts) => mkdirpManual(pathArg(path), optsArg(opts))
  mkdirp.nativeSync = (path, opts) =>
    mkdirpNativeSync(pathArg(path), optsArg(opts))
  mkdirp.manualSync = (path, opts) =>
    mkdirpManualSync(pathArg(path), optsArg(opts))
  mkdirp_1 = mkdirp
  return mkdirp_1
}

let chownr_1
let hasRequiredChownr
function requireChownr() {
  if (hasRequiredChownr) {
    return chownr_1
  }
  hasRequiredChownr = 1
  const fs = require$$0$4
  const path = require$$1$5

  /* istanbul ignore next */
  const LCHOWN = fs.lchown ? 'lchown' : 'chown'
  /* istanbul ignore next */
  const LCHOWNSYNC = fs.lchownSync ? 'lchownSync' : 'chownSync'

  /* istanbul ignore next */
  const needEISDIRHandled =
    fs.lchown &&
    !process.version.match(/v1[1-9]+\./) &&
    !process.version.match(/v10\.[6-9]/)
  const lchownSync = (path, uid, gid) => {
    try {
      return fs[LCHOWNSYNC](path, uid, gid)
    } catch (er) {
      if (er.code !== 'ENOENT') {
        throw er
      }
    }
  }

  /* istanbul ignore next */
  const chownSync = (path, uid, gid) => {
    try {
      return fs.chownSync(path, uid, gid)
    } catch (er) {
      if (er.code !== 'ENOENT') {
        throw er
      }
    }
  }

  /* istanbul ignore next */
  const handleEISDIR = needEISDIRHandled
    ? (path, uid, gid, cb) => er => {
        // Node prior to v10 had a very questionable implementation of
        // fs.lchown, which would always try to call fs.open on a directory
        // Fall back to fs.chown in those cases.
        if (!er || er.code !== 'EISDIR') {
          cb(er)
        } else {
          fs.chown(path, uid, gid, cb)
        }
      }
    : (_, __, ___, cb) => cb

  /* istanbul ignore next */
  const handleEISDirSync = needEISDIRHandled
    ? (path, uid, gid) => {
        try {
          return lchownSync(path, uid, gid)
        } catch (er) {
          if (er.code !== 'EISDIR') {
            throw er
          }
          chownSync(path, uid, gid)
        }
      }
    : (path, uid, gid) => lchownSync(path, uid, gid)

  // fs.readdir could only accept an options object as of node v6
  const nodeVersion = process.version
  let readdir = (path, options, cb) => fs.readdir(path, options, cb)
  let readdirSync = (path, options) => fs.readdirSync(path, options)
  /* istanbul ignore next */
  if (/^v4\./.test(nodeVersion)) {
    readdir = (path, options, cb) => fs.readdir(path, cb)
  }
  const chown = (cpath, uid, gid, cb) => {
    fs[LCHOWN](
      cpath,
      uid,
      gid,
      handleEISDIR(cpath, uid, gid, er => {
        // Skip ENOENT error
        cb(er && er.code !== 'ENOENT' ? er : null)
      })
    )
  }
  const chownrKid = (p, child, uid, gid, cb) => {
    if (typeof child === 'string') {
      return fs.lstat(path.resolve(p, child), (er, stats) => {
        // Skip ENOENT error
        if (er) return cb(er.code !== 'ENOENT' ? er : null)
        stats.name = child
        chownrKid(p, stats, uid, gid, cb)
      })
    }
    if (child.isDirectory()) {
      chownr(path.resolve(p, child.name), uid, gid, er => {
        if (er) {
          return cb(er)
        }
        const cpath = path.resolve(p, child.name)
        chown(cpath, uid, gid, cb)
      })
    } else {
      const cpath = path.resolve(p, child.name)
      chown(cpath, uid, gid, cb)
    }
  }
  const chownr = (p, uid, gid, cb) => {
    readdir(
      p,
      {
        withFileTypes: true
      },
      (er, children) => {
        // any error other than ENOTDIR or ENOTSUP means it's not readable,
        // or doesn't exist.  give up.
        if (er) {
          if (er.code === 'ENOENT') {
            return cb()
          } else if (er.code !== 'ENOTDIR' && er.code !== 'ENOTSUP') {
            return cb(er)
          }
        }
        if (er || !children.length) {
          return chown(p, uid, gid, cb)
        }
        let len = children.length
        let errState = null
        const then = er => {
          if (errState) {
            return
          }
          if (er) {
            return cb((errState = er))
          }
          if (--len === 0) {
            return chown(p, uid, gid, cb)
          }
        }
        children.forEach(child => chownrKid(p, child, uid, gid, then))
      }
    )
  }
  const chownrKidSync = (p, child, uid, gid) => {
    if (typeof child === 'string') {
      try {
        const stats = fs.lstatSync(path.resolve(p, child))
        stats.name = child
        child = stats
      } catch (er) {
        if (er.code === 'ENOENT') {
          return
        } else {
          throw er
        }
      }
    }
    if (child.isDirectory()) {
      chownrSync(path.resolve(p, child.name), uid, gid)
    }
    handleEISDirSync(path.resolve(p, child.name), uid, gid)
  }
  const chownrSync = (p, uid, gid) => {
    let children
    try {
      children = readdirSync(p, {
        withFileTypes: true
      })
    } catch (er) {
      if (er.code === 'ENOENT') {
        return
      } else if (er.code === 'ENOTDIR' || er.code === 'ENOTSUP') {
        return handleEISDirSync(p, uid, gid)
      } else {
        throw er
      }
    }
    if (children && children.length) {
      children.forEach(child => chownrKidSync(p, child, uid, gid))
    }
    return handleEISDirSync(p, uid, gid)
  }
  chownr_1 = chownr
  chownr.sync = chownrSync
  return chownr_1
}

let hasRequiredMkdir
function requireMkdir() {
  if (hasRequiredMkdir) {
    return mkdir.exports
  }
  hasRequiredMkdir = 1
  // wrapper around mkdirp for tar's needs.

  // TODO: This should probably be a class, not functionally
  // passing around state in a gazillion args.

  const mkdirp = requireMkdirp()
  const fs = require$$0$4
  const path = require$$1$5
  const chownr = requireChownr()
  const normPath = requireNormalizeWindowsPath()
  class SymlinkError extends Error {
    constructor(symlink, path) {
      super('Cannot extract through symbolic link')
      this.path = path
      this.symlink = symlink
    }
    get name() {
      return 'SylinkError'
    }
  }
  class CwdError extends Error {
    constructor(path, code) {
      super(code + ": Cannot cd into '" + path + "'")
      this.path = path
      this.code = code
    }
    get name() {
      return 'CwdError'
    }
  }
  const cGet = (cache, key) => cache.get(normPath(key))
  const cSet = (cache, key, val) => cache.set(normPath(key), val)
  const checkCwd = (dir, cb) => {
    fs.stat(dir, (er, st) => {
      if (er || !st.isDirectory()) {
        er = new CwdError(dir, (er && er.code) || 'ENOTDIR')
      }
      cb(er)
    })
  }
  mkdir.exports = (dir, opt, cb) => {
    dir = normPath(dir)

    // if there's any overlap between mask and mode,
    // then we'll need an explicit chmod
    const umask = opt.umask
    const mode = opt.mode | 0o0700
    const needChmod = (mode & umask) !== 0
    const uid = opt.uid
    const gid = opt.gid
    const doChown =
      typeof uid === 'number' &&
      typeof gid === 'number' &&
      (uid !== opt.processUid || gid !== opt.processGid)
    const preserve = opt.preserve
    const unlink = opt.unlink
    const cache = opt.cache
    const cwd = normPath(opt.cwd)
    const done = (er, created) => {
      if (er) {
        cb(er)
      } else {
        cSet(cache, dir, true)
        if (created && doChown) {
          chownr(created, uid, gid, er => done(er))
        } else if (needChmod) {
          fs.chmod(dir, mode, cb)
        } else {
          cb()
        }
      }
    }
    if (cache && cGet(cache, dir) === true) {
      return done()
    }
    if (dir === cwd) {
      return checkCwd(dir, done)
    }
    if (preserve) {
      return mkdirp(dir, {
        mode
      }).then(made => done(null, made), done)
    }
    const sub = normPath(path.relative(cwd, dir))
    const parts = sub.split('/')
    mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done)
  }
  const mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {
    if (!parts.length) {
      return cb(null, created)
    }
    const p = parts.shift()
    const part = normPath(path.resolve(base + '/' + p))
    if (cGet(cache, part)) {
      return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)
    }
    fs.mkdir(
      part,
      mode,
      onmkdir(part, parts, mode, cache, unlink, cwd, created, cb)
    )
  }
  const onmkdir =
    (part, parts, mode, cache, unlink, cwd, created, cb) => er => {
      if (er) {
        fs.lstat(part, (statEr, st) => {
          if (statEr) {
            statEr.path = statEr.path && normPath(statEr.path)
            cb(statEr)
          } else if (st.isDirectory()) {
            mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)
          } else if (unlink) {
            fs.unlink(part, er => {
              if (er) {
                return cb(er)
              }
              fs.mkdir(
                part,
                mode,
                onmkdir(part, parts, mode, cache, unlink, cwd, created, cb)
              )
            })
          } else if (st.isSymbolicLink()) {
            return cb(new SymlinkError(part, part + '/' + parts.join('/')))
          } else {
            cb(er)
          }
        })
      } else {
        created = created || part
        mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)
      }
    }
  const checkCwdSync = dir => {
    let ok = false
    let code = 'ENOTDIR'
    try {
      ok = fs.statSync(dir).isDirectory()
    } catch (er) {
      code = er.code
    } finally {
      if (!ok) {
        throw new CwdError(dir, code)
      }
    }
  }
  mkdir.exports.sync = (dir, opt) => {
    dir = normPath(dir)
    // if there's any overlap between mask and mode,
    // then we'll need an explicit chmod
    const umask = opt.umask
    const mode = opt.mode | 0o0700
    const needChmod = (mode & umask) !== 0
    const uid = opt.uid
    const gid = opt.gid
    const doChown =
      typeof uid === 'number' &&
      typeof gid === 'number' &&
      (uid !== opt.processUid || gid !== opt.processGid)
    const preserve = opt.preserve
    const unlink = opt.unlink
    const cache = opt.cache
    const cwd = normPath(opt.cwd)
    const done = created => {
      cSet(cache, dir, true)
      if (created && doChown) {
        chownr.sync(created, uid, gid)
      }
      if (needChmod) {
        fs.chmodSync(dir, mode)
      }
    }
    if (cache && cGet(cache, dir) === true) {
      return done()
    }
    if (dir === cwd) {
      checkCwdSync(cwd)
      return done()
    }
    if (preserve) {
      return done(mkdirp.sync(dir, mode))
    }
    const sub = normPath(path.relative(cwd, dir))
    const parts = sub.split('/')
    let created = null
    for (
      let p = parts.shift(), part = cwd;
      p && (part += '/' + p);
      p = parts.shift()
    ) {
      part = normPath(path.resolve(part))
      if (cGet(cache, part)) {
        continue
      }
      try {
        fs.mkdirSync(part, mode)
        created = created || part
        cSet(cache, part, true)
      } catch (er) {
        const st = fs.lstatSync(part)
        if (st.isDirectory()) {
          cSet(cache, part, true)
          continue
        } else if (unlink) {
          fs.unlinkSync(part)
          fs.mkdirSync(part, mode)
          created = created || part
          cSet(cache, part, true)
          continue
        } else if (st.isSymbolicLink()) {
          return new SymlinkError(part, part + '/' + parts.join('/'))
        }
      }
    }
    return done(created)
  }
  return mkdir.exports
}

let normalizeUnicode
let hasRequiredNormalizeUnicode
function requireNormalizeUnicode() {
  if (hasRequiredNormalizeUnicode) {
    return normalizeUnicode
  }
  hasRequiredNormalizeUnicode = 1
  // warning: extremely hot code path.
  // This has been meticulously optimized for use
  // within npm install on large package trees.
  // Do not edit without careful benchmarking.
  const normalizeCache = Object.create(null)
  const { hasOwnProperty } = Object.prototype
  normalizeUnicode = s => {
    if (!hasOwnProperty.call(normalizeCache, s)) {
      normalizeCache[s] = s.normalize('NFD')
    }
    return normalizeCache[s]
  }
  return normalizeUnicode
}

let pathReservations
let hasRequiredPathReservations
function requirePathReservations() {
  if (hasRequiredPathReservations) {
    return pathReservations
  }
  hasRequiredPathReservations = 1
  // A path exclusive reservation system
  // reserve([list, of, paths], fn)
  // When the fn is first in line for all its paths, it
  // is called with a cb that clears the reservation.
  //
  // Used by async unpack to avoid clobbering paths in use,
  // while still allowing maximal safe parallelization.

  const assert = require$$0$h
  const normalize = requireNormalizeUnicode()
  const stripSlashes = requireStripTrailingSlashes()
  const { join } = require$$1$5
  const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform
  const isWindows = platform === 'win32'
  pathReservations = () => {
    // path => [function or Set]
    // A Set object means a directory reservation
    // A fn is a direct reservation on that path
    const queues = new Map()

    // fn => {paths:[path,...], dirs:[path, ...]}
    const reservations = new Map()

    // return a set of parent dirs for a given path
    // '/a/b/c/d' -> ['/', '/a', '/a/b', '/a/b/c', '/a/b/c/d']
    const getDirs = path => {
      const dirs = path
        .split('/')
        .slice(0, -1)
        .reduce((set, path) => {
          if (set.length) {
            path = join(set[set.length - 1], path)
          }
          set.push(path || '/')
          return set
        }, [])
      return dirs
    }

    // functions currently running
    const running = new Set()

    // return the queues for each path the function cares about
    // fn => {paths, dirs}
    const getQueues = fn => {
      const res = reservations.get(fn)
      /* istanbul ignore if - unpossible */
      if (!res) {
        throw new Error('function does not have any path reservations')
      }
      return {
        paths: res.paths.map(path => queues.get(path)),
        dirs: [...res.dirs].map(path => queues.get(path))
      }
    }

    // check if fn is first in line for all its paths, and is
    // included in the first set for all its dir queues
    const check = fn => {
      const { paths, dirs } = getQueues(fn)
      return (
        paths.every(q => q[0] === fn) &&
        dirs.every(q => q[0] instanceof Set && q[0].has(fn))
      )
    }

    // run the function if it's first in line and not already running
    const run = fn => {
      if (running.has(fn) || !check(fn)) {
        return false
      }
      running.add(fn)
      fn(() => clear(fn))
      return true
    }
    const clear = fn => {
      if (!running.has(fn)) {
        return false
      }
      const { paths, dirs } = reservations.get(fn)
      const next = new Set()
      paths.forEach(path => {
        const q = queues.get(path)
        assert.equal(q[0], fn)
        if (q.length === 1) {
          queues.delete(path)
        } else {
          q.shift()
          if (typeof q[0] === 'function') {
            next.add(q[0])
          } else {
            q[0].forEach(fn => next.add(fn))
          }
        }
      })
      dirs.forEach(dir => {
        const q = queues.get(dir)
        assert(q[0] instanceof Set)
        if (q[0].size === 1 && q.length === 1) {
          queues.delete(dir)
        } else if (q[0].size === 1) {
          q.shift()

          // must be a function or else the Set would've been reused
          next.add(q[0])
        } else {
          q[0].delete(fn)
        }
      })
      running.delete(fn)
      next.forEach(fn => run(fn))
      return true
    }
    const reserve = (paths, fn) => {
      // collide on matches across case and unicode normalization
      // On windows, thanks to the magic of 8.3 shortnames, it is fundamentally
      // impossible to determine whether two paths refer to the same thing on
      // disk, without asking the kernel for a shortname.
      // So, we just pretend that every path matches every other path here,
      // effectively removing all parallelization on windows.
      paths = isWindows
        ? ['win32 parallelization disabled']
        : paths.map(p => {
            // don't need normPath, because we skip this entirely for windows
            return stripSlashes(join(normalize(p))).toLowerCase()
          })
      const dirs = new Set(
        paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b))
      )
      reservations.set(fn, {
        dirs,
        paths
      })
      paths.forEach(path => {
        const q = queues.get(path)
        if (!q) {
          queues.set(path, [fn])
        } else {
          q.push(fn)
        }
      })
      dirs.forEach(dir => {
        const q = queues.get(dir)
        if (!q) {
          queues.set(dir, [new Set([fn])])
        } else if (q[q.length - 1] instanceof Set) {
          q[q.length - 1].add(fn)
        } else {
          q.push(new Set([fn]))
        }
      })
      return run(fn)
    }
    return {
      check,
      reserve
    }
  }
  return pathReservations
}

let getWriteFlag
let hasRequiredGetWriteFlag
function requireGetWriteFlag() {
  if (hasRequiredGetWriteFlag) {
    return getWriteFlag
  }
  hasRequiredGetWriteFlag = 1
  // Get the appropriate flag to use for creating files
  // We use fmap on Windows platforms for files less than
  // 512kb.  This is a fairly low limit, but avoids making
  // things slower in some cases.  Since most of what this
  // library is used for is extracting tarballs of many
  // relatively small files in npm packages and the like,
  // it can be a big boost on Windows platforms.
  // Only supported in Node v12.9.0 and above.
  const platform = process.env.__FAKE_PLATFORM__ || process.platform
  const isWindows = platform === 'win32'
  const fs = global.__FAKE_TESTING_FS__ || require$$0$4

  /* istanbul ignore next */
  const { O_CREAT, O_TRUNC, O_WRONLY, UV_FS_O_FILEMAP = 0 } = fs.constants
  const fMapEnabled = isWindows && !!UV_FS_O_FILEMAP
  const fMapLimit = 512 * 1024
  const fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY
  getWriteFlag = !fMapEnabled
    ? () => 'w'
    : size => (size < fMapLimit ? fMapFlag : 'w')
  return getWriteFlag
}

let unpack
let hasRequiredUnpack
function requireUnpack() {
  if (hasRequiredUnpack) {
    return unpack
  }
  hasRequiredUnpack = 1

  // the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.
  // but the path reservations are required to avoid race conditions where
  // parallelized unpack ops may mess with one another, due to dependencies
  // (like a Link depending on its target) or destructive operations (like
  // clobbering an fs object to create one of a different type.)

  const assert = require$$0$h
  const Parser = requireParse$1()
  const fs = require$$0$4
  const fsm = requireFsMinipass()
  const path = require$$1$5
  const mkdir = requireMkdir()
  const wc = requireWinchars()
  const pathReservations = requirePathReservations()
  const stripAbsolutePath = requireStripAbsolutePath()
  const normPath = requireNormalizeWindowsPath()
  const stripSlash = requireStripTrailingSlashes()
  const normalize = requireNormalizeUnicode()
  const ONENTRY = Symbol('onEntry')
  const CHECKFS = Symbol('checkFs')
  const CHECKFS2 = Symbol('checkFs2')
  const PRUNECACHE = Symbol('pruneCache')
  const ISREUSABLE = Symbol('isReusable')
  const MAKEFS = Symbol('makeFs')
  const FILE = Symbol('file')
  const DIRECTORY = Symbol('directory')
  const LINK = Symbol('link')
  const SYMLINK = Symbol('symlink')
  const HARDLINK = Symbol('hardlink')
  const UNSUPPORTED = Symbol('unsupported')
  const CHECKPATH = Symbol('checkPath')
  const MKDIR = Symbol('mkdir')
  const ONERROR = Symbol('onError')
  const PENDING = Symbol('pending')
  const PEND = Symbol('pend')
  const UNPEND = Symbol('unpend')
  const ENDED = Symbol('ended')
  const MAYBECLOSE = Symbol('maybeClose')
  const SKIP = Symbol('skip')
  const DOCHOWN = Symbol('doChown')
  const UID = Symbol('uid')
  const GID = Symbol('gid')
  const CHECKED_CWD = Symbol('checkedCwd')
  const crypto = require$$0$d
  const getFlag = requireGetWriteFlag()
  const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform
  const isWindows = platform === 'win32'
  const DEFAULT_MAX_DEPTH = 1024

  // Unlinks on Windows are not atomic.
  //
  // This means that if you have a file entry, followed by another
  // file entry with an identical name, and you cannot re-use the file
  // (because it's a hardlink, or because unlink:true is set, or it's
  // Windows, which does not have useful nlink values), then the unlink
  // will be committed to the disk AFTER the new file has been written
  // over the old one, deleting the new file.
  //
  // To work around this, on Windows systems, we rename the file and then
  // delete the renamed file.  It's a sloppy kludge, but frankly, I do not
  // know of a better way to do this, given windows' non-atomic unlink
  // semantics.
  //
  // See: https://github.com/npm/node-tar/issues/183
  /* istanbul ignore next */
  const unlinkFile = (path, cb) => {
    if (!isWindows) {
      return fs.unlink(path, cb)
    }
    const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')
    fs.rename(path, name, er => {
      if (er) {
        return cb(er)
      }
      fs.unlink(name, cb)
    })
  }

  /* istanbul ignore next */
  const unlinkFileSync = path => {
    if (!isWindows) {
      return fs.unlinkSync(path)
    }
    const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')
    fs.renameSync(path, name)
    fs.unlinkSync(name)
  }

  // this.gid, entry.gid, this.processUid
  const uint32 = (a, b, c) => (a === a >>> 0 ? a : b === b >>> 0 ? b : c)

  // clear the cache if it's a case-insensitive unicode-squashing match.
  // we can't know if the current file system is case-sensitive or supports
  // unicode fully, so we check for similarity on the maximally compatible
  // representation.  Err on the side of pruning, since all it's doing is
  // preventing lstats, and it's not the end of the world if we get a false
  // positive.
  // Note that on windows, we always drop the entire cache whenever a
  // symbolic link is encountered, because 8.3 filenames are impossible
  // to reason about, and collisions are hazards rather than just failures.
  const cacheKeyNormalize = path =>
    stripSlash(normPath(normalize(path))).toLowerCase()
  const pruneCache = (cache, abs) => {
    abs = cacheKeyNormalize(abs)
    for (const path of cache.keys()) {
      const pnorm = cacheKeyNormalize(path)
      if (pnorm === abs || pnorm.indexOf(abs + '/') === 0) {
        cache.delete(path)
      }
    }
  }
  const dropCache = cache => {
    for (const key of cache.keys()) {
      cache.delete(key)
    }
  }
  class Unpack extends Parser {
    constructor(opt) {
      if (!opt) {
        opt = {}
      }
      opt.ondone = _ => {
        this[ENDED] = true
        this[MAYBECLOSE]()
      }
      super(opt)
      this[CHECKED_CWD] = false
      this.reservations = pathReservations()
      this.transform =
        typeof opt.transform === 'function' ? opt.transform : null
      this.writable = true
      this.readable = false
      this[PENDING] = 0
      this[ENDED] = false
      this.dirCache = opt.dirCache || new Map()
      if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {
        // need both or neither
        if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number') {
          throw new TypeError('cannot set owner without number uid and gid')
        }
        if (opt.preserveOwner) {
          throw new TypeError(
            'cannot preserve owner in archive and also set owner explicitly'
          )
        }
        this.uid = opt.uid
        this.gid = opt.gid
        this.setOwner = true
      } else {
        this.uid = null
        this.gid = null
        this.setOwner = false
      }

      // default true for root
      if (opt.preserveOwner === undefined && typeof opt.uid !== 'number') {
        this.preserveOwner = process.getuid && process.getuid() === 0
      } else {
        this.preserveOwner = !!opt.preserveOwner
      }
      this.processUid =
        (this.preserveOwner || this.setOwner) && process.getuid
          ? process.getuid()
          : null
      this.processGid =
        (this.preserveOwner || this.setOwner) && process.getgid
          ? process.getgid()
          : null

      // prevent excessively deep nesting of subfolders
      // set to `Infinity` to remove this restriction
      this.maxDepth =
        typeof opt.maxDepth === 'number' ? opt.maxDepth : DEFAULT_MAX_DEPTH

      // mostly just for testing, but useful in some cases.
      // Forcibly trigger a chown on every entry, no matter what
      this.forceChown = opt.forceChown === true

      // turn ><?| in filenames into 0xf000-higher encoded forms
      this.win32 = !!opt.win32 || isWindows

      // do not unpack over files that are newer than what's in the archive
      this.newer = !!opt.newer

      // do not unpack over ANY files
      this.keep = !!opt.keep

      // do not set mtime/atime of extracted entries
      this.noMtime = !!opt.noMtime

      // allow .., absolute path entries, and unpacking through symlinks
      // without this, warn and skip .., relativize absolutes, and error
      // on symlinks in extraction path
      this.preservePaths = !!opt.preservePaths

      // unlink files and links before writing. This breaks existing hard
      // links, and removes symlink directories rather than erroring
      this.unlink = !!opt.unlink
      this.cwd = normPath(path.resolve(opt.cwd || process.cwd()))
      this.strip = +opt.strip || 0
      // if we're not chmodding, then we don't need the process umask
      this.processUmask = opt.noChmod ? 0 : process.umask()
      this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask

      // default mode for dirs created as parents
      this.dmode = opt.dmode || 0o0777 & ~this.umask
      this.fmode = opt.fmode || 0o0666 & ~this.umask
      this.on('entry', entry => this[ONENTRY](entry))
    }

    // a bad or damaged archive is a warning for Parser, but an error
    // when extracting.  Mark those errors as unrecoverable, because
    // the Unpack contract cannot be met.
    warn(code, msg, data = {}) {
      if (code === 'TAR_BAD_ARCHIVE' || code === 'TAR_ABORT') {
        data.recoverable = false
      }
      return super.warn(code, msg, data)
    }
    [MAYBECLOSE]() {
      if (this[ENDED] && this[PENDING] === 0) {
        this.emit('prefinish')
        this.emit('finish')
        this.emit('end')
      }
    }
    [CHECKPATH](entry) {
      const p = normPath(entry.path)
      const parts = p.split('/')
      if (this.strip) {
        if (parts.length < this.strip) {
          return false
        }
        if (entry.type === 'Link') {
          const linkparts = normPath(entry.linkpath).split('/')
          if (linkparts.length >= this.strip) {
            entry.linkpath = linkparts.slice(this.strip).join('/')
          } else {
            return false
          }
        }
        parts.splice(0, this.strip)
        entry.path = parts.join('/')
      }
      if (isFinite(this.maxDepth) && parts.length > this.maxDepth) {
        this.warn('TAR_ENTRY_ERROR', 'path excessively deep', {
          entry,
          path: p,
          depth: parts.length,
          maxDepth: this.maxDepth
        })
        return false
      }
      if (!this.preservePaths) {
        if (
          parts.includes('..') ||
          (isWindows && /^[a-z]:\.\.$/i.test(parts[0]))
        ) {
          this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {
            entry,
            path: p
          })
          return false
        }

        // strip off the root
        const [root, stripped] = stripAbsolutePath(p)
        if (root) {
          entry.path = stripped
          this.warn('TAR_ENTRY_INFO', `stripping ${root} from absolute path`, {
            entry,
            path: p
          })
        }
      }
      if (path.isAbsolute(entry.path)) {
        entry.absolute = normPath(path.resolve(entry.path))
      } else {
        entry.absolute = normPath(path.resolve(this.cwd, entry.path))
      }

      // if we somehow ended up with a path that escapes the cwd, and we are
      // not in preservePaths mode, then something is fishy!  This should have
      // been prevented above, so ignore this for coverage.
      /* istanbul ignore if - defense in depth */
      if (
        !this.preservePaths &&
        entry.absolute.indexOf(this.cwd + '/') !== 0 &&
        entry.absolute !== this.cwd
      ) {
        this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {
          entry,
          path: normPath(entry.path),
          resolvedPath: entry.absolute,
          cwd: this.cwd
        })
        return false
      }

      // an archive can set properties on the extraction directory, but it
      // may not replace the cwd with a different kind of thing entirely.
      if (
        entry.absolute === this.cwd &&
        entry.type !== 'Directory' &&
        entry.type !== 'GNUDumpDir'
      ) {
        return false
      }

      // only encode : chars that aren't drive letter indicators
      if (this.win32) {
        const { root: aRoot } = path.win32.parse(entry.absolute)
        entry.absolute = aRoot + wc.encode(entry.absolute.slice(aRoot.length))
        const { root: pRoot } = path.win32.parse(entry.path)
        entry.path = pRoot + wc.encode(entry.path.slice(pRoot.length))
      }
      return true
    }
    [ONENTRY](entry) {
      if (!this[CHECKPATH](entry)) {
        return entry.resume()
      }
      assert.equal(typeof entry.absolute, 'string')
      switch (entry.type) {
        case 'Directory':
        case 'GNUDumpDir':
          if (entry.mode) {
            entry.mode = entry.mode | 0o700
          }

        // eslint-disable-next-line no-fallthrough
        case 'File':
        case 'OldFile':
        case 'ContiguousFile':
        case 'Link':
        case 'SymbolicLink':
          return this[CHECKFS](entry)
        case 'CharacterDevice':
        case 'BlockDevice':
        case 'FIFO':
        default:
          return this[UNSUPPORTED](entry)
      }
    }
    [ONERROR](er, entry) {
      // Cwd has to exist, or else nothing works. That's serious.
      // Other errors are warnings, which raise the error in strict
      // mode, but otherwise continue on.
      if (er.name === 'CwdError') {
        this.emit('error', er)
      } else {
        this.warn('TAR_ENTRY_ERROR', er, {
          entry
        })
        this[UNPEND]()
        entry.resume()
      }
    }
    [MKDIR](dir, mode, cb) {
      mkdir(
        normPath(dir),
        {
          uid: this.uid,
          gid: this.gid,
          processUid: this.processUid,
          processGid: this.processGid,
          umask: this.processUmask,
          preserve: this.preservePaths,
          unlink: this.unlink,
          cache: this.dirCache,
          cwd: this.cwd,
          mode: mode,
          noChmod: this.noChmod
        },
        cb
      )
    }
    [DOCHOWN](entry) {
      // in preserve owner mode, chown if the entry doesn't match process
      // in set owner mode, chown if setting doesn't match process
      return (
        this.forceChown ||
        (this.preserveOwner &&
          ((typeof entry.uid === 'number' && entry.uid !== this.processUid) ||
            (typeof entry.gid === 'number' &&
              entry.gid !== this.processGid))) ||
        (typeof this.uid === 'number' && this.uid !== this.processUid) ||
        (typeof this.gid === 'number' && this.gid !== this.processGid)
      )
    }
    [UID](entry) {
      return uint32(this.uid, entry.uid, this.processUid)
    }
    [GID](entry) {
      return uint32(this.gid, entry.gid, this.processGid)
    }
    [FILE](entry, fullyDone) {
      const mode = entry.mode & 0o7777 || this.fmode
      const stream = new fsm.WriteStream(entry.absolute, {
        flags: getFlag(entry.size),
        mode: mode,
        autoClose: false
      })
      stream.on('error', er => {
        if (stream.fd) {
          fs.close(stream.fd, () => {})
        }

        // flush all the data out so that we aren't left hanging
        // if the error wasn't actually fatal.  otherwise the parse
        // is blocked, and we never proceed.
        stream.write = () => true
        this[ONERROR](er, entry)
        fullyDone()
      })
      let actions = 1
      const done = er => {
        if (er) {
          /* istanbul ignore else - we should always have a fd by now */
          if (stream.fd) {
            fs.close(stream.fd, () => {})
          }
          this[ONERROR](er, entry)
          fullyDone()
          return
        }
        if (--actions === 0) {
          fs.close(stream.fd, er => {
            if (er) {
              this[ONERROR](er, entry)
            } else {
              this[UNPEND]()
            }
            fullyDone()
          })
        }
      }
      stream.on('finish', _ => {
        // if futimes fails, try utimes
        // if utimes fails, fail with the original error
        // same for fchown/chown
        const abs = entry.absolute
        const fd = stream.fd
        if (entry.mtime && !this.noMtime) {
          actions++
          const atime = entry.atime || new Date()
          const mtime = entry.mtime
          fs.futimes(fd, atime, mtime, er =>
            er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er)) : done()
          )
        }
        if (this[DOCHOWN](entry)) {
          actions++
          const uid = this[UID](entry)
          const gid = this[GID](entry)
          fs.fchown(fd, uid, gid, er =>
            er ? fs.chown(abs, uid, gid, er2 => done(er2 && er)) : done()
          )
        }
        done()
      })
      const tx = this.transform ? this.transform(entry) || entry : entry
      if (tx !== entry) {
        tx.on('error', er => {
          this[ONERROR](er, entry)
          fullyDone()
        })
        entry.pipe(tx)
      }
      tx.pipe(stream)
    }
    [DIRECTORY](entry, fullyDone) {
      const mode = entry.mode & 0o7777 || this.dmode
      this[MKDIR](entry.absolute, mode, er => {
        if (er) {
          this[ONERROR](er, entry)
          fullyDone()
          return
        }
        let actions = 1
        const done = _ => {
          if (--actions === 0) {
            fullyDone()
            this[UNPEND]()
            entry.resume()
          }
        }
        if (entry.mtime && !this.noMtime) {
          actions++
          fs.utimes(
            entry.absolute,
            entry.atime || new Date(),
            entry.mtime,
            done
          )
        }
        if (this[DOCHOWN](entry)) {
          actions++
          fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done)
        }
        done()
      })
    }
    [UNSUPPORTED](entry) {
      entry.unsupported = true
      this.warn(
        'TAR_ENTRY_UNSUPPORTED',
        `unsupported entry type: ${entry.type}`,
        {
          entry
        }
      )
      entry.resume()
    }
    [SYMLINK](entry, done) {
      this[LINK](entry, entry.linkpath, 'symlink', done)
    }
    [HARDLINK](entry, done) {
      const linkpath = normPath(path.resolve(this.cwd, entry.linkpath))
      this[LINK](entry, linkpath, 'link', done)
    }
    [PEND]() {
      this[PENDING]++
    }
    [UNPEND]() {
      this[PENDING]--
      this[MAYBECLOSE]()
    }
    [SKIP](entry) {
      this[UNPEND]()
      entry.resume()
    }

    // Check if we can reuse an existing filesystem entry safely and
    // overwrite it, rather than unlinking and recreating
    // Windows doesn't report a useful nlink, so we just never reuse entries
    [ISREUSABLE](entry, st) {
      return (
        entry.type === 'File' &&
        !this.unlink &&
        st.isFile() &&
        st.nlink <= 1 &&
        !isWindows
      )
    }

    // check if a thing is there, and if so, try to clobber it
    [CHECKFS](entry) {
      this[PEND]()
      const paths = [entry.path]
      if (entry.linkpath) {
        paths.push(entry.linkpath)
      }
      this.reservations.reserve(paths, done => this[CHECKFS2](entry, done))
    }
    [PRUNECACHE](entry) {
      // if we are not creating a directory, and the path is in the dirCache,
      // then that means we are about to delete the directory we created
      // previously, and it is no longer going to be a directory, and neither
      // is any of its children.
      // If a symbolic link is encountered, all bets are off.  There is no
      // reasonable way to sanitize the cache in such a way we will be able to
      // avoid having filesystem collisions.  If this happens with a non-symlink
      // entry, it'll just fail to unpack, but a symlink to a directory, using an
      // 8.3 shortname or certain unicode attacks, can evade detection and lead
      // to arbitrary writes to anywhere on the system.
      if (entry.type === 'SymbolicLink') {
        dropCache(this.dirCache)
      } else if (entry.type !== 'Directory') {
        pruneCache(this.dirCache, entry.absolute)
      }
    }
    [CHECKFS2](entry, fullyDone) {
      this[PRUNECACHE](entry)
      const done = er => {
        this[PRUNECACHE](entry)
        fullyDone(er)
      }
      const checkCwd = () => {
        this[MKDIR](this.cwd, this.dmode, er => {
          if (er) {
            this[ONERROR](er, entry)
            done()
            return
          }
          this[CHECKED_CWD] = true
          start()
        })
      }
      const start = () => {
        if (entry.absolute !== this.cwd) {
          const parent = normPath(path.dirname(entry.absolute))
          if (parent !== this.cwd) {
            return this[MKDIR](parent, this.dmode, er => {
              if (er) {
                this[ONERROR](er, entry)
                done()
                return
              }
              afterMakeParent()
            })
          }
        }
        afterMakeParent()
      }
      const afterMakeParent = () => {
        fs.lstat(entry.absolute, (lstatEr, st) => {
          if (st && (this.keep || (this.newer && st.mtime > entry.mtime))) {
            this[SKIP](entry)
            done()
            return
          }
          if (lstatEr || this[ISREUSABLE](entry, st)) {
            return this[MAKEFS](null, entry, done)
          }
          if (st.isDirectory()) {
            if (entry.type === 'Directory') {
              const needChmod =
                !this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode
              const afterChmod = er => this[MAKEFS](er, entry, done)
              if (!needChmod) {
                return afterChmod()
              }
              return fs.chmod(entry.absolute, entry.mode, afterChmod)
            }
            // Not a dir entry, have to remove it.
            // NB: the only way to end up with an entry that is the cwd
            // itself, in such a way that == does not detect, is a
            // tricky windows absolute path with UNC or 8.3 parts (and
            // preservePaths:true, or else it will have been stripped).
            // In that case, the user has opted out of path protections
            // explicitly, so if they blow away the cwd, c'est la vie.
            if (entry.absolute !== this.cwd) {
              return fs.rmdir(entry.absolute, er =>
                this[MAKEFS](er, entry, done)
              )
            }
          }

          // not a dir, and not reusable
          // don't remove if the cwd, we want that error
          if (entry.absolute === this.cwd) {
            return this[MAKEFS](null, entry, done)
          }
          unlinkFile(entry.absolute, er => this[MAKEFS](er, entry, done))
        })
      }
      if (this[CHECKED_CWD]) {
        start()
      } else {
        checkCwd()
      }
    }
    [MAKEFS](er, entry, done) {
      if (er) {
        this[ONERROR](er, entry)
        done()
        return
      }
      switch (entry.type) {
        case 'File':
        case 'OldFile':
        case 'ContiguousFile':
          return this[FILE](entry, done)
        case 'Link':
          return this[HARDLINK](entry, done)
        case 'SymbolicLink':
          return this[SYMLINK](entry, done)
        case 'Directory':
        case 'GNUDumpDir':
          return this[DIRECTORY](entry, done)
      }
    }
    [LINK](entry, linkpath, link, done) {
      // XXX: get the type ('symlink' or 'junction') for windows
      fs[link](linkpath, entry.absolute, er => {
        if (er) {
          this[ONERROR](er, entry)
        } else {
          this[UNPEND]()
          entry.resume()
        }
        done()
      })
    }
  }
  const callSync = fn => {
    try {
      return [null, fn()]
    } catch (er) {
      return [er, null]
    }
  }
  class UnpackSync extends Unpack {
    [MAKEFS](er, entry) {
      return super[MAKEFS](er, entry, () => {})
    }
    [CHECKFS](entry) {
      this[PRUNECACHE](entry)
      if (!this[CHECKED_CWD]) {
        const er = this[MKDIR](this.cwd, this.dmode)
        if (er) {
          return this[ONERROR](er, entry)
        }
        this[CHECKED_CWD] = true
      }

      // don't bother to make the parent if the current entry is the cwd,
      // we've already checked it.
      if (entry.absolute !== this.cwd) {
        const parent = normPath(path.dirname(entry.absolute))
        if (parent !== this.cwd) {
          const mkParent = this[MKDIR](parent, this.dmode)
          if (mkParent) {
            return this[ONERROR](mkParent, entry)
          }
        }
      }
      const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute))
      if (st && (this.keep || (this.newer && st.mtime > entry.mtime))) {
        return this[SKIP](entry)
      }
      if (lstatEr || this[ISREUSABLE](entry, st)) {
        return this[MAKEFS](null, entry)
      }
      if (st.isDirectory()) {
        if (entry.type === 'Directory') {
          const needChmod =
            !this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode
          const [er] = needChmod
            ? callSync(() => {
                fs.chmodSync(entry.absolute, entry.mode)
              })
            : []
          return this[MAKEFS](er, entry)
        }
        // not a dir entry, have to remove it
        const [er] = callSync(() => fs.rmdirSync(entry.absolute))
        this[MAKEFS](er, entry)
      }

      // not a dir, and not reusable.
      // don't remove if it's the cwd, since we want that error.
      const [er] =
        entry.absolute === this.cwd
          ? []
          : callSync(() => unlinkFileSync(entry.absolute))
      this[MAKEFS](er, entry)
    }
    [FILE](entry, done) {
      const mode = entry.mode & 0o7777 || this.fmode
      const oner = er => {
        let closeError
        try {
          fs.closeSync(fd)
        } catch (e) {
          closeError = e
        }
        if (er || closeError) {
          this[ONERROR](er || closeError, entry)
        }
        done()
      }
      let fd
      try {
        fd = fs.openSync(entry.absolute, getFlag(entry.size), mode)
      } catch (er) {
        return oner(er)
      }
      const tx = this.transform ? this.transform(entry) || entry : entry
      if (tx !== entry) {
        tx.on('error', er => this[ONERROR](er, entry))
        entry.pipe(tx)
      }
      tx.on('data', chunk => {
        try {
          fs.writeSync(fd, chunk, 0, chunk.length)
        } catch (er) {
          oner(er)
        }
      })
      tx.on('end', _ => {
        let er = null
        // try both, falling futimes back to utimes
        // if either fails, handle the first error
        if (entry.mtime && !this.noMtime) {
          const atime = entry.atime || new Date()
          const mtime = entry.mtime
          try {
            fs.futimesSync(fd, atime, mtime)
          } catch (futimeser) {
            try {
              fs.utimesSync(entry.absolute, atime, mtime)
            } catch (utimeser) {
              er = futimeser
            }
          }
        }
        if (this[DOCHOWN](entry)) {
          const uid = this[UID](entry)
          const gid = this[GID](entry)
          try {
            fs.fchownSync(fd, uid, gid)
          } catch (fchowner) {
            try {
              fs.chownSync(entry.absolute, uid, gid)
            } catch (chowner) {
              er = er || fchowner
            }
          }
        }
        oner(er)
      })
    }
    [DIRECTORY](entry, done) {
      const mode = entry.mode & 0o7777 || this.dmode
      const er = this[MKDIR](entry.absolute, mode)
      if (er) {
        this[ONERROR](er, entry)
        done()
        return
      }
      if (entry.mtime && !this.noMtime) {
        try {
          fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime)
        } catch (er) {}
      }
      if (this[DOCHOWN](entry)) {
        try {
          fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry))
        } catch (er) {}
      }
      done()
      entry.resume()
    }
    [MKDIR](dir, mode) {
      try {
        return mkdir.sync(normPath(dir), {
          uid: this.uid,
          gid: this.gid,
          processUid: this.processUid,
          processGid: this.processGid,
          umask: this.processUmask,
          preserve: this.preservePaths,
          unlink: this.unlink,
          cache: this.dirCache,
          cwd: this.cwd,
          mode: mode
        })
      } catch (er) {
        return er
      }
    }
    [LINK](entry, linkpath, link, done) {
      try {
        fs[link + 'Sync'](linkpath, entry.absolute)
        done()
        entry.resume()
      } catch (er) {
        return this[ONERROR](er, entry)
      }
    }
  }
  Unpack.Sync = UnpackSync
  unpack = Unpack
  return unpack
}

let extract_1
let hasRequiredExtract
function requireExtract() {
  if (hasRequiredExtract) {
    return extract_1
  }
  hasRequiredExtract = 1

  // tar -x
  const hlo = requireHighLevelOpt()
  const Unpack = requireUnpack()
  const fs = require$$0$4
  const fsm = requireFsMinipass()
  const path = require$$1$5
  const stripSlash = requireStripTrailingSlashes()
  extract_1 = (opt_, files, cb) => {
    if (typeof opt_ === 'function') {
      ;(cb = opt_), (files = null), (opt_ = {})
    } else if (Array.isArray(opt_)) {
      ;(files = opt_), (opt_ = {})
    }
    if (typeof files === 'function') {
      ;(cb = files), (files = null)
    }
    if (!files) {
      files = []
    } else {
      files = Array.from(files)
    }
    const opt = hlo(opt_)
    if (opt.sync && typeof cb === 'function') {
      throw new TypeError('callback not supported for sync tar functions')
    }
    if (!opt.file && typeof cb === 'function') {
      throw new TypeError('callback only supported with file option')
    }
    if (files.length) {
      filesFilter(opt, files)
    }
    return opt.file && opt.sync
      ? extractFileSync(opt)
      : opt.file
        ? extractFile(opt, cb)
        : opt.sync
          ? extractSync(opt)
          : extract(opt)
  }

  // construct a filter that limits the file entries listed
  // include child entries if a dir is included
  const filesFilter = (opt, files) => {
    const map = new Map(files.map(f => [stripSlash(f), true]))
    const filter = opt.filter
    const mapHas = (file, r) => {
      const root = r || path.parse(file).root || '.'
      const ret =
        file === root
          ? false
          : map.has(file)
            ? map.get(file)
            : mapHas(path.dirname(file), root)
      map.set(file, ret)
      return ret
    }
    opt.filter = filter
      ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file))
      : file => mapHas(stripSlash(file))
  }
  const extractFileSync = opt => {
    const u = new Unpack.Sync(opt)
    const file = opt.file
    const stat = fs.statSync(file)
    // This trades a zero-byte read() syscall for a stat
    // However, it will usually result in less memory allocation
    const readSize = opt.maxReadSize || 16 * 1024 * 1024
    const stream = new fsm.ReadStreamSync(file, {
      readSize: readSize,
      size: stat.size
    })
    stream.pipe(u)
  }
  const extractFile = (opt, cb) => {
    const u = new Unpack(opt)
    const readSize = opt.maxReadSize || 16 * 1024 * 1024
    const file = opt.file
    const p = new Promise((resolve, reject) => {
      u.on('error', reject)
      u.on('close', resolve)

      // This trades a zero-byte read() syscall for a stat
      // However, it will usually result in less memory allocation
      fs.stat(file, (er, stat) => {
        if (er) {
          reject(er)
        } else {
          const stream = new fsm.ReadStream(file, {
            readSize: readSize,
            size: stat.size
          })
          stream.on('error', reject)
          stream.pipe(u)
        }
      })
    })
    return cb ? p.then(cb, cb) : p
  }
  const extractSync = opt => new Unpack.Sync(opt)
  const extract = opt => new Unpack(opt)
  return extract_1
}

let hasRequiredTar
function requireTar() {
  if (hasRequiredTar) {
    return tar
  }
  hasRequiredTar = 1

  // high-level commands
  tar.c = tar.create = requireCreate()
  tar.r = tar.replace = requireReplace()
  tar.t = tar.list = requireList()
  tar.u = tar.update = requireUpdate()
  tar.x = tar.extract = requireExtract()

  // classes
  tar.Pack = requirePack()
  tar.Unpack = requireUnpack()
  tar.Parse = requireParse$1()
  tar.ReadEntry = requireReadEntry()
  tar.WriteEntry = requireWriteEntry()
  tar.Header = requireHeader()
  tar.Pax = requirePax()
  tar.types = requireTypes()
  return tar
}

let _protected
let hasRequired_protected
function require_protected() {
  if (hasRequired_protected) {
    return _protected
  }
  hasRequired_protected = 1
  _protected = {
    cacheFetches: Symbol.for('pacote.Fetcher._cacheFetches'),
    readPackageJson: Symbol.for('package.Fetcher._readPackageJson'),
    tarballFromResolved: Symbol.for('pacote.Fetcher._tarballFromResolved')
  }
  return _protected
}

let cacheDir
let hasRequiredCacheDir
function requireCacheDir() {
  if (hasRequiredCacheDir) {
    return cacheDir
  }
  hasRequiredCacheDir = 1
  const { resolve } = require$$2$3
  const { tmpdir, homedir } = require$$1$6
  cacheDir = (fakePlatform = false) => {
    const temp = tmpdir()
    const uidOrPid = process.getuid ? process.getuid() : process.pid
    const home = homedir() || resolve(temp, 'npm-' + uidOrPid)
    const platform = fakePlatform || process.platform
    const cacheExtra = platform === 'win32' ? 'npm-cache' : '.npm'
    const cacheRoot = (platform === 'win32' && process.env.LOCALAPPDATA) || home
    return {
      cacache: resolve(cacheRoot, cacheExtra, '_cacache'),
      tufcache: resolve(cacheRoot, cacheExtra, '_tuf')
    }
  }
  return cacheDir
}

let isPackageBin
let hasRequiredIsPackageBin
function requireIsPackageBin() {
  if (hasRequiredIsPackageBin) {
    return isPackageBin
  }
  hasRequiredIsPackageBin = 1
  // Function to determine whether a path is in the package.bin set.
  // Used to prevent issues when people publish a package from a
  // windows machine, and then install with --no-bin-links.
  //
  // Note: this is not possible in remote or file fetchers, since
  // we don't have the manifest until AFTER we've unpacked.  But the
  // main use case is registry fetching with git a distant second,
  // so that's an acceptable edge case to not handle.

  const binObj = (name, bin) =>
    typeof bin === 'string'
      ? {
          [name]: bin
        }
      : bin
  const hasBin = (pkg, path) => {
    const bin = binObj(pkg.name, pkg.bin)
    const p = path.replace(/^[^\\/]*\//, '')
    for (const kv of Object.entries(bin)) {
      if (kv[1] === p) {
        return true
      }
    }
    return false
  }
  isPackageBin = (pkg, path) => (pkg && pkg.bin ? hasBin(pkg, path) : false)
  return isPackageBin
}

let trailingSlashes
let hasRequiredTrailingSlashes
function requireTrailingSlashes() {
  if (hasRequiredTrailingSlashes) {
    return trailingSlashes
  }
  hasRequiredTrailingSlashes = 1
  const removeTrailingSlashes = input => {
    // in order to avoid regexp redos detection
    let output = input
    while (output.endsWith('/')) {
      output = output.slice(0, -1)
    }
    return output
  }
  trailingSlashes = removeTrailingSlashes
  return trailingSlashes
}

const commonjs$4 = {}

const commonjs$3 = {}

const commonjs$2 = {}

let hasRequiredCommonjs$4
function requireCommonjs$4() {
  if (hasRequiredCommonjs$4) {
    return commonjs$2
  }
  hasRequiredCommonjs$4 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.range = exports.balanced = void 0
    const balanced = (a, b, str) => {
      const ma = a instanceof RegExp ? maybeMatch(a, str) : a
      const mb = b instanceof RegExp ? maybeMatch(b, str) : b
      const r = ma !== null && mb != null && (0, exports.range)(ma, mb, str)
      return (
        r && {
          start: r[0],
          end: r[1],
          pre: str.slice(0, r[0]),
          body: str.slice(r[0] + ma.length, r[1]),
          post: str.slice(r[1] + mb.length)
        }
      )
    }
    exports.balanced = balanced
    const maybeMatch = (reg, str) => {
      const m = str.match(reg)
      return m ? m[0] : null
    }
    const range = (a, b, str) => {
      let begs,
        beg,
        left,
        right = undefined,
        result
      let ai = str.indexOf(a)
      let bi = str.indexOf(b, ai + 1)
      let i = ai
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi]
        }
        begs = []
        left = str.length
        while (i >= 0 && !result) {
          if (i === ai) {
            begs.push(i)
            ai = str.indexOf(a, i + 1)
          } else if (begs.length === 1) {
            const r = begs.pop()
            if (r !== undefined) {
              result = [r, bi]
            }
          } else {
            beg = begs.pop()
            if (beg !== undefined && beg < left) {
              left = beg
              right = bi
            }
            bi = str.indexOf(b, i + 1)
          }
          i = ai < bi && ai >= 0 ? ai : bi
        }
        if (begs.length && right !== undefined) {
          result = [left, right]
        }
      }
      return result
    }
    exports.range = range
  })(commonjs$2)
  return commonjs$2
}

let hasRequiredCommonjs$3
function requireCommonjs$3() {
  if (hasRequiredCommonjs$3) {
    return commonjs$3
  }
  hasRequiredCommonjs$3 = 1
  Object.defineProperty(commonjs$3, '__esModule', {
    value: true
  })
  commonjs$3.expand = expand
  const balanced_match_1 = requireCommonjs$4()
  const escSlash = '\0SLASH' + Math.random() + '\0'
  const escOpen = '\0OPEN' + Math.random() + '\0'
  const escClose = '\0CLOSE' + Math.random() + '\0'
  const escComma = '\0COMMA' + Math.random() + '\0'
  const escPeriod = '\0PERIOD' + Math.random() + '\0'
  const escSlashPattern = new RegExp(escSlash, 'g')
  const escOpenPattern = new RegExp(escOpen, 'g')
  const escClosePattern = new RegExp(escClose, 'g')
  const escCommaPattern = new RegExp(escComma, 'g')
  const escPeriodPattern = new RegExp(escPeriod, 'g')
  const slashPattern = /\\\\/g
  const openPattern = /\\{/g
  const closePattern = /\\}/g
  const commaPattern = /\\,/g
  const periodPattern = /\\./g
  function numeric(str) {
    return !isNaN(str) ? parseInt(str, 10) : str.charCodeAt(0)
  }
  function escapeBraces(str) {
    return str
      .replace(slashPattern, escSlash)
      .replace(openPattern, escOpen)
      .replace(closePattern, escClose)
      .replace(commaPattern, escComma)
      .replace(periodPattern, escPeriod)
  }
  function unescapeBraces(str) {
    return str
      .replace(escSlashPattern, '\\')
      .replace(escOpenPattern, '{')
      .replace(escClosePattern, '}')
      .replace(escCommaPattern, ',')
      .replace(escPeriodPattern, '.')
  }
  /**
   * Basically just str.split(","), but handling cases
   * where we have nested braced sections, which should be
   * treated as individual members, like {a,{b,c},d}
   */
  function parseCommaParts(str) {
    if (!str) {
      return ['']
    }
    const parts = []
    const m = (0, balanced_match_1.balanced)('{', '}', str)
    if (!m) {
      return str.split(',')
    }
    const { pre, body, post } = m
    const p = pre.split(',')
    p[p.length - 1] += '{' + body + '}'
    const postParts = parseCommaParts(post)
    if (post.length) {
      p[p.length - 1] += postParts.shift()
      p.push.apply(p, postParts)
    }
    parts.push.apply(parts, p)
    return parts
  }
  function expand(str) {
    if (!str) {
      return []
    }
    // I don't know why Bash 4.3 does this, but it does.
    // Anything starting with {} will have the first two bytes preserved
    // but *only* at the top level, so {},a}b will not expand to anything,
    // but a{},b}c will be expanded to [a}c,abc].
    // One could argue that this is a bug in Bash, but since the goal of
    // this module is to match Bash's rules, we escape a leading {}
    if (str.slice(0, 2) === '{}') {
      str = '\\{\\}' + str.slice(2)
    }
    return expand_(escapeBraces(str), true).map(unescapeBraces)
  }
  function embrace(str) {
    return '{' + str + '}'
  }
  function isPadded(el) {
    return /^-?0\d/.test(el)
  }
  function lte(i, y) {
    return i <= y
  }
  function gte(i, y) {
    return i >= y
  }
  function expand_(str, isTop) {
    /** @type {string[]} */
    const expansions = []
    const m = (0, balanced_match_1.balanced)('{', '}', str)
    if (!m) {
      return [str]
    }
    // no need to expand pre, since it is guaranteed to be free of brace-sets
    const pre = m.pre
    const post = m.post.length ? expand_(m.post, false) : ['']
    if (/\$$/.test(m.pre)) {
      for (let k = 0; k < post.length; k++) {
        const expansion = pre + '{' + m.body + '}' + post[k]
        expansions.push(expansion)
      }
    } else {
      const isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body)
      const isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(
        m.body
      )
      const isSequence = isNumericSequence || isAlphaSequence
      const isOptions = m.body.indexOf(',') >= 0
      if (!isSequence && !isOptions) {
        // {a},b}
        if (m.post.match(/,(?!,).*\}/)) {
          str = m.pre + '{' + m.body + escClose + m.post
          return expand_(str)
        }
        return [str]
      }
      let n
      if (isSequence) {
        n = m.body.split(/\.\./)
      } else {
        n = parseCommaParts(m.body)
        if (n.length === 1 && n[0] !== undefined) {
          // x{{a,b}}y ==> x{a}y x{b}y
          n = expand_(n[0], false).map(embrace)
          //XXX is this necessary? Can't seem to hit it in tests.
          /* c8 ignore start */
          if (n.length === 1) {
            return post.map(p => m.pre + n[0] + p)
          }
          /* c8 ignore stop */
        }
      }
      // at this point, n is the parts, and we know it's not a comma set
      // with a single entry.
      let N
      if (isSequence && n[0] !== undefined && n[1] !== undefined) {
        const x = numeric(n[0])
        const y = numeric(n[1])
        const width = Math.max(n[0].length, n[1].length)
        let incr =
          n.length === 3 && n[2] !== undefined ? Math.abs(numeric(n[2])) : 1
        let test = lte
        const reverse = y < x
        if (reverse) {
          incr *= -1
          test = gte
        }
        const pad = n.some(isPadded)
        N = []
        for (let i = x; test(i, y); i += incr) {
          let c
          if (isAlphaSequence) {
            c = String.fromCharCode(i)
            if (c === '\\') {
              c = ''
            }
          } else {
            c = String(i)
            if (pad) {
              const need = width - c.length
              if (need > 0) {
                const z = new Array(need + 1).join('0')
                if (i < 0) {
                  c = '-' + z + c.slice(1)
                } else {
                  c = z + c
                }
              }
            }
          }
          N.push(c)
        }
      } else {
        N = []
        for (let j = 0; j < n.length; j++) {
          N.push.apply(N, expand_(n[j], false))
        }
      }
      for (let j = 0; j < N.length; j++) {
        for (let k = 0; k < post.length; k++) {
          const expansion = pre + N[j] + post[k]
          if (!isTop || isSequence || expansion) {
            expansions.push(expansion)
          }
        }
      }
    }
    return expansions
  }
  return commonjs$3
}

const assertValidPattern$1 = {}

let hasRequiredAssertValidPattern$1
function requireAssertValidPattern$1() {
  if (hasRequiredAssertValidPattern$1) {
    return assertValidPattern$1
  }
  hasRequiredAssertValidPattern$1 = 1
  Object.defineProperty(assertValidPattern$1, '__esModule', {
    value: true
  })
  assertValidPattern$1.assertValidPattern = void 0
  const MAX_PATTERN_LENGTH = 1024 * 64
  const assertValidPattern = pattern => {
    if (typeof pattern !== 'string') {
      throw new TypeError('invalid pattern')
    }
    if (pattern.length > MAX_PATTERN_LENGTH) {
      throw new TypeError('pattern is too long')
    }
  }
  assertValidPattern$1.assertValidPattern = assertValidPattern
  return assertValidPattern$1
}

const ast$1 = {}

const braceExpressions$1 = {}

let hasRequiredBraceExpressions$1
function requireBraceExpressions$1() {
  if (hasRequiredBraceExpressions$1) {
    return braceExpressions$1
  }
  hasRequiredBraceExpressions$1 = 1
  // translate the various posix character classes into unicode properties
  // this works across all unicode locales
  Object.defineProperty(braceExpressions$1, '__esModule', {
    value: true
  })
  braceExpressions$1.parseClass = void 0
  // { <posix class>: [<translation>, /u flag required, negated]
  const posixClasses = {
    '[:alnum:]': ['\\p{L}\\p{Nl}\\p{Nd}', true],
    '[:alpha:]': ['\\p{L}\\p{Nl}', true],
    '[:ascii:]': ['\\x' + '00-\\x' + '7f', false],
    '[:blank:]': ['\\p{Zs}\\t', true],
    '[:cntrl:]': ['\\p{Cc}', true],
    '[:digit:]': ['\\p{Nd}', true],
    '[:graph:]': ['\\p{Z}\\p{C}', true, true],
    '[:lower:]': ['\\p{Ll}', true],
    '[:print:]': ['\\p{C}', true],
    '[:punct:]': ['\\p{P}', true],
    '[:space:]': ['\\p{Z}\\t\\r\\n\\v\\f', true],
    '[:upper:]': ['\\p{Lu}', true],
    '[:word:]': ['\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}', true],
    '[:xdigit:]': ['A-Fa-f0-9', false]
  }
  // only need to escape a few things inside of brace expressions
  // escapes: [ \ ] -
  const braceEscape = s => s.replace(/[[\]\\-]/g, '\\$&')
  // escape all regexp magic characters
  const regexpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  // everything has already been escaped, we just have to join
  const rangesToString = ranges => ranges.join('')
  // takes a glob string at a posix brace expression, and returns
  // an equivalent regular expression source, and boolean indicating
  // whether the /u flag needs to be applied, and the number of chars
  // consumed to parse the character class.
  // This also removes out of order ranges, and returns ($.) if the
  // entire class just no good.
  const parseClass = (glob, position) => {
    const pos = position
    /* c8 ignore start */
    if (glob.charAt(pos) !== '[') {
      throw new Error('not in a brace expression')
    }
    /* c8 ignore stop */
    const ranges = []
    const negs = []
    let i = pos + 1
    let sawStart = false
    let uflag = false
    let escaping = false
    let negate = false
    let endPos = pos
    let rangeStart = ''
    WHILE: while (i < glob.length) {
      const c = glob.charAt(i)
      if ((c === '!' || c === '^') && i === pos + 1) {
        negate = true
        i++
        continue
      }
      if (c === ']' && sawStart && !escaping) {
        endPos = i + 1
        break
      }
      sawStart = true
      if (c === '\\') {
        if (!escaping) {
          escaping = true
          i++
          continue
        }
        // escaped \ char, fall through and treat like normal char
      }
      if (c === '[' && !escaping) {
        // either a posix class, a collation equivalent, or just a [
        for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
          if (glob.startsWith(cls, i)) {
            // invalid, [a-[] is fine, but not [a-[:alpha]]
            if (rangeStart) {
              return ['$.', false, glob.length - pos, true]
            }
            i += cls.length
            if (neg) {
              negs.push(unip)
            } else {
              ranges.push(unip)
            }
            uflag = uflag || u
            continue WHILE
          }
        }
      }
      // now it's just a normal character, effectively
      escaping = false
      if (rangeStart) {
        // throw this range away if it's not valid, but others
        // can still match.
        if (c > rangeStart) {
          ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c))
        } else if (c === rangeStart) {
          ranges.push(braceEscape(c))
        }
        rangeStart = ''
        i++
        continue
      }
      // now might be the start of a range.
      // can be either c-d or c-] or c<more...>] or c] at this point
      if (glob.startsWith('-]', i + 1)) {
        ranges.push(braceEscape(c + '-'))
        i += 2
        continue
      }
      if (glob.startsWith('-', i + 1)) {
        rangeStart = c
        i += 2
        continue
      }
      // not the start of a range, just a single character
      ranges.push(braceEscape(c))
      i++
    }
    if (endPos < i) {
      // didn't see the end of the class, not a valid class,
      // but might still be valid as a literal match.
      return ['', false, 0, false]
    }
    // if we got no ranges and no negates, then we have a range that
    // cannot possibly match anything, and that poisons the whole glob
    if (!ranges.length && !negs.length) {
      return ['$.', false, glob.length - pos, true]
    }
    // if we got one positive range, and it's a single character, then that's
    // not actually a magic pattern, it's just that one literal character.
    // we should not treat that as "magic", we should just return the literal
    // character. [_] is a perfectly valid way to escape glob magic chars.
    if (
      negs.length === 0 &&
      ranges.length === 1 &&
      /^\\?.$/.test(ranges[0]) &&
      !negate
    ) {
      const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0]
      return [regexpEscape(r), false, endPos - pos, false]
    }
    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']'
    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']'
    const comb =
      ranges.length && negs.length
        ? '(' + sranges + '|' + snegs + ')'
        : ranges.length
          ? sranges
          : snegs
    return [comb, uflag, endPos - pos, true]
  }
  braceExpressions$1.parseClass = parseClass
  return braceExpressions$1
}

const _unescape$1 = {}

let hasRequired_unescape$1
function require_unescape$1() {
  if (hasRequired_unescape$1) {
    return _unescape$1
  }
  hasRequired_unescape$1 = 1
  Object.defineProperty(_unescape$1, '__esModule', {
    value: true
  })
  _unescape$1.unescape = void 0
  /**
   * Un-escape a string that has been escaped with {@link escape}.
   *
   * If the {@link windowsPathsNoEscape} option is used, then square-brace
   * escapes are removed, but not backslash escapes.  For example, it will turn
   * the string `'[*]'` into `*`, but it will not turn `'\\*'` into `'*'`,
   * becuase `\` is a path separator in `windowsPathsNoEscape` mode.
   *
   * When `windowsPathsNoEscape` is not set, then both brace escapes and
   * backslash escapes are removed.
   *
   * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped
   * or unescaped.
   */
  const unescape = (s, { windowsPathsNoEscape = false } = {}) => {
    return windowsPathsNoEscape
      ? s.replace(/\[([^/\\])\]/g, '$1')
      : s.replace(/((?!\\).|^)\[([^/\\])\]/g, '$1$2').replace(/\\([^/])/g, '$1')
  }
  _unescape$1.unescape = unescape
  return _unescape$1
}

let hasRequiredAst$1
function requireAst$1() {
  if (hasRequiredAst$1) {
    return ast$1
  }
  hasRequiredAst$1 = 1
  // parse a single path portion
  Object.defineProperty(ast$1, '__esModule', {
    value: true
  })
  ast$1.AST = void 0
  const brace_expressions_js_1 = requireBraceExpressions$1()
  const unescape_js_1 = require_unescape$1()
  const types = new Set(['!', '?', '+', '*', '@'])
  const isExtglobType = c => types.has(c)
  // Patterns that get prepended to bind to the start of either the
  // entire string, or just a single path portion, to prevent dots
  // and/or traversal patterns, when needed.
  // Exts don't need the ^ or / bit, because the root binds that already.
  const startNoTraversal = '(?!(?:^|/)\\.\\.?(?:$|/))'
  const startNoDot = '(?!\\.)'
  // characters that indicate a start of pattern needs the "no dots" bit,
  // because a dot *might* be matched. ( is not in the list, because in
  // the case of a child extglob, it will handle the prevention itself.
  const addPatternStart = new Set(['[', '.'])
  // cases where traversal is A-OK, no dot prevention needed
  const justDots = new Set(['..', '.'])
  const reSpecials = new Set('().*{}+?[]^$\\!')
  const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  // any single thing other than /
  const qmark = '[^/]'
  // * => any number of characters
  const star = qmark + '*?'
  // use + when we need to ensure that *something* matches, because the * is
  // the only thing in the path portion.
  const starNoEmpty = qmark + '+?'
  // remove the \ chars that we added if we end up doing a nonmagic compare
  // const deslash = (s: string) => s.replace(/\\(.)/g, '$1')
  class AST {
    type
    #root
    #hasMagic
    #uflag = false
    #parts = []
    #parent
    #parentIndex
    #negs
    #filledNegs = false
    #options
    #toString
    // set to true if it's an extglob with no children
    // (which really means one child of '')
    #emptyExt = false
    constructor(type, parent, options = {}) {
      this.type = type
      // extglobs are inherently magical
      if (type) {
        this.#hasMagic = true
      }
      this.#parent = parent
      this.#root = this.#parent ? this.#parent.#root : this
      this.#options = this.#root === this ? options : this.#root.#options
      this.#negs = this.#root === this ? [] : this.#root.#negs
      if (type === '!' && !this.#root.#filledNegs) {
        this.#negs.push(this)
      }
      this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0
    }
    get hasMagic() {
      /* c8 ignore start */
      if (this.#hasMagic !== undefined) {
        return this.#hasMagic
      }
      /* c8 ignore stop */
      for (const p of this.#parts) {
        if (typeof p === 'string') {
          continue
        }
        if (p.type || p.hasMagic) {
          return (this.#hasMagic = true)
        }
      }
      // note: will be undefined until we generate the regexp src and find out
      return this.#hasMagic
    }
    // reconstructs the pattern
    toString() {
      if (this.#toString !== undefined) {
        return this.#toString
      }
      if (!this.type) {
        return (this.#toString = this.#parts.map(p => String(p)).join(''))
      } else {
        return (this.#toString =
          this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')')
      }
    }
    #fillNegs() {
      /* c8 ignore start */
      if (this !== this.#root) {
        throw new Error('should only call on root')
      }
      if (this.#filledNegs) {
        return this
      }
      /* c8 ignore stop */
      // call toString() once to fill this out
      this.toString()
      this.#filledNegs = true
      let n
      while ((n = this.#negs.pop())) {
        if (n.type !== '!') {
          continue
        }
        // walk up the tree, appending everthing that comes AFTER parentIndex
        let p = n
        let pp = p.#parent
        while (pp) {
          for (
            let i = p.#parentIndex + 1;
            !pp.type && i < pp.#parts.length;
            i++
          ) {
            for (const part of n.#parts) {
              /* c8 ignore start */
              if (typeof part === 'string') {
                throw new Error('string part in extglob AST??')
              }
              /* c8 ignore stop */
              part.copyIn(pp.#parts[i])
            }
          }
          p = pp
          pp = p.#parent
        }
      }
      return this
    }
    push(...parts) {
      for (const p of parts) {
        if (p === '') {
          continue
        }
        /* c8 ignore start */
        if (
          typeof p !== 'string' &&
          !(p instanceof AST && p.#parent === this)
        ) {
          throw new Error('invalid part: ' + p)
        }
        /* c8 ignore stop */
        this.#parts.push(p)
      }
    }
    toJSON() {
      const ret =
        this.type === null
          ? this.#parts
              .slice()
              .map(p => (typeof p === 'string' ? p : p.toJSON()))
          : [this.type, ...this.#parts.map(p => p.toJSON())]
      if (this.isStart() && !this.type) {
        ret.unshift([])
      }
      if (
        this.isEnd() &&
        (this === this.#root ||
          (this.#root.#filledNegs && this.#parent?.type === '!'))
      ) {
        ret.push({})
      }
      return ret
    }
    isStart() {
      if (this.#root === this) {
        return true
      }
      // if (this.type) return !!this.#parent?.isStart()
      if (!this.#parent?.isStart()) {
        return false
      }
      if (this.#parentIndex === 0) {
        return true
      }
      // if everything AHEAD of this is a negation, then it's still the "start"
      const p = this.#parent
      for (let i = 0; i < this.#parentIndex; i++) {
        const pp = p.#parts[i]
        if (!(pp instanceof AST && pp.type === '!')) {
          return false
        }
      }
      return true
    }
    isEnd() {
      if (this.#root === this) {
        return true
      }
      if (this.#parent?.type === '!') {
        return true
      }
      if (!this.#parent?.isEnd()) {
        return false
      }
      if (!this.type) {
        return this.#parent?.isEnd()
      }
      // if not root, it'll always have a parent
      /* c8 ignore start */
      const pl = this.#parent ? this.#parent.#parts.length : 0
      /* c8 ignore stop */
      return this.#parentIndex === pl - 1
    }
    copyIn(part) {
      if (typeof part === 'string') {
        this.push(part)
      } else {
        this.push(part.clone(this))
      }
    }
    clone(parent) {
      const c = new AST(this.type, parent)
      for (const p of this.#parts) {
        c.copyIn(p)
      }
      return c
    }
    static #parseAST(str, ast, pos, opt) {
      let escaping = false
      let inBrace = false
      let braceStart = -1
      let braceNeg = false
      if (ast.type === null) {
        // outside of a extglob, append until we find a start
        let i = pos
        let acc = ''
        while (i < str.length) {
          const c = str.charAt(i++)
          // still accumulate escapes at this point, but we do ignore
          // starts that are escaped
          if (escaping || c === '\\') {
            escaping = !escaping
            acc += c
            continue
          }
          if (inBrace) {
            if (i === braceStart + 1) {
              if (c === '^' || c === '!') {
                braceNeg = true
              }
            } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
              inBrace = false
            }
            acc += c
            continue
          } else if (c === '[') {
            inBrace = true
            braceStart = i
            braceNeg = false
            acc += c
            continue
          }
          if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {
            ast.push(acc)
            acc = ''
            const ext = new AST(c, ast)
            i = AST.#parseAST(str, ext, i, opt)
            ast.push(ext)
            continue
          }
          acc += c
        }
        ast.push(acc)
        return i
      }
      // some kind of extglob, pos is at the (
      // find the next | or )
      let i = pos + 1
      let part = new AST(null, ast)
      const parts = []
      let acc = ''
      while (i < str.length) {
        const c = str.charAt(i++)
        // still accumulate escapes at this point, but we do ignore
        // starts that are escaped
        if (escaping || c === '\\') {
          escaping = !escaping
          acc += c
          continue
        }
        if (inBrace) {
          if (i === braceStart + 1) {
            if (c === '^' || c === '!') {
              braceNeg = true
            }
          } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
            inBrace = false
          }
          acc += c
          continue
        } else if (c === '[') {
          inBrace = true
          braceStart = i
          braceNeg = false
          acc += c
          continue
        }
        if (isExtglobType(c) && str.charAt(i) === '(') {
          part.push(acc)
          acc = ''
          const ext = new AST(c, part)
          part.push(ext)
          i = AST.#parseAST(str, ext, i, opt)
          continue
        }
        if (c === '|') {
          part.push(acc)
          acc = ''
          parts.push(part)
          part = new AST(null, ast)
          continue
        }
        if (c === ')') {
          if (acc === '' && ast.#parts.length === 0) {
            ast.#emptyExt = true
          }
          part.push(acc)
          acc = ''
          ast.push(...parts, part)
          return i
        }
        acc += c
      }
      // unfinished extglob
      // if we got here, it was a malformed extglob! not an extglob, but
      // maybe something else in there.
      ast.type = null
      ast.#hasMagic = undefined
      ast.#parts = [str.substring(pos - 1)]
      return i
    }
    static fromGlob(pattern, options = {}) {
      const ast = new AST(null, undefined, options)
      AST.#parseAST(pattern, ast, 0, options)
      return ast
    }
    // returns the regular expression if there's magic, or the unescaped
    // string if not.
    toMMPattern() {
      // should only be called on root
      /* c8 ignore start */
      if (this !== this.#root) {
        return this.#root.toMMPattern()
      }
      /* c8 ignore stop */
      const glob = this.toString()
      const [re, body, hasMagic, uflag] = this.toRegExpSource()
      // if we're in nocase mode, and not nocaseMagicOnly, then we do
      // still need a regular expression if we have to case-insensitively
      // match capital/lowercase characters.
      const anyMagic =
        hasMagic ||
        this.#hasMagic ||
        (this.#options.nocase &&
          !this.#options.nocaseMagicOnly &&
          glob.toUpperCase() !== glob.toLowerCase())
      if (!anyMagic) {
        return body
      }
      const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '')
      return Object.assign(new RegExp(`^${re}$`, flags), {
        _src: re,
        _glob: glob
      })
    }
    get options() {
      return this.#options
    }
    // returns the string match, the regexp source, whether there's magic
    // in the regexp (so a regular expression is required) and whether or
    // not the uflag is needed for the regular expression (for posix classes)
    // TODO: instead of injecting the start/end at this point, just return
    // the BODY of the regexp, along with the start/end portions suitable
    // for binding the start/end in either a joined full-path makeRe context
    // (where we bind to (^|/), or a standalone matchPart context (where
    // we bind to ^, and not /).  Otherwise slashes get duped!
    //
    // In part-matching mode, the start is:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: ^(?!\.\.?$)
    // - if dots allowed or not possible: ^
    // - if dots possible and not allowed: ^(?!\.)
    // end is:
    // - if not isEnd(): nothing
    // - else: $
    //
    // In full-path matching mode, we put the slash at the START of the
    // pattern, so start is:
    // - if first pattern: same as part-matching mode
    // - if not isStart(): nothing
    // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
    // - if dots allowed or not possible: /
    // - if dots possible and not allowed: /(?!\.)
    // end is:
    // - if last pattern, same as part-matching mode
    // - else nothing
    //
    // Always put the (?:$|/) on negated tails, though, because that has to be
    // there to bind the end of the negated pattern portion, and it's easier to
    // just stick it in now rather than try to inject it later in the middle of
    // the pattern.
    //
    // We can just always return the same end, and leave it up to the caller
    // to know whether it's going to be used joined or in parts.
    // And, if the start is adjusted slightly, can do the same there:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
    // - if dots allowed or not possible: (?:/|^)
    // - if dots possible and not allowed: (?:/|^)(?!\.)
    //
    // But it's better to have a simpler binding without a conditional, for
    // performance, so probably better to return both start options.
    //
    // Then the caller just ignores the end if it's not the first pattern,
    // and the start always gets applied.
    //
    // But that's always going to be $ if it's the ending pattern, or nothing,
    // so the caller can just attach $ at the end of the pattern when building.
    //
    // So the todo is:
    // - better detect what kind of start is needed
    // - return both flavors of starting pattern
    // - attach $ at the end of the pattern when creating the actual RegExp
    //
    // Ah, but wait, no, that all only applies to the root when the first pattern
    // is not an extglob. If the first pattern IS an extglob, then we need all
    // that dot prevention biz to live in the extglob portions, because eg
    // +(*|.x*) can match .xy but not .yx.
    //
    // So, return the two flavors if it's #root and the first child is not an
    // AST, otherwise leave it to the child AST to handle it, and there,
    // use the (?:^|/) style of start binding.
    //
    // Even simplified further:
    // - Since the start for a join is eg /(?!\.) and the start for a part
    // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
    // or start or whatever) and prepend ^ or / at the Regexp construction.
    toRegExpSource(allowDot) {
      const dot = allowDot ?? !!this.#options.dot
      if (this.#root === this) {
        this.#fillNegs()
      }
      if (!this.type) {
        const noEmpty = this.isStart() && this.isEnd()
        const src = this.#parts
          .map(p => {
            const [re, _, hasMagic, uflag] =
              typeof p === 'string'
                ? AST.#parseGlob(p, this.#hasMagic, noEmpty)
                : p.toRegExpSource(allowDot)
            this.#hasMagic = this.#hasMagic || hasMagic
            this.#uflag = this.#uflag || uflag
            return re
          })
          .join('')
        let start = ''
        if (this.isStart()) {
          if (typeof this.#parts[0] === 'string') {
            // this is the string that will match the start of the pattern,
            // so we need to protect against dots and such.
            // '.' and '..' cannot match unless the pattern is that exactly,
            // even if it starts with . or dot:true is set.
            const dotTravAllowed =
              this.#parts.length === 1 && justDots.has(this.#parts[0])
            if (!dotTravAllowed) {
              const aps = addPatternStart
              // check if we have a possibility of matching . or ..,
              // and prevent that.
              const needNoTrav =
                // dots are allowed, and the pattern starts with [ or .
                (dot && aps.has(src.charAt(0))) ||
                // the pattern starts with \., and then [ or .
                (src.startsWith('\\.') && aps.has(src.charAt(2))) ||
                // the pattern starts with \.\., and then [ or .
                (src.startsWith('\\.\\.') && aps.has(src.charAt(4)))
              // no need to prevent dots if it can't match a dot, or if a
              // sub-pattern will be preventing it anyway.
              const needNoDot = !dot && !allowDot && aps.has(src.charAt(0))
              start = needNoTrav
                ? startNoTraversal
                : needNoDot
                  ? startNoDot
                  : ''
            }
          }
        }
        // append the "end of path portion" pattern to negation tails
        let end = ''
        if (
          this.isEnd() &&
          this.#root.#filledNegs &&
          this.#parent?.type === '!'
        ) {
          end = '(?:$|\\/)'
        }
        const final = start + src + end
        return [
          final,
          (0, unescape_js_1.unescape)(src),
          (this.#hasMagic = !!this.#hasMagic),
          this.#uflag
        ]
      }
      // We need to calculate the body *twice* if it's a repeat pattern
      // at the start, once in nodot mode, then again in dot mode, so a
      // pattern like *(?) can match 'x.y'
      const repeated = this.type === '*' || this.type === '+'
      // some kind of extglob
      const start = this.type === '!' ? '(?:(?!(?:' : '(?:'
      let body = this.#partsToRegExp(dot)
      if (this.isStart() && this.isEnd() && !body && this.type !== '!') {
        // invalid extglob, has to at least be *something* present, if it's
        // the entire path portion.
        const s = this.toString()
        this.#parts = [s]
        this.type = null
        this.#hasMagic = undefined
        return [s, (0, unescape_js_1.unescape)(this.toString()), false, false]
      }
      // XXX abstract out this map method
      let bodyDotAllowed =
        !repeated || allowDot || dot || !startNoDot
          ? ''
          : this.#partsToRegExp(true)
      if (bodyDotAllowed === body) {
        bodyDotAllowed = ''
      }
      if (bodyDotAllowed) {
        body = `(?:${body})(?:${bodyDotAllowed})*?`
      }
      // an empty !() is exactly equivalent to a starNoEmpty
      let final = ''
      if (this.type === '!' && this.#emptyExt) {
        final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty
      } else {
        const close =
          this.type === '!'
            ? // !() must match something,but !(x) can match ''
              '))' +
              (this.isStart() && !dot && !allowDot ? startNoDot : '') +
              star +
              ')'
            : this.type === '@'
              ? ')'
              : this.type === '?'
                ? ')?'
                : this.type === '+' && bodyDotAllowed
                  ? ')'
                  : this.type === '*' && bodyDotAllowed
                    ? `)?`
                    : `)${this.type}`
        final = start + body + close
      }
      return [
        final,
        (0, unescape_js_1.unescape)(body),
        (this.#hasMagic = !!this.#hasMagic),
        this.#uflag
      ]
    }
    #partsToRegExp(dot) {
      return this.#parts
        .map(p => {
          // extglob ASTs should only contain parent ASTs
          /* c8 ignore start */
          if (typeof p === 'string') {
            throw new Error('string type in extglob ast??')
          }
          /* c8 ignore stop */
          // can ignore hasMagic, because extglobs are already always magic
          const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot)
          this.#uflag = this.#uflag || uflag
          return re
        })
        .filter(p => !(this.isStart() && this.isEnd()) || !!p)
        .join('|')
    }
    static #parseGlob(glob, hasMagic, noEmpty = false) {
      let escaping = false
      let re = ''
      let uflag = false
      for (let i = 0; i < glob.length; i++) {
        const c = glob.charAt(i)
        if (escaping) {
          escaping = false
          re += (reSpecials.has(c) ? '\\' : '') + c
          continue
        }
        if (c === '\\') {
          if (i === glob.length - 1) {
            re += '\\\\'
          } else {
            escaping = true
          }
          continue
        }
        if (c === '[') {
          const [src, needUflag, consumed, magic] = (0,
          brace_expressions_js_1.parseClass)(glob, i)
          if (consumed) {
            re += src
            uflag = uflag || needUflag
            i += consumed - 1
            hasMagic = hasMagic || magic
            continue
          }
        }
        if (c === '*') {
          if (noEmpty && glob === '*') {
            re += starNoEmpty
          } else {
            re += star
          }
          hasMagic = true
          continue
        }
        if (c === '?') {
          re += qmark
          hasMagic = true
          continue
        }
        re += regExpEscape(c)
      }
      return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag]
    }
  }
  ast$1.AST = AST
  return ast$1
}

const _escape$1 = {}

let hasRequired_escape$1
function require_escape$1() {
  if (hasRequired_escape$1) {
    return _escape$1
  }
  hasRequired_escape$1 = 1
  Object.defineProperty(_escape$1, '__esModule', {
    value: true
  })
  _escape$1.escape = void 0
  /**
   * Escape all magic characters in a glob pattern.
   *
   * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}
   * option is used, then characters are escaped by wrapping in `[]`, because
   * a magic character wrapped in a character class can only be satisfied by
   * that exact character.  In this mode, `\` is _not_ escaped, because it is
   * not interpreted as a magic character, but instead as a path separator.
   */
  const escape = (s, { windowsPathsNoEscape = false } = {}) => {
    // don't need to escape +@! because we escape the parens
    // that make those magic, and escaping ! as [!] isn't valid,
    // because [!]] is a valid glob class meaning not ']'.
    return windowsPathsNoEscape
      ? s.replace(/[?*()[\]]/g, '[$&]')
      : s.replace(/[?*()[\]\\]/g, '\\$&')
  }
  _escape$1.escape = escape
  return _escape$1
}

let hasRequiredCommonjs$2
function requireCommonjs$2() {
  if (hasRequiredCommonjs$2) {
    return commonjs$4
  }
  hasRequiredCommonjs$2 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.unescape =
      exports.escape =
      exports.AST =
      exports.Minimatch =
      exports.match =
      exports.makeRe =
      exports.braceExpand =
      exports.defaults =
      exports.filter =
      exports.GLOBSTAR =
      exports.sep =
      exports.minimatch =
        void 0
    const brace_expansion_1 = requireCommonjs$3()
    const assert_valid_pattern_js_1 = requireAssertValidPattern$1()
    const ast_js_1 = requireAst$1()
    const escape_js_1 = require_escape$1()
    const unescape_js_1 = require_unescape$1()
    const minimatch = (p, pattern, options = {}) => {
      ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
      // shortcut: comments match nothing.
      if (!options.nocomment && pattern.charAt(0) === '#') {
        return false
      }
      return new Minimatch(pattern, options).match(p)
    }
    exports.minimatch = minimatch
    // Optimized checking for the most common glob patterns.
    const starDotExtRE = /^\*+([^+@!?*[(]*)$/
    const starDotExtTest = ext => f => !f.startsWith('.') && f.endsWith(ext)
    const starDotExtTestDot = ext => f => f.endsWith(ext)
    const starDotExtTestNocase = ext => {
      ext = ext.toLowerCase()
      return f => !f.startsWith('.') && f.toLowerCase().endsWith(ext)
    }
    const starDotExtTestNocaseDot = ext => {
      ext = ext.toLowerCase()
      return f => f.toLowerCase().endsWith(ext)
    }
    const starDotStarRE = /^\*+\.\*+$/
    const starDotStarTest = f => !f.startsWith('.') && f.includes('.')
    const starDotStarTestDot = f => f !== '.' && f !== '..' && f.includes('.')
    const dotStarRE = /^\.\*+$/
    const dotStarTest = f => f !== '.' && f !== '..' && f.startsWith('.')
    const starRE = /^\*+$/
    const starTest = f => f.length !== 0 && !f.startsWith('.')
    const starTestDot = f => f.length !== 0 && f !== '.' && f !== '..'
    const qmarksRE = /^\?+([^+@!?*[(]*)?$/
    const qmarksTestNocase = ([$0, ext = '']) => {
      const noext = qmarksTestNoExt([$0])
      if (!ext) {
        return noext
      }
      ext = ext.toLowerCase()
      return f => noext(f) && f.toLowerCase().endsWith(ext)
    }
    const qmarksTestNocaseDot = ([$0, ext = '']) => {
      const noext = qmarksTestNoExtDot([$0])
      if (!ext) {
        return noext
      }
      ext = ext.toLowerCase()
      return f => noext(f) && f.toLowerCase().endsWith(ext)
    }
    const qmarksTestDot = ([$0, ext = '']) => {
      const noext = qmarksTestNoExtDot([$0])
      return !ext ? noext : f => noext(f) && f.endsWith(ext)
    }
    const qmarksTest = ([$0, ext = '']) => {
      const noext = qmarksTestNoExt([$0])
      return !ext ? noext : f => noext(f) && f.endsWith(ext)
    }
    const qmarksTestNoExt = ([$0]) => {
      const len = $0.length
      return f => f.length === len && !f.startsWith('.')
    }
    const qmarksTestNoExtDot = ([$0]) => {
      const len = $0.length
      return f => f.length === len && f !== '.' && f !== '..'
    }
    /* c8 ignore start */
    const defaultPlatform =
      typeof process === 'object' && process
        ? (typeof process.env === 'object' &&
            process.env &&
            process.env.__MINIMATCH_TESTING_PLATFORM__) ||
          process.platform
        : 'posix'
    const path = {
      win32: {
        sep: '\\'
      },
      posix: {
        sep: '/'
      }
    }
    /* c8 ignore stop */
    exports.sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep
    exports.minimatch.sep = exports.sep
    exports.GLOBSTAR = Symbol('globstar **')
    exports.minimatch.GLOBSTAR = exports.GLOBSTAR
    // any single thing other than /
    // don't need to escape / when using new RegExp()
    const qmark = '[^/]'
    // * => any number of characters
    const star = qmark + '*?'
    // ** when dots are allowed.  Anything goes, except .. and .
    // not (^ or / followed by one or two dots followed by $ or /),
    // followed by anything, any number of times.
    const twoStarDot = '(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?'
    // not a ^ or / followed by a dot,
    // followed by anything, any number of times.
    const twoStarNoDot = '(?:(?!(?:\\/|^)\\.).)*?'
    const filter =
      (pattern, options = {}) =>
      p =>
        (0, exports.minimatch)(p, pattern, options)
    exports.filter = filter
    exports.minimatch.filter = exports.filter
    const ext = (a, b = {}) => Object.assign({}, a, b)
    const defaults = def => {
      if (!def || typeof def !== 'object' || !Object.keys(def).length) {
        return exports.minimatch
      }
      const orig = exports.minimatch
      const m = (p, pattern, options = {}) =>
        orig(p, pattern, ext(def, options))
      return Object.assign(m, {
        Minimatch: class Minimatch extends orig.Minimatch {
          constructor(pattern, options = {}) {
            super(pattern, ext(def, options))
          }
          static defaults(options) {
            return orig.defaults(ext(def, options)).Minimatch
          }
        },
        AST: class AST extends orig.AST {
          /* c8 ignore start */
          constructor(type, parent, options = {}) {
            super(type, parent, ext(def, options))
          }
          /* c8 ignore stop */
          static fromGlob(pattern, options = {}) {
            return orig.AST.fromGlob(pattern, ext(def, options))
          }
        },
        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),
        escape: (s, options = {}) => orig.escape(s, ext(def, options)),
        filter: (pattern, options = {}) =>
          orig.filter(pattern, ext(def, options)),
        defaults: options => orig.defaults(ext(def, options)),
        makeRe: (pattern, options = {}) =>
          orig.makeRe(pattern, ext(def, options)),
        braceExpand: (pattern, options = {}) =>
          orig.braceExpand(pattern, ext(def, options)),
        match: (list, pattern, options = {}) =>
          orig.match(list, pattern, ext(def, options)),
        sep: orig.sep,
        GLOBSTAR: exports.GLOBSTAR
      })
    }
    exports.defaults = defaults
    exports.minimatch.defaults = exports.defaults
    // Brace expansion:
    // a{b,c}d -> abd acd
    // a{b,}c -> abc ac
    // a{0..3}d -> a0d a1d a2d a3d
    // a{b,c{d,e}f}g -> abg acdfg acefg
    // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
    //
    // Invalid sets are not expanded.
    // a{2..}b -> a{2..}b
    // a{b}c -> a{b}c
    const braceExpand = (pattern, options = {}) => {
      ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
      // Thanks to Yeting Li <https://github.com/yetingli> for
      // improving this regexp to avoid a ReDOS vulnerability.
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        // shortcut. no need to expand.
        return [pattern]
      }
      return (0, brace_expansion_1.expand)(pattern)
    }
    exports.braceExpand = braceExpand
    exports.minimatch.braceExpand = exports.braceExpand
    // parse a component of the expanded set.
    // At this point, no pattern may contain "/" in it
    // so we're going to return a 2d array, where each entry is the full
    // pattern, split on '/', and then turned into a regular expression.
    // A regexp is made at the end which joins each array with an
    // escaped /, and another full one which joins each regexp with |.
    //
    // Following the lead of Bash 4.1, note that "**" only has special meaning
    // when it is the *only* thing in a path portion.  Otherwise, any series
    // of * is equivalent to a single *.  Globstar behavior is enabled by
    // default, and can be disabled by setting options.noglobstar.
    const makeRe = (pattern, options = {}) =>
      new Minimatch(pattern, options).makeRe()
    exports.makeRe = makeRe
    exports.minimatch.makeRe = exports.makeRe
    const match = (list, pattern, options = {}) => {
      const mm = new Minimatch(pattern, options)
      list = list.filter(f => mm.match(f))
      if (mm.options.nonull && !list.length) {
        list.push(pattern)
      }
      return list
    }
    exports.match = match
    exports.minimatch.match = exports.match
    // replace stuff like \* with *
    const globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/
    const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
    class Minimatch {
      options
      set;
      pattern
      windowsPathsNoEscape
      nonegate
      negate
      comment
      empty
      preserveMultipleSlashes
      partial
      globSet
      globParts
      nocase
      isWindows
      platform
      windowsNoMagicRoot
      regexp
      constructor(pattern, options = {}) {
        ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
        options = options || {}
        this.options = options
        this.pattern = pattern
        this.platform = options.platform || defaultPlatform
        this.isWindows = this.platform === 'win32'
        this.windowsPathsNoEscape =
          !!options.windowsPathsNoEscape || options.allowWindowsEscape === false
        if (this.windowsPathsNoEscape) {
          this.pattern = this.pattern.replace(/\\/g, '/')
        }
        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes
        this.regexp = null
        this.negate = false
        this.nonegate = !!options.nonegate
        this.comment = false
        this.empty = false
        this.partial = !!options.partial
        this.nocase = !!this.options.nocase
        this.windowsNoMagicRoot =
          options.windowsNoMagicRoot !== undefined
            ? options.windowsNoMagicRoot
            : !!(this.isWindows && this.nocase)
        this.globSet = []
        this.globParts = []
        this.set = []
        // make the set of regexps etc.
        this.make()
      }
      hasMagic() {
        if (this.options.magicalBraces && this.set.length > 1) {
          return true
        }
        for (const pattern of this.set) {
          for (const part of pattern) {
            if (typeof part !== 'string') {
              return true
            }
          }
        }
        return false
      }
      debug(..._) {}
      make() {
        const pattern = this.pattern
        const options = this.options
        // empty patterns and comments match nothing.
        if (!options.nocomment && pattern.charAt(0) === '#') {
          this.comment = true
          return
        }
        if (!pattern) {
          this.empty = true
          return
        }
        // step 1: figure out negation, etc.
        this.parseNegate()
        // step 2: expand braces
        this.globSet = [...new Set(this.braceExpand())]
        if (options.debug) {
          this.debug = (...args) => console.error(...args)
        }
        this.debug(this.pattern, this.globSet)
        // step 3: now we have a set, so turn each one into a series of
        // path-portion matching patterns.
        // These will be regexps, except in the case of "**", which is
        // set to the GLOBSTAR object for globstar behavior,
        // and will not contain any / characters
        //
        // First, we preprocess to make the glob pattern sets a bit simpler
        // and deduped.  There are some perf-killing patterns that can cause
        // problems with a glob walk, but we can simplify them down a bit.
        const rawGlobParts = this.globSet.map(s => this.slashSplit(s))
        this.globParts = this.preprocess(rawGlobParts)
        this.debug(this.pattern, this.globParts)
        // glob --> regexps
        let set = this.globParts.map((s, _, __) => {
          if (this.isWindows && this.windowsNoMagicRoot) {
            // check if it's a drive or unc path.
            const isUNC =
              s[0] === '' &&
              s[1] === '' &&
              (s[2] === '?' || !globMagic.test(s[2])) &&
              !globMagic.test(s[3])
            const isDrive = /^[a-z]:/i.test(s[0])
            if (isUNC) {
              return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))]
            } else if (isDrive) {
              return [s[0], ...s.slice(1).map(ss => this.parse(ss))]
            }
          }
          return s.map(ss => this.parse(ss))
        })
        this.debug(this.pattern, set)
        // filter out everything that didn't compile properly.
        this.set = set.filter(s => s.indexOf(false) === -1)
        // do not treat the ? in UNC paths as magic
        if (this.isWindows) {
          for (let i = 0; i < this.set.length; i++) {
            const p = this.set[i]
            if (
              p[0] === '' &&
              p[1] === '' &&
              this.globParts[i][2] === '?' &&
              typeof p[3] === 'string' &&
              /^[a-z]:$/i.test(p[3])
            ) {
              p[2] = '?'
            }
          }
        }
        this.debug(this.pattern, this.set)
      }
      // various transforms to equivalent pattern sets that are
      // faster to process in a filesystem walk.  The goal is to
      // eliminate what we can, and push all ** patterns as far
      // to the right as possible, even if it increases the number
      // of patterns that we have to process.
      preprocess(globParts) {
        // if we're not in globstar mode, then turn all ** into *
        if (this.options.noglobstar) {
          for (let i = 0; i < globParts.length; i++) {
            for (let j = 0; j < globParts[i].length; j++) {
              if (globParts[i][j] === '**') {
                globParts[i][j] = '*'
              }
            }
          }
        }
        const { optimizationLevel = 1 } = this.options
        if (optimizationLevel >= 2) {
          // aggressive optimization for the purpose of fs walking
          globParts = this.firstPhasePreProcess(globParts)
          globParts = this.secondPhasePreProcess(globParts)
        } else if (optimizationLevel >= 1) {
          // just basic optimizations to remove some .. parts
          globParts = this.levelOneOptimize(globParts)
        } else {
          // just collapse multiple ** portions into one
          globParts = this.adjascentGlobstarOptimize(globParts)
        }
        return globParts
      }
      // just get rid of adjascent ** portions
      adjascentGlobstarOptimize(globParts) {
        return globParts.map(parts => {
          let gs = -1
          while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
            let i = gs
            while (parts[i + 1] === '**') {
              i++
            }
            if (i !== gs) {
              parts.splice(gs, i - gs)
            }
          }
          return parts
        })
      }
      // get rid of adjascent ** and resolve .. portions
      levelOneOptimize(globParts) {
        return globParts.map(parts => {
          parts = parts.reduce((set, part) => {
            const prev = set[set.length - 1]
            if (part === '**' && prev === '**') {
              return set
            }
            if (part === '..') {
              if (prev && prev !== '..' && prev !== '.' && prev !== '**') {
                set.pop()
                return set
              }
            }
            set.push(part)
            return set
          }, [])
          return parts.length === 0 ? [''] : parts
        })
      }
      levelTwoFileOptimize(parts) {
        if (!Array.isArray(parts)) {
          parts = this.slashSplit(parts)
        }
        let didSomething = false
        do {
          didSomething = false
          // <pre>/<e>/<rest> -> <pre>/<rest>
          if (!this.preserveMultipleSlashes) {
            for (let i = 1; i < parts.length - 1; i++) {
              const p = parts[i]
              // don't squeeze out UNC patterns
              if (i === 1 && p === '' && parts[0] === '') {
                continue
              }
              if (p === '.' || p === '') {
                didSomething = true
                parts.splice(i, 1)
                i--
              }
            }
            if (
              parts[0] === '.' &&
              parts.length === 2 &&
              (parts[1] === '.' || parts[1] === '')
            ) {
              didSomething = true
              parts.pop()
            }
          }
          // <pre>/<p>/../<rest> -> <pre>/<rest>
          let dd = 0
          while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
            const p = parts[dd - 1]
            if (p && p !== '.' && p !== '..' && p !== '**') {
              didSomething = true
              parts.splice(dd - 1, 2)
              dd -= 2
            }
          }
        } while (didSomething)
        return parts.length === 0 ? [''] : parts
      }
      // First phase: single-pattern processing
      // <pre> is 1 or more portions
      // <rest> is 1 or more portions
      // <p> is any portion other than ., .., '', or **
      // <e> is . or ''
      //
      // **/.. is *brutal* for filesystem walking performance, because
      // it effectively resets the recursive walk each time it occurs,
      // and ** cannot be reduced out by a .. pattern part like a regexp
      // or most strings (other than .., ., and '') can be.
      //
      // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
      // <pre>/<e>/<rest> -> <pre>/<rest>
      // <pre>/<p>/../<rest> -> <pre>/<rest>
      // **/**/<rest> -> **/<rest>
      //
      // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
      // this WOULD be allowed if ** did follow symlinks, or * didn't
      firstPhasePreProcess(globParts) {
        let didSomething = false
        do {
          didSomething = false
          // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
          for (let parts of globParts) {
            let gs = -1
            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
              let gss = gs
              while (parts[gss + 1] === '**') {
                // <pre>/**/**/<rest> -> <pre>/**/<rest>
                gss++
              }
              // eg, if gs is 2 and gss is 4, that means we have 3 **
              // parts, and can remove 2 of them.
              if (gss > gs) {
                parts.splice(gs + 1, gss - gs)
              }
              let next = parts[gs + 1]
              const p = parts[gs + 2]
              const p2 = parts[gs + 3]
              if (next !== '..') {
                continue
              }
              if (
                !p ||
                p === '.' ||
                p === '..' ||
                !p2 ||
                p2 === '.' ||
                p2 === '..'
              ) {
                continue
              }
              didSomething = true
              // edit parts in place, and push the new one
              parts.splice(gs, 1)
              const other = parts.slice(0)
              other[gs] = '**'
              globParts.push(other)
              gs--
            }
            // <pre>/<e>/<rest> -> <pre>/<rest>
            if (!this.preserveMultipleSlashes) {
              for (let i = 1; i < parts.length - 1; i++) {
                const p = parts[i]
                // don't squeeze out UNC patterns
                if (i === 1 && p === '' && parts[0] === '') {
                  continue
                }
                if (p === '.' || p === '') {
                  didSomething = true
                  parts.splice(i, 1)
                  i--
                }
              }
              if (
                parts[0] === '.' &&
                parts.length === 2 &&
                (parts[1] === '.' || parts[1] === '')
              ) {
                didSomething = true
                parts.pop()
              }
            }
            // <pre>/<p>/../<rest> -> <pre>/<rest>
            let dd = 0
            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
              const p = parts[dd - 1]
              if (p && p !== '.' && p !== '..' && p !== '**') {
                didSomething = true
                const needDot = dd === 1 && parts[dd + 1] === '**'
                const splin = needDot ? ['.'] : []
                parts.splice(dd - 1, 2, ...splin)
                if (parts.length === 0) {
                  parts.push('')
                }
                dd -= 2
              }
            }
          }
        } while (didSomething)
        return globParts
      }
      // second phase: multi-pattern dedupes
      // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
      // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
      // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
      //
      // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
      // ^-- not valid because ** doens't follow symlinks
      secondPhasePreProcess(globParts) {
        for (let i = 0; i < globParts.length - 1; i++) {
          for (let j = i + 1; j < globParts.length; j++) {
            const matched = this.partsMatch(
              globParts[i],
              globParts[j],
              !this.preserveMultipleSlashes
            )
            if (matched) {
              globParts[i] = []
              globParts[j] = matched
              break
            }
          }
        }
        return globParts.filter(gs => gs.length)
      }
      partsMatch(a, b, emptyGSMatch = false) {
        let ai = 0
        let bi = 0
        let result = []
        let which = ''
        while (ai < a.length && bi < b.length) {
          if (a[ai] === b[bi]) {
            result.push(which === 'b' ? b[bi] : a[ai])
            ai++
            bi++
          } else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {
            result.push(a[ai])
            ai++
          } else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {
            result.push(b[bi])
            bi++
          } else if (
            a[ai] === '*' &&
            b[bi] &&
            (this.options.dot || !b[bi].startsWith('.')) &&
            b[bi] !== '**'
          ) {
            if (which === 'b') {
              return false
            }
            which = 'a'
            result.push(a[ai])
            ai++
            bi++
          } else if (
            b[bi] === '*' &&
            a[ai] &&
            (this.options.dot || !a[ai].startsWith('.')) &&
            a[ai] !== '**'
          ) {
            if (which === 'a') {
              return false
            }
            which = 'b'
            result.push(b[bi])
            ai++
            bi++
          } else {
            return false
          }
        }
        // if we fall out of the loop, it means they two are identical
        // as long as their lengths match
        return a.length === b.length && result
      }
      parseNegate() {
        if (this.nonegate) {
          return
        }
        const pattern = this.pattern
        let negate = false
        let negateOffset = 0
        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {
          negate = !negate
          negateOffset++
        }
        if (negateOffset) {
          this.pattern = pattern.slice(negateOffset)
        }
        this.negate = negate
      }
      // set partial to true to test if, for example,
      // "/a/b" matches the start of "/*/b/*/d"
      // Partial means, if you run out of file before you run
      // out of pattern, then that's fine, as long as all
      // the parts match.
      matchOne(file, pattern, partial = false) {
        const options = this.options
        // UNC paths like //?/X:/... can match X:/... and vice versa
        // Drive letters in absolute drive or unc paths are always compared
        // case-insensitively.
        if (this.isWindows) {
          const fileDrive =
            typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0])
          const fileUNC =
            !fileDrive &&
            file[0] === '' &&
            file[1] === '' &&
            file[2] === '?' &&
            /^[a-z]:$/i.test(file[3])
          const patternDrive =
            typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0])
          const patternUNC =
            !patternDrive &&
            pattern[0] === '' &&
            pattern[1] === '' &&
            pattern[2] === '?' &&
            typeof pattern[3] === 'string' &&
            /^[a-z]:$/i.test(pattern[3])
          const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined
          const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined
          if (typeof fdi === 'number' && typeof pdi === 'number') {
            const [fd, pd] = [file[fdi], pattern[pdi]]
            if (fd.toLowerCase() === pd.toLowerCase()) {
              pattern[pdi] = fd
              if (pdi > fdi) {
                pattern = pattern.slice(pdi)
              } else if (fdi > pdi) {
                file = file.slice(fdi)
              }
            }
          }
        }
        // resolve and reduce . and .. portions in the file as well.
        // dont' need to do the second phase, because it's only one string[]
        const { optimizationLevel = 1 } = this.options
        if (optimizationLevel >= 2) {
          file = this.levelTwoFileOptimize(file)
        }
        this.debug('matchOne', this, {
          file,
          pattern
        })
        this.debug('matchOne', file.length, pattern.length)
        for (
          var fi = 0, pi = 0, fl = file.length, pl = pattern.length;
          fi < fl && pi < pl;
          fi++, pi++
        ) {
          this.debug('matchOne loop')
          const p = pattern[pi]
          const f = file[fi]
          this.debug(pattern, p, f)
          // should be impossible.
          // some invalid regexp stuff in the set.
          /* c8 ignore start */
          if (p === false) {
            return false
          }
          /* c8 ignore stop */
          if (p === exports.GLOBSTAR) {
            this.debug('GLOBSTAR', [pattern, p, f])
            // "**"
            // a/**/b/**/c would match the following:
            // a/b/x/y/z/c
            // a/x/y/z/b/c
            // a/b/x/b/x/c
            // a/b/c
            // To do this, take the rest of the pattern after
            // the **, and see if it would match the file remainder.
            // If so, return success.
            // If not, the ** "swallows" a segment, and try again.
            // This is recursively awful.
            //
            // a/**/b/**/c matching a/b/x/y/z/c
            // - a matches a
            // - doublestar
            //   - matchOne(b/x/y/z/c, b/**/c)
            //     - b matches b
            //     - doublestar
            //       - matchOne(x/y/z/c, c) -> no
            //       - matchOne(y/z/c, c) -> no
            //       - matchOne(z/c, c) -> no
            //       - matchOne(c, c) yes, hit
            let fr = fi
            const pr = pi + 1
            if (pr === pl) {
              this.debug('** at the end')
              // a ** at the end will just swallow the rest.
              // We have found a match.
              // however, it will not swallow /.x, unless
              // options.dot is set.
              // . and .. are *never* matched by **, for explosively
              // exponential reasons.
              for (; fi < fl; fi++) {
                if (
                  file[fi] === '.' ||
                  file[fi] === '..' ||
                  (!options.dot && file[fi].charAt(0) === '.')
                ) {
                  return false
                }
              }
              return true
            }
            // ok, let's see if we can swallow whatever we can.
            while (fr < fl) {
              const swallowee = file[fr]
              this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)
              // XXX remove this slice.  Just pass the start index.
              if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                this.debug('globstar found match!', fr, fl, swallowee)
                // found a match.
                return true
              } else {
                // can't swallow "." or ".." ever.
                // can only swallow ".foo" when explicitly asked.
                if (
                  swallowee === '.' ||
                  swallowee === '..' ||
                  (!options.dot && swallowee.charAt(0) === '.')
                ) {
                  this.debug('dot detected!', file, fr, pattern, pr)
                  break
                }
                // ** swallows a segment, and continue.
                this.debug('globstar swallow a segment, and continue')
                fr++
              }
            }
            // no match was found.
            // However, in partial mode, we can't say this is necessarily over.
            /* c8 ignore start */
            if (partial) {
              // ran out of file
              this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
              if (fr === fl) {
                return true
              }
            }
            /* c8 ignore stop */
            return false
          }
          // something other than **
          // non-magic patterns just have to match exactly
          // patterns with magic have been turned into regexps.
          let hit
          if (typeof p === 'string') {
            hit = f === p
            this.debug('string match', p, f, hit)
          } else {
            hit = p.test(f)
            this.debug('pattern match', p, f, hit)
          }
          if (!hit) {
            return false
          }
        }
        // Note: ending in / means that we'll get a final ""
        // at the end of the pattern.  This can only match a
        // corresponding "" at the end of the file.
        // If the file ends in /, then it can only match a
        // a pattern that ends in /, unless the pattern just
        // doesn't have any more for it. But, a/b/ should *not*
        // match "a/b/*", even though "" matches against the
        // [^/]*? pattern, except in partial mode, where it might
        // simply not be reached yet.
        // However, a/b/ should still satisfy a/*
        // now either we fell off the end of the pattern, or we're done.
        if (fi === fl && pi === pl) {
          // ran out of pattern and filename at the same time.
          // an exact hit!
          return true
        } else if (fi === fl) {
          // ran out of file, but still had pattern left.
          // this is ok if we're doing the match as part of
          // a glob fs traversal.
          return partial
        } else if (pi === pl) {
          // ran out of pattern, still have file left.
          // this is only acceptable if we're on the very last
          // empty segment of a file with a trailing slash.
          // a/* should match a/b/
          return fi === fl - 1 && file[fi] === ''
          /* c8 ignore start */
        } else {
          // should be unreachable.
          throw new Error('wtf?')
        }
        /* c8 ignore stop */
      }
      braceExpand() {
        return (0, exports.braceExpand)(this.pattern, this.options)
      }
      parse(pattern) {
        ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
        const options = this.options
        // shortcuts
        if (pattern === '**') {
          return exports.GLOBSTAR
        }
        if (pattern === '') {
          return ''
        }
        // far and away, the most common glob pattern parts are
        // *, *.*, and *.<ext>  Add a fast check method for those.
        let m
        let fastTest = null
        if ((m = pattern.match(starRE))) {
          fastTest = options.dot ? starTestDot : starTest
        } else if ((m = pattern.match(starDotExtRE))) {
          fastTest = (
            options.nocase
              ? options.dot
                ? starDotExtTestNocaseDot
                : starDotExtTestNocase
              : options.dot
                ? starDotExtTestDot
                : starDotExtTest
          )(m[1])
        } else if ((m = pattern.match(qmarksRE))) {
          fastTest = (
            options.nocase
              ? options.dot
                ? qmarksTestNocaseDot
                : qmarksTestNocase
              : options.dot
                ? qmarksTestDot
                : qmarksTest
          )(m)
        } else if ((m = pattern.match(starDotStarRE))) {
          fastTest = options.dot ? starDotStarTestDot : starDotStarTest
        } else if ((m = pattern.match(dotStarRE))) {
          fastTest = dotStarTest
        }
        const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern()
        if (fastTest && typeof re === 'object') {
          // Avoids overriding in frozen environments
          Reflect.defineProperty(re, 'test', {
            value: fastTest
          })
        }
        return re
      }
      makeRe() {
        if (this.regexp || this.regexp === false) {
          return this.regexp
        }
        // at this point, this.set is a 2d array of partial
        // pattern strings, or "**".
        //
        // It's better to use .match().  This function shouldn't
        // be used, really, but it's pretty convenient sometimes,
        // when you just want to work with a regex.
        const set = this.set
        if (!set.length) {
          this.regexp = false
          return this.regexp
        }
        const options = this.options
        const twoStar = options.noglobstar
          ? star
          : options.dot
            ? twoStarDot
            : twoStarNoDot
        const flags = new Set(options.nocase ? ['i'] : [])
        // regexpify non-globstar patterns
        // if ** is only item, then we just do one twoStar
        // if ** is first, and there are more, prepend (\/|twoStar\/)? to next
        // if ** is last, append (\/twoStar|) to previous
        // if ** is in the middle, append (\/|\/twoStar\/) to previous
        // then filter out GLOBSTAR symbols
        let re = set
          .map(pattern => {
            const pp = pattern.map(p => {
              if (p instanceof RegExp) {
                for (const f of p.flags.split('')) {
                  flags.add(f)
                }
              }
              return typeof p === 'string'
                ? regExpEscape(p)
                : p === exports.GLOBSTAR
                  ? exports.GLOBSTAR
                  : p._src
            })
            pp.forEach((p, i) => {
              const next = pp[i + 1]
              const prev = pp[i - 1]
              if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {
                return
              }
              if (prev === undefined) {
                if (next !== undefined && next !== exports.GLOBSTAR) {
                  pp[i + 1] = '(?:\\/|' + twoStar + '\\/)?' + next
                } else {
                  pp[i] = twoStar
                }
              } else if (next === undefined) {
                pp[i - 1] = prev + '(?:\\/|' + twoStar + ')?'
              } else if (next !== exports.GLOBSTAR) {
                pp[i - 1] = prev + '(?:\\/|\\/' + twoStar + '\\/)' + next
                pp[i + 1] = exports.GLOBSTAR
              }
            })
            return pp.filter(p => p !== exports.GLOBSTAR).join('/')
          })
          .join('|')
        // need to wrap in parens if we had more than one thing with |,
        // otherwise only the first will be anchored to ^ and the last to $
        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', '']
        // must match entire pattern
        // ending in a * or ** will make it less strict.
        re = '^' + open + re + close + '$'
        // can match anything, as long as it's not this.
        if (this.negate) {
          re = '^(?!' + re + ').+$'
        }
        try {
          this.regexp = new RegExp(re, [...flags].join(''))
          /* c8 ignore start */
        } catch (ex) {
          // should be impossible
          this.regexp = false
        }
        /* c8 ignore stop */
        return this.regexp
      }
      slashSplit(p) {
        // if p starts with // on windows, we preserve that
        // so that UNC paths aren't broken.  Otherwise, any number of
        // / characters are coalesced into one, unless
        // preserveMultipleSlashes is set to true.
        if (this.preserveMultipleSlashes) {
          return p.split('/')
        } else if (this.isWindows && /^\/\/[^/]+/.test(p)) {
          // add an extra '' for the one we lose
          return ['', ...p.split(/\/+/)]
        } else {
          return p.split(/\/+/)
        }
      }
      match(f, partial = this.partial) {
        this.debug('match', f, this.pattern)
        // short-circuit in the case of busted things.
        // comments, etc.
        if (this.comment) {
          return false
        }
        if (this.empty) {
          return f === ''
        }
        if (f === '/' && partial) {
          return true
        }
        const options = this.options
        // windows: need to use /, not \
        if (this.isWindows) {
          f = f.split('\\').join('/')
        }
        // treat the test path as a set of pathparts.
        const ff = this.slashSplit(f)
        this.debug(this.pattern, 'split', ff)
        // just ONE of the pattern sets in this.set needs to match
        // in order for it to be valid.  If negating, then just one
        // match means that we have failed.
        // Either way, return on the first hit.
        const set = this.set
        this.debug(this.pattern, 'set', set)
        // Find the basename of the path by looking for the last non-empty segment
        let filename = ff[ff.length - 1]
        if (!filename) {
          for (let i = ff.length - 2; !filename && i >= 0; i--) {
            filename = ff[i]
          }
        }
        for (let i = 0; i < set.length; i++) {
          const pattern = set[i]
          let file = ff
          if (options.matchBase && pattern.length === 1) {
            file = [filename]
          }
          const hit = this.matchOne(file, pattern, partial)
          if (hit) {
            if (options.flipNegate) {
              return true
            }
            return !this.negate
          }
        }
        // didn't get any hits.  this is success if it's a negative
        // pattern, failure otherwise.
        if (options.flipNegate) {
          return false
        }
        return this.negate
      }
      static defaults(def) {
        return exports.minimatch.defaults(def).Minimatch
      }
    }
    exports.Minimatch = Minimatch
    /* c8 ignore start */
    const ast_js_2 = requireAst$1()
    Object.defineProperty(exports, 'AST', {
      enumerable: true,
      get: function () {
        return ast_js_2.AST
      }
    })
    const escape_js_2 = require_escape$1()
    Object.defineProperty(exports, 'escape', {
      enumerable: true,
      get: function () {
        return escape_js_2.escape
      }
    })
    const unescape_js_2 = require_unescape$1()
    Object.defineProperty(exports, 'unescape', {
      enumerable: true,
      get: function () {
        return unescape_js_2.unescape
      }
    })
    /* c8 ignore stop */
    exports.minimatch.AST = ast_js_1.AST
    exports.minimatch.Minimatch = Minimatch
    exports.minimatch.escape = escape_js_1.escape
    exports.minimatch.unescape = unescape_js_1.unescape
  })(commonjs$4)
  return commonjs$4
}

let lib$b
let hasRequiredLib$b
function requireLib$b() {
  if (hasRequiredLib$b) {
    return lib$b
  }
  hasRequiredLib$b = 1
  const fs = require$$0$4
  const path = require$$1$5
  const EE = require$$0$c.EventEmitter
  const Minimatch = requireCommonjs$2().Minimatch
  class Walker extends EE {
    constructor(opts) {
      opts = opts || {}
      super(opts)
      // set to true if this.path is a symlink, whether follow is true or not
      this.isSymbolicLink = opts.isSymbolicLink
      this.path = opts.path || process.cwd()
      this.basename = path.basename(this.path)
      this.ignoreFiles = opts.ignoreFiles || ['.ignore']
      this.ignoreRules = {}
      this.parent = opts.parent || null
      this.includeEmpty = !!opts.includeEmpty
      this.root = this.parent ? this.parent.root : this.path
      this.follow = !!opts.follow
      this.result = this.parent ? this.parent.result : new Set()
      this.entries = null
      this.sawError = false
      this.exact = opts.exact
    }
    sort(a, b) {
      return a.localeCompare(b, 'en')
    }
    emit(ev, data) {
      let ret = false
      if (!(this.sawError && ev === 'error')) {
        if (ev === 'error') {
          this.sawError = true
        } else if (ev === 'done' && !this.parent) {
          data = Array.from(data)
            .map(e => (/^@/.test(e) ? `./${e}` : e))
            .sort(this.sort)
          this.result = data
        }
        if (ev === 'error' && this.parent) {
          ret = this.parent.emit('error', data)
        } else {
          ret = super.emit(ev, data)
        }
      }
      return ret
    }
    start() {
      fs.readdir(this.path, (er, entries) =>
        er ? this.emit('error', er) : this.onReaddir(entries)
      )
      return this
    }
    isIgnoreFile(e) {
      return e !== '.' && e !== '..' && this.ignoreFiles.indexOf(e) !== -1
    }
    onReaddir(entries) {
      this.entries = entries
      if (entries.length === 0) {
        if (this.includeEmpty) {
          this.result.add(this.path.slice(this.root.length + 1))
        }
        this.emit('done', this.result)
      } else {
        const hasIg = this.entries.some(e => this.isIgnoreFile(e))
        if (hasIg) {
          this.addIgnoreFiles()
        } else {
          this.filterEntries()
        }
      }
    }
    addIgnoreFiles() {
      const newIg = this.entries.filter(e => this.isIgnoreFile(e))
      let igCount = newIg.length
      const then = () => {
        if (--igCount === 0) {
          this.filterEntries()
        }
      }
      newIg.forEach(e => this.addIgnoreFile(e, then))
    }
    addIgnoreFile(file, then) {
      const ig = path.resolve(this.path, file)
      fs.readFile(ig, 'utf8', (er, data) =>
        er ? this.emit('error', er) : this.onReadIgnoreFile(file, data, then)
      )
    }
    onReadIgnoreFile(file, data, then) {
      const mmopt = {
        matchBase: true,
        dot: true,
        flipNegate: true,
        nocase: true
      }
      const rules = data
        .split(/\r?\n/)
        .filter(line => !/^#|^$/.test(line.trim()))
        .map(rule => {
          return new Minimatch(rule.trim(), mmopt)
        })
      this.ignoreRules[file] = rules
      then()
    }
    filterEntries() {
      // at this point we either have ignore rules, or just inheriting
      // this exclusion is at the point where we know the list of
      // entries in the dir, but don't know what they are.  since
      // some of them *might* be directories, we have to run the
      // match in dir-mode as well, so that we'll pick up partials
      // of files that will be included later.  Anything included
      // at this point will be checked again later once we know
      // what it is.
      const filtered = this.entries
        .map(entry => {
          // at this point, we don't know if it's a dir or not.
          const passFile = this.filterEntry(entry)
          const passDir = this.filterEntry(entry, true)
          return passFile || passDir ? [entry, passFile, passDir] : false
        })
        .filter(e => e)

      // now we stat them all
      // if it's a dir, and passes as a dir, then recurse
      // if it's not a dir, but passes as a file, add to set
      let entryCount = filtered.length
      if (entryCount === 0) {
        this.emit('done', this.result)
      } else {
        const then = () => {
          if (--entryCount === 0) {
            this.emit('done', this.result)
          }
        }
        filtered.forEach(filt => {
          const entry = filt[0]
          const file = filt[1]
          const dir = filt[2]
          this.stat(
            {
              entry,
              file,
              dir
            },
            then
          )
        })
      }
    }
    onstat({ st, entry, file, dir, isSymbolicLink }, then) {
      const abs = this.path + '/' + entry
      if (!st.isDirectory()) {
        if (file) {
          this.result.add(abs.slice(this.root.length + 1))
        }
        then()
      } else {
        // is a directory
        if (dir) {
          this.walker(
            entry,
            {
              isSymbolicLink,
              exact: file || this.filterEntry(entry + '/')
            },
            then
          )
        } else {
          then()
        }
      }
    }
    stat({ entry, file, dir }, then) {
      const abs = this.path + '/' + entry
      fs.lstat(abs, (lstatErr, lstatResult) => {
        if (lstatErr) {
          this.emit('error', lstatErr)
        } else {
          const isSymbolicLink = lstatResult.isSymbolicLink()
          if (this.follow && isSymbolicLink) {
            fs.stat(abs, (statErr, statResult) => {
              if (statErr) {
                this.emit('error', statErr)
              } else {
                this.onstat(
                  {
                    st: statResult,
                    entry,
                    file,
                    dir,
                    isSymbolicLink
                  },
                  then
                )
              }
            })
          } else {
            this.onstat(
              {
                st: lstatResult,
                entry,
                file,
                dir,
                isSymbolicLink
              },
              then
            )
          }
        }
      })
    }
    walkerOpt(entry, opts) {
      return {
        path: this.path + '/' + entry,
        parent: this,
        ignoreFiles: this.ignoreFiles,
        follow: this.follow,
        includeEmpty: this.includeEmpty,
        ...opts
      }
    }
    walker(entry, opts, then) {
      new Walker(this.walkerOpt(entry, opts)).on('done', then).start()
    }
    filterEntry(entry, partial, entryBasename) {
      let included = true

      // this = /a/b/c
      // entry = d
      // parent /a/b sees c/d
      if (this.parent && this.parent.filterEntry) {
        const parentEntry = this.basename + '/' + entry
        const parentBasename = entryBasename || entry
        included = this.parent.filterEntry(parentEntry, partial, parentBasename)
        if (!included && !this.exact) {
          return false
        }
      }
      this.ignoreFiles.forEach(f => {
        if (this.ignoreRules[f]) {
          this.ignoreRules[f].forEach(rule => {
            // negation means inclusion
            // so if it's negated, and already included, no need to check
            // likewise if it's neither negated nor included
            if (rule.negate !== included) {
              const isRelativeRule =
                entryBasename &&
                rule.globParts.some(
                  part => part.length <= (part.slice(-1)[0] ? 1 : 2)
                )

              // first, match against /foo/bar
              // then, against foo/bar
              // then, in the case of partials, match with a /
              //   then, if also the rule is relative, match against basename
              const match =
                rule.match('/' + entry) ||
                rule.match(entry) ||
                (!!partial &&
                  (rule.match('/' + entry + '/') ||
                    rule.match(entry + '/') ||
                    (rule.negate &&
                      (rule.match('/' + entry, true) ||
                        rule.match(entry, true))) ||
                    (isRelativeRule &&
                      (rule.match('/' + entryBasename + '/') ||
                        rule.match(entryBasename + '/') ||
                        (rule.negate &&
                          (rule.match('/' + entryBasename, true) ||
                            rule.match(entryBasename, true)))))))
              if (match) {
                included = rule.negate
              }
            }
          })
        }
      })
      return included
    }
  }
  class WalkerSync extends Walker {
    start() {
      this.onReaddir(fs.readdirSync(this.path))
      return this
    }
    addIgnoreFile(file, then) {
      const ig = path.resolve(this.path, file)
      this.onReadIgnoreFile(file, fs.readFileSync(ig, 'utf8'), then)
    }
    stat({ entry, file, dir }, then) {
      const abs = this.path + '/' + entry
      let st = fs.lstatSync(abs)
      const isSymbolicLink = st.isSymbolicLink()
      if (this.follow && isSymbolicLink) {
        st = fs.statSync(abs)
      }

      // console.error('STAT SYNC', {st, entry, file, dir, isSymbolicLink, then})
      this.onstat(
        {
          st,
          entry,
          file,
          dir,
          isSymbolicLink
        },
        then
      )
    }
    walker(entry, opts, then) {
      new WalkerSync(this.walkerOpt(entry, opts)).start()
      then()
    }
  }
  const walk = (opts, callback) => {
    const p = new Promise((resolve, reject) => {
      new Walker(opts).on('done', resolve).on('error', reject).start()
    })
    return callback ? p.then(res => callback(null, res), callback) : p
  }
  const walkSync = opts => new WalkerSync(opts).start().result
  lib$b = walk
  walk.sync = walkSync
  walk.Walker = Walker
  walk.WalkerSync = WalkerSync
  return lib$b
}

let lib$a
let hasRequiredLib$a
function requireLib$a() {
  if (hasRequiredLib$a) {
    return lib$a
  }
  hasRequiredLib$a = 1
  const { Walker: IgnoreWalker } = requireLib$b()
  const { lstatSync: lstat, readFileSync: readFile } = require$$0$4
  const { basename, dirname, extname, join, relative, resolve, sep } =
    require$$1$5

  // symbols used to represent synthetic rule sets
  const defaultRules = Symbol('npm-packlist.rules.default')
  const strictRules = Symbol('npm-packlist.rules.strict')

  // There may be others, but :?|<> are handled by node-tar
  const nameIsBadForWindows = file => /\*/.test(file)

  // these are the default rules that are applied to everything except for non-link bundled deps
  const defaults = [
    '.npmignore',
    '.gitignore',
    '**/.git',
    '**/.svn',
    '**/.hg',
    '**/CVS',
    '**/.git/**',
    '**/.svn/**',
    '**/.hg/**',
    '**/CVS/**',
    '/.lock-wscript',
    '/.wafpickle-*',
    '/build/config.gypi',
    'npm-debug.log',
    '**/.npmrc',
    '.*.swp',
    '.DS_Store',
    '**/.DS_Store/**',
    '._*',
    '**/._*/**',
    '*.orig',
    '/archived-packages/**'
  ]
  const strictDefaults = [
    // these are forcibly excluded
    '/.git'
  ]
  const normalizePath = path => path.split('\\').join('/')
  const readOutOfTreeIgnoreFiles = (root, rel, result = []) => {
    for (const file of ['.npmignore', '.gitignore']) {
      try {
        const ignoreContent = readFile(join(root, file), {
          encoding: 'utf8'
        })
        result.push(ignoreContent)
        // break the loop immediately after reading, this allows us to prioritize
        // the .npmignore and discard the .gitignore if one is present
        break
      } catch (err) {
        // we ignore ENOENT errors completely because we don't care if the file doesn't exist
        // but we throw everything else because failing to read a file that does exist is
        // something that the user likely wants to know about
        // istanbul ignore next -- we do not need to test a thrown error
        if (err.code !== 'ENOENT') {
          throw err
        }
      }
    }
    if (!rel) {
      return result
    }
    const firstRel = rel.split(sep, 1)[0]
    const newRoot = join(root, firstRel)
    const newRel = relative(newRoot, join(root, rel))
    return readOutOfTreeIgnoreFiles(newRoot, newRel, result)
  }
  class PackWalker extends IgnoreWalker {
    constructor(tree, opts) {
      const options = {
        ...opts,
        includeEmpty: false,
        follow: false,
        // we path.resolve() here because ignore-walk doesn't do it and we want full paths
        path: resolve(opts?.path || tree.path).replace(/\\/g, '/'),
        ignoreFiles: opts?.ignoreFiles || [
          defaultRules,
          'package.json',
          '.npmignore',
          '.gitignore',
          strictRules
        ]
      }
      super(options)
      this.isPackage = options.isPackage
      this.seen = options.seen || new Set()
      this.tree = tree
      this.requiredFiles = options.requiredFiles || []
      const additionalDefaults = []
      if (options.prefix && options.workspaces) {
        const path = normalizePath(options.path)
        const prefix = normalizePath(options.prefix)
        const workspaces = options.workspaces.map(ws => normalizePath(ws))

        // istanbul ignore else - this does nothing unless we need it to
        if (path !== prefix && workspaces.includes(path)) {
          // if path and prefix are not the same directory, and workspaces has path in it
          // then we know path is a workspace directory. in order to not drop ignore rules
          // from directories between the workspaces root (prefix) and the workspace itself
          // (path) we need to find and read those now
          const relpath = relative(options.prefix, dirname(options.path))
          additionalDefaults.push(
            ...readOutOfTreeIgnoreFiles(options.prefix, relpath)
          )
        } else if (path === prefix) {
          // on the other hand, if the path and prefix are the same, then we ignore workspaces
          // so that we don't pack a workspace as part of the root project. append them as
          // normalized relative paths from the root
          additionalDefaults.push(
            ...workspaces.map(w => normalizePath(relative(options.path, w)))
          )
        }
      }

      // go ahead and inject the default rules now
      this.injectRules(defaultRules, [...defaults, ...additionalDefaults])
      if (!this.isPackage) {
        // if this instance is not a package, then place some strict default rules, and append
        // known required files for this directory
        this.injectRules(strictRules, [
          ...strictDefaults,
          ...this.requiredFiles.map(file => `!${file}`)
        ])
      }
    }

    // overridden method: we intercept the reading of the package.json file here so that we can
    // process it into both the package.json file rules as well as the strictRules synthetic rule set
    addIgnoreFile(file, callback) {
      // if we're adding anything other than package.json, then let ignore-walk handle it
      if (file !== 'package.json' || !this.isPackage) {
        return super.addIgnoreFile(file, callback)
      }
      return this.processPackage(callback)
    }

    // overridden method: if we're done, but we're a package, then we also need to evaluate bundles
    // before we actually emit our done event
    emit(ev, data) {
      if (ev !== 'done' || !this.isPackage) {
        return super.emit(ev, data)
      }

      // we intentionally delay the done event while keeping the function sync here
      // eslint-disable-next-line promise/catch-or-return, promise/always-return
      this.gatherBundles().then(() => {
        super.emit('done', this.result)
      })
      return true
    }

    // overridden method: before actually filtering, we make sure that we've removed the rules for
    // files that should no longer take effect due to our order of precedence
    filterEntries() {
      if (this.ignoreRules['package.json']) {
        // package.json means no .npmignore or .gitignore
        this.ignoreRules['.npmignore'] = null
        this.ignoreRules['.gitignore'] = null
      } else if (this.ignoreRules['.npmignore']) {
        // .npmignore means no .gitignore
        this.ignoreRules['.gitignore'] = null
      }
      return super.filterEntries()
    }

    // overridden method: we never want to include anything that isn't a file or directory
    onstat(opts, callback) {
      if (!opts.st.isFile() && !opts.st.isDirectory()) {
        return callback()
      }
      return super.onstat(opts, callback)
    }

    // overridden method: we want to refuse to pack files that are invalid, node-tar protects us from
    // a lot of them but not all
    stat(opts, callback) {
      if (nameIsBadForWindows(opts.entry)) {
        return callback()
      }
      return super.stat(opts, callback)
    }

    // overridden method: this is called to create options for a child walker when we step
    // in to a normal child directory (this will never be a bundle). the default method here
    // copies the root's `ignoreFiles` value, but we don't want to respect package.json for
    // subdirectories, so we override it with a list that intentionally omits package.json
    walkerOpt(entry, opts) {
      let ignoreFiles = null

      // however, if we have a tree, and we have workspaces, and the directory we're about
      // to step into is a workspace, then we _do_ want to respect its package.json
      if (this.tree.workspaces) {
        const workspaceDirs = [...this.tree.workspaces.values()].map(dir =>
          dir.replace(/\\/g, '/')
        )
        const entryPath = join(this.path, entry).replace(/\\/g, '/')
        if (workspaceDirs.includes(entryPath)) {
          ignoreFiles = [
            defaultRules,
            'package.json',
            '.npmignore',
            '.gitignore',
            strictRules
          ]
        }
      } else {
        ignoreFiles = [defaultRules, '.npmignore', '.gitignore', strictRules]
      }
      return {
        ...super.walkerOpt(entry, opts),
        ignoreFiles,
        // we map over our own requiredFiles and pass ones that are within this entry
        requiredFiles: this.requiredFiles
          .map(file => {
            if (relative(file, entry) === '..') {
              return relative(entry, file).replace(/\\/g, '/')
            }
            return false
          })
          .filter(Boolean)
      }
    }

    // overridden method: we want child walkers to be instances of this class, not ignore-walk
    walker(entry, opts, callback) {
      new PackWalker(this.tree, this.walkerOpt(entry, opts))
        .on('done', callback)
        .start()
    }

    // overridden method: we use a custom sort method to help compressibility
    sort(a, b) {
      // optimize for compressibility
      // extname, then basename, then locale alphabetically
      // https://twitter.com/isntitvacant/status/1131094910923231232
      const exta = extname(a).toLowerCase()
      const extb = extname(b).toLowerCase()
      const basea = basename(a).toLowerCase()
      const baseb = basename(b).toLowerCase()
      return (
        exta.localeCompare(extb, 'en') ||
        basea.localeCompare(baseb, 'en') ||
        a.localeCompare(b, 'en')
      )
    }

    // convenience method: this joins the given rules with newlines, appends a trailing newline,
    // and calls the internal onReadIgnoreFile method
    injectRules(filename, rules, callback = () => {}) {
      this.onReadIgnoreFile(filename, `${rules.join('\n')}\n`, callback)
    }

    // custom method: this is called by addIgnoreFile when we find a package.json, it uses the
    // arborist tree to pull both default rules and strict rules for the package
    processPackage(callback) {
      const { bin, browser, files, main } = this.tree.package

      // rules in these arrays are inverted since they are patterns we want to _not_ ignore
      const ignores = []
      const strict = [
        ...strictDefaults,
        '!/package.json',
        '!/readme{,.*[^~$]}',
        '!/copying{,.*[^~$]}',
        '!/license{,.*[^~$]}',
        '!/licence{,.*[^~$]}',
        '/.git',
        '/node_modules',
        '.npmrc',
        '/package-lock.json',
        '/yarn.lock',
        '/pnpm-lock.yaml',
        '/bun.lockb'
      ]

      // if we have a files array in our package, we need to pull rules from it
      if (files) {
        for (let file of files) {
          // invert the rule because these are things we want to include
          if (file.startsWith('./')) {
            file = file.slice(1)
          }
          if (file.endsWith('/*')) {
            file += '*'
          }
          const inverse = `!${file}`
          try {
            // if an entry in the files array is a specific file, then we need to include it as a
            // strict requirement for this package. if it's a directory or a pattern, it's a default
            // pattern instead. this is ugly, but we have to stat to find out if it's a file
            const stat = lstat(
              join(this.path, file.replace(/^!+/, '')).replace(/\\/g, '/')
            )
            // if we have a file and we know that, it's strictly required
            if (stat.isFile()) {
              strict.unshift(inverse)
              this.requiredFiles.push(
                file.startsWith('/') ? file.slice(1) : file
              )
            } else if (stat.isDirectory()) {
              // otherwise, it's a default ignore, and since we got here we know it's not a pattern
              // so we include the directory contents
              ignores.push(inverse)
              ignores.push(`${inverse}/**`)
            }
            // if the thing exists, but is neither a file or a directory, we don't want it at all
          } catch (err) {
            // if lstat throws, then we assume we're looking at a pattern and treat it as a default
            ignores.push(inverse)
          }
        }

        // we prepend a '*' to exclude everything, followed by our inverted file rules
        // which now mean to include those
        this.injectRules('package.json', ['*', ...ignores])
      }

      // browser is required
      if (browser) {
        strict.push(`!/${browser}`)
      }

      // main is required
      if (main) {
        strict.push(`!/${main}`)
      }

      // each bin is required
      if (bin) {
        for (const key in bin) {
          strict.push(`!/${bin[key]}`)
        }
      }

      // and now we add all of the strict rules to our synthetic file
      this.injectRules(strictRules, strict, callback)
    }

    // custom method: after we've finished gathering the files for the root package, we call this
    // before emitting the 'done' event in order to gather all of the files for bundled deps
    async gatherBundles() {
      if (this.seen.has(this.tree)) {
        return
      }

      // add this node to our seen tracker
      this.seen.add(this.tree)

      // if we're the project root, then we look at our bundleDependencies, otherwise we got here
      // because we're a bundled dependency of the root, which means we need to include all prod
      // and optional dependencies in the bundle
      let toBundle
      if (this.tree.isProjectRoot) {
        const { bundleDependencies } = this.tree.package
        toBundle = bundleDependencies || []
      } else {
        const { dependencies, optionalDependencies } = this.tree.package
        toBundle = Object.keys(dependencies || {}).concat(
          Object.keys(optionalDependencies || {})
        )
      }
      for (const dep of toBundle) {
        const edge = this.tree.edgesOut.get(dep)
        // no edgeOut = missing node, so skip it. we can't pack it if it's not here
        // we also refuse to pack peer dependencies and dev dependencies
        if (!edge || edge.peer || edge.dev) {
          continue
        }

        // get a reference to the node we're bundling
        const node = this.tree.edgesOut.get(dep).to
        // if there's no node, this is most likely an optional dependency that hasn't been
        // installed. just skip it.
        if (!node) {
          continue
        }
        // we use node.path for the path because we want the location the node was linked to,
        // not where it actually lives on disk
        const path = node.path
        // but link nodes don't have edgesOut, so we need to pass in the target of the node
        // in order to make sure we correctly traverse its dependencies
        const tree = node.target

        // and start building options to be passed to the walker for this package
        const walkerOpts = {
          path,
          isPackage: true,
          ignoreFiles: [],
          seen: this.seen // pass through seen so we can prevent infinite circular loops
        }

        // if our node is a link, we apply defaultRules. we don't do this for regular bundled
        // deps because their .npmignore and .gitignore files are excluded by default and may
        // override defaults
        if (node.isLink) {
          walkerOpts.ignoreFiles.push(defaultRules)
        }

        // _all_ nodes will follow package.json rules from their package root
        walkerOpts.ignoreFiles.push('package.json')

        // only link nodes will obey .npmignore or .gitignore
        if (node.isLink) {
          walkerOpts.ignoreFiles.push('.npmignore')
          walkerOpts.ignoreFiles.push('.gitignore')
        }

        // _all_ nodes follow strict rules
        walkerOpts.ignoreFiles.push(strictRules)

        // create a walker for this dependency and gather its results
        const walker = new PackWalker(tree, walkerOpts)
        const bundled = await new Promise((pResolve, pReject) => {
          walker.on('error', pReject)
          walker.on('done', pResolve)
          walker.start()
        })

        // now we make sure we have our paths correct from the root, and accumulate everything into
        // our own result set to deduplicate
        const relativeFrom = relative(this.root, walker.path)
        for (const file of bundled) {
          this.result.add(join(relativeFrom, file).replace(/\\/g, '/'))
        }
      }
    }
  }
  const walk = (tree, options, callback) => {
    if (typeof options === 'function') {
      callback = options
      options = {}
    }
    const p = new Promise((pResolve, pReject) => {
      new PackWalker(tree, {
        ...options,
        isPackage: true
      })
        .on('done', pResolve)
        .on('error', pReject)
        .start()
    })
    return callback ? p.then(res => callback(null, res), callback) : p
  }
  lib$a = walk
  walk.Walker = PackWalker
  return lib$a
}

let setPath
let hasRequiredSetPath
function requireSetPath() {
  if (hasRequiredSetPath) {
    return setPath
  }
  hasRequiredSetPath = 1
  const { resolve, dirname, delimiter } = require$$1$5
  // the path here is relative, even though it does not need to be
  // in order to make the posix tests pass in windows
  const nodeGypPath = resolve(__dirname, '../lib/node-gyp-bin')

  // Windows typically calls its PATH environ 'Path', but this is not
  // guaranteed, nor is it guaranteed to be the only one.  Merge them
  // all together in the order they appear in the object.
  const setPATH = (projectPath, binPaths, env) => {
    const PATH = Object.keys(env)
      .filter(p => /^path$/i.test(p) && env[p])
      .map(p => env[p].split(delimiter))
      .reduce(
        (set, p) => set.concat(p.filter(concatted => !set.includes(concatted))),
        []
      )
      .join(delimiter)
    const pathArr = []
    if (binPaths) {
      pathArr.push(...binPaths)
    }
    // unshift the ./node_modules/.bin from every folder
    // walk up until dirname() does nothing, at the root
    // XXX we should specify a cwd that we don't go above
    let p = projectPath
    let pp
    do {
      pathArr.push(resolve(p, 'node_modules', '.bin'))
      pp = p
      p = dirname(p)
    } while (p !== pp)
    pathArr.push(nodeGypPath, PATH)
    const pathVal = pathArr.join(delimiter)

    // XXX include the node-gyp-bin path somehow?  Probably better for
    // npm or arborist or whoever to just provide that by putting it in
    // the PATH environ, since that's preserved anyway.
    for (const key of Object.keys(env)) {
      if (/^path$/i.test(key)) {
        env[key] = pathVal
      }
    }
    return env
  }
  setPath = setPATH
  return setPath
}

/* eslint camelcase: "off" */
let makeSpawnArgs_1
let hasRequiredMakeSpawnArgs
function requireMakeSpawnArgs() {
  if (hasRequiredMakeSpawnArgs) {
    return makeSpawnArgs_1
  }
  hasRequiredMakeSpawnArgs = 1
  const setPATH = requireSetPath()
  const { resolve } = require$$1$5
  let npm_config_node_gyp
  const makeSpawnArgs = options => {
    const {
      args,
      binPaths,
      cmd,
      env,
      event,
      nodeGyp,
      path,
      scriptShell = true,
      stdio,
      stdioString
    } = options
    if (nodeGyp) {
      // npm already pulled this from env and passes it in to options
      npm_config_node_gyp = nodeGyp
    } else if (env.npm_config_node_gyp) {
      // legacy mode for standalone user
      npm_config_node_gyp = env.npm_config_node_gyp
    } else {
      // default
      npm_config_node_gyp = require.resolve('node-gyp/bin/node-gyp.js')
    }
    const spawnEnv = setPATH(path, binPaths, {
      // we need to at least save the PATH environment var
      ...process.env,
      ...env,
      npm_package_json: resolve(path, 'package.json'),
      npm_lifecycle_event: event,
      npm_lifecycle_script: cmd,
      npm_config_node_gyp
    })
    const spawnOpts = {
      env: spawnEnv,
      stdioString,
      stdio,
      cwd: path,
      shell: scriptShell
    }
    return [cmd, args, spawnOpts]
  }
  makeSpawnArgs_1 = makeSpawnArgs
  return makeSpawnArgs_1
}

let packageEnvs_1
let hasRequiredPackageEnvs
function requirePackageEnvs() {
  if (hasRequiredPackageEnvs) {
    return packageEnvs_1
  }
  hasRequiredPackageEnvs = 1
  const packageEnvs = (vals, prefix, env = {}) => {
    for (const [key, val] of Object.entries(vals)) {
      if (val === undefined) {
        continue
      } else if (val === null || val === false) {
        env[`${prefix}${key}`] = ''
      } else if (Array.isArray(val)) {
        val.forEach((item, index) => {
          packageEnvs(
            {
              [`${key}_${index}`]: item
            },
            `${prefix}`,
            env
          )
        })
      } else if (typeof val === 'object') {
        packageEnvs(val, `${prefix}${key}_`, env)
      } else {
        env[`${prefix}${key}`] = String(val)
      }
    }
    return env
  }

  // https://github.com/npm/rfcs/pull/183 defines which fields we put into the environment
  packageEnvs_1 = pkg => {
    return packageEnvs(
      {
        name: pkg.name,
        version: pkg.version,
        config: pkg.config,
        engines: pkg.engines,
        bin: pkg.bin
      },
      'npm_package_'
    )
  }
  return packageEnvs_1
}

let lib$9
let hasRequiredLib$9
function requireLib$9() {
  if (hasRequiredLib$9) {
    return lib$9
  }
  hasRequiredLib$9 = 1
  const util = require$$0$e
  const fs = require$$0$4
  const { stat } = fs.promises || {
    stat: util.promisify(fs.stat)
  }
  async function isNodeGypPackage(path) {
    return await stat(`${path}/binding.gyp`)
      .then(st => st.isFile())
      .catch(() => false)
  }
  lib$9 = {
    isNodeGypPackage,
    defaultGypInstallScript: 'node-gyp rebuild'
  }
  return lib$9
}

let signalManager
let hasRequiredSignalManager
function requireSignalManager() {
  if (hasRequiredSignalManager) {
    return signalManager
  }
  hasRequiredSignalManager = 1
  const runningProcs = new Set()
  let handlersInstalled = false
  const forwardedSignals = ['SIGINT', 'SIGTERM']

  // no-op, this is so receiving the signal doesn't cause us to exit immediately
  // instead, we exit after all children have exited when we re-send the signal
  // to ourselves. see the catch handler at the bottom of run-script-pkg.js
  const handleSignal = signal => {
    for (const proc of runningProcs) {
      proc.kill(signal)
    }
  }
  const setupListeners = () => {
    for (const signal of forwardedSignals) {
      process.on(signal, handleSignal)
    }
    handlersInstalled = true
  }
  const cleanupListeners = () => {
    if (runningProcs.size === 0) {
      for (const signal of forwardedSignals) {
        process.removeListener(signal, handleSignal)
      }
      handlersInstalled = false
    }
  }
  const add = proc => {
    runningProcs.add(proc)
    if (!handlersInstalled) {
      setupListeners()
    }
    proc.once('exit', () => {
      runningProcs.delete(proc)
      cleanupListeners()
    })
  }
  signalManager = {
    add,
    handleSignal,
    forwardedSignals
  }
  return signalManager
}

let isServerPackage
let hasRequiredIsServerPackage
function requireIsServerPackage() {
  if (hasRequiredIsServerPackage) {
    return isServerPackage
  }
  hasRequiredIsServerPackage = 1
  const { stat } = require$$0$5
  const { resolve } = require$$2$3
  isServerPackage = async path => {
    try {
      const st = await stat(resolve(path, 'server.js'))
      return st.isFile()
    } catch (er) {
      return false
    }
  }
  return isServerPackage
}

let runScriptPkg_1
let hasRequiredRunScriptPkg
function requireRunScriptPkg() {
  if (hasRequiredRunScriptPkg) {
    return runScriptPkg_1
  }
  hasRequiredRunScriptPkg = 1
  const makeSpawnArgs = requireMakeSpawnArgs()
  const promiseSpawn = requireLib$q()
  const packageEnvs = requirePackageEnvs()
  const { isNodeGypPackage, defaultGypInstallScript } = requireLib$9()
  const signalManager = requireSignalManager()
  const isServerPackage = requireIsServerPackage()
  const runScriptPkg = async options => {
    const {
      args = [],
      binPaths = false,
      env = {},
      event,
      nodeGyp,
      path,
      pkg,
      scriptShell,
      // how long to wait for a process.kill signal
      // only exposed here so that we can make the test go a bit faster.
      signalTimeout = 500,
      stdio = 'pipe',
      stdioString
    } = options
    const { scripts = {}, gypfile } = pkg
    let cmd = null
    if (options.cmd) {
      cmd = options.cmd
    } else if (pkg.scripts && pkg.scripts[event]) {
      cmd = pkg.scripts[event]
    } else if (
      // If there is no preinstall or install script, default to rebuilding node-gyp packages.
      event === 'install' &&
      !scripts.install &&
      !scripts.preinstall &&
      gypfile !== false &&
      (await isNodeGypPackage(path))
    ) {
      cmd = defaultGypInstallScript
    } else if (event === 'start' && (await isServerPackage(path))) {
      cmd = 'node server.js'
    }
    if (!cmd) {
      return {
        code: 0,
        signal: null
      }
    }
    let inputEnd = () => {}
    if (stdio === 'inherit') {
      let banner
      if (pkg._id) {
        banner = `\n> ${pkg._id} ${event}\n`
      } else {
        banner = `\n> ${event}\n`
      }
      banner += `> ${cmd.trim().replace(/\n/g, '\n> ')}`
      if (args.length) {
        banner += ` ${args.join(' ')}`
      }
      banner += '\n'
      const { output, input } = requireLib$t()
      output.standard(banner)
      inputEnd = input.start()
    }
    const [spawnShell, spawnArgs, spawnOpts] = makeSpawnArgs({
      args,
      binPaths,
      cmd,
      env: {
        ...env,
        ...packageEnvs(pkg)
      },
      event,
      nodeGyp,
      path,
      scriptShell,
      stdio,
      stdioString
    })
    const p = promiseSpawn(spawnShell, spawnArgs, spawnOpts, {
      event,
      script: cmd,
      pkgid: pkg._id,
      path
    })
    if (stdio === 'inherit') {
      signalManager.add(p.process)
    }
    if (p.stdin) {
      p.stdin.end()
    }
    return p
      .catch(er => {
        const { signal } = er
        // coverage disabled because win32 never emits signals
        /* istanbul ignore next */
        if (stdio === 'inherit' && signal) {
          // by the time we reach here, the child has already exited. we send the
          // signal back to ourselves again so that npm will exit with the same
          // status as the child
          process.kill(process.pid, signal)

          // just in case we don't die, reject after 500ms
          // this also keeps the node process open long enough to actually
          // get the signal, rather than terminating gracefully.
          return new Promise((res, rej) =>
            setTimeout(() => rej(er), signalTimeout)
          )
        } else {
          throw er
        }
      })
      .finally(inputEnd)
  }
  runScriptPkg_1 = runScriptPkg
  return runScriptPkg_1
}

let validateOptions_1
let hasRequiredValidateOptions
function requireValidateOptions() {
  if (hasRequiredValidateOptions) {
    return validateOptions_1
  }
  hasRequiredValidateOptions = 1
  const validateOptions = options => {
    if (typeof options !== 'object' || !options) {
      throw new TypeError('invalid options object provided to runScript')
    }
    const {
      event,
      path,
      scriptShell,
      env = {},
      stdio = 'pipe',
      args = [],
      cmd
    } = options
    if (!event || typeof event !== 'string') {
      throw new TypeError('valid event not provided to runScript')
    }
    if (!path || typeof path !== 'string') {
      throw new TypeError('valid path not provided to runScript')
    }
    if (scriptShell !== undefined && typeof scriptShell !== 'string') {
      throw new TypeError('invalid scriptShell option provided to runScript')
    }
    if (typeof env !== 'object' || !env) {
      throw new TypeError('invalid env option provided to runScript')
    }
    if (typeof stdio !== 'string' && !Array.isArray(stdio)) {
      throw new TypeError('invalid stdio option provided to runScript')
    }
    if (!Array.isArray(args) || args.some(a => typeof a !== 'string')) {
      throw new TypeError('invalid args option provided to runScript')
    }
    if (cmd !== undefined && typeof cmd !== 'string') {
      throw new TypeError('invalid cmd option provided to runScript')
    }
  }
  validateOptions_1 = validateOptions
  return validateOptions_1
}

let runScript_1
let hasRequiredRunScript
function requireRunScript() {
  if (hasRequiredRunScript) {
    return runScript_1
  }
  hasRequiredRunScript = 1
  const PackageJson = requireLib$k()
  const runScriptPkg = requireRunScriptPkg()
  const validateOptions = requireValidateOptions()
  const isServerPackage = requireIsServerPackage()
  const runScript = async options => {
    validateOptions(options)
    if (options.pkg) {
      return runScriptPkg(options)
    }
    const { content: pkg } = await PackageJson.normalize(options.path)
    return runScriptPkg({
      ...options,
      pkg
    })
  }
  runScript_1 = Object.assign(runScript, {
    isServerPackage
  })
  return runScript_1
}

let file$1
let hasRequiredFile$1
function requireFile$1() {
  if (hasRequiredFile$1) {
    return file$1
  }
  hasRequiredFile$1 = 1
  const { resolve } = require$$2$3
  const { stat, chmod } = require$$0$5
  const cacache = requireLib$e()
  const fsm = requireLib$f()
  const Fetcher = requireFetcher()
  const _ = require_protected()
  class FileFetcher extends Fetcher {
    constructor(spec, opts) {
      super(spec, opts)
      // just the fully resolved filename
      this.resolved = this.spec.fetchSpec
    }
    get types() {
      return ['file']
    }
    manifest() {
      if (this.package) {
        return Promise.resolve(this.package)
      }

      // have to unpack the tarball for this.
      return cacache.tmp.withTmp(this.cache, this.opts, dir =>
        this.extract(dir)
          .then(() => this[_.readPackageJson](dir))
          .then(
            mani =>
              (this.package = {
                ...mani,
                _integrity: this.integrity && String(this.integrity),
                _resolved: this.resolved,
                _from: this.from
              })
          )
      )
    }
    #exeBins(pkg, dest) {
      if (!pkg.bin) {
        return Promise.resolve()
      }
      return Promise.all(
        Object.keys(pkg.bin).map(async k => {
          const script = resolve(dest, pkg.bin[k])
          // Best effort.  Ignore errors here, the only result is that
          // a bin script is not executable.  But if it's missing or
          // something, we just leave it for a later stage to trip over
          // when we can provide a more useful contextual error.
          try {
            const st = await stat(script)
            const mode = st.mode | 0o111
            if (mode === st.mode) {
              return
            }
            await chmod(script, mode)
          } catch {
            // Ignore errors here
          }
        })
      )
    }
    extract(dest) {
      // if we've already loaded the manifest, then the super got it.
      // but if not, read the unpacked manifest and chmod properly.
      return super.extract(dest).then(result =>
        this.package
          ? result
          : this[_.readPackageJson](dest)
              .then(pkg => this.#exeBins(pkg, dest))
              .then(() => result)
      )
    }
    [_.tarballFromResolved]() {
      // create a read stream and return it
      return new fsm.ReadStream(this.resolved)
    }
    packument() {
      // simulate based on manifest
      return this.manifest().then(mani => ({
        name: mani.name,
        'dist-tags': {
          [this.defaultTag]: mani.version
        },
        versions: {
          [mani.version]: {
            ...mani,
            dist: {
              tarball: `file:${this.resolved}`,
              integrity: this.integrity && String(this.integrity)
            }
          }
        }
      }))
    }
  }
  file$1 = FileFetcher
  return file$1
}

let tarCreateOptions_1
let hasRequiredTarCreateOptions
function requireTarCreateOptions() {
  if (hasRequiredTarCreateOptions) {
    return tarCreateOptions_1
  }
  hasRequiredTarCreateOptions = 1
  const isPackageBin = requireIsPackageBin()
  const tarCreateOptions = manifest => ({
    cwd: manifest._resolved,
    prefix: 'package/',
    portable: true,
    gzip: {
      // forcing the level to 9 seems to avoid some
      // platform specific optimizations that cause
      // integrity mismatch errors due to differing
      // end results after compression
      level: 9
    },
    // ensure that package bins are always executable
    // Note that npm-packlist is already filtering out
    // anything that is not a regular file, ignored by
    // .npmignore or package.json "files", etc.
    filter: (path, stat) => {
      if (isPackageBin(manifest, path)) {
        stat.mode |= 0o111
      }
      return true
    },
    // Provide a specific date in the 1980s for the benefit of zip,
    // which is confounded by files dated at the Unix epoch 0.
    mtime: new Date('1985-10-26T08:15:00.000Z')
  })
  tarCreateOptions_1 = tarCreateOptions
  return tarCreateOptions_1
}

let dir
let hasRequiredDir
function requireDir() {
  if (hasRequiredDir) {
    return dir
  }
  hasRequiredDir = 1
  const { resolve } = require$$2$3
  const packlist = requireLib$a()
  const runScript = requireRunScript()
  const tar = requireTar()
  const { Minipass } = requireCommonjs$7()
  const Fetcher = requireFetcher()
  const FileFetcher = requireFile$1()
  const _ = require_protected()
  const tarCreateOptions = requireTarCreateOptions()
  class DirFetcher extends Fetcher {
    constructor(spec, opts) {
      super(spec, opts)
      // just the fully resolved filename
      this.resolved = this.spec.fetchSpec
      this.tree = opts.tree || null
      this.Arborist = opts.Arborist || null
    }

    // exposes tarCreateOptions as public API
    static tarCreateOptions(manifest) {
      return tarCreateOptions(manifest)
    }
    get types() {
      return ['directory']
    }
    #prepareDir() {
      return this.manifest().then(mani => {
        if (!mani.scripts || !mani.scripts.prepare) {
          return
        }
        if (this.opts.ignoreScripts) {
          return
        }

        // we *only* run prepare.
        // pre/post-pack is run by the npm CLI for publish and pack,
        // but this function is *also* run when installing git deps
        const stdio = this.opts.foregroundScripts ? 'inherit' : 'pipe'
        return runScript({
          // this || undefined is because runScript will be unhappy with the default null value
          scriptShell: this.opts.scriptShell || undefined,
          pkg: mani,
          event: 'prepare',
          path: this.resolved,
          stdio,
          env: {
            npm_package_resolved: this.resolved,
            npm_package_integrity: this.integrity,
            npm_package_json: resolve(this.resolved, 'package.json')
          }
        })
      })
    }
    [_.tarballFromResolved]() {
      if (!this.tree && !this.Arborist) {
        throw new Error(
          'DirFetcher requires either a tree or an Arborist constructor to pack'
        )
      }
      const stream = new Minipass()
      stream.resolved = this.resolved
      stream.integrity = this.integrity
      const { prefix, workspaces } = this.opts

      // run the prepare script, get the list of files, and tar it up
      // pipe to the stream, and proxy errors the chain.
      this.#prepareDir()
        .then(async () => {
          if (!this.tree) {
            const arb = new this.Arborist({
              path: this.resolved
            })
            this.tree = await arb.loadActual()
          }
          return packlist(this.tree, {
            path: this.resolved,
            prefix,
            workspaces
          })
        })
        .then(files =>
          tar
            .c(tarCreateOptions(this.package), files)
            .on('error', er => stream.emit('error', er))
            .pipe(stream)
        )
        .catch(er => stream.emit('error', er))
      return stream
    }
    manifest() {
      if (this.package) {
        return Promise.resolve(this.package)
      }
      return this[_.readPackageJson](this.resolved).then(
        mani =>
          (this.package = {
            ...mani,
            _integrity: this.integrity && String(this.integrity),
            _resolved: this.resolved,
            _from: this.from
          })
      )
    }
    packument() {
      return FileFetcher.prototype.packument.apply(this)
    }
  }
  dir = DirFetcher
  return dir
}

const lib$8 = { exports: {} }

let errors$2
let hasRequiredErrors$2
function requireErrors$2() {
  if (hasRequiredErrors$2) {
    return errors$2
  }
  hasRequiredErrors$2 = 1
  const { URL } = require$$0$6
  function packageName(href) {
    try {
      let basePath = new URL(href).pathname.slice(1)
      if (!basePath.match(/^-/)) {
        basePath = basePath.split('/')
        let index = basePath.indexOf('_rewrite')
        if (index === -1) {
          index = basePath.length - 1
        } else {
          index++
        }
        return decodeURIComponent(basePath[index])
      }
    } catch {
      // this is ok
    }
  }
  class HttpErrorBase extends Error {
    constructor(method, res, body, spec) {
      super()
      this.name = this.constructor.name
      this.headers =
        typeof res.headers?.raw === 'function' ? res.headers.raw() : res.headers
      this.statusCode = res.status
      this.code = `E${res.status}`
      this.method = method
      this.uri = res.url
      this.body = body
      this.pkgid = spec ? spec.toString() : packageName(res.url)
      Error.captureStackTrace(this, this.constructor)
    }
  }
  class HttpErrorGeneral extends HttpErrorBase {
    constructor(method, res, body, spec) {
      super(method, res, body, spec)
      this.message = `${res.status} ${res.statusText} - ${this.method.toUpperCase()} ${this.spec || this.uri}${body && body.error ? ' - ' + body.error : ''}`
    }
  }
  class HttpErrorAuthOTP extends HttpErrorBase {
    constructor(method, res, body, spec) {
      super(method, res, body, spec)
      this.message = 'OTP required for authentication'
      this.code = 'EOTP'
    }
  }
  class HttpErrorAuthIPAddress extends HttpErrorBase {
    constructor(method, res, body, spec) {
      super(method, res, body, spec)
      this.message = 'Login is not allowed from your IP address'
      this.code = 'EAUTHIP'
    }
  }
  class HttpErrorAuthUnknown extends HttpErrorBase {
    constructor(method, res, body, spec) {
      super(method, res, body, spec)
      this.message =
        'Unable to authenticate, need: ' + res.headers.get('www-authenticate')
    }
  }
  errors$2 = {
    HttpErrorBase,
    HttpErrorGeneral,
    HttpErrorAuthOTP,
    HttpErrorAuthIPAddress,
    HttpErrorAuthUnknown
  }
  return errors$2
}

const commonjs$1 = {}

const constants$3 = {}

let hasRequiredConstants$3
function requireConstants$3() {
  if (hasRequiredConstants$3) {
    return constants$3
  }
  hasRequiredConstants$3 = 1
  const __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(constants$3, '__esModule', {
    value: true
  })
  constants$3.constants = void 0
  // Update with any zlib constants that are added or changed in the future.
  // Node v6 didn't export this, so we just hard code the version and rely
  // on all the other hard-coded values from zlib v4736.  When node v6
  // support drops, we can just export the realZlibConstants object.
  const zlib_1 = __importDefault(require$$0$f)
  /* c8 ignore start */
  const realZlibConstants = zlib_1.default.constants || {
    ZLIB_VERNUM: 4736
  }
  /* c8 ignore stop */
  constants$3.constants = Object.freeze(
    Object.assign(
      Object.create(null),
      {
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        Z_MEM_ERROR: -4,
        Z_BUF_ERROR: -5,
        Z_VERSION_ERROR: -6,
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,
        DEFLATE: 1,
        INFLATE: 2,
        GZIP: 3,
        GUNZIP: 4,
        DEFLATERAW: 5,
        INFLATERAW: 6,
        UNZIP: 7,
        BROTLI_DECODE: 8,
        BROTLI_ENCODE: 9,
        Z_MIN_WINDOWBITS: 8,
        Z_MAX_WINDOWBITS: 15,
        Z_DEFAULT_WINDOWBITS: 15,
        Z_MIN_CHUNK: 64,
        Z_MAX_CHUNK: Infinity,
        Z_DEFAULT_CHUNK: 16384,
        Z_MIN_MEMLEVEL: 1,
        Z_MAX_MEMLEVEL: 9,
        Z_DEFAULT_MEMLEVEL: 8,
        Z_MIN_LEVEL: -1,
        Z_MAX_LEVEL: 9,
        Z_DEFAULT_LEVEL: -1,
        BROTLI_OPERATION_PROCESS: 0,
        BROTLI_OPERATION_FLUSH: 1,
        BROTLI_OPERATION_FINISH: 2,
        BROTLI_OPERATION_EMIT_METADATA: 3,
        BROTLI_MODE_GENERIC: 0,
        BROTLI_MODE_TEXT: 1,
        BROTLI_MODE_FONT: 2,
        BROTLI_DEFAULT_MODE: 0,
        BROTLI_MIN_QUALITY: 0,
        BROTLI_MAX_QUALITY: 11,
        BROTLI_DEFAULT_QUALITY: 11,
        BROTLI_MIN_WINDOW_BITS: 10,
        BROTLI_MAX_WINDOW_BITS: 24,
        BROTLI_LARGE_MAX_WINDOW_BITS: 30,
        BROTLI_DEFAULT_WINDOW: 22,
        BROTLI_MIN_INPUT_BLOCK_BITS: 16,
        BROTLI_MAX_INPUT_BLOCK_BITS: 24,
        BROTLI_PARAM_MODE: 0,
        BROTLI_PARAM_QUALITY: 1,
        BROTLI_PARAM_LGWIN: 2,
        BROTLI_PARAM_LGBLOCK: 3,
        BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,
        BROTLI_PARAM_SIZE_HINT: 5,
        BROTLI_PARAM_LARGE_WINDOW: 6,
        BROTLI_PARAM_NPOSTFIX: 7,
        BROTLI_PARAM_NDIRECT: 8,
        BROTLI_DECODER_RESULT_ERROR: 0,
        BROTLI_DECODER_RESULT_SUCCESS: 1,
        BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,
        BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,
        BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,
        BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,
        BROTLI_DECODER_NO_ERROR: 0,
        BROTLI_DECODER_SUCCESS: 1,
        BROTLI_DECODER_NEEDS_MORE_INPUT: 2,
        BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,
        BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,
        BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,
        BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,
        BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,
        BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,
        BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,
        BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,
        BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,
        BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,
        BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,
        BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,
        BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,
        BROTLI_DECODER_ERROR_UNREACHABLE: -31
      },
      realZlibConstants
    )
  )
  return constants$3
}

let hasRequiredCommonjs$1
function requireCommonjs$1() {
  if (hasRequiredCommonjs$1) {
    return commonjs$1
  }
  hasRequiredCommonjs$1 = 1
  ;(function (exports) {
    const __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            let desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            o[k2] = m[k]
          })
    const __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', {
              enumerable: true,
              value: v
            })
          }
        : function (o, v) {
            o['default'] = v
          })
    const __importStar =
      (this && this.__importStar) ||
      (function () {
        let ownKeys = function (o) {
          ownKeys =
            Object.getOwnPropertyNames ||
            function (o) {
              const ar = []
              for (const k in o) {
                if (Object.prototype.hasOwnProperty.call(o, k))
                  ar[ar.length] = k
              }
              return ar
            }
          return ownKeys(o)
        }
        return function (mod) {
          if (mod && mod.__esModule) {
            return mod
          }
          const result = {}
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++)
              if (k[i] !== 'default') __createBinding(result, mod, k[i])
          }
          __setModuleDefault(result, mod)
          return result
        }
      })()
    const __importDefault =
      (this && this.__importDefault) ||
      function (mod) {
        return mod && mod.__esModule
          ? mod
          : {
              default: mod
            }
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.BrotliDecompress =
      exports.BrotliCompress =
      exports.Brotli =
      exports.Unzip =
      exports.InflateRaw =
      exports.DeflateRaw =
      exports.Gunzip =
      exports.Gzip =
      exports.Inflate =
      exports.Deflate =
      exports.Zlib =
      exports.ZlibError =
      exports.constants =
        void 0
    const assert_1 = __importDefault(require$$0$h)
    const buffer_1 = require$$0$g
    const minipass_1 = requireCommonjs$7()
    const realZlib = __importStar(require$$0$f)
    const constants_js_1 = requireConstants$3()
    const constants_js_2 = requireConstants$3()
    Object.defineProperty(exports, 'constants', {
      enumerable: true,
      get: function () {
        return constants_js_2.constants
      }
    })
    const OriginalBufferConcat = buffer_1.Buffer.concat
    const desc = Object.getOwnPropertyDescriptor(buffer_1.Buffer, 'concat')
    const noop = args => args
    const passthroughBufferConcat =
      desc?.writable === true || desc?.set !== undefined
        ? makeNoOp => {
            buffer_1.Buffer.concat = makeNoOp ? noop : OriginalBufferConcat
          }
        : _ => {}
    const _superWrite = Symbol('_superWrite')
    class ZlibError extends Error {
      code
      errno
      constructor(err) {
        super('zlib: ' + err.message)
        this.code = err.code
        this.errno = err.errno
        /* c8 ignore next */
        if (!this.code) {
          this.code = 'ZLIB_ERROR'
        }
        this.message = 'zlib: ' + err.message
        Error.captureStackTrace(this, this.constructor)
      }
      get name() {
        return 'ZlibError'
      }
    }
    exports.ZlibError = ZlibError
    // the Zlib class they all inherit from
    // This thing manages the queue of requests, and returns
    // true or false if there is anything in the queue when
    // you call the .write() method.
    const _flushFlag = Symbol('flushFlag')
    class ZlibBase extends minipass_1.Minipass {
      #sawError = false
      #ended = false
      #flushFlag
      #finishFlushFlag
      #fullFlushFlag
      #handle
      #onError
      get sawError() {
        return this.#sawError
      }
      get handle() {
        return this.#handle
      }
      /* c8 ignore start */
      get flushFlag() {
        return this.#flushFlag
      }
      /* c8 ignore stop */
      constructor(opts, mode) {
        if (!opts || typeof opts !== 'object') {
          throw new TypeError('invalid options for ZlibBase constructor')
        }
        //@ts-ignore
        super(opts)
        /* c8 ignore start */
        this.#flushFlag = opts.flush ?? 0
        this.#finishFlushFlag = opts.finishFlush ?? 0
        this.#fullFlushFlag = opts.fullFlushFlag ?? 0
        /* c8 ignore stop */
        // this will throw if any options are invalid for the class selected
        try {
          // @types/node doesn't know that it exports the classes, but they're there
          //@ts-ignore
          this.#handle = new realZlib[mode](opts)
        } catch (er) {
          // make sure that all errors get decorated properly
          throw new ZlibError(er)
        }
        this.#onError = err => {
          // no sense raising multiple errors, since we abort on the first one.
          if (this.#sawError) {
            return
          }
          this.#sawError = true
          // there is no way to cleanly recover.
          // continuing only obscures problems.
          this.close()
          this.emit('error', err)
        }
        this.#handle?.on('error', er => this.#onError(new ZlibError(er)))
        this.once('end', () => this.close)
      }
      close() {
        if (this.#handle) {
          this.#handle.close()
          this.#handle = undefined
          this.emit('close')
        }
      }
      reset() {
        if (!this.#sawError) {
          ;(0, assert_1.default)(this.#handle, 'zlib binding closed')
          //@ts-ignore
          return this.#handle.reset?.()
        }
      }
      flush(flushFlag) {
        if (this.ended) {
          return
        }
        if (typeof flushFlag !== 'number') {
          flushFlag = this.#fullFlushFlag
        }
        this.write(
          Object.assign(buffer_1.Buffer.alloc(0), {
            [_flushFlag]: flushFlag
          })
        )
      }
      end(chunk, encoding, cb) {
        /* c8 ignore start */
        if (typeof chunk === 'function') {
          cb = chunk
          encoding = undefined
          chunk = undefined
        }
        if (typeof encoding === 'function') {
          cb = encoding
          encoding = undefined
        }
        /* c8 ignore stop */
        if (chunk) {
          if (encoding) {
            this.write(chunk, encoding)
          } else {
            this.write(chunk)
          }
        }
        this.flush(this.#finishFlushFlag)
        this.#ended = true
        return super.end(cb)
      }
      get ended() {
        return this.#ended
      }
      // overridden in the gzip classes to do portable writes
      [_superWrite](data) {
        return super.write(data)
      }
      write(chunk, encoding, cb) {
        // process the chunk using the sync process
        // then super.write() all the outputted chunks
        if (typeof encoding === 'function') {
          ;(cb = encoding), (encoding = 'utf8')
        }
        if (typeof chunk === 'string') {
          chunk = buffer_1.Buffer.from(chunk, encoding)
        }
        if (this.#sawError) {
          return
        }
        ;(0, assert_1.default)(this.#handle, 'zlib binding closed')
        // _processChunk tries to .close() the native handle after it's done, so we
        // intercept that by temporarily making it a no-op.
        // diving into the node:zlib internals a bit here
        const nativeHandle = this.#handle._handle
        const originalNativeClose = nativeHandle.close
        nativeHandle.close = () => {}
        const originalClose = this.#handle.close
        this.#handle.close = () => {}
        // It also calls `Buffer.concat()` at the end, which may be convenient
        // for some, but which we are not interested in as it slows us down.
        passthroughBufferConcat(true)
        let result = undefined
        try {
          const flushFlag =
            typeof chunk[_flushFlag] === 'number'
              ? chunk[_flushFlag]
              : this.#flushFlag
          result = this.#handle._processChunk(chunk, flushFlag)
          // if we don't throw, reset it back how it was
          passthroughBufferConcat(false)
        } catch (err) {
          // or if we do, put Buffer.concat() back before we emit error
          // Error events call into user code, which may call Buffer.concat()
          passthroughBufferConcat(false)
          this.#onError(new ZlibError(err))
        } finally {
          if (this.#handle) {
            this.#handle._handle = nativeHandle
            nativeHandle.close = originalNativeClose
            this.#handle.close = originalClose
            // `_processChunk()` adds an 'error' listener. If we don't remove it
            // after each call, these handlers start piling up.
            this.#handle.removeAllListeners('error')
            // make sure OUR error listener is still attached tho
          }
        }
        if (this.#handle) {
          this.#handle.on('error', er => this.#onError(new ZlibError(er)))
        }
        let writeReturn
        if (result) {
          if (Array.isArray(result) && result.length > 0) {
            const r = result[0]
            // The first buffer is always `handle._outBuffer`, which would be
            // re-used for later invocations; so, we always have to copy that one.
            writeReturn = this[_superWrite](buffer_1.Buffer.from(r))
            for (let i = 1; i < result.length; i++) {
              writeReturn = this[_superWrite](result[i])
            }
          } else {
            // either a single Buffer or an empty array
            writeReturn = this[_superWrite](buffer_1.Buffer.from(result))
          }
        }
        if (cb) {
          cb()
        }
        return writeReturn
      }
    }
    class Zlib extends ZlibBase {
      #level
      #strategy
      constructor(opts, mode) {
        opts = opts || {}
        opts.flush = opts.flush || constants_js_1.constants.Z_NO_FLUSH
        opts.finishFlush = opts.finishFlush || constants_js_1.constants.Z_FINISH
        opts.fullFlushFlag = constants_js_1.constants.Z_FULL_FLUSH
        super(opts, mode)
        this.#level = opts.level
        this.#strategy = opts.strategy
      }
      params(level, strategy) {
        if (this.sawError) {
          return
        }
        if (!this.handle) {
          throw new Error('cannot switch params when binding is closed')
        }
        // no way to test this without also not supporting params at all
        /* c8 ignore start */
        if (!this.handle.params) {
          throw new Error('not supported in this implementation')
        }
        /* c8 ignore stop */
        if (this.#level !== level || this.#strategy !== strategy) {
          this.flush(constants_js_1.constants.Z_SYNC_FLUSH)
          ;(0, assert_1.default)(this.handle, 'zlib binding closed')
          // .params() calls .flush(), but the latter is always async in the
          // core zlib. We override .flush() temporarily to intercept that and
          // flush synchronously.
          const origFlush = this.handle.flush
          this.handle.flush = (flushFlag, cb) => {
            /* c8 ignore start */
            if (typeof flushFlag === 'function') {
              cb = flushFlag
              flushFlag = this.flushFlag
            }
            /* c8 ignore stop */
            this.flush(flushFlag)
            cb?.()
          }
          try {
            this.handle.params(level, strategy)
          } finally {
            this.handle.flush = origFlush
          }
          /* c8 ignore start */
          if (this.handle) {
            this.#level = level
            this.#strategy = strategy
          }
          /* c8 ignore stop */
        }
      }
    }
    exports.Zlib = Zlib
    // minimal 2-byte header
    class Deflate extends Zlib {
      constructor(opts) {
        super(opts, 'Deflate')
      }
    }
    exports.Deflate = Deflate
    class Inflate extends Zlib {
      constructor(opts) {
        super(opts, 'Inflate')
      }
    }
    exports.Inflate = Inflate
    class Gzip extends Zlib {
      #portable
      constructor(opts) {
        super(opts, 'Gzip')
        this.#portable = opts && !!opts.portable
      }
      [_superWrite](data) {
        if (!this.#portable) {
          return super[_superWrite](data)
        }
        // we'll always get the header emitted in one first chunk
        // overwrite the OS indicator byte with 0xFF
        this.#portable = false
        data[9] = 255
        return super[_superWrite](data)
      }
    }
    exports.Gzip = Gzip
    class Gunzip extends Zlib {
      constructor(opts) {
        super(opts, 'Gunzip')
      }
    }
    exports.Gunzip = Gunzip
    // raw - no header
    class DeflateRaw extends Zlib {
      constructor(opts) {
        super(opts, 'DeflateRaw')
      }
    }
    exports.DeflateRaw = DeflateRaw
    class InflateRaw extends Zlib {
      constructor(opts) {
        super(opts, 'InflateRaw')
      }
    }
    exports.InflateRaw = InflateRaw
    // auto-detect header.
    class Unzip extends Zlib {
      constructor(opts) {
        super(opts, 'Unzip')
      }
    }
    exports.Unzip = Unzip
    class Brotli extends ZlibBase {
      constructor(opts, mode) {
        opts = opts || {}
        opts.flush =
          opts.flush || constants_js_1.constants.BROTLI_OPERATION_PROCESS
        opts.finishFlush =
          opts.finishFlush || constants_js_1.constants.BROTLI_OPERATION_FINISH
        opts.fullFlushFlag = constants_js_1.constants.BROTLI_OPERATION_FLUSH
        super(opts, mode)
      }
    }
    exports.Brotli = Brotli
    class BrotliCompress extends Brotli {
      constructor(opts) {
        super(opts, 'BrotliCompress')
      }
    }
    exports.BrotliCompress = BrotliCompress
    class BrotliDecompress extends Brotli {
      constructor(opts) {
        super(opts, 'BrotliDecompress')
      }
    }
    exports.BrotliDecompress = BrotliDecompress
  })(commonjs$1)
  return commonjs$1
}

let minipass
let hasRequiredMinipass
function requireMinipass() {
  if (hasRequiredMinipass) {
    return minipass
  }
  hasRequiredMinipass = 1
  const proc =
    typeof process === 'object' && process
      ? process
      : {
          stdout: null,
          stderr: null
        }
  const EE = require$$0$c
  const Stream = require$$1$8
  const SD = require$$2$4.StringDecoder
  const EOF = Symbol('EOF')
  const MAYBE_EMIT_END = Symbol('maybeEmitEnd')
  const EMITTED_END = Symbol('emittedEnd')
  const EMITTING_END = Symbol('emittingEnd')
  const EMITTED_ERROR = Symbol('emittedError')
  const CLOSED = Symbol('closed')
  const READ = Symbol('read')
  const FLUSH = Symbol('flush')
  const FLUSHCHUNK = Symbol('flushChunk')
  const ENCODING = Symbol('encoding')
  const DECODER = Symbol('decoder')
  const FLOWING = Symbol('flowing')
  const PAUSED = Symbol('paused')
  const RESUME = Symbol('resume')
  const BUFFERLENGTH = Symbol('bufferLength')
  const BUFFERPUSH = Symbol('bufferPush')
  const BUFFERSHIFT = Symbol('bufferShift')
  const OBJECTMODE = Symbol('objectMode')
  const DESTROYED = Symbol('destroyed')
  const EMITDATA = Symbol('emitData')
  const EMITEND = Symbol('emitEnd')
  const EMITEND2 = Symbol('emitEnd2')
  const ASYNC = Symbol('async')
  const defer = fn => Promise.resolve().then(fn)

  // TODO remove when Node v8 support drops
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'
  const ASYNCITERATOR =
    (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')
  const ITERATOR =
    (doIter && Symbol.iterator) || Symbol('iterator not implemented')

  // events that mean 'the stream is over'
  // these are treated specially, and re-emitted
  // if they are listened for after emitting.
  const isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'
  const isArrayBuffer = b =>
    b instanceof ArrayBuffer ||
    (typeof b === 'object' &&
      b.constructor &&
      b.constructor.name === 'ArrayBuffer' &&
      b.byteLength >= 0)
  const isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)
  class Pipe {
    constructor(src, dest, opts) {
      this.src = src
      this.dest = dest
      this.opts = opts
      this.ondrain = () => src[RESUME]()
      dest.on('drain', this.ondrain)
    }
    unpipe() {
      this.dest.removeListener('drain', this.ondrain)
    }
    // istanbul ignore next - only here for the prototype
    proxyErrors() {}
    end() {
      this.unpipe()
      if (this.opts.end) {
        this.dest.end()
      }
    }
  }
  class PipeProxyErrors extends Pipe {
    unpipe() {
      this.src.removeListener('error', this.proxyErrors)
      super.unpipe()
    }
    constructor(src, dest, opts) {
      super(src, dest, opts)
      this.proxyErrors = er => dest.emit('error', er)
      src.on('error', this.proxyErrors)
    }
  }
  minipass = class Minipass extends Stream {
    constructor(options) {
      super()
      this[FLOWING] = false
      // whether we're explicitly paused
      this[PAUSED] = false
      this.pipes = []
      this.buffer = []
      this[OBJECTMODE] = (options && options.objectMode) || false
      if (this[OBJECTMODE]) {
        this[ENCODING] = null
      } else {
        this[ENCODING] = (options && options.encoding) || null
      }
      if (this[ENCODING] === 'buffer') {
        this[ENCODING] = null
      }
      this[ASYNC] = (options && !!options.async) || false
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null
      this[EOF] = false
      this[EMITTED_END] = false
      this[EMITTING_END] = false
      this[CLOSED] = false
      this[EMITTED_ERROR] = null
      this.writable = true
      this.readable = true
      this[BUFFERLENGTH] = 0
      this[DESTROYED] = false
    }
    get bufferLength() {
      return this[BUFFERLENGTH]
    }
    get encoding() {
      return this[ENCODING]
    }
    set encoding(enc) {
      if (this[OBJECTMODE]) {
        throw new Error('cannot set encoding in objectMode')
      }
      if (
        this[ENCODING] &&
        enc !== this[ENCODING] &&
        ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])
      ) {
        throw new Error('cannot change encoding')
      }
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null
        if (this.buffer.length) {
          this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))
        }
      }
      this[ENCODING] = enc
    }
    setEncoding(enc) {
      this.encoding = enc
    }
    get objectMode() {
      return this[OBJECTMODE]
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om
    }
    get ['async']() {
      return this[ASYNC]
    }
    set ['async'](a) {
      this[ASYNC] = this[ASYNC] || !!a
    }
    write(chunk, encoding, cb) {
      if (this[EOF]) {
        throw new Error('write after end')
      }
      if (this[DESTROYED]) {
        this.emit(
          'error',
          Object.assign(
            new Error('Cannot call write after a stream was destroyed'),
            {
              code: 'ERR_STREAM_DESTROYED'
            }
          )
        )
        return true
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (!encoding) {
        encoding = 'utf8'
      }
      const fn = this[ASYNC] ? defer : f => f()

      // convert array buffers and typed array views into buffers
      // at some point in the future, we may want to do the opposite!
      // leave strings and buffers as-is
      // anything else switches us into object mode
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk)) {
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)
        } else if (isArrayBuffer(chunk)) {
          chunk = Buffer.from(chunk)
        } else if (typeof chunk !== 'string') {
          // use the setter so we throw if we have encoding set
          this.objectMode = true
        }
      }

      // handle object mode up front, since it's simpler
      // this yields better performance, fewer checks later.
      if (this[OBJECTMODE]) {
        /* istanbul ignore if - maybe impossible? */
        if (this.flowing && this[BUFFERLENGTH] !== 0) {
          this[FLUSH](true)
        }
        if (this.flowing) {
          this.emit('data', chunk)
        } else {
          this[BUFFERPUSH](chunk)
        }
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // at this point the chunk is a buffer or string
      // don't buffer it up or send it to the decoder
      if (!chunk.length) {
        if (this[BUFFERLENGTH] !== 0) {
          this.emit('readable')
        }
        if (cb) {
          fn(cb)
        }
        return this.flowing
      }

      // fast-path writing strings of same encoding to a stream with
      // an empty buffer, skipping the buffer/decoder dance
      if (
        typeof chunk === 'string' &&
        // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)
      ) {
        chunk = Buffer.from(chunk, encoding)
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING]) {
        chunk = this[DECODER].write(chunk)
      }

      // Note: flushing CAN potentially switch us into not-flowing mode
      if (this.flowing && this[BUFFERLENGTH] !== 0) {
        this[FLUSH](true)
      }
      if (this.flowing) {
        this.emit('data', chunk)
      } else {
        this[BUFFERPUSH](chunk)
      }
      if (this[BUFFERLENGTH] !== 0) {
        this.emit('readable')
      }
      if (cb) {
        fn(cb)
      }
      return this.flowing
    }
    read(n) {
      if (this[DESTROYED]) {
        return null
      }
      if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {
        this[MAYBE_EMIT_END]()
        return null
      }
      if (this[OBJECTMODE]) {
        n = null
      }
      if (this.buffer.length > 1 && !this[OBJECTMODE]) {
        if (this.encoding) {
          this.buffer = [this.buffer.join('')]
        } else {
          this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]
        }
      }
      const ret = this[READ](n || null, this.buffer[0])
      this[MAYBE_EMIT_END]()
      return ret
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null) {
        this[BUFFERSHIFT]()
      } else {
        this.buffer[0] = chunk.slice(n)
        chunk = chunk.slice(0, n)
        this[BUFFERLENGTH] -= n
      }
      this.emit('data', chunk)
      if (!this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
      return chunk
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === 'function') {
        ;(cb = chunk), (chunk = null)
      }
      if (typeof encoding === 'function') {
        ;(cb = encoding), (encoding = 'utf8')
      }
      if (chunk) {
        this.write(chunk, encoding)
      }
      if (cb) {
        this.once('end', cb)
      }
      this[EOF] = true
      this.writable = false

      // if we haven't written anything, then go ahead and emit,
      // even if we're not reading.
      // we'll re-emit if a new 'end' listener is added anyway.
      // This makes MP more suitable to write-only use cases.
      if (this.flowing || !this[PAUSED]) {
        this[MAYBE_EMIT_END]()
      }
      return this
    }

    // don't let the internal resume be overwritten
    [RESUME]() {
      if (this[DESTROYED]) {
        return
      }
      this[PAUSED] = false
      this[FLOWING] = true
      this.emit('resume')
      if (this.buffer.length) {
        this[FLUSH]()
      } else if (this[EOF]) {
        this[MAYBE_EMIT_END]()
      } else {
        this.emit('drain')
      }
    }
    resume() {
      return this[RESUME]()
    }
    pause() {
      this[FLOWING] = false
      this[PAUSED] = true
    }
    get destroyed() {
      return this[DESTROYED]
    }
    get flowing() {
      return this[FLOWING]
    }
    get paused() {
      return this[PAUSED]
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE]) {
        this[BUFFERLENGTH] += 1
      } else {
        this[BUFFERLENGTH] += chunk.length
      }
      this.buffer.push(chunk)
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE]) {
          this[BUFFERLENGTH] -= 1
        } else {
          this[BUFFERLENGTH] -= this.buffer[0].length
        }
      }
      return this.buffer.shift()
    }
    [FLUSH](noDrain) {
      do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))
      if (!noDrain && !this.buffer.length && !this[EOF]) {
        this.emit('drain')
      }
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit('data', chunk), this.flowing) : false
    }
    pipe(dest, opts) {
      if (this[DESTROYED]) {
        return
      }
      const ended = this[EMITTED_END]
      opts = opts || {}
      if (dest === proc.stdout || dest === proc.stderr) {
        opts.end = false
      } else {
        opts.end = opts.end !== false
      }
      opts.proxyErrors = !!opts.proxyErrors

      // piping an ended stream ends immediately
      if (ended) {
        if (opts.end) {
          dest.end()
        }
      } else {
        this.pipes.push(
          !opts.proxyErrors
            ? new Pipe(this, dest, opts)
            : new PipeProxyErrors(this, dest, opts)
        )
        if (this[ASYNC]) {
          defer(() => this[RESUME]())
        } else {
          this[RESUME]()
        }
      }
      return dest
    }
    unpipe(dest) {
      const p = this.pipes.find(p => p.dest === dest)
      if (p) {
        this.pipes.splice(this.pipes.indexOf(p), 1)
        p.unpipe()
      }
    }
    addListener(ev, fn) {
      return this.on(ev, fn)
    }
    on(ev, fn) {
      const ret = super.on(ev, fn)
      if (ev === 'data' && !this.pipes.length && !this.flowing) {
        this[RESUME]()
      } else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {
        super.emit('readable')
      } else if (isEndish(ev) && this[EMITTED_END]) {
        super.emit(ev)
        this.removeAllListeners(ev)
      } else if (ev === 'error' && this[EMITTED_ERROR]) {
        if (this[ASYNC]) {
          defer(() => fn.call(this, this[EMITTED_ERROR]))
        } else {
          fn.call(this, this[EMITTED_ERROR])
        }
      }
      return ret
    }
    get emittedEnd() {
      return this[EMITTED_END]
    }
    [MAYBE_EMIT_END]() {
      if (
        !this[EMITTING_END] &&
        !this[EMITTED_END] &&
        !this[DESTROYED] &&
        this.buffer.length === 0 &&
        this[EOF]
      ) {
        this[EMITTING_END] = true
        this.emit('end')
        this.emit('prefinish')
        this.emit('finish')
        if (this[CLOSED]) {
          this.emit('close')
        }
        this[EMITTING_END] = false
      }
    }
    emit(ev, data, ...extra) {
      // error and close are only events allowed after calling destroy()
      if (
        ev !== 'error' &&
        ev !== 'close' &&
        ev !== DESTROYED &&
        this[DESTROYED]
      ) {
        return
      } else if (ev === 'data') {
        return !data
          ? false
          : this[ASYNC]
            ? defer(() => this[EMITDATA](data))
            : this[EMITDATA](data)
      } else if (ev === 'end') {
        return this[EMITEND]()
      } else if (ev === 'close') {
        this[CLOSED] = true
        // don't emit close before 'end' and 'finish'
        if (!this[EMITTED_END] && !this[DESTROYED]) {
          return
        }
        const ret = super.emit('close')
        this.removeAllListeners('close')
        return ret
      } else if (ev === 'error') {
        this[EMITTED_ERROR] = data
        const ret = super.emit('error', data)
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'resume') {
        const ret = super.emit('resume')
        this[MAYBE_EMIT_END]()
        return ret
      } else if (ev === 'finish' || ev === 'prefinish') {
        const ret = super.emit(ev)
        this.removeAllListeners(ev)
        return ret
      }

      // Some other unknown event
      const ret = super.emit(ev, data, ...extra)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITDATA](data) {
      for (const p of this.pipes) {
        if (p.dest.write(data) === false) {
          this.pause()
        }
      }
      const ret = super.emit('data', data)
      this[MAYBE_EMIT_END]()
      return ret
    }
    [EMITEND]() {
      if (this[EMITTED_END]) {
        return
      }
      this[EMITTED_END] = true
      this.readable = false
      if (this[ASYNC]) {
        defer(() => this[EMITEND2]())
      } else {
        this[EMITEND2]()
      }
    }
    [EMITEND2]() {
      if (this[DECODER]) {
        const data = this[DECODER].end()
        if (data) {
          for (const p of this.pipes) {
            p.dest.write(data)
          }
          super.emit('data', data)
        }
      }
      for (const p of this.pipes) {
        p.end()
      }
      const ret = super.emit('end')
      this.removeAllListeners('end')
      return ret
    }

    // const all = await stream.collect()
    collect() {
      const buf = []
      if (!this[OBJECTMODE]) {
        buf.dataLength = 0
      }
      // set the promise first, in case an error is raised
      // by triggering the flow here.
      const p = this.promise()
      this.on('data', c => {
        buf.push(c)
        if (!this[OBJECTMODE]) {
          buf.dataLength += c.length
        }
      })
      return p.then(() => buf)
    }

    // const data = await stream.concat()
    concat() {
      return this[OBJECTMODE]
        ? Promise.reject(new Error('cannot concat in objectMode'))
        : this.collect().then(buf =>
            this[OBJECTMODE]
              ? Promise.reject(new Error('cannot concat in objectMode'))
              : this[ENCODING]
                ? buf.join('')
                : Buffer.concat(buf, buf.dataLength)
          )
    }

    // stream.promise().then(() => done, er => emitted error)
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error('stream destroyed')))
        this.on('error', er => reject(er))
        this.on('end', () => resolve())
      })
    }

    // for await (let chunk of stream)
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read()
        if (res !== null) {
          return Promise.resolve({
            done: false,
            value: res
          })
        }
        if (this[EOF]) {
          return Promise.resolve({
            done: true
          })
        }
        let resolve = null
        let reject = null
        const onerr = er => {
          this.removeListener('data', ondata)
          this.removeListener('end', onend)
          reject(er)
        }
        const ondata = value => {
          this.removeListener('error', onerr)
          this.removeListener('end', onend)
          this.pause()
          resolve({
            value: value,
            done: !!this[EOF]
          })
        }
        const onend = () => {
          this.removeListener('error', onerr)
          this.removeListener('data', ondata)
          resolve({
            done: true
          })
        }
        const ondestroy = () => onerr(new Error('stream destroyed'))
        return new Promise((res, rej) => {
          reject = rej
          resolve = res
          this.once(DESTROYED, ondestroy)
          this.once('error', onerr)
          this.once('end', onend)
          this.once('data', ondata)
        })
      }
      return {
        next
      }
    }

    // for (let chunk of stream)
    [ITERATOR]() {
      const next = () => {
        const value = this.read()
        const done = value === null
        return {
          value,
          done
        }
      }
      return {
        next
      }
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er) {
          this.emit('error', er)
        } else {
          this.emit(DESTROYED)
        }
        return this
      }
      this[DESTROYED] = true

      // throw away all buffered data, it's never coming out
      this.buffer.length = 0
      this[BUFFERLENGTH] = 0
      if (typeof this.close === 'function' && !this[CLOSED]) {
        this.close()
      }
      if (er) {
        this.emit('error', er)
      }
      // if no error to emit, still reject pending promises
      else {
        this.emit(DESTROYED)
      }
      return this
    }
    static isStream(s) {
      return (
        !!s &&
        (s instanceof Minipass ||
          s instanceof Stream ||
          (s instanceof EE &&
            (typeof s.pipe === 'function' ||
              // readable
              (typeof s.write === 'function' && typeof s.end === 'function')))) // writable
      )
    }
  }
  return minipass
}

let minipassSized
let hasRequiredMinipassSized
function requireMinipassSized() {
  if (hasRequiredMinipassSized) {
    return minipassSized
  }
  hasRequiredMinipassSized = 1
  const Minipass = requireMinipass()
  class SizeError extends Error {
    constructor(found, expect) {
      super(`Bad data size: expected ${expect} bytes, but got ${found}`)
      this.expect = expect
      this.found = found
      this.code = 'EBADSIZE'
      Error.captureStackTrace(this, this.constructor)
    }
    get name() {
      return 'SizeError'
    }
  }
  class MinipassSized extends Minipass {
    constructor(options = {}) {
      super(options)
      if (options.objectMode) {
        throw new TypeError(
          `${this.constructor.name} streams only work with string and buffer data`
        )
      }
      this.found = 0
      this.expect = options.size
      if (
        typeof this.expect !== 'number' ||
        this.expect > Number.MAX_SAFE_INTEGER ||
        isNaN(this.expect) ||
        this.expect < 0 ||
        !isFinite(this.expect) ||
        this.expect !== Math.floor(this.expect)
      ) {
        throw new Error('invalid expected size: ' + this.expect)
      }
    }
    write(chunk, encoding, cb) {
      const buffer = Buffer.isBuffer(chunk)
        ? chunk
        : typeof chunk === 'string'
          ? Buffer.from(chunk, typeof encoding === 'string' ? encoding : 'utf8')
          : chunk
      if (!Buffer.isBuffer(buffer)) {
        this.emit(
          'error',
          new TypeError(
            `${this.constructor.name} streams only work with string and buffer data`
          )
        )
        return false
      }
      this.found += buffer.length
      if (this.found > this.expect) {
        this.emit('error', new SizeError(this.found, this.expect))
      }
      return super.write(chunk, encoding, cb)
    }
    emit(ev, ...data) {
      if (ev === 'end') {
        if (this.found !== this.expect) {
          this.emit('error', new SizeError(this.found, this.expect))
        }
      }
      return super.emit(ev, ...data)
    }
  }
  MinipassSized.SizeError = SizeError
  minipassSized = MinipassSized
  return minipassSized
}

let blob
let hasRequiredBlob
function requireBlob() {
  if (hasRequiredBlob) {
    return blob
  }
  hasRequiredBlob = 1
  const { Minipass } = requireCommonjs$7()
  const TYPE = Symbol('type')
  const BUFFER = Symbol('buffer')
  class Blob {
    constructor(blobParts, options) {
      this[TYPE] = ''
      const buffers = []
      let size = 0
      if (blobParts) {
        const a = blobParts
        const length = Number(a.length)
        for (let i = 0; i < length; i++) {
          const element = a[i]
          const buffer =
            element instanceof Buffer
              ? element
              : ArrayBuffer.isView(element)
                ? Buffer.from(
                    element.buffer,
                    element.byteOffset,
                    element.byteLength
                  )
                : element instanceof ArrayBuffer
                  ? Buffer.from(element)
                  : element instanceof Blob
                    ? element[BUFFER]
                    : typeof element === 'string'
                      ? Buffer.from(element)
                      : Buffer.from(String(element))
          size += buffer.length
          buffers.push(buffer)
        }
      }
      this[BUFFER] = Buffer.concat(buffers, size)
      const type =
        options &&
        options.type !== undefined &&
        String(options.type).toLowerCase()
      if (type && !/[^\u0020-\u007E]/.test(type)) {
        this[TYPE] = type
      }
    }
    get size() {
      return this[BUFFER].length
    }
    get type() {
      return this[TYPE]
    }
    text() {
      return Promise.resolve(this[BUFFER].toString())
    }
    arrayBuffer() {
      const buf = this[BUFFER]
      const off = buf.byteOffset
      const len = buf.byteLength
      const ab = buf.buffer.slice(off, off + len)
      return Promise.resolve(ab)
    }
    stream() {
      return new Minipass().end(this[BUFFER])
    }
    slice(start, end, type) {
      const size = this.size
      const relativeStart =
        start === undefined
          ? 0
          : start < 0
            ? Math.max(size + start, 0)
            : Math.min(start, size)
      const relativeEnd =
        end === undefined
          ? size
          : end < 0
            ? Math.max(size + end, 0)
            : Math.min(end, size)
      const span = Math.max(relativeEnd - relativeStart, 0)
      const buffer = this[BUFFER]
      const slicedBuffer = buffer.slice(relativeStart, relativeStart + span)
      const blob = new Blob([], {
        type
      })
      blob[BUFFER] = slicedBuffer
      return blob
    }
    get [Symbol.toStringTag]() {
      return 'Blob'
    }
    static get BUFFER() {
      return BUFFER
    }
  }
  Object.defineProperties(Blob.prototype, {
    size: {
      enumerable: true
    },
    type: {
      enumerable: true
    }
  })
  blob = Blob
  return blob
}

let fetchError
let hasRequiredFetchError
function requireFetchError() {
  if (hasRequiredFetchError) {
    return fetchError
  }
  hasRequiredFetchError = 1
  class FetchError extends Error {
    constructor(message, type, systemError) {
      super(message)
      this.code = 'FETCH_ERROR'

      // pick up code, expected, path, ...
      if (systemError) {
        Object.assign(this, systemError)
      }
      this.errno = this.code

      // override anything the system error might've clobbered
      this.type =
        this.code === 'EBADSIZE' && this.found > this.expect ? 'max-size' : type
      this.message = message
      Error.captureStackTrace(this, this.constructor)
    }
    get name() {
      return 'FetchError'
    }

    // don't allow name to be overwritten
    set name(n) {}
    get [Symbol.toStringTag]() {
      return 'FetchError'
    }
  }
  fetchError = FetchError
  return fetchError
}

const encoding$2 = {}

const lib$7 = { exports: {} }

const safer = { exports: {} }

let shared
let hasRequiredShared
function requireShared() {
  if (hasRequiredShared) {
    return shared
  }
  hasRequiredShared = 1

  // Use non-'node:' prefixed require to avoid Webpack errors.
  // eslint-disable-next-line n/prefer-node-protocol
  const builtinBufferExports = require$$0$g
  const builtinBufferExportsDescMap = Object.fromEntries(
    Object.entries(
      Object.getOwnPropertyDescriptors(builtinBufferExports)
    ).filter(({ 0: key }) => key !== 'Buffer' && key !== 'SlowBuffer')
  )
  shared = {
    builtinBufferExportsDescMap
  }
  return shared
}

let hasRequiredSafer
function requireSafer() {
  if (hasRequiredSafer) {
    return safer.exports
  }
  hasRequiredSafer = 1
  ;(function (module) {
    const {
      Blob: BlobCtor,
      Buffer: UnsafeBuffer,
      File: FileCtor,
      INSPECT_MAX_BYTES,
      atob: atobFn,
      btoa: btoaFn,
      constants,
      isAscii,
      isUtf8,
      kMaxLength,
      kStringMaxLength,
      resolveObjectURL,
      transcode
      // Use non-'node:' prefixed require to avoid Webpack errors.
      // eslint-disable-next-line n/prefer-node-protocol
    } = require$$0$g
    const { builtinBufferExportsDescMap } = /*@__PURE__*/ requireShared()
    const Safer = {
      prototype: UnsafeBuffer.prototype
    }
    for (const key of Reflect.ownKeys(UnsafeBuffer)) {
      if (
        key !== 'allocUnsafe' &&
        key !== 'allocUnsafeSlow' &&
        key !== 'prototype'
      ) {
        Safer[key] = UnsafeBuffer[key]
      }
    }
    // Give Node ESM/CJS interop a chance to detect names of exports.
    module.exports = {
      INSPECT_MAX_BYTES,
      Blob: BlobCtor,
      File: FileCtor,
      atob: atobFn,
      btoa: btoaFn,
      constants,
      isAscii,
      isUtf8,
      kMaxLength,
      kStringMaxLength,
      resolveObjectURL,
      transcode,
      Buffer: Safer
    }
    // Redefine INSPECT_MAX_BYTES, Blob, File, and resolveObjectURL as their
    // builtin getter/setters.
    Object.defineProperties(module.exports, builtinBufferExportsDescMap)
  })(safer)
  return safer.exports
}

const bomHandling = {}

let hasRequiredBomHandling
function requireBomHandling() {
  if (hasRequiredBomHandling) {
    return bomHandling
  }
  hasRequiredBomHandling = 1
  const BOMChar = '\uFEFF'
  bomHandling.PrependBOM = PrependBOMWrapper
  function PrependBOMWrapper(encoder, options) {
    this.encoder = encoder
    this.addBOM = true
  }
  PrependBOMWrapper.prototype.write = function (str) {
    if (this.addBOM) {
      str = BOMChar + str
      this.addBOM = false
    }
    return this.encoder.write(str)
  }
  PrependBOMWrapper.prototype.end = function () {
    return this.encoder.end()
  }

  //------------------------------------------------------------------------------

  bomHandling.StripBOM = StripBOMWrapper
  function StripBOMWrapper(decoder, options) {
    this.decoder = decoder
    this.pass = false
    this.options = options || {}
  }
  StripBOMWrapper.prototype.write = function (buf) {
    let res = this.decoder.write(buf)
    if (this.pass || !res) {
      return res
    }
    if (res[0] === BOMChar) {
      res = res.slice(1)
      if (typeof this.options.stripBOM === 'function') {
        this.options.stripBOM()
      }
    }
    this.pass = true
    return res
  }
  StripBOMWrapper.prototype.end = function () {
    return this.decoder.end()
  }
  return bomHandling
}

const encodings = {}

let internal
let hasRequiredInternal
function requireInternal() {
  if (hasRequiredInternal) {
    return internal
  }
  hasRequiredInternal = 1
  const Buffer = /*@__PURE__*/ requireSafer().Buffer

  // Export Node.js internal encodings.

  internal = {
    // Encodings
    utf8: {
      type: '_internal',
      bomAware: true
    },
    cesu8: {
      type: '_internal',
      bomAware: true
    },
    unicode11utf8: 'utf8',
    ucs2: {
      type: '_internal',
      bomAware: true
    },
    utf16le: 'ucs2',
    binary: {
      type: '_internal'
    },
    base64: {
      type: '_internal'
    },
    hex: {
      type: '_internal'
    },
    // Codec.
    _internal: InternalCodec
  }

  //------------------------------------------------------------------------------

  function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName
    this.bomAware = codecOptions.bomAware
    if (this.enc === 'base64') {
      this.encoder = InternalEncoderBase64
    } else if (this.enc === 'cesu8') {
      this.enc = 'utf8' // Use utf8 for decoding.
      this.encoder = InternalEncoderCesu8

      // Add decoder for versions of Node not supporting CESU-8
      if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
        this.decoder = InternalDecoderCesu8
        this.defaultCharUnicode = iconv.defaultCharUnicode
      }
    }
  }
  InternalCodec.prototype.encoder = InternalEncoder
  InternalCodec.prototype.decoder = InternalDecoder

  //------------------------------------------------------------------------------

  // We use node.js internal decoder. Its signature is the same as ours.
  const StringDecoder = require$$2$4.StringDecoder
  if (!StringDecoder.prototype.end) {
    // Node v0.8 doesn't have this method.
    StringDecoder.prototype.end = function () {}
  }
  function InternalDecoder(options, codec) {
    this.decoder = new StringDecoder(codec.enc)
  }
  InternalDecoder.prototype.write = function (buf) {
    if (!Buffer.isBuffer(buf)) {
      buf = Buffer.from(buf)
    }
    return this.decoder.write(buf)
  }
  InternalDecoder.prototype.end = function () {
    return this.decoder.end()
  }

  //------------------------------------------------------------------------------
  // Encoder is mostly trivial

  function InternalEncoder(options, codec) {
    this.enc = codec.enc
  }
  InternalEncoder.prototype.write = function (str) {
    return Buffer.from(str, this.enc)
  }
  InternalEncoder.prototype.end = function () {}

  //------------------------------------------------------------------------------
  // Except base64 encoder, which must keep its state.

  function InternalEncoderBase64(options, codec) {
    this.prevStr = ''
  }
  InternalEncoderBase64.prototype.write = function (str) {
    str = this.prevStr + str
    const completeQuads = str.length - (str.length % 4)
    this.prevStr = str.slice(completeQuads)
    str = str.slice(0, completeQuads)
    return Buffer.from(str, 'base64')
  }
  InternalEncoderBase64.prototype.end = function () {
    return Buffer.from(this.prevStr, 'base64')
  }

  //------------------------------------------------------------------------------
  // CESU-8 encoder is also special.

  function InternalEncoderCesu8(options, codec) {}
  InternalEncoderCesu8.prototype.write = function (str) {
    let buf = Buffer.alloc(str.length * 3),
      bufIdx = 0
    for (let i = 0; i < str.length; i++) {
      const charCode = str.charCodeAt(i)
      // Naive implementation, but it works because CESU-8 is especially easy
      // to convert from UTF-16 (which all JS strings are encoded in).
      if (charCode < 0x80) {
        buf[bufIdx++] = charCode
      } else if (charCode < 0x800) {
        buf[bufIdx++] = 0xc0 + (charCode >>> 6)
        buf[bufIdx++] = 0x80 + (charCode & 0x3f)
      } else {
        // charCode will always be < 0x10000 in javascript.
        buf[bufIdx++] = 0xe0 + (charCode >>> 12)
        buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f)
        buf[bufIdx++] = 0x80 + (charCode & 0x3f)
      }
    }
    return buf.slice(0, bufIdx)
  }
  InternalEncoderCesu8.prototype.end = function () {}

  //------------------------------------------------------------------------------
  // CESU-8 decoder is not implemented in Node v4.0+

  function InternalDecoderCesu8(options, codec) {
    this.acc = 0
    this.contBytes = 0
    this.accBytes = 0
    this.defaultCharUnicode = codec.defaultCharUnicode
  }
  InternalDecoderCesu8.prototype.write = function (buf) {
    let acc = this.acc,
      contBytes = this.contBytes,
      accBytes = this.accBytes,
      res = ''
    for (let i = 0; i < buf.length; i++) {
      const curByte = buf[i]
      if ((curByte & 0xc0) !== 0x80) {
        // Leading byte
        if (contBytes > 0) {
          // Previous code is invalid
          res += this.defaultCharUnicode
          contBytes = 0
        }
        if (curByte < 0x80) {
          // Single-byte code
          res += String.fromCharCode(curByte)
        } else if (curByte < 0xe0) {
          // Two-byte code
          acc = curByte & 0x1f
          contBytes = 1
          accBytes = 1
        } else if (curByte < 0xf0) {
          // Three-byte code
          acc = curByte & 0x0f
          contBytes = 2
          accBytes = 1
        } else {
          // Four or more are not supported for CESU-8.
          res += this.defaultCharUnicode
        }
      } else {
        // Continuation byte
        if (contBytes > 0) {
          // We're waiting for it.
          acc = (acc << 6) | (curByte & 0x3f)
          contBytes--
          accBytes++
          if (contBytes === 0) {
            // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
            if (accBytes === 2 && acc < 0x80 && acc > 0) {
              res += this.defaultCharUnicode
            } else if (accBytes === 3 && acc < 0x800) {
              res += this.defaultCharUnicode
            }
            // Actually add character.
            else {
              res += String.fromCharCode(acc)
            }
          }
        } else {
          // Unexpected continuation byte
          res += this.defaultCharUnicode
        }
      }
    }
    this.acc = acc
    this.contBytes = contBytes
    this.accBytes = accBytes
    return res
  }
  InternalDecoderCesu8.prototype.end = function () {
    let res = 0
    if (this.contBytes > 0) {
      res += this.defaultCharUnicode
    }
    return res
  }
  return internal
}

const utf32 = {}

let hasRequiredUtf32
function requireUtf32() {
  if (hasRequiredUtf32) {
    return utf32
  }
  hasRequiredUtf32 = 1
  const Buffer = /*@__PURE__*/ requireSafer().Buffer

  // == UTF32-LE/BE codec. ==========================================================

  utf32._utf32 = Utf32Codec
  function Utf32Codec(codecOptions, iconv) {
    this.iconv = iconv
    this.bomAware = true
    this.isLE = codecOptions.isLE
  }
  utf32.utf32le = {
    type: '_utf32',
    isLE: true
  }
  utf32.utf32be = {
    type: '_utf32',
    isLE: false
  }

  // Aliases
  utf32.ucs4le = 'utf32le'
  utf32.ucs4be = 'utf32be'
  Utf32Codec.prototype.encoder = Utf32Encoder
  Utf32Codec.prototype.decoder = Utf32Decoder

  // -- Encoding

  function Utf32Encoder(options, codec) {
    this.isLE = codec.isLE
    this.highSurrogate = 0
  }
  Utf32Encoder.prototype.write = function (str) {
    const src = Buffer.from(str, 'ucs2')
    let dst = Buffer.alloc(src.length * 2)
    const write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE
    let offset = 0
    for (let i = 0; i < src.length; i += 2) {
      const code = src.readUInt16LE(i)
      const isHighSurrogate = 0xd800 <= code && code < 0xdc00
      const isLowSurrogate = 0xdc00 <= code && code < 0xe000
      if (this.highSurrogate) {
        if (isHighSurrogate || !isLowSurrogate) {
          // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low
          // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character
          // (technically wrong, but expected by some applications, like Windows file names).
          write32.call(dst, this.highSurrogate, offset)
          offset += 4
        } else {
          // Create 32-bit value from high and low surrogates;
          const codepoint =
            (((this.highSurrogate - 0xd800) << 10) | (code - 0xdc00)) + 0x10000
          write32.call(dst, codepoint, offset)
          offset += 4
          this.highSurrogate = 0
          continue
        }
      }
      if (isHighSurrogate) {
        this.highSurrogate = code
      } else {
        // Even if the current character is a low surrogate, with no previous high surrogate, we'll
        // encode it as a semi-invalid stand-alone character for the same reasons expressed above for
        // unpaired high surrogates.
        write32.call(dst, code, offset)
        offset += 4
        this.highSurrogate = 0
      }
    }
    if (offset < dst.length) {
      dst = dst.slice(0, offset)
    }
    return dst
  }
  Utf32Encoder.prototype.end = function () {
    // Treat any leftover high surrogate as a semi-valid independent character.
    if (!this.highSurrogate) {
      return
    }
    const buf = Buffer.alloc(4)
    if (this.isLE) {
      buf.writeUInt32LE(this.highSurrogate, 0)
    } else {
      buf.writeUInt32BE(this.highSurrogate, 0)
    }
    this.highSurrogate = 0
    return buf
  }

  // -- Decoding

  function Utf32Decoder(options, codec) {
    this.isLE = codec.isLE
    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0)
    this.overflow = []
  }
  Utf32Decoder.prototype.write = function (src) {
    if (src.length === 0) {
      return ''
    }
    let i = 0
    let codepoint = 0
    const dst = Buffer.alloc(src.length + 4)
    let offset = 0
    const isLE = this.isLE
    const overflow = this.overflow
    const badChar = this.badChar
    if (overflow.length > 0) {
      for (; i < src.length && overflow.length < 4; i++) {
        overflow.push(src[i])
      }
      if (overflow.length === 4) {
        // NOTE: codepoint is a signed int32 and can be negative.
        // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).
        if (isLE) {
          codepoint =
            overflow[i] |
            (overflow[i + 1] << 8) |
            (overflow[i + 2] << 16) |
            (overflow[i + 3] << 24)
        } else {
          codepoint =
            overflow[i + 3] |
            (overflow[i + 2] << 8) |
            (overflow[i + 1] << 16) |
            (overflow[i] << 24)
        }
        overflow.length = 0
        offset = _writeCodepoint(dst, offset, codepoint, badChar)
      }
    }

    // Main loop. Should be as optimized as possible.
    for (; i < src.length - 3; i += 4) {
      // NOTE: codepoint is a signed int32 and can be negative.
      if (isLE) {
        codepoint =
          src[i] | (src[i + 1] << 8) | (src[i + 2] << 16) | (src[i + 3] << 24)
      } else {
        codepoint =
          src[i + 3] | (src[i + 2] << 8) | (src[i + 1] << 16) | (src[i] << 24)
      }
      offset = _writeCodepoint(dst, offset, codepoint, badChar)
    }

    // Keep overflowing bytes.
    for (; i < src.length; i++) {
      overflow.push(src[i])
    }
    return dst.slice(0, offset).toString('ucs2')
  }
  function _writeCodepoint(dst, offset, codepoint, badChar) {
    // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.
    if (codepoint < 0 || codepoint > 0x10ffff) {
      // Not a valid Unicode codepoint
      codepoint = badChar
    }

    // Ephemeral Planes: Write high surrogate.
    if (codepoint >= 0x10000) {
      codepoint -= 0x10000
      const high = 0xd800 | (codepoint >> 10)
      dst[offset++] = high & 0xff
      dst[offset++] = high >> 8

      // Low surrogate is written below.
      var codepoint = 0xdc00 | (codepoint & 0x3ff)
    }

    // Write BMP char or low surrogate.
    dst[offset++] = codepoint & 0xff
    dst[offset++] = codepoint >> 8
    return offset
  }
  Utf32Decoder.prototype.end = function () {
    this.overflow.length = 0
  }

  // == UTF-32 Auto codec =============================================================
  // Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.
  // Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32
  // Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});

  // Encoder prepends BOM (which can be overridden with (addBOM: false}).

  utf32.utf32 = Utf32AutoCodec
  utf32.ucs4 = 'utf32'
  function Utf32AutoCodec(options, iconv) {
    this.iconv = iconv
  }
  Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder
  Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder

  // -- Encoding

  function Utf32AutoEncoder(options, codec) {
    options = options || {}
    if (options.addBOM === undefined) {
      options.addBOM = true
    }
    this.encoder = codec.iconv.getEncoder(
      options.defaultEncoding || 'utf-32le',
      options
    )
  }
  Utf32AutoEncoder.prototype.write = function (str) {
    return this.encoder.write(str)
  }
  Utf32AutoEncoder.prototype.end = function () {
    return this.encoder.end()
  }

  // -- Decoding

  function Utf32AutoDecoder(options, codec) {
    this.decoder = null
    this.initialBufs = []
    this.initialBufsLen = 0
    this.options = options || {}
    this.iconv = codec.iconv
  }
  Utf32AutoDecoder.prototype.write = function (buf) {
    if (!this.decoder) {
      // Codec is not chosen yet. Accumulate initial bytes.
      this.initialBufs.push(buf)
      this.initialBufsLen += buf.length
      if (this.initialBufsLen < 32) {
        // We need more bytes to use space heuristic (see below)
        return ''
      }

      // We have enough bytes -> detect endianness.
      const encoding = detectEncoding(
        this.initialBufs,
        this.options.defaultEncoding
      )
      this.decoder = this.iconv.getDecoder(encoding, this.options)
      let resStr = ''
      for (let i = 0; i < this.initialBufs.length; i++) {
        resStr += this.decoder.write(this.initialBufs[i])
      }
      this.initialBufs.length = this.initialBufsLen = 0
      return resStr
    }
    return this.decoder.write(buf)
  }
  Utf32AutoDecoder.prototype.end = function () {
    if (!this.decoder) {
      const encoding = detectEncoding(
        this.initialBufs,
        this.options.defaultEncoding
      )
      this.decoder = this.iconv.getDecoder(encoding, this.options)
      let resStr = ''
      for (let i = 0; i < this.initialBufs.length; i++) {
        resStr += this.decoder.write(this.initialBufs[i])
      }
      const trail = this.decoder.end()
      if (trail) {
        resStr += trail
      }
      this.initialBufs.length = this.initialBufsLen = 0
      return resStr
    }
    return this.decoder.end()
  }
  function detectEncoding(bufs, defaultEncoding) {
    const b = []
    let charsProcessed = 0
    let invalidLE = 0,
      invalidBE = 0 // Number of invalid chars when decoded as LE or BE.
    let bmpCharsLE = 0,
      bmpCharsBE = 0 // Number of BMP chars when decoded as LE or BE.

    outer_loop: for (let i = 0; i < bufs.length; i++) {
      const buf = bufs[i]
      for (let j = 0; j < buf.length; j++) {
        b.push(buf[j])
        if (b.length === 4) {
          if (charsProcessed === 0) {
            // Check BOM first.
            if (b[0] === 0xff && b[1] === 0xfe && b[2] === 0 && b[3] === 0) {
              return 'utf-32le'
            }
            if (b[0] === 0 && b[1] === 0 && b[2] === 0xfe && b[3] === 0xff) {
              return 'utf-32be'
            }
          }
          if (b[0] !== 0 || b[1] > 0x10) {
            invalidBE++
          }
          if (b[3] !== 0 || b[2] > 0x10) {
            invalidLE++
          }
          if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) {
            bmpCharsBE++
          }
          if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) {
            bmpCharsLE++
          }
          b.length = 0
          charsProcessed++
          if (charsProcessed >= 100) {
            break outer_loop
          }
        }
      }
    }

    // Make decisions.
    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE) {
      return 'utf-32be'
    }
    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE) {
      return 'utf-32le'
    }

    // Couldn't decide (likely all zeros or not enough data).
    return defaultEncoding || 'utf-32le'
  }
  return utf32
}

const utf16 = {}

let hasRequiredUtf16
function requireUtf16() {
  if (hasRequiredUtf16) {
    return utf16
  }
  hasRequiredUtf16 = 1
  const Buffer = /*@__PURE__*/ requireSafer().Buffer

  // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

  // == UTF16-BE codec. ==========================================================

  utf16.utf16be = Utf16BECodec
  function Utf16BECodec() {}
  Utf16BECodec.prototype.encoder = Utf16BEEncoder
  Utf16BECodec.prototype.decoder = Utf16BEDecoder
  Utf16BECodec.prototype.bomAware = true

  // -- Encoding

  function Utf16BEEncoder() {}
  Utf16BEEncoder.prototype.write = function (str) {
    const buf = Buffer.from(str, 'ucs2')
    for (let i = 0; i < buf.length; i += 2) {
      const tmp = buf[i]
      buf[i] = buf[i + 1]
      buf[i + 1] = tmp
    }
    return buf
  }
  Utf16BEEncoder.prototype.end = function () {}

  // -- Decoding

  function Utf16BEDecoder() {
    this.overflowByte = -1
  }
  Utf16BEDecoder.prototype.write = function (buf) {
    if (buf.length == 0) {
      return ''
    }
    let buf2 = Buffer.alloc(buf.length + 1),
      i = 0,
      j = 0
    if (this.overflowByte !== -1) {
      buf2[0] = buf[0]
      buf2[1] = this.overflowByte
      i = 1
      j = 2
    }
    for (; i < buf.length - 1; i += 2, j += 2) {
      buf2[j] = buf[i + 1]
      buf2[j + 1] = buf[i]
    }
    this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1
    return buf2.slice(0, j).toString('ucs2')
  }
  Utf16BEDecoder.prototype.end = function () {
    this.overflowByte = -1
  }

  // == UTF-16 codec =============================================================
  // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
  // Defaults to UTF-16LE, as it's prevalent and default in Node.
  // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
  // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

  // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

  utf16.utf16 = Utf16Codec
  function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv
  }
  Utf16Codec.prototype.encoder = Utf16Encoder
  Utf16Codec.prototype.decoder = Utf16Decoder

  // -- Encoding (pass-through)

  function Utf16Encoder(options, codec) {
    options = options || {}
    if (options.addBOM === undefined) {
      options.addBOM = true
    }
    this.encoder = codec.iconv.getEncoder('utf-16le', options)
  }
  Utf16Encoder.prototype.write = function (str) {
    return this.encoder.write(str)
  }
  Utf16Encoder.prototype.end = function () {
    return this.encoder.end()
  }

  // -- Decoding

  function Utf16Decoder(options, codec) {
    this.decoder = null
    this.initialBufs = []
    this.initialBufsLen = 0
    this.options = options || {}
    this.iconv = codec.iconv
  }
  Utf16Decoder.prototype.write = function (buf) {
    if (!this.decoder) {
      // Codec is not chosen yet. Accumulate initial bytes.
      this.initialBufs.push(buf)
      this.initialBufsLen += buf.length
      if (this.initialBufsLen < 16) {
        // We need more bytes to use space heuristic (see below)
        return ''
      }

      // We have enough bytes -> detect endianness.
      const encoding = detectEncoding(
        this.initialBufs,
        this.options.defaultEncoding
      )
      this.decoder = this.iconv.getDecoder(encoding, this.options)
      let resStr = ''
      for (let i = 0; i < this.initialBufs.length; i++) {
        resStr += this.decoder.write(this.initialBufs[i])
      }
      this.initialBufs.length = this.initialBufsLen = 0
      return resStr
    }
    return this.decoder.write(buf)
  }
  Utf16Decoder.prototype.end = function () {
    if (!this.decoder) {
      const encoding = detectEncoding(
        this.initialBufs,
        this.options.defaultEncoding
      )
      this.decoder = this.iconv.getDecoder(encoding, this.options)
      let resStr = ''
      for (let i = 0; i < this.initialBufs.length; i++) {
        resStr += this.decoder.write(this.initialBufs[i])
      }
      const trail = this.decoder.end()
      if (trail) {
        resStr += trail
      }
      this.initialBufs.length = this.initialBufsLen = 0
      return resStr
    }
    return this.decoder.end()
  }
  function detectEncoding(bufs, defaultEncoding) {
    const b = []
    let charsProcessed = 0
    let asciiCharsLE = 0,
      asciiCharsBE = 0 // Number of ASCII chars when decoded as LE or BE.

    outer_loop: for (let i = 0; i < bufs.length; i++) {
      const buf = bufs[i]
      for (let j = 0; j < buf.length; j++) {
        b.push(buf[j])
        if (b.length === 2) {
          if (charsProcessed === 0) {
            // Check BOM first.
            if (b[0] === 0xff && b[1] === 0xfe) {
              return 'utf-16le'
            }
            if (b[0] === 0xfe && b[1] === 0xff) {
              return 'utf-16be'
            }
          }
          if (b[0] === 0 && b[1] !== 0) {
            asciiCharsBE++
          }
          if (b[0] !== 0 && b[1] === 0) {
            asciiCharsLE++
          }
          b.length = 0
          charsProcessed++
          if (charsProcessed >= 100) {
            break outer_loop
          }
        }
      }
    }

    // Make decisions.
    // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
    // So, we count ASCII as if it was LE or BE, and decide from that.
    if (asciiCharsBE > asciiCharsLE) {
      return 'utf-16be'
    }
    if (asciiCharsBE < asciiCharsLE) {
      return 'utf-16le'
    }

    // Couldn't decide (likely all zeros or not enough data).
    return defaultEncoding || 'utf-16le'
  }
  return utf16
}

const utf7 = {}

let hasRequiredUtf7
function requireUtf7() {
  if (hasRequiredUtf7) {
    return utf7
  }
  hasRequiredUtf7 = 1
  const Buffer = /*@__PURE__*/ requireSafer().Buffer

  // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
  // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

  utf7.utf7 = Utf7Codec
  utf7.unicode11utf7 = 'utf7' // Alias UNICODE-1-1-UTF-7
  function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv
  }
  Utf7Codec.prototype.encoder = Utf7Encoder
  Utf7Codec.prototype.decoder = Utf7Decoder
  Utf7Codec.prototype.bomAware = true

  // -- Encoding

  const nonDirectChars = /[^A-Za-z0-9'(),-./:? \n\r\t]+/g
  function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv
  }
  Utf7Encoder.prototype.write = function (str) {
    // Naive implementation.
    // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
    return Buffer.from(
      str.replace(
        nonDirectChars,
        function (chunk) {
          return (
            '+' +
            (chunk === '+'
              ? ''
              : this.iconv
                  .encode(chunk, 'utf16-be')
                  .toString('base64')
                  .replace(/=+$/, '')) +
            '-'
          )
        }.bind(this)
      )
    )
  }
  Utf7Encoder.prototype.end = function () {}

  // -- Decoding

  function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv
    this.inBase64 = false
    this.base64Accum = ''
  }
  const base64Regex = /[A-Za-z0-9/+]/
  const base64Chars = []
  for (let i = 0; i < 256; i++) {
    base64Chars[i] = base64Regex.test(String.fromCharCode(i))
  }
  const plusChar = '+'.charCodeAt(0),
    minusChar = '-'.charCodeAt(0),
    andChar = '&'.charCodeAt(0)
  Utf7Decoder.prototype.write = function (buf) {
    let res = '',
      lastI = 0,
      inBase64 = this.inBase64,
      base64Accum = this.base64Accum

    // The decoder is more involved as we must handle chunks in stream.

    for (let i = 0; i < buf.length; i++) {
      if (!inBase64) {
        // We're in direct mode.
        // Write direct chars until '+'
        if (buf[i] == plusChar) {
          res += this.iconv.decode(buf.slice(lastI, i), 'ascii') // Write direct chars.
          lastI = i + 1
          inBase64 = true
        }
      } else {
        // We decode base64.
        if (!base64Chars[buf[i]]) {
          // Base64 ended.
          if (i == lastI && buf[i] == minusChar) {
            // "+-" -> "+"
            res += '+'
          } else {
            var b64str =
              base64Accum + this.iconv.decode(buf.slice(lastI, i), 'ascii')
            res += this.iconv.decode(Buffer.from(b64str, 'base64'), 'utf16-be')
          }
          if (buf[i] != minusChar) {
            // Minus is absorbed after base64.
            i--
          }
          lastI = i + 1
          inBase64 = false
          base64Accum = ''
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), 'ascii') // Write direct chars.
    } else {
      var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), 'ascii')
      const canBeDecoded = b64str.length - (b64str.length % 8) // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
      base64Accum = b64str.slice(canBeDecoded) // The rest will be decoded in future.
      b64str = b64str.slice(0, canBeDecoded)
      res += this.iconv.decode(Buffer.from(b64str, 'base64'), 'utf16-be')
    }
    this.inBase64 = inBase64
    this.base64Accum = base64Accum
    return res
  }
  Utf7Decoder.prototype.end = function () {
    let res = ''
    if (this.inBase64 && this.base64Accum.length > 0) {
      res = this.iconv.decode(
        Buffer.from(this.base64Accum, 'base64'),
        'utf16-be'
      )
    }
    this.inBase64 = false
    this.base64Accum = ''
    return res
  }

  // UTF-7-IMAP codec.
  // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
  // Differences:
  //  * Base64 part is started by "&" instead of "+"
  //  * Direct characters are 0x20-0x7E, except "&" (0x26)
  //  * In Base64, "," is used instead of "/"
  //  * Base64 must not be used to represent direct characters.
  //  * No implicit shift back from Base64 (should always end with '-')
  //  * String must end in non-shifted position.
  //  * "-&" while in base64 is not allowed.

  utf7.utf7imap = Utf7IMAPCodec
  function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv
  }
  Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder
  Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder
  Utf7IMAPCodec.prototype.bomAware = true

  // -- Encoding

  function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv
    this.inBase64 = false
    this.base64Accum = Buffer.alloc(6)
    this.base64AccumIdx = 0
  }
  Utf7IMAPEncoder.prototype.write = function (str) {
    let inBase64 = this.inBase64,
      base64Accum = this.base64Accum,
      base64AccumIdx = this.base64AccumIdx,
      buf = Buffer.alloc(str.length * 5 + 10),
      bufIdx = 0
    for (let i = 0; i < str.length; i++) {
      const uChar = str.charCodeAt(i)
      if (0x20 <= uChar && uChar <= 0x7e) {
        // Direct character or '&'.
        if (inBase64) {
          if (base64AccumIdx > 0) {
            bufIdx += buf.write(
              base64Accum
                .slice(0, base64AccumIdx)
                .toString('base64')
                .replace(/\//g, ',')
                .replace(/=+$/, ''),
              bufIdx
            )
            base64AccumIdx = 0
          }
          buf[bufIdx++] = minusChar // Write '-', then go to direct mode.
          inBase64 = false
        }
        if (!inBase64) {
          buf[bufIdx++] = uChar // Write direct character

          if (uChar === andChar) {
            // Ampersand -> '&-'
            buf[bufIdx++] = minusChar
          }
        }
      } else {
        // Non-direct character
        if (!inBase64) {
          buf[bufIdx++] = andChar // Write '&', then go to base64 mode.
          inBase64 = true
        }
        if (inBase64) {
          base64Accum[base64AccumIdx++] = uChar >> 8
          base64Accum[base64AccumIdx++] = uChar & 0xff
          if (base64AccumIdx == base64Accum.length) {
            bufIdx += buf.write(
              base64Accum.toString('base64').replace(/\//g, ','),
              bufIdx
            )
            base64AccumIdx = 0
          }
        }
      }
    }
    this.inBase64 = inBase64
    this.base64AccumIdx = base64AccumIdx
    return buf.slice(0, bufIdx)
  }
  Utf7IMAPEncoder.prototype.end = function () {
    let buf = Buffer.alloc(10),
      bufIdx = 0
    if (this.inBase64) {
      if (this.base64AccumIdx > 0) {
        bufIdx += buf.write(
          this.base64Accum
            .slice(0, this.base64AccumIdx)
            .toString('base64')
            .replace(/\//g, ',')
            .replace(/=+$/, ''),
          bufIdx
        )
        this.base64AccumIdx = 0
      }
      buf[bufIdx++] = minusChar // Write '-', then go to direct mode.
      this.inBase64 = false
    }
    return buf.slice(0, bufIdx)
  }

  // -- Decoding

  function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv
    this.inBase64 = false
    this.base64Accum = ''
  }
  const base64IMAPChars = base64Chars.slice()
  base64IMAPChars[','.charCodeAt(0)] = true
  Utf7IMAPDecoder.prototype.write = function (buf) {
    let res = '',
      lastI = 0,
      inBase64 = this.inBase64,
      base64Accum = this.base64Accum

    // The decoder is more involved as we must handle chunks in stream.
    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

    for (let i = 0; i < buf.length; i++) {
      if (!inBase64) {
        // We're in direct mode.
        // Write direct chars until '&'
        if (buf[i] == andChar) {
          res += this.iconv.decode(buf.slice(lastI, i), 'ascii') // Write direct chars.
          lastI = i + 1
          inBase64 = true
        }
      } else {
        // We decode base64.
        if (!base64IMAPChars[buf[i]]) {
          // Base64 ended.
          if (i == lastI && buf[i] == minusChar) {
            // "&-" -> "&"
            res += '&'
          } else {
            var b64str =
              base64Accum +
              this.iconv.decode(buf.slice(lastI, i), 'ascii').replace(/,/g, '/')
            res += this.iconv.decode(Buffer.from(b64str, 'base64'), 'utf16-be')
          }
          if (buf[i] != minusChar) {
            // Minus may be absorbed after base64.
            i--
          }
          lastI = i + 1
          inBase64 = false
          base64Accum = ''
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), 'ascii') // Write direct chars.
    } else {
      var b64str =
        base64Accum +
        this.iconv.decode(buf.slice(lastI), 'ascii').replace(/,/g, '/')
      const canBeDecoded = b64str.length - (b64str.length % 8) // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
      base64Accum = b64str.slice(canBeDecoded) // The rest will be decoded in future.
      b64str = b64str.slice(0, canBeDecoded)
      res += this.iconv.decode(Buffer.from(b64str, 'base64'), 'utf16-be')
    }
    this.inBase64 = inBase64
    this.base64Accum = base64Accum
    return res
  }
  Utf7IMAPDecoder.prototype.end = function () {
    let res = ''
    if (this.inBase64 && this.base64Accum.length > 0) {
      res = this.iconv.decode(
        Buffer.from(this.base64Accum, 'base64'),
        'utf16-be'
      )
    }
    this.inBase64 = false
    this.base64Accum = ''
    return res
  }
  return utf7
}

const sbcsCodec = {}

let hasRequiredSbcsCodec
function requireSbcsCodec() {
  if (hasRequiredSbcsCodec) {
    return sbcsCodec
  }
  hasRequiredSbcsCodec = 1
  const Buffer = /*@__PURE__*/ requireSafer().Buffer

  // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
  // correspond to encoded bytes (if 128 - then lower half is ASCII).

  sbcsCodec._sbcs = SBCSCodec
  function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions) {
      throw new Error('SBCS codec is called without the data.')
    }

    // Prepare char buffer for decoding.
    if (
      !codecOptions.chars ||
      (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
    ) {
      throw new Error(
        "Encoding '" +
          codecOptions.type +
          "' has incorrect 'chars' (must be of len 128 or 256)"
      )
    }
    if (codecOptions.chars.length === 128) {
      let asciiString = ''
      for (var i = 0; i < 128; i++) {
        asciiString += String.fromCharCode(i)
      }
      codecOptions.chars = asciiString + codecOptions.chars
    }
    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2')

    // Encoding buffer.
    const encodeBuf = Buffer.alloc(
      65536,
      iconv.defaultCharSingleByte.charCodeAt(0)
    )
    for (var i = 0; i < codecOptions.chars.length; i++) {
      encodeBuf[codecOptions.chars.charCodeAt(i)] = i
    }
    this.encodeBuf = encodeBuf
  }
  SBCSCodec.prototype.encoder = SBCSEncoder
  SBCSCodec.prototype.decoder = SBCSDecoder
  function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf
  }
  SBCSEncoder.prototype.write = function (str) {
    const buf = Buffer.alloc(str.length)
    for (let i = 0; i < str.length; i++) {
      buf[i] = this.encodeBuf[str.charCodeAt(i)]
    }
    return buf
  }
  SBCSEncoder.prototype.end = function () {}
  function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf
  }
  SBCSDecoder.prototype.write = function (buf) {
    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
    const decodeBuf = this.decodeBuf
    const newBuf = Buffer.alloc(buf.length * 2)
    let idx1 = 0,
      idx2 = 0
    for (let i = 0; i < buf.length; i++) {
      idx1 = buf[i] * 2
      idx2 = i * 2
      newBuf[idx2] = decodeBuf[idx1]
      newBuf[idx2 + 1] = decodeBuf[idx1 + 1]
    }
    return newBuf.toString('ucs2')
  }
  SBCSDecoder.prototype.end = function () {}
  return sbcsCodec
}

let sbcsData
let hasRequiredSbcsData
function requireSbcsData() {
  if (hasRequiredSbcsData) {
    return sbcsData
  }
  hasRequiredSbcsData = 1

  // Manually added data to be used by sbcs codec in addition to generated one.

  sbcsData = {
    // Not supported by iconv, not sure why.
    10029: 'maccenteuro',
    maccenteuro: {
      type: '_sbcs',
      chars:
        'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ'
    },
    808: 'cp808',
    ibm808: 'cp808',
    cp808: {
      type: '_sbcs',
      chars:
        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ '
    },
    mik: {
      type: '_sbcs',
      chars:
        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ '
    },
    cp720: {
      type: '_sbcs',
      chars:
        '\x80\x81éâ\x84à\x86çêëèïî\x8d\x8e\x8f\x90\u0651\u0652ô¤ـûùءآأؤ£إئابةتثجحخدذرزسشص«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ضطظعغفµقكلمنهوىي≡\u064b\u064c\u064d\u064e\u064f\u0650≈°∙·√ⁿ²■\u00a0'
    },
    // Aliases of generated encodings.
    ascii8bit: 'ascii',
    usascii: 'ascii',
    ansix34: 'ascii',
    ansix341968: 'ascii',
    ansix341986: 'ascii',
    csascii: 'ascii',
    cp367: 'ascii',
    ibm367: 'ascii',
    isoir6: 'ascii',
    iso646us: 'ascii',
    iso646irv: 'ascii',
    us: 'ascii',
    latin1: 'iso88591',
    latin2: 'iso88592',
    latin3: 'iso88593',
    latin4: 'iso88594',
    latin5: 'iso88599',
    latin6: 'iso885910',
    latin7: 'iso885913',
    latin8: 'iso885914',
    latin9: 'iso885915',
    latin10: 'iso885916',
    csisolatin1: 'iso88591',
    csisolatin2: 'iso88592',
    csisolatin3: 'iso88593',
    csisolatin4: 'iso88594',
    csisolatincyrillic: 'iso88595',
    csisolatinarabic: 'iso88596',
    csisolatingreek: 'iso88597',
    csisolatinhebrew: 'iso88598',
    csisolatin5: 'iso88599',
    csisolatin6: 'iso885910',
    l1: 'iso88591',
    l2: 'iso88592',
    l3: 'iso88593',
    l4: 'iso88594',
    l5: 'iso88599',
    l6: 'iso885910',
    l7: 'iso885913',
    l8: 'iso885914',
    l9: 'iso885915',
    l10: 'iso885916',
    isoir14: 'iso646jp',
    isoir57: 'iso646cn',
    isoir100: 'iso88591',
    isoir101: 'iso88592',
    isoir109: 'iso88593',
    isoir110: 'iso88594',
    isoir144: 'iso88595',
    isoir127: 'iso88596',
    isoir126: 'iso88597',
    isoir138: 'iso88598',
    isoir148: 'iso88599',
    isoir157: 'iso885910',
    isoir166: 'tis620',
    isoir179: 'iso885913',
    isoir199: 'iso885914',
    isoir203: 'iso885915',
    isoir226: 'iso885916',
    cp819: 'iso88591',
    ibm819: 'iso88591',
    cyrillic: 'iso88595',
    arabic: 'iso88596',
    arabic8: 'iso88596',
    ecma114: 'iso88596',
    asmo708: 'iso88596',
    greek: 'iso88597',
    greek8: 'iso88597',
    ecma118: 'iso88597',
    elot928: 'iso88597',
    hebrew: 'iso88598',
    hebrew8: 'iso88598',
    turkish: 'iso88599',
    turkish8: 'iso88599',
    thai: 'iso885911',
    thai8: 'iso885911',
    celtic: 'iso885914',
    celtic8: 'iso885914',
    isoceltic: 'iso885914',
    tis6200: 'tis620',
    tis62025291: 'tis620',
    tis62025330: 'tis620',
    10000: 'macroman',
    10006: 'macgreek',
    10007: 'maccyrillic',
    10079: 'maciceland',
    10081: 'macturkish',
    cspc8codepage437: 'cp437',
    cspc775baltic: 'cp775',
    cspc850multilingual: 'cp850',
    cspcp852: 'cp852',
    cspc862latinhebrew: 'cp862',
    cpgr: 'cp869',
    msee: 'cp1250',
    mscyrl: 'cp1251',
    msansi: 'cp1252',
    msgreek: 'cp1253',
    msturk: 'cp1254',
    mshebr: 'cp1255',
    msarab: 'cp1256',
    winbaltrim: 'cp1257',
    cp20866: 'koi8r',
    20866: 'koi8r',
    ibm878: 'koi8r',
    cskoi8r: 'koi8r',
    cp21866: 'koi8u',
    21866: 'koi8u',
    ibm1168: 'koi8u',
    strk10482002: 'rk1048',
    tcvn5712: 'tcvn',
    tcvn57121: 'tcvn',
    gb198880: 'iso646cn',
    cn: 'iso646cn',
    csiso14jisc6220ro: 'iso646jp',
    jisc62201969ro: 'iso646jp',
    jp: 'iso646jp',
    cshproman8: 'hproman8',
    r8: 'hproman8',
    roman8: 'hproman8',
    xroman8: 'hproman8',
    ibm1051: 'hproman8',
    mac: 'macintosh',
    csmacintosh: 'macintosh'
  }
  return sbcsData
}

let sbcsDataGenerated
let hasRequiredSbcsDataGenerated
function requireSbcsDataGenerated() {
  if (hasRequiredSbcsDataGenerated) {
    return sbcsDataGenerated
  }
  hasRequiredSbcsDataGenerated = 1

  // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
  sbcsDataGenerated = {
    437: 'cp437',
    737: 'cp737',
    775: 'cp775',
    850: 'cp850',
    852: 'cp852',
    855: 'cp855',
    856: 'cp856',
    857: 'cp857',
    858: 'cp858',
    860: 'cp860',
    861: 'cp861',
    862: 'cp862',
    863: 'cp863',
    864: 'cp864',
    865: 'cp865',
    866: 'cp866',
    869: 'cp869',
    874: 'windows874',
    922: 'cp922',
    1046: 'cp1046',
    1124: 'cp1124',
    1125: 'cp1125',
    1129: 'cp1129',
    1133: 'cp1133',
    1161: 'cp1161',
    1162: 'cp1162',
    1163: 'cp1163',
    1250: 'windows1250',
    1251: 'windows1251',
    1252: 'windows1252',
    1253: 'windows1253',
    1254: 'windows1254',
    1255: 'windows1255',
    1256: 'windows1256',
    1257: 'windows1257',
    1258: 'windows1258',
    28591: 'iso88591',
    28592: 'iso88592',
    28593: 'iso88593',
    28594: 'iso88594',
    28595: 'iso88595',
    28596: 'iso88596',
    28597: 'iso88597',
    28598: 'iso88598',
    28599: 'iso88599',
    28600: 'iso885910',
    28601: 'iso885911',
    28603: 'iso885913',
    28604: 'iso885914',
    28605: 'iso885915',
    28606: 'iso885916',
    windows874: {
      type: '_sbcs',
      chars:
        '€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����'
    },
    win874: 'windows874',
    cp874: 'windows874',
    windows1250: {
      type: '_sbcs',
      chars:
        '€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙'
    },
    win1250: 'windows1250',
    cp1250: 'windows1250',
    windows1251: {
      type: '_sbcs',
      chars:
        'ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя'
    },
    win1251: 'windows1251',
    cp1251: 'windows1251',
    windows1252: {
      type: '_sbcs',
      chars:
        '€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ'
    },
    win1252: 'windows1252',
    cp1252: 'windows1252',
    windows1253: {
      type: '_sbcs',
      chars:
        '€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�'
    },
    win1253: 'windows1253',
    cp1253: 'windows1253',
    windows1254: {
      type: '_sbcs',
      chars:
        '€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ'
    },
    win1254: 'windows1254',
    cp1254: 'windows1254',
    windows1255: {
      type: '_sbcs',
      chars:
        '€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�'
    },
    win1255: 'windows1255',
    cp1255: 'windows1255',
    windows1256: {
      type: '_sbcs',
      chars:
        '€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے'
    },
    win1256: 'windows1256',
    cp1256: 'windows1256',
    windows1257: {
      type: '_sbcs',
      chars:
        '€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙'
    },
    win1257: 'windows1257',
    cp1257: 'windows1257',
    windows1258: {
      type: '_sbcs',
      chars:
        '€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ'
    },
    win1258: 'windows1258',
    cp1258: 'windows1258',
    iso88591: {
      type: '_sbcs',
      chars:
        ' ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ'
    },
    cp28591: 'iso88591',
    iso88592: {
      type: '_sbcs',
      chars:
        ' Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙'
    },
    cp28592: 'iso88592',
    iso88593: {
      type: '_sbcs',
      chars:
        ' Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙'
    },
    cp28593: 'iso88593',
    iso88594: {
      type: '_sbcs',
      chars:
        ' ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙'
    },
    cp28594: 'iso88594',
    iso88595: {
      type: '_sbcs',
      chars:
        ' ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ'
    },
    cp28595: 'iso88595',
    iso88596: {
      type: '_sbcs',
      chars:
        ' ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������'
    },
    cp28596: 'iso88596',
    iso88597: {
      type: '_sbcs',
      chars:
        ' ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�'
    },
    cp28597: 'iso88597',
    iso88598: {
      type: '_sbcs',
      chars:
        ' �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�'
    },
    cp28598: 'iso88598',
    iso88599: {
      type: '_sbcs',
      chars:
        ' ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ'
    },
    cp28599: 'iso88599',
    iso885910: {
      type: '_sbcs',
      chars:
        ' ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ'
    },
    cp28600: 'iso885910',
    iso885911: {
      type: '_sbcs',
      chars:
        ' กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����'
    },
    cp28601: 'iso885911',
    iso885913: {
      type: '_sbcs',
      chars:
        ' ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’'
    },
    cp28603: 'iso885913',
    iso885914: {
      type: '_sbcs',
      chars:
        ' Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ'
    },
    cp28604: 'iso885914',
    iso885915: {
      type: '_sbcs',
      chars:
        ' ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ'
    },
    cp28605: 'iso885915',
    iso885916: {
      type: '_sbcs',
      chars:
        ' ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ'
    },
    cp28606: 'iso885916',
    cp437: {
      type: '_sbcs',
      chars:
        'ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ '
    },
    ibm437: 'cp437',
    csibm437: 'cp437',
    cp737: {
      type: '_sbcs',
      chars:
        'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ '
    },
    ibm737: 'cp737',
    csibm737: 'cp737',
    cp775: {
      type: '_sbcs',
      chars:
        'ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ '
    },
    ibm775: 'cp775',
    csibm775: 'cp775',
    cp850: {
      type: '_sbcs',
      chars:
        'ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ '
    },
    ibm850: 'cp850',
    csibm850: 'cp850',
    cp852: {
      type: '_sbcs',
      chars:
        'ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ '
    },
    ibm852: 'cp852',
    csibm852: 'cp852',
    cp855: {
      type: '_sbcs',
      chars:
        'ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ '
    },
    ibm855: 'cp855',
    csibm855: 'cp855',
    cp856: {
      type: '_sbcs',
      chars:
        'אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ '
    },
    ibm856: 'cp856',
    csibm856: 'cp856',
    cp857: {
      type: '_sbcs',
      chars:
        'ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ '
    },
    ibm857: 'cp857',
    csibm857: 'cp857',
    cp858: {
      type: '_sbcs',
      chars:
        'ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ '
    },
    ibm858: 'cp858',
    csibm858: 'cp858',
    cp860: {
      type: '_sbcs',
      chars:
        'ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ '
    },
    ibm860: 'cp860',
    csibm860: 'cp860',
    cp861: {
      type: '_sbcs',
      chars:
        'ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ '
    },
    ibm861: 'cp861',
    csibm861: 'cp861',
    cp862: {
      type: '_sbcs',
      chars:
        'אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ '
    },
    ibm862: 'cp862',
    csibm862: 'cp862',
    cp863: {
      type: '_sbcs',
      chars:
        'ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ '
    },
    ibm863: 'cp863',
    csibm863: 'cp863',
    cp864: {
      type: '_sbcs',
      chars:
        '\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !"#$٪&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�'
    },
    ibm864: 'cp864',
    csibm864: 'cp864',
    cp865: {
      type: '_sbcs',
      chars:
        'ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ '
    },
    ibm865: 'cp865',
    csibm865: 'cp865',
    cp866: {
      type: '_sbcs',
      chars:
        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ '
    },
    ibm866: 'cp866',
    csibm866: 'cp866',
    cp869: {
      type: '_sbcs',
      chars:
        '������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ '
    },
    ibm869: 'cp869',
    csibm869: 'cp869',
    cp922: {
      type: '_sbcs',
      chars:
        ' ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ'
    },
    ibm922: 'cp922',
    csibm922: 'cp922',
    cp1046: {
      type: '_sbcs',
      chars:
        'ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�'
    },
    ibm1046: 'cp1046',
    csibm1046: 'cp1046',
    cp1124: {
      type: '_sbcs',
      chars:
        ' ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ'
    },
    ibm1124: 'cp1124',
    csibm1124: 'cp1124',
    cp1125: {
      type: '_sbcs',
      chars:
        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ '
    },
    ibm1125: 'cp1125',
    csibm1125: 'cp1125',
    cp1129: {
      type: '_sbcs',
      chars:
        ' ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ'
    },
    ibm1129: 'cp1129',
    csibm1129: 'cp1129',
    cp1133: {
      type: '_sbcs',
      chars:
        ' ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�'
    },
    ibm1133: 'cp1133',
    csibm1133: 'cp1133',
    cp1161: {
      type: '_sbcs',
      chars:
        '��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ '
    },
    ibm1161: 'cp1161',
    csibm1161: 'cp1161',
    cp1162: {
      type: '_sbcs',
      chars:
        '€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����'
    },
    ibm1162: 'cp1162',
    csibm1162: 'cp1162',
    cp1163: {
      type: '_sbcs',
      chars:
        ' ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ'
    },
    ibm1163: 'cp1163',
    csibm1163: 'cp1163',
    maccroatian: {
      type: '_sbcs',
      chars:
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ'
    },
    maccyrillic: {
      type: '_sbcs',
      chars:
        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤'
    },
    macgreek: {
      type: '_sbcs',
      chars:
        'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�'
    },
    maciceland: {
      type: '_sbcs',
      chars:
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ'
    },
    macroman: {
      type: '_sbcs',
      chars:
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ'
    },
    macromania: {
      type: '_sbcs',
      chars:
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ'
    },
    macthai: {
      type: '_sbcs',
      chars:
        '«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����'
    },
    macturkish: {
      type: '_sbcs',
      chars:
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ'
    },
    macukraine: {
      type: '_sbcs',
      chars:
        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤'
    },
    koi8r: {
      type: '_sbcs',
      chars:
        '─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ'
    },
    koi8u: {
      type: '_sbcs',
      chars:
        '─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ'
    },
    koi8ru: {
      type: '_sbcs',
      chars:
        '─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ'
    },
    koi8t: {
      type: '_sbcs',
      chars:
        'қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ'
    },
    armscii8: {
      type: '_sbcs',
      chars:
        ' �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�'
    },
    rk1048: {
      type: '_sbcs',
      chars:
        'ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя'
    },
    tcvn: {
      type: '_sbcs',
      chars:
        '\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ'
    },
    georgianacademy: {
      type: '_sbcs',
      chars:
        '‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ'
    },
    georgianps: {
      type: '_sbcs',
      chars:
        '‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ'
    },
    pt154: {
      type: '_sbcs',
      chars:
        'ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя'
    },
    viscii: {
      type: '_sbcs',
      chars:
        '\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ'
    },
    iso646cn: {
      type: '_sbcs',
      chars:
        '\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !"#¥%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������'
    },
    iso646jp: {
      type: '_sbcs',
      chars:
        '\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������'
    },
    hproman8: {
      type: '_sbcs',
      chars:
        ' ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�'
    },
    macintosh: {
      type: '_sbcs',
      chars:
        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ'
    },
    ascii: {
      type: '_sbcs',
      chars:
        '��������������������������������������������������������������������������������������������������������������������������������'
    },
    tis620: {
      type: '_sbcs',
      chars:
        '���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����'
    }
  }
  return sbcsDataGenerated
}

const dbcsCodec = {}

let hasRequiredDbcsCodec
function requireDbcsCodec() {
  if (hasRequiredDbcsCodec) {
    return dbcsCodec
  }
  hasRequiredDbcsCodec = 1
  const Buffer = /*@__PURE__*/ requireSafer().Buffer

  // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
  // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
  // To save memory and loading time, we read table files only when requested.

  dbcsCodec._dbcs = DBCSCodec
  const UNASSIGNED = -1,
    GB18030_CODE = -2,
    SEQ_START = -10,
    NODE_START = -1e3,
    UNASSIGNED_NODE = new Array(0x100),
    DEF_CHAR = -1
  for (let i = 0; i < 0x100; i++) {
    UNASSIGNED_NODE[i] = UNASSIGNED
  }

  // Class DBCSCodec reads and initializes mapping tables.
  function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName
    if (!codecOptions) {
      throw new Error('DBCS codec is called without the data.')
    }
    if (!codecOptions.table) {
      throw new Error("Encoding '" + this.encodingName + "' has no data.")
    }

    // Load tables.
    const mappingTable = codecOptions.table()

    // Decode tables: MBCS -> Unicode.

    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
    // Trie root is decodeTables[0].
    // Values: >=  0 -> unicode character code. can be > 0xFFFF
    //         == UNASSIGNED -> unknown/unassigned sequence.
    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
    //         <= NODE_START -> index of the next node in our trie to process next byte.
    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
    this.decodeTables = []
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0) // Create root node.

    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here.
    this.decodeTableSeq = []

    // Actual mapping tables consist of chunks. Use them to fill up decode tables.
    for (var i = 0; i < mappingTable.length; i++) {
      this._addDecodeChunk(mappingTable[i])
    }

    // Load & create GB18030 tables when needed.
    if (typeof codecOptions.gb18030 === 'function') {
      this.gb18030 = codecOptions.gb18030() // Load GB18030 ranges.

      // Add GB18030 common decode nodes.
      const commonThirdByteNodeIdx = this.decodeTables.length
      this.decodeTables.push(UNASSIGNED_NODE.slice(0))
      const commonFourthByteNodeIdx = this.decodeTables.length
      this.decodeTables.push(UNASSIGNED_NODE.slice(0))

      // Fill out the tree
      const firstByteNode = this.decodeTables[0]
      for (var i = 0x81; i <= 0xfe; i++) {
        const secondByteNode = this.decodeTables[NODE_START - firstByteNode[i]]
        for (var j = 0x30; j <= 0x39; j++) {
          if (secondByteNode[j] === UNASSIGNED) {
            secondByteNode[j] = NODE_START - commonThirdByteNodeIdx
          } else if (secondByteNode[j] > NODE_START) {
            throw new Error('gb18030 decode tables conflict at byte 2')
          }
          const thirdByteNode =
            this.decodeTables[NODE_START - secondByteNode[j]]
          for (let k = 0x81; k <= 0xfe; k++) {
            if (thirdByteNode[k] === UNASSIGNED) {
              thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx
            } else if (
              thirdByteNode[k] ===
              NODE_START - commonFourthByteNodeIdx
            ) {
              continue
            } else if (thirdByteNode[k] > NODE_START) {
              throw new Error('gb18030 decode tables conflict at byte 3')
            }
            const fourthByteNode =
              this.decodeTables[NODE_START - thirdByteNode[k]]
            for (let l = 0x30; l <= 0x39; l++) {
              if (fourthByteNode[l] === UNASSIGNED) {
                fourthByteNode[l] = GB18030_CODE
              }
            }
          }
        }
      }
    }
    this.defaultCharUnicode = iconv.defaultCharUnicode

    // Encode tables: Unicode -> DBCS.

    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
    //         == UNASSIGNED -> no conversion found. Output a default char.
    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
    this.encodeTable = []

    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
    // means end of sequence (needed when one sequence is a strict subsequence of another).
    // Objects are kept separately from encodeTable to increase performance.
    this.encodeTableSeq = []

    // Some chars can be decoded, but need not be encoded.
    const skipEncodeChars = {}
    if (codecOptions.encodeSkipVals) {
      for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
        var val = codecOptions.encodeSkipVals[i]
        if (typeof val === 'number') skipEncodeChars[val] = true
        else for (var j = val.from; j <= val.to; j++) skipEncodeChars[j] = true
      }
    }

    // Use decode trie to recursively fill out encode tables.
    this._fillEncodeTable(0, 0, skipEncodeChars)

    // Add more encoding pairs when needed.
    if (codecOptions.encodeAdd) {
      for (const uChar in codecOptions.encodeAdd) {
        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
          this._setEncodeChar(
            uChar.charCodeAt(0),
            codecOptions.encodeAdd[uChar]
          )
      }
    }
    this.defCharSB =
      this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)]
    if (this.defCharSB === UNASSIGNED) {
      this.defCharSB = this.encodeTable[0]['?']
    }
    if (this.defCharSB === UNASSIGNED) {
      this.defCharSB = '?'.charCodeAt(0)
    }
  }
  DBCSCodec.prototype.encoder = DBCSEncoder
  DBCSCodec.prototype.decoder = DBCSDecoder

  // Decoder helpers
  DBCSCodec.prototype._getDecodeTrieNode = function (addr) {
    const bytes = []
    for (; addr > 0; addr >>>= 8) {
      bytes.push(addr & 0xff)
    }
    if (bytes.length == 0) {
      bytes.push(0)
    }
    let node = this.decodeTables[0]
    for (let i = bytes.length - 1; i > 0; i--) {
      // Traverse nodes deeper into the trie.
      const val = node[bytes[i]]
      if (val == UNASSIGNED) {
        // Create new node.
        node[bytes[i]] = NODE_START - this.decodeTables.length
        this.decodeTables.push((node = UNASSIGNED_NODE.slice(0)))
      } else if (val <= NODE_START) {
        // Existing node.
        node = this.decodeTables[NODE_START - val]
      } else {
        throw new Error(
          'Overwrite byte in ' +
            this.encodingName +
            ', addr: ' +
            addr.toString(16)
        )
      }
    }
    return node
  }
  DBCSCodec.prototype._addDecodeChunk = function (chunk) {
    // First element of chunk is the hex mbcs code where we start.
    let curAddr = parseInt(chunk[0], 16)

    // Choose the decoding node where we'll write our chars.
    const writeTable = this._getDecodeTrieNode(curAddr)
    curAddr = curAddr & 0xff

    // Write all other elements of the chunk to the table.
    for (let k = 1; k < chunk.length; k++) {
      const part = chunk[k]
      if (typeof part === 'string') {
        // String, write as-is.
        for (var l = 0; l < part.length; ) {
          const code = part.charCodeAt(l++)
          if (0xd800 <= code && code < 0xdc00) {
            // Decode surrogate
            const codeTrail = part.charCodeAt(l++)
            if (0xdc00 <= codeTrail && codeTrail < 0xe000) {
              writeTable[curAddr++] =
                0x10000 + (code - 0xd800) * 0x400 + (codeTrail - 0xdc00)
            } else {
              throw new Error(
                'Incorrect surrogate pair in ' +
                  this.encodingName +
                  ' at chunk ' +
                  chunk[0]
              )
            }
          } else if (0x0ff0 < code && code <= 0x0fff) {
            // Character sequence (our own encoding used)
            const len = 0xfff - code + 2
            const seq = []
            for (let m = 0; m < len; m++) {
              seq.push(part.charCodeAt(l++))
            } // Simple variation: don't support surrogates or subsequences in seq.

            writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length
            this.decodeTableSeq.push(seq)
          } else {
            writeTable[curAddr++] = code
          } // Basic char
        }
      } else if (typeof part === 'number') {
        // Integer, meaning increasing sequence starting with prev character.
        let charCode = writeTable[curAddr - 1] + 1
        for (var l = 0; l < part; l++) {
          writeTable[curAddr++] = charCode++
        }
      } else {
        throw new Error(
          "Incorrect type '" +
            typeof part +
            "' given in " +
            this.encodingName +
            ' at chunk ' +
            chunk[0]
        )
      }
    }
    if (curAddr > 0xff) {
      throw new Error(
        'Incorrect chunk in ' +
          this.encodingName +
          ' at addr ' +
          chunk[0] +
          ': too long' +
          curAddr
      )
    }
  }

  // Encoder helpers
  DBCSCodec.prototype._getEncodeBucket = function (uCode) {
    const high = uCode >> 8 // This could be > 0xFF because of astral characters.
    if (this.encodeTable[high] === undefined) {
      this.encodeTable[high] = UNASSIGNED_NODE.slice(0)
    } // Create bucket on demand.
    return this.encodeTable[high]
  }
  DBCSCodec.prototype._setEncodeChar = function (uCode, dbcsCode) {
    const bucket = this._getEncodeBucket(uCode)
    const low = uCode & 0xff
    if (bucket[low] <= SEQ_START) {
      this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode
    } // There's already a sequence, set a single-char subsequence of it.
    else if (bucket[low] == UNASSIGNED) {
      bucket[low] = dbcsCode
    }
  }
  DBCSCodec.prototype._setEncodeSequence = function (seq, dbcsCode) {
    // Get the root of character tree according to first character of the sequence.
    let uCode = seq[0]
    const bucket = this._getEncodeBucket(uCode)
    const low = uCode & 0xff
    let node
    if (bucket[low] <= SEQ_START) {
      // There's already a sequence with  - use it.
      node = this.encodeTableSeq[SEQ_START - bucket[low]]
    } else {
      // There was no sequence object - allocate a new one.
      node = {}
      if (bucket[low] !== UNASSIGNED) {
        node[DEF_CHAR] = bucket[low]
      } // If a char was set before - make it a single-char subsequence.
      bucket[low] = SEQ_START - this.encodeTableSeq.length
      this.encodeTableSeq.push(node)
    }

    // Traverse the character tree, allocating new nodes as needed.
    for (let j = 1; j < seq.length - 1; j++) {
      const oldVal = node[uCode]
      if (typeof oldVal === 'object') {
        node = oldVal
      } else {
        node = node[uCode] = {}
        if (oldVal !== undefined) {
          node[DEF_CHAR] = oldVal
        }
      }
    }

    // Set the leaf to given dbcsCode.
    uCode = seq[seq.length - 1]
    node[uCode] = dbcsCode
  }
  DBCSCodec.prototype._fillEncodeTable = function (
    nodeIdx,
    prefix,
    skipEncodeChars
  ) {
    const node = this.decodeTables[nodeIdx]
    let hasValues = false
    const subNodeEmpty = {}
    for (let i = 0; i < 0x100; i++) {
      const uCode = node[i]
      const mbCode = prefix + i
      if (skipEncodeChars[mbCode]) {
        continue
      }
      if (uCode >= 0) {
        this._setEncodeChar(uCode, mbCode)
        hasValues = true
      } else if (uCode <= NODE_START) {
        const subNodeIdx = NODE_START - uCode
        if (!subNodeEmpty[subNodeIdx]) {
          // Skip empty subtrees (they are too large in gb18030).
          const newPrefix = (mbCode << 8) >>> 0 // NOTE: '>>> 0' keeps 32-bit num positive.
          if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars)) {
            hasValues = true
          } else {
            subNodeEmpty[subNodeIdx] = true
          }
        }
      } else if (uCode <= SEQ_START) {
        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode)
        hasValues = true
      }
    }
    return hasValues
  }

  // == Encoder ==================================================================

  function DBCSEncoder(options, codec) {
    // Encoder state
    this.leadSurrogate = -1
    this.seqObj = undefined

    // Static data
    this.encodeTable = codec.encodeTable
    this.encodeTableSeq = codec.encodeTableSeq
    this.defaultCharSingleByte = codec.defCharSB
    this.gb18030 = codec.gb18030
  }
  DBCSEncoder.prototype.write = function (str) {
    let newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),
      leadSurrogate = this.leadSurrogate,
      seqObj = this.seqObj,
      nextChar = -1,
      i = 0,
      j = 0
    while (true) {
      // 0. Get next character.
      if (nextChar === -1) {
        if (i == str.length) {
          break
        }
        var uCode = str.charCodeAt(i++)
      } else {
        var uCode = nextChar
        nextChar = -1
      }

      // 1. Handle surrogates.
      if (0xd800 <= uCode && uCode < 0xe000) {
        // Char is one of surrogates.
        if (uCode < 0xdc00) {
          // We've got lead surrogate.
          if (leadSurrogate === -1) {
            leadSurrogate = uCode
            continue
          } else {
            leadSurrogate = uCode
            // Double lead surrogate found.
            uCode = UNASSIGNED
          }
        } else {
          // We've got trail surrogate.
          if (leadSurrogate !== -1) {
            uCode =
              0x10000 + (leadSurrogate - 0xd800) * 0x400 + (uCode - 0xdc00)
            leadSurrogate = -1
          } else {
            // Incomplete surrogate pair - only trail surrogate found.
            uCode = UNASSIGNED
          }
        }
      } else if (leadSurrogate !== -1) {
        // Incomplete surrogate pair - only lead surrogate found.
        nextChar = uCode
        uCode = UNASSIGNED // Write an error, then current char.
        leadSurrogate = -1
      }

      // 2. Convert uCode character.
      let dbcsCode = UNASSIGNED
      if (seqObj !== undefined && uCode != UNASSIGNED) {
        // We are in the middle of the sequence
        let resCode = seqObj[uCode]
        if (typeof resCode === 'object') {
          // Sequence continues.
          seqObj = resCode
          continue
        } else if (typeof resCode == 'number') {
          // Sequence finished. Write it.
          dbcsCode = resCode
        } else if (resCode == undefined) {
          // Current character is not part of the sequence.

          // Try default character for this sequence
          resCode = seqObj[DEF_CHAR]
          if (resCode !== undefined) {
            dbcsCode = resCode // Found. Write it.
            nextChar = uCode // Current character will be written too in the next iteration.
          }
        }
        seqObj = undefined
      } else if (uCode >= 0) {
        // Regular character
        const subtable = this.encodeTable[uCode >> 8]
        if (subtable !== undefined) {
          dbcsCode = subtable[uCode & 0xff]
        }
        if (dbcsCode <= SEQ_START) {
          // Sequence start
          seqObj = this.encodeTableSeq[SEQ_START - dbcsCode]
          continue
        }
        if (dbcsCode == UNASSIGNED && this.gb18030) {
          // Use GB18030 algorithm to find character(s) to write.
          const idx = findIdx(this.gb18030.uChars, uCode)
          if (idx != -1) {
            dbcsCode =
              this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx])
            newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600)
            dbcsCode = dbcsCode % 12600
            newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260)
            dbcsCode = dbcsCode % 1260
            newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10)
            dbcsCode = dbcsCode % 10
            newBuf[j++] = 0x30 + dbcsCode
            continue
          }
        }
      }

      // 3. Write dbcsCode character.
      if (dbcsCode === UNASSIGNED) {
        dbcsCode = this.defaultCharSingleByte
      }
      if (dbcsCode < 0x100) {
        newBuf[j++] = dbcsCode
      } else if (dbcsCode < 0x10000) {
        newBuf[j++] = dbcsCode >> 8 // high byte
        newBuf[j++] = dbcsCode & 0xff // low byte
      } else if (dbcsCode < 0x1000000) {
        newBuf[j++] = dbcsCode >> 16
        newBuf[j++] = (dbcsCode >> 8) & 0xff
        newBuf[j++] = dbcsCode & 0xff
      } else {
        newBuf[j++] = dbcsCode >>> 24
        newBuf[j++] = (dbcsCode >>> 16) & 0xff
        newBuf[j++] = (dbcsCode >>> 8) & 0xff
        newBuf[j++] = dbcsCode & 0xff
      }
    }
    this.seqObj = seqObj
    this.leadSurrogate = leadSurrogate
    return newBuf.slice(0, j)
  }
  DBCSEncoder.prototype.end = function () {
    if (this.leadSurrogate === -1 && this.seqObj === undefined) {
      return
    } // All clean. Most often case.

    let newBuf = Buffer.alloc(10),
      j = 0
    let dbcsCode
    if (this.seqObj) {
      // We're in the sequence.
      dbcsCode = this.seqObj[DEF_CHAR]
      if (dbcsCode !== undefined) {
        // Write beginning of the sequence.
        if (dbcsCode < 0x100) {
          newBuf[j++] = dbcsCode
        } else {
          newBuf[j++] = dbcsCode >> 8 // high byte
          newBuf[j++] = dbcsCode & 0xff // low byte
        }
      }
      this.seqObj = undefined
    }
    if (this.leadSurrogate !== -1) {
      // Incomplete surrogate pair - only lead surrogate found.
      newBuf[j++] = this.defaultCharSingleByte
      this.leadSurrogate = -1
    }
    return newBuf.slice(0, j)
  }

  // Export for testing
  DBCSEncoder.prototype.findIdx = findIdx

  // == Decoder ==================================================================

  function DBCSDecoder(options, codec) {
    // Decoder state
    this.nodeIdx = 0
    this.prevBytes = []

    // Static data
    this.decodeTables = codec.decodeTables
    this.decodeTableSeq = codec.decodeTableSeq
    this.defaultCharUnicode = codec.defaultCharUnicode
    this.gb18030 = codec.gb18030
  }
  DBCSDecoder.prototype.write = function (buf) {
    let newBuf = Buffer.alloc(buf.length * 2),
      nodeIdx = this.nodeIdx,
      prevBytes = this.prevBytes,
      prevOffset = this.prevBytes.length,
      seqStart = -this.prevBytes.length,
      // idx of the start of current parsed sequence.
      uCode
    for (var i = 0, j = 0; i < buf.length; i++) {
      const curByte = i >= 0 ? buf[i] : prevBytes[i + prevOffset]

      // Lookup in current trie node.
      let uCode = this.decodeTables[nodeIdx][curByte]
      if (uCode >= 0) {
      } else if (uCode === UNASSIGNED) {
        // Unknown char.
        // TODO: Callback with seq.
        uCode = this.defaultCharUnicode.charCodeAt(0)
        i = seqStart // Skip one byte ('i' will be incremented by the for loop) and try to parse again.
      } else if (uCode === GB18030_CODE) {
        if (i >= 3) {
          var ptr =
            (buf[i - 3] - 0x81) * 12600 +
            (buf[i - 2] - 0x30) * 1260 +
            (buf[i - 1] - 0x81) * 10 +
            (curByte - 0x30)
        } else {
          var ptr =
            (prevBytes[i - 3 + prevOffset] - 0x81) * 12600 +
            ((i - 2 >= 0 ? buf[i - 2] : prevBytes[i - 2 + prevOffset]) - 0x30) *
              1260 +
            ((i - 1 >= 0 ? buf[i - 1] : prevBytes[i - 1 + prevOffset]) - 0x81) *
              10 +
            (curByte - 0x30)
        }
        const idx = findIdx(this.gb18030.gbChars, ptr)
        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx]
      } else if (uCode <= NODE_START) {
        // Go to next trie node.
        nodeIdx = NODE_START - uCode
        continue
      } else if (uCode <= SEQ_START) {
        // Output a sequence of chars.
        const seq = this.decodeTableSeq[SEQ_START - uCode]
        for (let k = 0; k < seq.length - 1; k++) {
          uCode = seq[k]
          newBuf[j++] = uCode & 0xff
          newBuf[j++] = uCode >> 8
        }
        uCode = seq[seq.length - 1]
      } else {
        throw new Error(
          'iconv-lite internal error: invalid decoding table value ' +
            uCode +
            ' at ' +
            nodeIdx +
            '/' +
            curByte
        )
      }

      // Write the character to buffer, handling higher planes using surrogate pair.
      if (uCode >= 0x10000) {
        uCode -= 0x10000
        const uCodeLead = 0xd800 | (uCode >> 10)
        newBuf[j++] = uCodeLead & 0xff
        newBuf[j++] = uCodeLead >> 8
        uCode = 0xdc00 | (uCode & 0x3ff)
      }
      newBuf[j++] = uCode & 0xff
      newBuf[j++] = uCode >> 8

      // Reset trie node.
      nodeIdx = 0
      seqStart = i + 1
    }
    this.nodeIdx = nodeIdx
    this.prevBytes =
      seqStart >= 0
        ? Array.prototype.slice.call(buf, seqStart)
        : prevBytes
            .slice(seqStart + prevOffset)
            .concat(Array.prototype.slice.call(buf))
    return newBuf.slice(0, j).toString('ucs2')
  }
  DBCSDecoder.prototype.end = function () {
    let ret = ''

    // Try to parse all remaining chars.
    while (this.prevBytes.length > 0) {
      // Skip 1 character in the buffer.
      ret += this.defaultCharUnicode
      const bytesArr = this.prevBytes.slice(1)

      // Parse remaining as usual.
      this.prevBytes = []
      this.nodeIdx = 0
      if (bytesArr.length > 0) {
        ret += this.write(bytesArr)
      }
    }
    this.prevBytes = []
    this.nodeIdx = 0
    return ret
  }

  // Binary search for GB18030. Returns largest i such that table[i] <= val.
  function findIdx(table, val) {
    if (table[0] > val) {
      return -1
    }
    let l = 0,
      r = table.length
    while (l < r - 1) {
      // always table[l] <= val < table[r]
      const mid = l + ((r - l + 1) >> 1)
      if (table[mid] <= val) {
        l = mid
      } else {
        r = mid
      }
    }
    return l
  }
  return dbcsCodec
}

const require$$0$1 = [
  ['0', '\u0000', 128],
  ['a1', '｡', 62],
  [
    '8140',
    '　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈',
    9,
    '＋－±×'
  ],
  ['8180', '÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓'],
  ['81b8', '∈∋⊆⊇⊂⊃∪∩'],
  ['81c8', '∧∨￢⇒⇔∀∃'],
  ['81da', '∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬'],
  ['81f0', 'Å‰♯♭♪†‡¶'],
  ['81fc', '◯'],
  ['824f', '０', 9],
  ['8260', 'Ａ', 25],
  ['8281', 'ａ', 25],
  ['829f', 'ぁ', 82],
  ['8340', 'ァ', 62],
  ['8380', 'ム', 22],
  ['839f', 'Α', 16, 'Σ', 6],
  ['83bf', 'α', 16, 'σ', 6],
  ['8440', 'А', 5, 'ЁЖ', 25],
  ['8470', 'а', 5, 'ёж', 7],
  ['8480', 'о', 17],
  ['849f', '─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂'],
  ['8740', '①', 19, 'Ⅰ', 9],
  ['875f', '㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡'],
  ['877e', '㍻'],
  ['8780', '〝〟№㏍℡㊤', 4, '㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪'],
  [
    '889f',
    '亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭'
  ],
  [
    '8940',
    '院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円'
  ],
  [
    '8980',
    '園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改'
  ],
  [
    '8a40',
    '魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫'
  ],
  [
    '8a80',
    '橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄'
  ],
  [
    '8b40',
    '機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救'
  ],
  [
    '8b80',
    '朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈'
  ],
  [
    '8c40',
    '掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨'
  ],
  [
    '8c80',
    '劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向'
  ],
  [
    '8d40',
    '后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降'
  ],
  [
    '8d80',
    '項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷'
  ],
  [
    '8e40',
    '察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止'
  ],
  [
    '8e80',
    '死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周'
  ],
  [
    '8f40',
    '宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳'
  ],
  [
    '8f80',
    '準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾'
  ],
  [
    '9040',
    '拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨'
  ],
  [
    '9080',
    '逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線'
  ],
  [
    '9140',
    '繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻'
  ],
  [
    '9180',
    '操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只'
  ],
  [
    '9240',
    '叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄'
  ],
  [
    '9280',
    '逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓'
  ],
  [
    '9340',
    '邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬'
  ],
  [
    '9380',
    '凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入'
  ],
  [
    '9440',
    '如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅'
  ],
  [
    '9480',
    '楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美'
  ],
  [
    '9540',
    '鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷'
  ],
  [
    '9580',
    '斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋'
  ],
  [
    '9640',
    '法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆'
  ],
  [
    '9680',
    '摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒'
  ],
  [
    '9740',
    '諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲'
  ],
  [
    '9780',
    '沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯'
  ],
  [
    '9840',
    '蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕'
  ],
  [
    '989f',
    '弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲'
  ],
  [
    '9940',
    '僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭'
  ],
  [
    '9980',
    '凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨'
  ],
  [
    '9a40',
    '咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸'
  ],
  [
    '9a80',
    '噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩'
  ],
  [
    '9b40',
    '奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀'
  ],
  [
    '9b80',
    '它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏'
  ],
  [
    '9c40',
    '廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠'
  ],
  [
    '9c80',
    '怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛'
  ],
  [
    '9d40',
    '戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫'
  ],
  [
    '9d80',
    '捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼'
  ],
  [
    '9e40',
    '曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎'
  ],
  [
    '9e80',
    '梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣'
  ],
  [
    '9f40',
    '檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯'
  ],
  [
    '9f80',
    '麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌'
  ],
  [
    'e040',
    '漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝'
  ],
  [
    'e080',
    '烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱'
  ],
  [
    'e140',
    '瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿'
  ],
  [
    'e180',
    '痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬'
  ],
  [
    'e240',
    '磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰'
  ],
  [
    'e280',
    '窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆'
  ],
  [
    'e340',
    '紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷'
  ],
  [
    'e380',
    '縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋'
  ],
  [
    'e440',
    '隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤'
  ],
  [
    'e480',
    '艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈'
  ],
  [
    'e540',
    '蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬'
  ],
  [
    'e580',
    '蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞'
  ],
  [
    'e640',
    '襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧'
  ],
  [
    'e680',
    '諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊'
  ],
  [
    'e740',
    '蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜'
  ],
  [
    'e780',
    '轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮'
  ],
  [
    'e840',
    '錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙'
  ],
  [
    'e880',
    '閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰'
  ],
  [
    'e940',
    '顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃'
  ],
  [
    'e980',
    '騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈'
  ],
  [
    'ea40',
    '鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯'
  ],
  [
    'ea80',
    '黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙'
  ],
  [
    'ed40',
    '纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏'
  ],
  [
    'ed80',
    '塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱'
  ],
  [
    'ee40',
    '犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙'
  ],
  [
    'ee80',
    '蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑'
  ],
  ['eeef', 'ⅰ', 9, '￢￤＇＂'],
  ['f040', '', 62],
  ['f080', '', 124],
  ['f140', '', 62],
  ['f180', '', 124],
  ['f240', '', 62],
  ['f280', '', 124],
  ['f340', '', 62],
  ['f380', '', 124],
  ['f440', '', 62],
  ['f480', '', 124],
  ['f540', '', 62],
  ['f580', '', 124],
  ['f640', '', 62],
  ['f680', '', 124],
  ['f740', '', 62],
  ['f780', '', 124],
  ['f840', '', 62],
  ['f880', '', 124],
  ['f940', ''],
  [
    'fa40',
    'ⅰ',
    9,
    'Ⅰ',
    9,
    '￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊'
  ],
  [
    'fa80',
    '兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯'
  ],
  [
    'fb40',
    '涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神'
  ],
  [
    'fb80',
    '祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙'
  ],
  ['fc40', '髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑']
]

const require$$1$1 = [
  ['0', '\u0000', 127],
  ['8ea1', '｡', 62],
  [
    'a1a1',
    '　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈',
    9,
    '＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇'
  ],
  ['a2a1', '◆□■△▲▽▼※〒→←↑↓〓'],
  ['a2ba', '∈∋⊆⊇⊂⊃∪∩'],
  ['a2ca', '∧∨￢⇒⇔∀∃'],
  ['a2dc', '∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬'],
  ['a2f2', 'Å‰♯♭♪†‡¶'],
  ['a2fe', '◯'],
  ['a3b0', '０', 9],
  ['a3c1', 'Ａ', 25],
  ['a3e1', 'ａ', 25],
  ['a4a1', 'ぁ', 82],
  ['a5a1', 'ァ', 85],
  ['a6a1', 'Α', 16, 'Σ', 6],
  ['a6c1', 'α', 16, 'σ', 6],
  ['a7a1', 'А', 5, 'ЁЖ', 25],
  ['a7d1', 'а', 5, 'ёж', 25],
  ['a8a1', '─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂'],
  ['ada1', '①', 19, 'Ⅰ', 9],
  ['adc0', '㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡'],
  ['addf', '㍻〝〟№㏍℡㊤', 4, '㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪'],
  [
    'b0a1',
    '亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭'
  ],
  [
    'b1a1',
    '院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応'
  ],
  [
    'b2a1',
    '押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改'
  ],
  [
    'b3a1',
    '魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱'
  ],
  [
    'b4a1',
    '粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄'
  ],
  [
    'b5a1',
    '機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京'
  ],
  [
    'b6a1',
    '供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈'
  ],
  [
    'b7a1',
    '掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲'
  ],
  [
    'b8a1',
    '検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向'
  ],
  [
    'b9a1',
    '后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込'
  ],
  [
    'baa1',
    '此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷'
  ],
  [
    'bba1',
    '察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時'
  ],
  [
    'bca1',
    '次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周'
  ],
  [
    'bda1',
    '宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償'
  ],
  [
    'bea1',
    '勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾'
  ],
  [
    'bfa1',
    '拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾'
  ],
  [
    'c0a1',
    '澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線'
  ],
  [
    'c1a1',
    '繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎'
  ],
  [
    'c2a1',
    '臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只'
  ],
  [
    'c3a1',
    '叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵'
  ],
  [
    'c4a1',
    '帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓'
  ],
  [
    'c5a1',
    '邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到'
  ],
  [
    'c6a1',
    '董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入'
  ],
  [
    'c7a1',
    '如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦'
  ],
  [
    'c8a1',
    '函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美'
  ],
  [
    'c9a1',
    '鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服'
  ],
  [
    'caa1',
    '福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋'
  ],
  [
    'cba1',
    '法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満'
  ],
  [
    'cca1',
    '漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒'
  ],
  [
    'cda1',
    '諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃'
  ],
  [
    'cea1',
    '痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯'
  ],
  [
    'cfa1',
    '蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕'
  ],
  [
    'd0a1',
    '弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲'
  ],
  [
    'd1a1',
    '僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨'
  ],
  [
    'd2a1',
    '辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨'
  ],
  [
    'd3a1',
    '咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉'
  ],
  [
    'd4a1',
    '圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩'
  ],
  [
    'd5a1',
    '奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓'
  ],
  [
    'd6a1',
    '屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏'
  ],
  [
    'd7a1',
    '廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚'
  ],
  [
    'd8a1',
    '悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛'
  ],
  [
    'd9a1',
    '戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼'
  ],
  [
    'daa1',
    '據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼'
  ],
  [
    'dba1',
    '曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍'
  ],
  [
    'dca1',
    '棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣'
  ],
  [
    'dda1',
    '檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾'
  ],
  [
    'dea1',
    '沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌'
  ],
  [
    'dfa1',
    '漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼'
  ],
  [
    'e0a1',
    '燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱'
  ],
  [
    'e1a1',
    '瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰'
  ],
  [
    'e2a1',
    '癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬'
  ],
  [
    'e3a1',
    '磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐'
  ],
  [
    'e4a1',
    '筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆'
  ],
  [
    'e5a1',
    '紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺'
  ],
  [
    'e6a1',
    '罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋'
  ],
  [
    'e7a1',
    '隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙'
  ],
  [
    'e8a1',
    '茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈'
  ],
  [
    'e9a1',
    '蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙'
  ],
  [
    'eaa1',
    '蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞'
  ],
  [
    'eba1',
    '襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫'
  ],
  [
    'eca1',
    '譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊'
  ],
  [
    'eda1',
    '蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸'
  ],
  [
    'eea1',
    '遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮'
  ],
  [
    'efa1',
    '錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞'
  ],
  [
    'f0a1',
    '陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰'
  ],
  [
    'f1a1',
    '顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷'
  ],
  [
    'f2a1',
    '髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈'
  ],
  [
    'f3a1',
    '鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠'
  ],
  ['f4a1', '堯槇遙瑤凜熙'],
  [
    'f9a1',
    '纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德'
  ],
  [
    'faa1',
    '忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱'
  ],
  [
    'fba1',
    '犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚'
  ],
  [
    'fca1',
    '釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑'
  ],
  ['fcf1', 'ⅰ', 9, '￢￤＇＂'],
  ['8fa2af', '˘ˇ¸˙˝¯˛˚～΄΅'],
  ['8fa2c2', '¡¦¿'],
  ['8fa2eb', 'ºª©®™¤№'],
  ['8fa6e1', 'ΆΈΉΊΪ'],
  ['8fa6e7', 'Ό'],
  ['8fa6e9', 'ΎΫ'],
  ['8fa6ec', 'Ώ'],
  ['8fa6f1', 'άέήίϊΐόςύϋΰώ'],
  ['8fa7c2', 'Ђ', 10, 'ЎЏ'],
  ['8fa7f2', 'ђ', 10, 'ўџ'],
  ['8fa9a1', 'ÆĐ'],
  ['8fa9a4', 'Ħ'],
  ['8fa9a6', 'Ĳ'],
  ['8fa9a8', 'ŁĿ'],
  ['8fa9ab', 'ŊØŒ'],
  ['8fa9af', 'ŦÞ'],
  ['8fa9c1', 'æđðħıĳĸłŀŉŋøœßŧþ'],
  ['8faaa1', 'ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ'],
  ['8faaba', 'ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ'],
  ['8faba1', 'áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ'],
  ['8fabbd', 'ġĥíìïîǐ'],
  ['8fabc5', 'īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż'],
  [
    '8fb0a1',
    '丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄'
  ],
  [
    '8fb1a1',
    '侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐'
  ],
  [
    '8fb2a1',
    '傒傓傔傖傛傜傞',
    4,
    '傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂'
  ],
  [
    '8fb3a1',
    '凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋'
  ],
  [
    '8fb4a1',
    '匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿'
  ],
  [
    '8fb5a1',
    '咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒'
  ],
  [
    '8fb6a1',
    '嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍',
    5,
    '嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤',
    4,
    '囱囫园'
  ],
  [
    '8fb7a1',
    '囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭',
    4,
    '坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡'
  ],
  [
    '8fb8a1',
    '堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭'
  ],
  [
    '8fb9a1',
    '奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿'
  ],
  [
    '8fbaa1',
    '嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖',
    4,
    '寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩'
  ],
  [
    '8fbba1',
    '屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤'
  ],
  [
    '8fbca1',
    '巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪',
    4,
    '幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧'
  ],
  [
    '8fbda1',
    '彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐',
    4,
    '忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷'
  ],
  [
    '8fbea1',
    '悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐',
    4,
    '愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥'
  ],
  [
    '8fbfa1',
    '懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵'
  ],
  [
    '8fc0a1',
    '捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿'
  ],
  [
    '8fc1a1',
    '擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝'
  ],
  [
    '8fc2a1',
    '昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝'
  ],
  [
    '8fc3a1',
    '杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮',
    4,
    '桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏'
  ],
  [
    '8fc4a1',
    '棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲'
  ],
  [
    '8fc5a1',
    '樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽'
  ],
  [
    '8fc6a1',
    '歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖'
  ],
  [
    '8fc7a1',
    '泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞'
  ],
  [
    '8fc8a1',
    '湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊'
  ],
  [
    '8fc9a1',
    '濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔',
    4,
    '炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃',
    4,
    '焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠'
  ],
  [
    '8fcaa1',
    '煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻'
  ],
  [
    '8fcba1',
    '狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽'
  ],
  [
    '8fcca1',
    '珿琀琁琄琇琊琑琚琛琤琦琨',
    9,
    '琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆'
  ],
  [
    '8fcda1',
    '甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹',
    5,
    '疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹'
  ],
  [
    '8fcea1',
    '瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢',
    6,
    '皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢'
  ],
  [
    '8fcfa1',
    '睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳'
  ],
  [
    '8fd0a1',
    '碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞'
  ],
  [
    '8fd1a1',
    '秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰'
  ],
  [
    '8fd2a1',
    '笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙',
    5
  ],
  [
    '8fd3a1',
    '籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝'
  ],
  [
    '8fd4a1',
    '綞綦綧綪綳綶綷綹緂',
    4,
    '緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭'
  ],
  [
    '8fd5a1',
    '罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮'
  ],
  [
    '8fd6a1',
    '胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆'
  ],
  [
    '8fd7a1',
    '艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸'
  ],
  [
    '8fd8a1',
    '荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓'
  ],
  [
    '8fd9a1',
    '蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏',
    4,
    '蕖蕙蕜',
    6,
    '蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼'
  ],
  [
    '8fdaa1',
    '藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠',
    4,
    '虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣'
  ],
  [
    '8fdba1',
    '蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃',
    6,
    '螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵'
  ],
  [
    '8fdca1',
    '蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊',
    4,
    '裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺'
  ],
  [
    '8fdda1',
    '襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔',
    4,
    '觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳'
  ],
  [
    '8fdea1',
    '誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂',
    4,
    '譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆'
  ],
  [
    '8fdfa1',
    '貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢'
  ],
  [
    '8fe0a1',
    '踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁'
  ],
  [
    '8fe1a1',
    '轃轇轏轑',
    4,
    '轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃'
  ],
  [
    '8fe2a1',
    '郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿'
  ],
  [
    '8fe3a1',
    '釂釃釅釓釔釗釙釚釞釤釥釩釪釬',
    5,
    '釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵',
    4,
    '鉻鉼鉽鉿銈銉銊銍銎銒銗'
  ],
  [
    '8fe4a1',
    '銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿',
    4,
    '鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶'
  ],
  [
    '8fe5a1',
    '鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉',
    4,
    '鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹'
  ],
  [
    '8fe6a1',
    '镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂'
  ],
  [
    '8fe7a1',
    '霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦'
  ],
  [
    '8fe8a1',
    '頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱',
    4,
    '餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵'
  ],
  [
    '8fe9a1',
    '馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿',
    4
  ],
  [
    '8feaa1',
    '鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪',
    4,
    '魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸'
  ],
  [
    '8feba1',
    '鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦',
    4,
    '鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻'
  ],
  [
    '8feca1',
    '鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵'
  ],
  [
    '8feda1',
    '黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃',
    4,
    '齓齕齖齗齘齚齝齞齨齩齭',
    4,
    '齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥'
  ]
]

const require$$2 = [
  ['0', '\u0000', 127, '€'],
  [
    '8140',
    '丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪',
    5,
    '乲乴',
    9,
    '乿',
    6,
    '亇亊'
  ],
  [
    '8180',
    '亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂',
    6,
    '伋伌伒',
    4,
    '伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾',
    4,
    '佄佅佇',
    5,
    '佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢'
  ],
  [
    '8240',
    '侤侫侭侰',
    4,
    '侶',
    8,
    '俀俁係俆俇俈俉俋俌俍俒',
    4,
    '俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿',
    11
  ],
  [
    '8280',
    '個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯',
    10,
    '倻倽倿偀偁偂偄偅偆偉偊偋偍偐',
    4,
    '偖偗偘偙偛偝',
    7,
    '偦',
    5,
    '偭',
    8,
    '偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎',
    20,
    '傤傦傪傫傭',
    4,
    '傳',
    6,
    '傼'
  ],
  [
    '8340',
    '傽',
    17,
    '僐',
    5,
    '僗僘僙僛',
    10,
    '僨僩僪僫僯僰僱僲僴僶',
    4,
    '僼',
    9,
    '儈'
  ],
  [
    '8380',
    '儉儊儌',
    5,
    '儓',
    13,
    '儢',
    28,
    '兂兇兊兌兎兏児兒兓兗兘兙兛兝',
    4,
    '兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦',
    4,
    '冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒',
    5
  ],
  [
    '8440',
    '凘凙凚凜凞凟凢凣凥',
    5,
    '凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄',
    5,
    '剋剎剏剒剓剕剗剘'
  ],
  [
    '8480',
    '剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳',
    9,
    '剾劀劃',
    4,
    '劉',
    6,
    '劑劒劔',
    6,
    '劜劤劥劦劧劮劯劰労',
    9,
    '勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務',
    5,
    '勠勡勢勣勥',
    10,
    '勱',
    7,
    '勻勼勽匁匂匃匄匇匉匊匋匌匎'
  ],
  [
    '8540',
    '匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯',
    9,
    '匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏'
  ],
  [
    '8580',
    '厐',
    4,
    '厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯',
    6,
    '厷厸厹厺厼厽厾叀參',
    4,
    '収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝',
    4,
    '呣呥呧呩',
    7,
    '呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡'
  ],
  [
    '8640',
    '咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠',
    4,
    '哫哬哯哰哱哴',
    5,
    '哻哾唀唂唃唄唅唈唊',
    4,
    '唒唓唕',
    5,
    '唜唝唞唟唡唥唦'
  ],
  [
    '8680',
    '唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋',
    4,
    '啑啒啓啔啗',
    4,
    '啝啞啟啠啢啣啨啩啫啯',
    5,
    '啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠',
    6,
    '喨',
    8,
    '喲喴営喸喺喼喿',
    4,
    '嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗',
    4,
    '嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸',
    4,
    '嗿嘂嘃嘄嘅'
  ],
  [
    '8740',
    '嘆嘇嘊嘋嘍嘐',
    7,
    '嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀',
    11,
    '噏',
    4,
    '噕噖噚噛噝',
    4
  ],
  [
    '8780',
    '噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽',
    7,
    '嚇',
    6,
    '嚐嚑嚒嚔',
    14,
    '嚤',
    10,
    '嚰',
    6,
    '嚸嚹嚺嚻嚽',
    12,
    '囋',
    8,
    '囕囖囘囙囜団囥',
    5,
    '囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國',
    6
  ],
  [
    '8840',
    '園',
    9,
    '圝圞圠圡圢圤圥圦圧圫圱圲圴',
    4,
    '圼圽圿坁坃坄坅坆坈坉坋坒',
    4,
    '坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀'
  ],
  [
    '8880',
    '垁垇垈垉垊垍',
    4,
    '垔',
    6,
    '垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹',
    8,
    '埄',
    6,
    '埌埍埐埑埓埖埗埛埜埞埡埢埣埥',
    7,
    '埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥',
    4,
    '堫',
    4,
    '報堲堳場堶',
    7
  ],
  [
    '8940',
    '堾',
    5,
    '塅',
    6,
    '塎塏塐塒塓塕塖塗塙',
    4,
    '塟',
    5,
    '塦',
    4,
    '塭',
    16,
    '塿墂墄墆墇墈墊墋墌'
  ],
  [
    '8980',
    '墍',
    4,
    '墔',
    4,
    '墛墜墝墠',
    7,
    '墪',
    17,
    '墽墾墿壀壂壃壄壆',
    10,
    '壒壓壔壖',
    13,
    '壥',
    5,
    '壭壯壱売壴壵壷壸壺',
    7,
    '夃夅夆夈',
    4,
    '夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻'
  ],
  [
    '8a40',
    '夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛',
    4,
    '奡奣奤奦',
    12,
    '奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦'
  ],
  [
    '8a80',
    '妧妬妭妰妱妳',
    5,
    '妺妼妽妿',
    6,
    '姇姈姉姌姍姎姏姕姖姙姛姞',
    4,
    '姤姦姧姩姪姫姭',
    11,
    '姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪',
    6,
    '娳娵娷',
    4,
    '娽娾娿婁',
    4,
    '婇婈婋',
    9,
    '婖婗婘婙婛',
    5
  ],
  [
    '8b40',
    '婡婣婤婥婦婨婩婫',
    8,
    '婸婹婻婼婽婾媀',
    17,
    '媓',
    6,
    '媜',
    13,
    '媫媬'
  ],
  [
    '8b80',
    '媭',
    4,
    '媴媶媷媹',
    4,
    '媿嫀嫃',
    5,
    '嫊嫋嫍',
    4,
    '嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬',
    4,
    '嫲',
    22,
    '嬊',
    11,
    '嬘',
    25,
    '嬳嬵嬶嬸',
    7,
    '孁',
    6
  ],
  [
    '8c40',
    '孈',
    7,
    '孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏'
  ],
  [
    '8c80',
    '寑寔',
    8,
    '寠寢寣實寧審',
    4,
    '寯寱',
    6,
    '寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧',
    6,
    '屰屲',
    6,
    '屻屼屽屾岀岃',
    4,
    '岉岊岋岎岏岒岓岕岝',
    4,
    '岤',
    4
  ],
  [
    '8d40',
    '岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅',
    5,
    '峌',
    5,
    '峓',
    5,
    '峚',
    6,
    '峢峣峧峩峫峬峮峯峱',
    9,
    '峼',
    4
  ],
  [
    '8d80',
    '崁崄崅崈',
    5,
    '崏',
    4,
    '崕崗崘崙崚崜崝崟',
    4,
    '崥崨崪崫崬崯',
    4,
    '崵',
    7,
    '崿',
    7,
    '嵈嵉嵍',
    10,
    '嵙嵚嵜嵞',
    10,
    '嵪嵭嵮嵰嵱嵲嵳嵵',
    12,
    '嶃',
    21,
    '嶚嶛嶜嶞嶟嶠'
  ],
  ['8e40', '嶡', 21, '嶸', 12, '巆', 6, '巎', 12, '巜巟巠巣巤巪巬巭'],
  [
    '8e80',
    '巰巵巶巸',
    4,
    '巿帀帄帇帉帊帋帍帎帒帓帗帞',
    7,
    '帨',
    4,
    '帯帰帲',
    4,
    '帹帺帾帿幀幁幃幆',
    5,
    '幍',
    6,
    '幖',
    4,
    '幜幝幟幠幣',
    14,
    '幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨',
    4,
    '庮',
    4,
    '庴庺庻庼庽庿',
    6
  ],
  [
    '8f40',
    '廆廇廈廋',
    5,
    '廔廕廗廘廙廚廜',
    11,
    '廩廫',
    8,
    '廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤'
  ],
  [
    '8f80',
    '弨弫弬弮弰弲',
    6,
    '弻弽弾弿彁',
    14,
    '彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢',
    5,
    '復徫徬徯',
    5,
    '徶徸徹徺徻徾',
    4,
    '忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇'
  ],
  [
    '9040',
    '怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰',
    4,
    '怶',
    4,
    '怽怾恀恄',
    6,
    '恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀'
  ],
  [
    '9080',
    '悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽',
    7,
    '惇惈惉惌',
    4,
    '惒惓惔惖惗惙惛惞惡',
    4,
    '惪惱惲惵惷惸惻',
    4,
    '愂愃愄愅愇愊愋愌愐',
    4,
    '愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬',
    18,
    '慀',
    6
  ],
  [
    '9140',
    '慇慉態慍慏慐慒慓慔慖',
    6,
    '慞慟慠慡慣慤慥慦慩',
    6,
    '慱慲慳慴慶慸',
    18,
    '憌憍憏',
    4,
    '憕'
  ],
  [
    '9180',
    '憖',
    6,
    '憞',
    8,
    '憪憫憭',
    9,
    '憸',
    5,
    '憿懀懁懃',
    4,
    '應懌',
    4,
    '懓懕',
    16,
    '懧',
    13,
    '懶',
    8,
    '戀',
    5,
    '戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸',
    4,
    '扂扄扅扆扊'
  ],
  [
    '9240',
    '扏扐払扖扗扙扚扜',
    6,
    '扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋',
    5,
    '抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁'
  ],
  [
    '9280',
    '拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳',
    5,
    '挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖',
    7,
    '捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙',
    6,
    '採掤掦掫掯掱掲掵掶掹掻掽掿揀'
  ],
  [
    '9340',
    '揁揂揃揅揇揈揊揋揌揑揓揔揕揗',
    6,
    '揟揢揤',
    4,
    '揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆',
    4,
    '損搎搑搒搕',
    5,
    '搝搟搢搣搤'
  ],
  [
    '9380',
    '搥搧搨搩搫搮',
    5,
    '搵',
    4,
    '搻搼搾摀摂摃摉摋',
    6,
    '摓摕摖摗摙',
    4,
    '摟',
    7,
    '摨摪摫摬摮',
    9,
    '摻',
    6,
    '撃撆撈',
    8,
    '撓撔撗撘撚撛撜撝撟',
    4,
    '撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆',
    6,
    '擏擑擓擔擕擖擙據'
  ],
  ['9440', '擛擜擝擟擠擡擣擥擧', 24, '攁', 7, '攊', 7, '攓', 4, '攙', 8],
  [
    '9480',
    '攢攣攤攦',
    4,
    '攬攭攰攱攲攳攷攺攼攽敀',
    4,
    '敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數',
    14,
    '斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱',
    7,
    '斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘',
    7,
    '旡旣旤旪旫'
  ],
  [
    '9540',
    '旲旳旴旵旸旹旻',
    4,
    '昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷',
    4,
    '昽昿晀時晄',
    6,
    '晍晎晐晑晘'
  ],
  [
    '9580',
    '晙晛晜晝晞晠晢晣晥晧晩',
    4,
    '晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘',
    4,
    '暞',
    8,
    '暩',
    4,
    '暯',
    4,
    '暵暶暷暸暺暻暼暽暿',
    25,
    '曚曞',
    7,
    '曧曨曪',
    5,
    '曱曵曶書曺曻曽朁朂會'
  ],
  [
    '9640',
    '朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠',
    5,
    '朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗',
    4,
    '杝杢杣杤杦杧杫杬杮東杴杶'
  ],
  [
    '9680',
    '杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹',
    7,
    '柂柅',
    9,
    '柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵',
    7,
    '柾栁栂栃栄栆栍栐栒栔栕栘',
    4,
    '栞栟栠栢',
    6,
    '栫',
    6,
    '栴栵栶栺栻栿桇桋桍桏桒桖',
    5
  ],
  [
    '9740',
    '桜桝桞桟桪桬',
    7,
    '桵桸',
    8,
    '梂梄梇',
    7,
    '梐梑梒梔梕梖梘',
    9,
    '梣梤梥梩梪梫梬梮梱梲梴梶梷梸'
  ],
  [
    '9780',
    '梹',
    6,
    '棁棃',
    5,
    '棊棌棎棏棐棑棓棔棖棗棙棛',
    4,
    '棡棢棤',
    9,
    '棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆',
    4,
    '椌椏椑椓',
    11,
    '椡椢椣椥',
    7,
    '椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃',
    16,
    '楕楖楘楙楛楜楟'
  ],
  [
    '9840',
    '楡楢楤楥楧楨楩楪楬業楯楰楲',
    4,
    '楺楻楽楾楿榁榃榅榊榋榌榎',
    5,
    '榖榗榙榚榝',
    9,
    '榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽'
  ],
  [
    '9880',
    '榾榿槀槂',
    7,
    '構槍槏槑槒槓槕',
    5,
    '槜槝槞槡',
    11,
    '槮槯槰槱槳',
    9,
    '槾樀',
    9,
    '樋',
    11,
    '標',
    5,
    '樠樢',
    5,
    '権樫樬樭樮樰樲樳樴樶',
    6,
    '樿',
    4,
    '橅橆橈',
    7,
    '橑',
    6,
    '橚'
  ],
  [
    '9940',
    '橜',
    4,
    '橢橣橤橦',
    10,
    '橲',
    6,
    '橺橻橽橾橿檁檂檃檅',
    8,
    '檏檒',
    4,
    '檘',
    7,
    '檡',
    5
  ],
  ['9980', '檧檨檪檭', 114, '欥欦欨', 6],
  [
    '9a40',
    '欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍',
    11,
    '歚',
    7,
    '歨歩歫',
    13,
    '歺歽歾歿殀殅殈'
  ],
  [
    '9a80',
    '殌殎殏殐殑殔殕殗殘殙殜',
    4,
    '殢',
    7,
    '殫',
    7,
    '殶殸',
    6,
    '毀毃毄毆',
    4,
    '毌毎毐毑毘毚毜',
    4,
    '毢',
    7,
    '毬毭毮毰毱毲毴毶毷毸毺毻毼毾',
    6,
    '氈',
    4,
    '氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋',
    4,
    '汑汒汓汖汘'
  ],
  [
    '9b40',
    '汙汚汢汣汥汦汧汫',
    4,
    '汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘'
  ],
  [
    '9b80',
    '泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟',
    5,
    '洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽',
    4,
    '涃涄涆涇涊涋涍涏涐涒涖',
    4,
    '涜涢涥涬涭涰涱涳涴涶涷涹',
    5,
    '淁淂淃淈淉淊'
  ],
  [
    '9c40',
    '淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽',
    7,
    '渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵'
  ],
  [
    '9c80',
    '渶渷渹渻',
    7,
    '湅',
    7,
    '湏湐湑湒湕湗湙湚湜湝湞湠',
    10,
    '湬湭湯',
    14,
    '満溁溂溄溇溈溊',
    4,
    '溑',
    6,
    '溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪',
    5
  ],
  [
    '9d40',
    '滰滱滲滳滵滶滷滸滺',
    7,
    '漃漄漅漇漈漊',
    4,
    '漐漑漒漖',
    9,
    '漡漢漣漥漦漧漨漬漮漰漲漴漵漷',
    6,
    '漿潀潁潂'
  ],
  [
    '9d80',
    '潃潄潅潈潉潊潌潎',
    9,
    '潙潚潛潝潟潠潡潣潤潥潧',
    5,
    '潯潰潱潳潵潶潷潹潻潽',
    6,
    '澅澆澇澊澋澏',
    12,
    '澝澞澟澠澢',
    4,
    '澨',
    10,
    '澴澵澷澸澺',
    5,
    '濁濃',
    5,
    '濊',
    6,
    '濓',
    10,
    '濟濢濣濤濥'
  ],
  ['9e40', '濦', 7, '濰', 32, '瀒', 7, '瀜', 6, '瀤', 6],
  [
    '9e80',
    '瀫',
    9,
    '瀶瀷瀸瀺',
    17,
    '灍灎灐',
    13,
    '灟',
    11,
    '灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞',
    12,
    '炰炲炴炵炶為炾炿烄烅烆烇烉烋',
    12,
    '烚'
  ],
  [
    '9f40',
    '烜烝烞烠烡烢烣烥烪烮烰',
    6,
    '烸烺烻烼烾',
    10,
    '焋',
    4,
    '焑焒焔焗焛',
    10,
    '焧',
    7,
    '焲焳焴'
  ],
  [
    '9f80',
    '焵焷',
    13,
    '煆煇煈煉煋煍煏',
    12,
    '煝煟',
    4,
    '煥煩',
    4,
    '煯煰煱煴煵煶煷煹煻煼煾',
    5,
    '熅',
    4,
    '熋熌熍熎熐熑熒熓熕熖熗熚',
    4,
    '熡',
    6,
    '熩熪熫熭',
    5,
    '熴熶熷熸熺',
    8,
    '燄',
    9,
    '燏',
    4
  ],
  ['a040', '燖', 9, '燡燢燣燤燦燨', 5, '燯', 9, '燺', 11, '爇', 19],
  [
    'a080',
    '爛爜爞',
    9,
    '爩爫爭爮爯爲爳爴爺爼爾牀',
    6,
    '牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅',
    4,
    '犌犎犐犑犓',
    11,
    '犠',
    11,
    '犮犱犲犳犵犺',
    6,
    '狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛'
  ],
  [
    'a1a1',
    '　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈',
    7,
    '〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓'
  ],
  ['a2a1', 'ⅰ', 9],
  ['a2b1', '⒈', 19, '⑴', 19, '①', 9],
  ['a2e5', '㈠', 9],
  ['a2f1', 'Ⅰ', 11],
  ['a3a1', '！＂＃￥％', 88, '￣'],
  ['a4a1', 'ぁ', 82],
  ['a5a1', 'ァ', 85],
  ['a6a1', 'Α', 16, 'Σ', 6],
  ['a6c1', 'α', 16, 'σ', 6],
  ['a6e0', '︵︶︹︺︿﹀︽︾﹁﹂﹃﹄'],
  ['a6ee', '︻︼︷︸︱'],
  ['a6f4', '︳︴'],
  ['a7a1', 'А', 5, 'ЁЖ', 25],
  ['a7d1', 'а', 5, 'ёж', 25],
  ['a840', 'ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═', 35, '▁', 6],
  ['a880', '█', 7, '▓▔▕▼▽◢◣◤◥☉⊕〒〝〞'],
  ['a8a1', 'āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ'],
  ['a8bd', 'ńň'],
  ['a8c0', 'ɡ'],
  ['a8c5', 'ㄅ', 36],
  ['a940', '〡', 8, '㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤'],
  ['a959', '℡㈱'],
  ['a95c', '‐'],
  ['a960', 'ー゛゜ヽヾ〆ゝゞ﹉', 9, '﹔﹕﹖﹗﹙', 8],
  ['a980', '﹢', 4, '﹨﹩﹪﹫'],
  ['a996', '〇'],
  ['a9a4', '─', 75],
  [
    'aa40',
    '狜狝狟狢',
    5,
    '狪狫狵狶狹狽狾狿猀猂猄',
    5,
    '猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀',
    8
  ],
  ['aa80', '獉獊獋獌獎獏獑獓獔獕獖獘', 7, '獡', 10, '獮獰獱'],
  [
    'ab40',
    '獲',
    11,
    '獿',
    4,
    '玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣',
    5,
    '玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃',
    4
  ],
  ['ab80', '珋珌珎珒', 6, '珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳', 4],
  [
    'ac40',
    '珸',
    10,
    '琄琇琈琋琌琍琎琑',
    8,
    '琜',
    5,
    '琣琤琧琩琫琭琯琱琲琷',
    4,
    '琽琾琿瑀瑂',
    11
  ],
  ['ac80', '瑎', 6, '瑖瑘瑝瑠', 12, '瑮瑯瑱', 4, '瑸瑹瑺'],
  ['ad40', '瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑', 10, '璝璟', 7, '璪', 15, '璻', 12],
  ['ad80', '瓈', 9, '瓓', 8, '瓝瓟瓡瓥瓧', 6, '瓰瓱瓲'],
  [
    'ae40',
    '瓳瓵瓸',
    6,
    '甀甁甂甃甅',
    7,
    '甎甐甒甔甕甖甗甛甝甞甠',
    4,
    '甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘'
  ],
  ['ae80', '畝', 7, '畧畨畩畫', 6, '畳畵當畷畺', 4, '疀疁疂疄疅疇'],
  [
    'af40',
    '疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦',
    4,
    '疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇'
  ],
  [
    'af80',
    '瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄'
  ],
  [
    'b040',
    '癅',
    6,
    '癎',
    5,
    '癕癗',
    4,
    '癝癟癠癡癢癤',
    6,
    '癬癭癮癰',
    7,
    '癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛'
  ],
  [
    'b080',
    '皜',
    7,
    '皥',
    8,
    '皯皰皳皵',
    9,
    '盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥'
  ],
  [
    'b140',
    '盄盇盉盋盌盓盕盙盚盜盝盞盠',
    4,
    '盦',
    7,
    '盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎',
    10,
    '眛眜眝眞眡眣眤眥眧眪眫'
  ],
  [
    'b180',
    '眬眮眰',
    4,
    '眹眻眽眾眿睂睄睅睆睈',
    7,
    '睒',
    7,
    '睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳'
  ],
  [
    'b240',
    '睝睞睟睠睤睧睩睪睭',
    11,
    '睺睻睼瞁瞂瞃瞆',
    5,
    '瞏瞐瞓',
    11,
    '瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶',
    4
  ],
  [
    'b280',
    '瞼瞾矀',
    12,
    '矎',
    8,
    '矘矙矚矝',
    4,
    '矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖'
  ],
  [
    'b340',
    '矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃',
    5,
    '砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚'
  ],
  [
    'b380',
    '硛硜硞',
    11,
    '硯',
    7,
    '硸硹硺硻硽',
    6,
    '场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚'
  ],
  [
    'b440',
    '碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨',
    7,
    '碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚',
    9
  ],
  [
    'b480',
    '磤磥磦磧磩磪磫磭',
    4,
    '磳磵磶磸磹磻',
    5,
    '礂礃礄礆',
    6,
    '础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮'
  ],
  [
    'b540',
    '礍',
    5,
    '礔',
    9,
    '礟',
    4,
    '礥',
    14,
    '礵',
    4,
    '礽礿祂祃祄祅祇祊',
    8,
    '祔祕祘祙祡祣'
  ],
  [
    'b580',
    '祤祦祩祪祫祬祮祰',
    6,
    '祹祻',
    4,
    '禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠'
  ],
  [
    'b640',
    '禓',
    6,
    '禛',
    11,
    '禨',
    10,
    '禴',
    4,
    '禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙',
    5,
    '秠秡秢秥秨秪'
  ],
  [
    'b680',
    '秬秮秱',
    6,
    '秹秺秼秾秿稁稄稅稇稈稉稊稌稏',
    4,
    '稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二'
  ],
  ['b740', '稝稟稡稢稤', 14, '稴稵稶稸稺稾穀', 5, '穇', 9, '穒', 4, '穘', 16],
  [
    'b780',
    '穩',
    6,
    '穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服'
  ],
  [
    'b840',
    '窣窤窧窩窪窫窮',
    4,
    '窴',
    10,
    '竀',
    10,
    '竌',
    9,
    '竗竘竚竛竜竝竡竢竤竧',
    5,
    '竮竰竱竲竳'
  ],
  [
    'b880',
    '竴',
    4,
    '竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹'
  ],
  [
    'b940',
    '笯笰笲笴笵笶笷笹笻笽笿',
    5,
    '筆筈筊筍筎筓筕筗筙筜筞筟筡筣',
    10,
    '筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆',
    6,
    '箎箏'
  ],
  [
    'b980',
    '箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹',
    7,
    '篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈'
  ],
  [
    'ba40',
    '篅篈築篊篋篍篎篏篐篒篔',
    4,
    '篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲',
    4,
    '篸篹篺篻篽篿',
    7,
    '簈簉簊簍簎簐',
    5,
    '簗簘簙'
  ],
  [
    'ba80',
    '簚',
    4,
    '簠',
    5,
    '簨簩簫',
    12,
    '簹',
    5,
    '籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖'
  ],
  ['bb40', '籃', 9, '籎', 36, '籵', 5, '籾', 9],
  [
    'bb80',
    '粈粊',
    6,
    '粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴',
    4,
    '粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕'
  ],
  [
    'bc40',
    '粿糀糂糃糄糆糉糋糎',
    6,
    '糘糚糛糝糞糡',
    6,
    '糩',
    5,
    '糰',
    7,
    '糹糺糼',
    13,
    '紋',
    5
  ],
  [
    'bc80',
    '紑',
    14,
    '紡紣紤紥紦紨紩紪紬紭紮細',
    6,
    '肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件'
  ],
  ['bd40', '紷', 54, '絯', 7],
  [
    'bd80',
    '絸',
    32,
    '健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸'
  ],
  ['be40', '継', 12, '綧', 6, '綯', 42],
  [
    'be80',
    '線',
    32,
    '尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻'
  ],
  ['bf40', '緻', 62],
  [
    'bf80',
    '縺縼',
    4,
    '繂',
    4,
    '繈',
    21,
    '俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀'
  ],
  ['c040', '繞', 35, '纃', 23, '纜纝纞'],
  [
    'c080',
    '纮纴纻纼绖绤绬绹缊缐缞缷缹缻',
    6,
    '罃罆',
    9,
    '罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐'
  ],
  [
    'c140',
    '罖罙罛罜罝罞罠罣',
    4,
    '罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂',
    7,
    '羋羍羏',
    4,
    '羕',
    4,
    '羛羜羠羢羣羥羦羨',
    6,
    '羱'
  ],
  [
    'c180',
    '羳',
    4,
    '羺羻羾翀翂翃翄翆翇翈翉翋翍翏',
    4,
    '翖翗翙',
    5,
    '翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿'
  ],
  [
    'c240',
    '翤翧翨翪翫翬翭翯翲翴',
    6,
    '翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫',
    5,
    '耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗'
  ],
  [
    'c280',
    '聙聛',
    13,
    '聫',
    5,
    '聲',
    11,
    '隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫'
  ],
  [
    'c340',
    '聾肁肂肅肈肊肍',
    5,
    '肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇',
    4,
    '胏',
    6,
    '胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋'
  ],
  [
    'c380',
    '脌脕脗脙脛脜脝脟',
    12,
    '脭脮脰脳脴脵脷脹',
    4,
    '脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸'
  ],
  [
    'c440',
    '腀',
    5,
    '腇腉腍腎腏腒腖腗腘腛',
    4,
    '腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃',
    4,
    '膉膋膌膍膎膐膒',
    5,
    '膙膚膞',
    4,
    '膤膥'
  ],
  [
    'c480',
    '膧膩膫',
    7,
    '膴',
    5,
    '膼膽膾膿臄臅臇臈臉臋臍',
    6,
    '摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁'
  ],
  [
    'c540',
    '臔',
    14,
    '臤臥臦臨臩臫臮',
    4,
    '臵',
    5,
    '臽臿舃與',
    4,
    '舎舏舑舓舕',
    5,
    '舝舠舤舥舦舧舩舮舲舺舼舽舿'
  ],
  [
    'c580',
    '艀艁艂艃艅艆艈艊艌艍艎艐',
    7,
    '艙艛艜艝艞艠',
    7,
    '艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗'
  ],
  [
    'c640',
    '艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸'
  ],
  [
    'c680',
    '苺苼',
    4,
    '茊茋茍茐茒茓茖茘茙茝',
    9,
    '茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐'
  ],
  [
    'c740',
    '茾茿荁荂荄荅荈荊',
    4,
    '荓荕',
    4,
    '荝荢荰',
    6,
    '荹荺荾',
    6,
    '莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡',
    6,
    '莬莭莮'
  ],
  [
    'c780',
    '莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠'
  ],
  [
    'c840',
    '菮華菳',
    4,
    '菺菻菼菾菿萀萂萅萇萈萉萊萐萒',
    5,
    '萙萚萛萞',
    5,
    '萩',
    7,
    '萲',
    5,
    '萹萺萻萾',
    7,
    '葇葈葉'
  ],
  [
    'c880',
    '葊',
    6,
    '葒',
    4,
    '葘葝葞葟葠葢葤',
    4,
    '葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁'
  ],
  [
    'c940',
    '葽',
    4,
    '蒃蒄蒅蒆蒊蒍蒏',
    7,
    '蒘蒚蒛蒝蒞蒟蒠蒢',
    12,
    '蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗'
  ],
  [
    'c980',
    '蓘',
    4,
    '蓞蓡蓢蓤蓧',
    4,
    '蓭蓮蓯蓱',
    10,
    '蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳'
  ],
  [
    'ca40',
    '蔃',
    8,
    '蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢',
    8,
    '蔭',
    9,
    '蔾',
    4,
    '蕄蕅蕆蕇蕋',
    10
  ],
  [
    'ca80',
    '蕗蕘蕚蕛蕜蕝蕟',
    4,
    '蕥蕦蕧蕩',
    8,
    '蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱'
  ],
  [
    'cb40',
    '薂薃薆薈',
    6,
    '薐',
    10,
    '薝',
    6,
    '薥薦薧薩薫薬薭薱',
    5,
    '薸薺',
    6,
    '藂',
    6,
    '藊',
    4,
    '藑藒'
  ],
  [
    'cb80',
    '藔藖',
    5,
    '藝',
    6,
    '藥藦藧藨藪',
    14,
    '恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔'
  ],
  [
    'cc40',
    '藹藺藼藽藾蘀',
    4,
    '蘆',
    10,
    '蘒蘓蘔蘕蘗',
    15,
    '蘨蘪',
    13,
    '蘹蘺蘻蘽蘾蘿虀'
  ],
  [
    'cc80',
    '虁',
    11,
    '虒虓處',
    4,
    '虛虜虝號虠虡虣',
    7,
    '獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃'
  ],
  [
    'cd40',
    '虭虯虰虲',
    6,
    '蚃',
    6,
    '蚎',
    4,
    '蚔蚖',
    5,
    '蚞',
    4,
    '蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻',
    4,
    '蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜'
  ],
  [
    'cd80',
    '蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威'
  ],
  [
    'ce40',
    '蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀',
    6,
    '蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚',
    5,
    '蝡蝢蝦',
    7,
    '蝯蝱蝲蝳蝵'
  ],
  [
    'ce80',
    '蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎',
    4,
    '螔螕螖螘',
    6,
    '螠',
    4,
    '巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺'
  ],
  [
    'cf40',
    '螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁',
    4,
    '蟇蟈蟉蟌',
    4,
    '蟔',
    6,
    '蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯',
    9
  ],
  [
    'cf80',
    '蟺蟻蟼蟽蟿蠀蠁蠂蠄',
    5,
    '蠋',
    7,
    '蠔蠗蠘蠙蠚蠜',
    4,
    '蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓'
  ],
  [
    'd040',
    '蠤',
    13,
    '蠳',
    5,
    '蠺蠻蠽蠾蠿衁衂衃衆',
    5,
    '衎',
    5,
    '衕衖衘衚',
    6,
    '衦衧衪衭衯衱衳衴衵衶衸衹衺'
  ],
  [
    'd080',
    '衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗',
    4,
    '袝',
    4,
    '袣袥',
    5,
    '小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄'
  ],
  [
    'd140',
    '袬袮袯袰袲',
    4,
    '袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚',
    4,
    '裠裡裦裧裩',
    6,
    '裲裵裶裷裺裻製裿褀褁褃',
    5
  ],
  [
    'd180',
    '褉褋',
    4,
    '褑褔',
    4,
    '褜',
    4,
    '褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶'
  ],
  ['d240', '褸', 8, '襂襃襅', 24, '襠', 5, '襧', 19, '襼'],
  [
    'd280',
    '襽襾覀覂覄覅覇',
    26,
    '摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐'
  ],
  ['d340', '覢', 30, '觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴', 6],
  [
    'd380',
    '觻',
    4,
    '訁',
    5,
    '計',
    21,
    '印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉'
  ],
  ['d440', '訞', 31, '訿', 8, '詉', 21],
  [
    'd480',
    '詟',
    25,
    '詺',
    6,
    '浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧'
  ],
  ['d540', '誁', 7, '誋', 7, '誔', 46],
  [
    'd580',
    '諃',
    32,
    '铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政'
  ],
  ['d640', '諤', 34, '謈', 27],
  [
    'd680',
    '謤謥謧',
    30,
    '帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑'
  ],
  ['d740', '譆', 31, '譧', 4, '譭', 25],
  [
    'd780',
    '讇',
    24,
    '讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座'
  ],
  [
    'd840',
    '谸',
    8,
    '豂豃豄豅豈豊豋豍',
    7,
    '豖豗豘豙豛',
    5,
    '豣',
    6,
    '豬',
    6,
    '豴豵豶豷豻',
    6,
    '貃貄貆貇'
  ],
  [
    'd880',
    '貈貋貍',
    6,
    '貕貖貗貙',
    20,
    '亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝'
  ],
  ['d940', '貮', 62],
  [
    'd980',
    '賭',
    32,
    '佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼'
  ],
  [
    'da40',
    '贎',
    14,
    '贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸',
    8,
    '趂趃趆趇趈趉趌',
    4,
    '趒趓趕',
    9,
    '趠趡'
  ],
  [
    'da80',
    '趢趤',
    12,
    '趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺'
  ],
  [
    'db40',
    '跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾',
    6,
    '踆踇踈踋踍踎踐踑踒踓踕',
    7,
    '踠踡踤',
    4,
    '踫踭踰踲踳踴踶踷踸踻踼踾'
  ],
  [
    'db80',
    '踿蹃蹅蹆蹌',
    4,
    '蹓',
    5,
    '蹚',
    11,
    '蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝'
  ],
  [
    'dc40',
    '蹳蹵蹷',
    4,
    '蹽蹾躀躂躃躄躆躈',
    6,
    '躑躒躓躕',
    6,
    '躝躟',
    11,
    '躭躮躰躱躳',
    6,
    '躻',
    7
  ],
  [
    'dc80',
    '軃',
    10,
    '軏',
    21,
    '堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥'
  ],
  ['dd40', '軥', 62],
  [
    'dd80',
    '輤',
    32,
    '荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺'
  ],
  [
    'de40',
    '轅',
    32,
    '轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆'
  ],
  [
    'de80',
    '迉',
    4,
    '迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖'
  ],
  [
    'df40',
    '這逜連逤逥逧',
    5,
    '逰',
    4,
    '逷逹逺逽逿遀遃遅遆遈',
    4,
    '過達違遖遙遚遜',
    5,
    '遤遦遧適遪遫遬遯',
    4,
    '遶',
    6,
    '遾邁'
  ],
  [
    'df80',
    '還邅邆邇邉邊邌',
    4,
    '邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼'
  ],
  [
    'e040',
    '郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅',
    19,
    '鄚鄛鄜'
  ],
  [
    'e080',
    '鄝鄟鄠鄡鄤',
    10,
    '鄰鄲',
    6,
    '鄺',
    8,
    '酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼'
  ],
  [
    'e140',
    '酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀',
    4,
    '醆醈醊醎醏醓',
    6,
    '醜',
    5,
    '醤',
    5,
    '醫醬醰醱醲醳醶醷醸醹醻'
  ],
  [
    'e180',
    '醼',
    10,
    '釈釋釐釒',
    9,
    '針',
    8,
    '帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺'
  ],
  ['e240', '釦', 62],
  [
    'e280',
    '鈥',
    32,
    '狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧',
    5,
    '饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂'
  ],
  ['e340', '鉆', 45, '鉵', 16],
  [
    'e380',
    '銆',
    7,
    '銏',
    24,
    '恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾'
  ],
  ['e440', '銨', 5, '銯', 24, '鋉', 31],
  [
    'e480',
    '鋩',
    32,
    '洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑'
  ],
  ['e540', '錊', 51, '錿', 10],
  [
    'e580',
    '鍊',
    31,
    '鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣'
  ],
  ['e640', '鍬', 34, '鎐', 27],
  [
    'e680',
    '鎬',
    29,
    '鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩'
  ],
  ['e740', '鏎', 7, '鏗', 54],
  [
    'e780',
    '鐎',
    32,
    '纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡',
    6,
    '缪缫缬缭缯',
    4,
    '缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬'
  ],
  ['e840', '鐯', 14, '鐿', 43, '鑬鑭鑮鑯'],
  [
    'e880',
    '鑰',
    20,
    '钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹'
  ],
  ['e940', '锧锳锽镃镈镋镕镚镠镮镴镵長', 7, '門', 42],
  [
    'e980',
    '閫',
    32,
    '椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋'
  ],
  [
    'ea40',
    '闌',
    27,
    '闬闿阇阓阘阛阞阠阣',
    6,
    '阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗'
  ],
  [
    'ea80',
    '陘陙陚陜陝陞陠陣陥陦陫陭',
    4,
    '陳陸',
    12,
    '隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰'
  ],
  [
    'eb40',
    '隌階隑隒隓隕隖隚際隝',
    9,
    '隨',
    7,
    '隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖',
    9,
    '雡',
    6,
    '雫'
  ],
  [
    'eb80',
    '雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗',
    4,
    '霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻'
  ],
  [
    'ec40',
    '霡',
    8,
    '霫霬霮霯霱霳',
    4,
    '霺霻霼霽霿',
    18,
    '靔靕靗靘靚靜靝靟靣靤靦靧靨靪',
    7
  ],
  [
    'ec80',
    '靲靵靷',
    4,
    '靽',
    7,
    '鞆',
    4,
    '鞌鞎鞏鞐鞓鞕鞖鞗鞙',
    4,
    '臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐'
  ],
  ['ed40', '鞞鞟鞡鞢鞤', 6, '鞬鞮鞰鞱鞳鞵', 46],
  [
    'ed80',
    '韤韥韨韮',
    4,
    '韴韷',
    23,
    '怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨'
  ],
  ['ee40', '頏', 62],
  [
    'ee80',
    '顎',
    32,
    '睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶',
    4,
    '钼钽钿铄铈',
    6,
    '铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪'
  ],
  ['ef40', '顯', 5, '颋颎颒颕颙颣風', 37, '飏飐飔飖飗飛飜飝飠', 4],
  [
    'ef80',
    '飥飦飩',
    30,
    '铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒',
    4,
    '锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤',
    8,
    '镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔'
  ],
  ['f040', '餈', 4, '餎餏餑', 28, '餯', 26],
  [
    'f080',
    '饊',
    9,
    '饖',
    12,
    '饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨',
    4,
    '鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦',
    6,
    '鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙'
  ],
  ['f140', '馌馎馚', 10, '馦馧馩', 47],
  [
    'f180',
    '駙',
    32,
    '瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃'
  ],
  ['f240', '駺', 62],
  [
    'f280',
    '騹',
    32,
    '颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒'
  ],
  [
    'f340',
    '驚',
    17,
    '驲骃骉骍骎骔骕骙骦骩',
    6,
    '骲骳骴骵骹骻骽骾骿髃髄髆',
    4,
    '髍髎髏髐髒體髕髖髗髙髚髛髜'
  ],
  [
    'f380',
    '髝髞髠髢髣髤髥髧髨髩髪髬髮髰',
    8,
    '髺髼',
    6,
    '鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋'
  ],
  [
    'f440',
    '鬇鬉',
    5,
    '鬐鬑鬒鬔',
    10,
    '鬠鬡鬢鬤',
    10,
    '鬰鬱鬳',
    7,
    '鬽鬾鬿魀魆魊魋魌魎魐魒魓魕',
    5
  ],
  [
    'f480',
    '魛',
    32,
    '簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤'
  ],
  ['f540', '魼', 62],
  [
    'f580',
    '鮻',
    32,
    '酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜'
  ],
  ['f640', '鯜', 62],
  [
    'f680',
    '鰛',
    32,
    '觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅',
    5,
    '龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞',
    5,
    '鲥',
    4,
    '鲫鲭鲮鲰',
    7,
    '鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋'
  ],
  ['f740', '鰼', 62],
  [
    'f780',
    '鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾',
    4,
    '鳈鳉鳑鳒鳚鳛鳠鳡鳌',
    4,
    '鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄'
  ],
  ['f840', '鳣', 62],
  ['f880', '鴢', 32],
  ['f940', '鵃', 62],
  ['f980', '鶂', 32],
  ['fa40', '鶣', 62],
  ['fa80', '鷢', 32],
  [
    'fb40',
    '鸃',
    27,
    '鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴',
    9,
    '麀'
  ],
  ['fb80', '麁麃麄麅麆麉麊麌', 5, '麔', 8, '麞麠', 5, '麧麨麩麪'],
  [
    'fc40',
    '麫',
    8,
    '麵麶麷麹麺麼麿',
    4,
    '黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰',
    8,
    '黺黽黿',
    6
  ],
  ['fc80', '鼆', 4, '鼌鼏鼑鼒鼔鼕鼖鼘鼚', 5, '鼡鼣', 8, '鼭鼮鼰鼱'],
  ['fd40', '鼲', 4, '鼸鼺鼼鼿', 4, '齅', 10, '齒', 38],
  ['fd80', '齹', 5, '龁龂龍', 11, '龜龝龞龡', 4, '郎凉秊裏隣'],
  ['fe40', '兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩']
]

const require$$3 = [
  ['a140', '', 62],
  ['a180', '', 32],
  ['a240', '', 62],
  ['a280', '', 32],
  ['a2ab', '', 5],
  ['a2e3', '€'],
  ['a2ef', ''],
  ['a2fd', ''],
  ['a340', '', 62],
  ['a380', '', 31, '　'],
  ['a440', '', 62],
  ['a480', '', 32],
  ['a4f4', '', 10],
  ['a540', '', 62],
  ['a580', '', 32],
  ['a5f7', '', 7],
  ['a640', '', 62],
  ['a680', '', 32],
  ['a6b9', '', 7],
  ['a6d9', '', 6],
  ['a6ec', ''],
  ['a6f3', ''],
  ['a6f6', '', 8],
  ['a740', '', 62],
  ['a780', '', 32],
  ['a7c2', '', 14],
  ['a7f2', '', 12],
  ['a896', '', 10],
  ['a8bc', 'ḿ'],
  ['a8bf', 'ǹ'],
  ['a8c1', ''],
  ['a8ea', '', 20],
  ['a958', ''],
  ['a95b', ''],
  ['a95d', ''],
  ['a989', '〾⿰', 11],
  ['a997', '', 12],
  ['a9f0', '', 14],
  ['aaa1', '', 93],
  ['aba1', '', 93],
  ['aca1', '', 93],
  ['ada1', '', 93],
  ['aea1', '', 93],
  ['afa1', '', 93],
  ['d7fa', '', 4],
  ['f8a1', '', 93],
  ['f9a1', '', 93],
  ['faa1', '', 93],
  ['fba1', '', 93],
  ['fca1', '', 93],
  ['fda1', '', 93],
  [
    'fe50',
    '⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌'
  ],
  ['fe80', '䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓', 6, '䶮', 93],
  ['8135f437', '']
]

const uChars = [
  128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276,
  284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506,
  594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215,
  8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482,
  8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748,
  8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896,
  8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680,
  9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947,
  11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351,
  12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218,
  13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703,
  14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330,
  17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814,
  18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244,
  59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478,
  59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034,
  64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536
]
const gbChars = [
  0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148,
  172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443,
  544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927,
  7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240,
  8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401,
  8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936,
  8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162,
  9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366,
  11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716,
  11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384,
  12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919,
  13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481,
  16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915,
  17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470,
  33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550,
  37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076,
  38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189000
]
const require$$4$1 = {
  uChars: uChars,
  gbChars: gbChars
}

const require$$5$1 = [
  ['0', '\u0000', 127],
  ['8141', '갂갃갅갆갋', 4, '갘갞갟갡갢갣갥', 6, '갮갲갳갴'],
  ['8161', '갵갶갷갺갻갽갾갿걁', 9, '걌걎', 5, '걕'],
  [
    '8181',
    '걖걗걙걚걛걝',
    18,
    '걲걳걵걶걹걻',
    4,
    '겂겇겈겍겎겏겑겒겓겕',
    6,
    '겞겢',
    5,
    '겫겭겮겱',
    6,
    '겺겾겿곀곂곃곅곆곇곉곊곋곍',
    7,
    '곖곘',
    7,
    '곢곣곥곦곩곫곭곮곲곴곷',
    4,
    '곾곿괁괂괃괅괇',
    4,
    '괎괐괒괓'
  ],
  ['8241', '괔괕괖괗괙괚괛괝괞괟괡', 7, '괪괫괮', 5],
  ['8261', '괶괷괹괺괻괽', 6, '굆굈굊', 5, '굑굒굓굕굖굗'],
  [
    '8281',
    '굙',
    7,
    '굢굤',
    7,
    '굮굯굱굲굷굸굹굺굾궀궃',
    4,
    '궊궋궍궎궏궑',
    10,
    '궞',
    5,
    '궥',
    17,
    '궸',
    7,
    '귂귃귅귆귇귉',
    6,
    '귒귔',
    7,
    '귝귞귟귡귢귣귥',
    18
  ],
  ['8341', '귺귻귽귾긂', 5, '긊긌긎', 5, '긕', 7],
  ['8361', '긝', 18, '긲긳긵긶긹긻긼'],
  [
    '8381',
    '긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗',
    4,
    '깞깢깣깤깦깧깪깫깭깮깯깱',
    6,
    '깺깾',
    5,
    '꺆',
    5,
    '꺍',
    46,
    '꺿껁껂껃껅',
    6,
    '껎껒',
    5,
    '껚껛껝',
    8
  ],
  ['8441', '껦껧껩껪껬껮', 5, '껵껶껷껹껺껻껽', 8],
  ['8461', '꼆꼉꼊꼋꼌꼎꼏꼑', 18],
  [
    '8481',
    '꼤',
    7,
    '꼮꼯꼱꼳꼵',
    6,
    '꼾꽀꽄꽅꽆꽇꽊',
    5,
    '꽑',
    10,
    '꽞',
    5,
    '꽦',
    18,
    '꽺',
    5,
    '꾁꾂꾃꾅꾆꾇꾉',
    6,
    '꾒꾓꾔꾖',
    5,
    '꾝',
    26,
    '꾺꾻꾽꾾'
  ],
  ['8541', '꾿꿁', 5, '꿊꿌꿏', 4, '꿕', 6, '꿝', 4],
  ['8561', '꿢', 5, '꿪', 5, '꿲꿳꿵꿶꿷꿹', 6, '뀂뀃'],
  [
    '8581',
    '뀅',
    6,
    '뀍뀎뀏뀑뀒뀓뀕',
    6,
    '뀞',
    9,
    '뀩',
    26,
    '끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞',
    29,
    '끾끿낁낂낃낅',
    6,
    '낎낐낒',
    5,
    '낛낝낞낣낤'
  ],
  ['8641', '낥낦낧낪낰낲낶낷낹낺낻낽', 6, '냆냊', 5, '냒'],
  ['8661', '냓냕냖냗냙', 6, '냡냢냣냤냦', 10],
  [
    '8681',
    '냱',
    22,
    '넊넍넎넏넑넔넕넖넗넚넞',
    4,
    '넦넧넩넪넫넭',
    6,
    '넶넺',
    5,
    '녂녃녅녆녇녉',
    6,
    '녒녓녖녗녙녚녛녝녞녟녡',
    22,
    '녺녻녽녾녿놁놃',
    4,
    '놊놌놎놏놐놑놕놖놗놙놚놛놝'
  ],
  ['8741', '놞', 9, '놩', 15],
  ['8761', '놹', 18, '뇍뇎뇏뇑뇒뇓뇕'],
  [
    '8781',
    '뇖',
    5,
    '뇞뇠',
    7,
    '뇪뇫뇭뇮뇯뇱',
    7,
    '뇺뇼뇾',
    5,
    '눆눇눉눊눍',
    6,
    '눖눘눚',
    5,
    '눡',
    18,
    '눵',
    6,
    '눽',
    26,
    '뉙뉚뉛뉝뉞뉟뉡',
    6,
    '뉪',
    4
  ],
  ['8841', '뉯', 4, '뉶', 5, '뉽', 6, '늆늇늈늊', 4],
  ['8861', '늏늒늓늕늖늗늛', 4, '늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷'],
  [
    '8881',
    '늸',
    15,
    '닊닋닍닎닏닑닓',
    4,
    '닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉',
    6,
    '댒댖',
    5,
    '댝',
    54,
    '덗덙덚덝덠덡덢덣'
  ],
  ['8941', '덦덨덪덬덭덯덲덳덵덶덷덹', 6, '뎂뎆', 5, '뎍'],
  ['8961', '뎎뎏뎑뎒뎓뎕', 10, '뎢', 5, '뎩뎪뎫뎭'],
  [
    '8981',
    '뎮',
    21,
    '돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩',
    18,
    '돽',
    18,
    '됑',
    6,
    '됙됚됛됝됞됟됡',
    6,
    '됪됬',
    7,
    '됵',
    15
  ],
  ['8a41', '둅', 10, '둒둓둕둖둗둙', 6, '둢둤둦'],
  ['8a61', '둧', 4, '둭', 18, '뒁뒂'],
  [
    '8a81',
    '뒃',
    4,
    '뒉',
    19,
    '뒞',
    5,
    '뒥뒦뒧뒩뒪뒫뒭',
    7,
    '뒶뒸뒺',
    5,
    '듁듂듃듅듆듇듉',
    6,
    '듑듒듓듔듖',
    5,
    '듞듟듡듢듥듧',
    4,
    '듮듰듲',
    5,
    '듹',
    26,
    '딖딗딙딚딝'
  ],
  ['8b41', '딞', 5, '딦딫', 4, '딲딳딵딶딷딹', 6, '땂땆'],
  ['8b61', '땇땈땉땊땎땏땑땒땓땕', 6, '땞땢', 8],
  [
    '8b81',
    '땫',
    52,
    '떢떣떥떦떧떩떬떭떮떯떲떶',
    4,
    '떾떿뗁뗂뗃뗅',
    6,
    '뗎뗒',
    5,
    '뗙',
    18,
    '뗭',
    18
  ],
  ['8c41', '똀', 15, '똒똓똕똖똗똙', 4],
  ['8c61', '똞', 6, '똦', 5, '똭', 6, '똵', 5],
  [
    '8c81',
    '똻',
    12,
    '뙉',
    26,
    '뙥뙦뙧뙩',
    50,
    '뚞뚟뚡뚢뚣뚥',
    5,
    '뚭뚮뚯뚰뚲',
    16
  ],
  ['8d41', '뛃', 16, '뛕', 8],
  ['8d61', '뛞', 17, '뛱뛲뛳뛵뛶뛷뛹뛺'],
  [
    '8d81',
    '뛻',
    4,
    '뜂뜃뜄뜆',
    33,
    '뜪뜫뜭뜮뜱',
    6,
    '뜺뜼',
    7,
    '띅띆띇띉띊띋띍',
    6,
    '띖',
    9,
    '띡띢띣띥띦띧띩',
    6,
    '띲띴띶',
    5,
    '띾띿랁랂랃랅',
    6,
    '랎랓랔랕랚랛랝랞'
  ],
  ['8e41', '랟랡', 6, '랪랮', 5, '랶랷랹', 8],
  ['8e61', '럂', 4, '럈럊', 19],
  [
    '8e81',
    '럞',
    13,
    '럮럯럱럲럳럵',
    6,
    '럾렂',
    4,
    '렊렋렍렎렏렑',
    6,
    '렚렜렞',
    5,
    '렦렧렩렪렫렭',
    6,
    '렶렺',
    5,
    '롁롂롃롅',
    11,
    '롒롔',
    7,
    '롞롟롡롢롣롥',
    6,
    '롮롰롲',
    5,
    '롹롺롻롽',
    7
  ],
  ['8f41', '뢅', 7, '뢎', 17],
  ['8f61', '뢠', 7, '뢩', 6, '뢱뢲뢳뢵뢶뢷뢹', 4],
  [
    '8f81',
    '뢾뢿룂룄룆',
    5,
    '룍룎룏룑룒룓룕',
    7,
    '룞룠룢',
    5,
    '룪룫룭룮룯룱',
    6,
    '룺룼룾',
    5,
    '뤅',
    18,
    '뤙',
    6,
    '뤡',
    26,
    '뤾뤿륁륂륃륅',
    6,
    '륍륎륐륒',
    5
  ],
  ['9041', '륚륛륝륞륟륡', 6, '륪륬륮', 5, '륶륷륹륺륻륽'],
  ['9061', '륾', 5, '릆릈릋릌릏', 15],
  [
    '9081',
    '릟',
    12,
    '릮릯릱릲릳릵',
    6,
    '릾맀맂',
    5,
    '맊맋맍맓',
    4,
    '맚맜맟맠맢맦맧맩맪맫맭',
    6,
    '맶맻',
    4,
    '먂',
    5,
    '먉',
    11,
    '먖',
    33,
    '먺먻먽먾먿멁멃멄멅멆'
  ],
  ['9141', '멇멊멌멏멐멑멒멖멗멙멚멛멝', 6, '멦멪', 5],
  ['9161', '멲멳멵멶멷멹', 9, '몆몈몉몊몋몍', 5],
  [
    '9181',
    '몓',
    20,
    '몪몭몮몯몱몳',
    4,
    '몺몼몾',
    5,
    '뫅뫆뫇뫉',
    14,
    '뫚',
    33,
    '뫽뫾뫿묁묂묃묅',
    7,
    '묎묐묒',
    5,
    '묙묚묛묝묞묟묡',
    6
  ],
  ['9241', '묨묪묬', 7, '묷묹묺묿', 4, '뭆뭈뭊뭋뭌뭎뭑뭒'],
  ['9261', '뭓뭕뭖뭗뭙', 7, '뭢뭤', 7, '뭭', 4],
  [
    '9281',
    '뭲',
    21,
    '뮉뮊뮋뮍뮎뮏뮑',
    18,
    '뮥뮦뮧뮩뮪뮫뮭',
    6,
    '뮵뮶뮸',
    7,
    '믁믂믃믅믆믇믉',
    6,
    '믑믒믔',
    35,
    '믺믻믽믾밁'
  ],
  ['9341', '밃', 4, '밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵'],
  ['9361', '밶밷밹', 6, '뱂뱆뱇뱈뱊뱋뱎뱏뱑', 8],
  [
    '9381',
    '뱚뱛뱜뱞',
    37,
    '벆벇벉벊벍벏',
    4,
    '벖벘벛',
    4,
    '벢벣벥벦벩',
    6,
    '벲벶',
    5,
    '벾벿볁볂볃볅',
    7,
    '볎볒볓볔볖볗볙볚볛볝',
    22,
    '볷볹볺볻볽'
  ],
  ['9441', '볾', 5, '봆봈봊', 5, '봑봒봓봕', 8],
  ['9461', '봞', 5, '봥', 6, '봭', 12],
  [
    '9481',
    '봺',
    5,
    '뵁',
    6,
    '뵊뵋뵍뵎뵏뵑',
    6,
    '뵚',
    9,
    '뵥뵦뵧뵩',
    22,
    '붂붃붅붆붋',
    4,
    '붒붔붖붗붘붛붝',
    6,
    '붥',
    10,
    '붱',
    6,
    '붹',
    24
  ],
  ['9541', '뷒뷓뷖뷗뷙뷚뷛뷝', 11, '뷪', 5, '뷱'],
  ['9561', '뷲뷳뷵뷶뷷뷹', 6, '븁븂븄븆', 5, '븎븏븑븒븓'],
  [
    '9581',
    '븕',
    6,
    '븞븠',
    35,
    '빆빇빉빊빋빍빏',
    4,
    '빖빘빜빝빞빟빢빣빥빦빧빩빫',
    4,
    '빲빶',
    4,
    '빾빿뺁뺂뺃뺅',
    6,
    '뺎뺒',
    5,
    '뺚',
    13,
    '뺩',
    14
  ],
  ['9641', '뺸', 23, '뻒뻓'],
  ['9661', '뻕뻖뻙', 6, '뻡뻢뻦', 5, '뻭', 8],
  [
    '9681',
    '뻶',
    10,
    '뼂',
    5,
    '뼊',
    13,
    '뼚뼞',
    33,
    '뽂뽃뽅뽆뽇뽉',
    6,
    '뽒뽓뽔뽖',
    44
  ],
  ['9741', '뾃', 16, '뾕', 8],
  ['9761', '뾞', 17, '뾱', 7],
  ['9781', '뾹', 11, '뿆', 5, '뿎뿏뿑뿒뿓뿕', 6, '뿝뿞뿠뿢', 89, '쀽쀾쀿'],
  ['9841', '쁀', 16, '쁒', 5, '쁙쁚쁛'],
  ['9861', '쁝쁞쁟쁡', 6, '쁪', 15],
  [
    '9881',
    '쁺',
    21,
    '삒삓삕삖삗삙',
    6,
    '삢삤삦',
    5,
    '삮삱삲삷',
    4,
    '삾샂샃샄샆샇샊샋샍샎샏샑',
    6,
    '샚샞',
    5,
    '샦샧샩샪샫샭',
    6,
    '샶샸샺',
    5,
    '섁섂섃섅섆섇섉',
    6,
    '섑섒섓섔섖',
    5,
    '섡섢섥섨섩섪섫섮'
  ],
  ['9941', '섲섳섴섵섷섺섻섽섾섿셁', 6, '셊셎', 5, '셖셗'],
  ['9961', '셙셚셛셝', 6, '셦셪', 5, '셱셲셳셵셶셷셹셺셻'],
  [
    '9981',
    '셼',
    8,
    '솆',
    5,
    '솏솑솒솓솕솗',
    4,
    '솞솠솢솣솤솦솧솪솫솭솮솯솱',
    11,
    '솾',
    5,
    '쇅쇆쇇쇉쇊쇋쇍',
    6,
    '쇕쇖쇙',
    6,
    '쇡쇢쇣쇥쇦쇧쇩',
    6,
    '쇲쇴',
    7,
    '쇾쇿숁숂숃숅',
    6,
    '숎숐숒',
    5,
    '숚숛숝숞숡숢숣'
  ],
  ['9a41', '숤숥숦숧숪숬숮숰숳숵', 16],
  ['9a61', '쉆쉇쉉', 6, '쉒쉓쉕쉖쉗쉙', 6, '쉡쉢쉣쉤쉦'],
  [
    '9a81',
    '쉧',
    4,
    '쉮쉯쉱쉲쉳쉵',
    6,
    '쉾슀슂',
    5,
    '슊',
    5,
    '슑',
    6,
    '슙슚슜슞',
    5,
    '슦슧슩슪슫슮',
    5,
    '슶슸슺',
    33,
    '싞싟싡싢싥',
    5,
    '싮싰싲싳싴싵싷싺싽싾싿쌁',
    6,
    '쌊쌋쌎쌏'
  ],
  ['9b41', '쌐쌑쌒쌖쌗쌙쌚쌛쌝', 6, '쌦쌧쌪', 8],
  ['9b61', '쌳', 17, '썆', 7],
  [
    '9b81',
    '썎',
    25,
    '썪썫썭썮썯썱썳',
    4,
    '썺썻썾',
    5,
    '쎅쎆쎇쎉쎊쎋쎍',
    50,
    '쏁',
    22,
    '쏚'
  ],
  ['9c41', '쏛쏝쏞쏡쏣', 4, '쏪쏫쏬쏮', 5, '쏶쏷쏹', 5],
  ['9c61', '쏿', 8, '쐉', 6, '쐑', 9],
  [
    '9c81',
    '쐛',
    8,
    '쐥',
    6,
    '쐭쐮쐯쐱쐲쐳쐵',
    6,
    '쐾',
    9,
    '쑉',
    26,
    '쑦쑧쑩쑪쑫쑭',
    6,
    '쑶쑷쑸쑺',
    5,
    '쒁',
    18,
    '쒕',
    6,
    '쒝',
    12
  ],
  ['9d41', '쒪', 13, '쒹쒺쒻쒽', 8],
  ['9d61', '쓆', 25],
  [
    '9d81',
    '쓠',
    8,
    '쓪',
    5,
    '쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂',
    9,
    '씍씎씏씑씒씓씕',
    6,
    '씝',
    10,
    '씪씫씭씮씯씱',
    6,
    '씺씼씾',
    5,
    '앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩',
    6,
    '앲앶',
    5,
    '앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔'
  ],
  ['9e41', '얖얙얚얛얝얞얟얡', 7, '얪', 9, '얶'],
  ['9e61', '얷얺얿', 4, '엋엍엏엒엓엕엖엗엙', 6, '엢엤엦엧'],
  [
    '9e81',
    '엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑',
    6,
    '옚옝',
    6,
    '옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉',
    6,
    '왒왖',
    5,
    '왞왟왡',
    10,
    '왭왮왰왲',
    5,
    '왺왻왽왾왿욁',
    6,
    '욊욌욎',
    5,
    '욖욗욙욚욛욝',
    6,
    '욦'
  ],
  ['9f41', '욨욪', 5, '욲욳욵욶욷욻', 4, '웂웄웆', 5, '웎'],
  ['9f61', '웏웑웒웓웕', 6, '웞웟웢', 5, '웪웫웭웮웯웱웲'],
  [
    '9f81',
    '웳',
    4,
    '웺웻웼웾',
    5,
    '윆윇윉윊윋윍',
    6,
    '윖윘윚',
    5,
    '윢윣윥윦윧윩',
    6,
    '윲윴윶윸윹윺윻윾윿읁읂읃읅',
    4,
    '읋읎읐읙읚읛읝읞읟읡',
    6,
    '읩읪읬',
    7,
    '읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛',
    4,
    '잢잧',
    4,
    '잮잯잱잲잳잵잶잷'
  ],
  ['a041', '잸잹잺잻잾쟂', 5, '쟊쟋쟍쟏쟑', 6, '쟙쟚쟛쟜'],
  ['a061', '쟞', 5, '쟥쟦쟧쟩쟪쟫쟭', 13],
  [
    'a081',
    '쟻',
    4,
    '젂젃젅젆젇젉젋',
    4,
    '젒젔젗',
    4,
    '젞젟젡젢젣젥',
    6,
    '젮젰젲',
    5,
    '젹젺젻젽젾젿졁',
    6,
    '졊졋졎',
    5,
    '졕',
    26,
    '졲졳졵졶졷졹졻',
    4,
    '좂좄좈좉좊좎',
    5,
    '좕',
    7,
    '좞좠좢좣좤'
  ],
  ['a141', '좥좦좧좩', 18, '좾좿죀죁'],
  ['a161', '죂죃죅죆죇죉죊죋죍', 6, '죖죘죚', 5, '죢죣죥'],
  [
    'a181',
    '죦',
    14,
    '죶',
    5,
    '죾죿줁줂줃줇',
    4,
    '줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈',
    9,
    '±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢'
  ],
  ['a241', '줐줒', 5, '줙', 18],
  ['a261', '줭', 6, '줵', 18],
  [
    'a281',
    '쥈',
    7,
    '쥒쥓쥕쥖쥗쥙',
    6,
    '쥢쥤',
    7,
    '쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®'
  ],
  ['a341', '쥱쥲쥳쥵', 6, '쥽', 10, '즊즋즍즎즏'],
  ['a361', '즑', 6, '즚즜즞', 16],
  ['a381', '즯', 16, '짂짃짅짆짉짋', 4, '짒짔짗짘짛！', 58, '￦］', 32, '￣'],
  ['a441', '짞짟짡짣짥짦짨짩짪짫짮짲', 5, '짺짻짽짾짿쨁쨂쨃쨄'],
  ['a461', '쨅쨆쨇쨊쨎', 5, '쨕쨖쨗쨙', 12],
  ['a481', '쨦쨧쨨쨪', 28, 'ㄱ', 93],
  ['a541', '쩇', 4, '쩎쩏쩑쩒쩓쩕', 6, '쩞쩢', 5, '쩩쩪'],
  ['a561', '쩫', 17, '쩾', 5, '쪅쪆'],
  ['a581', '쪇', 16, '쪙', 14, 'ⅰ', 9],
  ['a5b0', 'Ⅰ', 9],
  ['a5c1', 'Α', 16, 'Σ', 6],
  ['a5e1', 'α', 16, 'σ', 6],
  ['a641', '쪨', 19, '쪾쪿쫁쫂쫃쫅'],
  ['a661', '쫆', 5, '쫎쫐쫒쫔쫕쫖쫗쫚', 5, '쫡', 6],
  [
    'a681',
    '쫨쫩쫪쫫쫭',
    6,
    '쫵',
    18,
    '쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃',
    7
  ],
  ['a741', '쬋', 4, '쬑쬒쬓쬕쬖쬗쬙', 6, '쬢', 7],
  ['a761', '쬪', 22, '쭂쭃쭄'],
  [
    'a781',
    '쭅쭆쭇쭊쭋쭍쭎쭏쭑',
    6,
    '쭚쭛쭜쭞',
    5,
    '쭥',
    7,
    '㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙',
    9,
    '㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰',
    9,
    '㎀',
    4,
    '㎺',
    5,
    '㎐',
    4,
    'Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆'
  ],
  ['a841', '쭭', 10, '쭺', 14],
  ['a861', '쮉', 18, '쮝', 6],
  ['a881', '쮤', 19, '쮹', 11, 'ÆÐªĦ'],
  ['a8a6', 'Ĳ'],
  ['a8a8', 'ĿŁØŒºÞŦŊ'],
  ['a8b1', '㉠', 27, 'ⓐ', 25, '①', 14, '½⅓⅔¼¾⅛⅜⅝⅞'],
  ['a941', '쯅', 14, '쯕', 10],
  ['a961', '쯠쯡쯢쯣쯥쯦쯨쯪', 18],
  [
    'a981',
    '쯽',
    14,
    '찎찏찑찒찓찕',
    6,
    '찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀',
    27,
    '⒜',
    25,
    '⑴',
    14,
    '¹²³⁴ⁿ₁₂₃₄'
  ],
  ['aa41', '찥찦찪찫찭찯찱', 6, '찺찿', 4, '챆챇챉챊챋챍챎'],
  ['aa61', '챏', 4, '챖챚', 5, '챡챢챣챥챧챩', 6, '챱챲'],
  ['aa81', '챳챴챶', 29, 'ぁ', 82],
  ['ab41', '첔첕첖첗첚첛첝첞첟첡', 6, '첪첮', 5, '첶첷첹'],
  ['ab61', '첺첻첽', 6, '쳆쳈쳊', 5, '쳑쳒쳓쳕', 5],
  ['ab81', '쳛', 8, '쳥', 6, '쳭쳮쳯쳱', 12, 'ァ', 85],
  ['ac41', '쳾쳿촀촂', 5, '촊촋촍촎촏촑', 6, '촚촜촞촟촠'],
  ['ac61', '촡촢촣촥촦촧촩촪촫촭', 11, '촺', 4],
  ['ac81', '촿', 28, '쵝쵞쵟А', 5, 'ЁЖ', 25],
  ['acd1', 'а', 5, 'ёж', 25],
  ['ad41', '쵡쵢쵣쵥', 6, '쵮쵰쵲', 5, '쵹', 7],
  ['ad61', '춁', 6, '춉', 10, '춖춗춙춚춛춝춞춟'],
  ['ad81', '춠춡춢춣춦춨춪', 5, '춱', 18, '췅'],
  ['ae41', '췆', 5, '췍췎췏췑', 16],
  ['ae61', '췢', 5, '췩췪췫췭췮췯췱', 6, '췺췼췾', 4],
  ['ae81', '츃츅츆츇츉츊츋츍', 6, '츕츖츗츘츚', 5, '츢츣츥츦츧츩츪츫'],
  ['af41', '츬츭츮츯츲츴츶', 19],
  ['af61', '칊', 13, '칚칛칝칞칢', 5, '칪칬'],
  ['af81', '칮', 5, '칶칷칹칺칻칽', 6, '캆캈캊', 5, '캒캓캕캖캗캙'],
  ['b041', '캚', 5, '캢캦', 5, '캮', 12],
  ['b061', '캻', 5, '컂', 19],
  [
    'b081',
    '컖',
    13,
    '컦컧컩컪컭',
    6,
    '컶컺',
    5,
    '가각간갇갈갉갊감',
    7,
    '같',
    4,
    '갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆'
  ],
  ['b141', '켂켃켅켆켇켉', 6, '켒켔켖', 5, '켝켞켟켡켢켣'],
  ['b161', '켥', 6, '켮켲', 5, '켹', 11],
  [
    'b181',
    '콅',
    14,
    '콖콗콙콚콛콝',
    6,
    '콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸'
  ],
  ['b241', '콭콮콯콲콳콵콶콷콹', 6, '쾁쾂쾃쾄쾆', 5, '쾍'],
  ['b261', '쾎', 18, '쾢', 5, '쾩'],
  [
    'b281',
    '쾪',
    5,
    '쾱',
    18,
    '쿅',
    6,
    '깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙'
  ],
  ['b341', '쿌', 19, '쿢쿣쿥쿦쿧쿩'],
  ['b361', '쿪', 5, '쿲쿴쿶', 5, '쿽쿾쿿퀁퀂퀃퀅', 5],
  [
    'b381',
    '퀋',
    5,
    '퀒',
    5,
    '퀙',
    19,
    '끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫',
    4,
    '낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝'
  ],
  ['b441', '퀮', 5, '퀶퀷퀹퀺퀻퀽', 6, '큆큈큊', 5],
  ['b461', '큑큒큓큕큖큗큙', 6, '큡', 10, '큮큯'],
  [
    'b481',
    '큱큲큳큵',
    6,
    '큾큿킀킂',
    18,
    '뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫',
    4,
    '닳담답닷',
    4,
    '닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥'
  ],
  ['b541', '킕', 14, '킦킧킩킪킫킭', 5],
  ['b561', '킳킶킸킺', 5, '탂탃탅탆탇탊', 5, '탒탖', 4],
  [
    'b581',
    '탛탞탟탡탢탣탥',
    6,
    '탮탲',
    5,
    '탹',
    11,
    '덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸'
  ],
  ['b641', '턅', 7, '턎', 17],
  ['b661', '턠', 15, '턲턳턵턶턷턹턻턼턽턾'],
  [
    'b681',
    '턿텂텆',
    5,
    '텎텏텑텒텓텕',
    6,
    '텞텠텢',
    5,
    '텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗'
  ],
  ['b741', '텮', 13, '텽', 6, '톅톆톇톉톊'],
  ['b761', '톋', 20, '톢톣톥톦톧'],
  [
    'b781',
    '톩',
    6,
    '톲톴톶톷톸톹톻톽톾톿퇁',
    14,
    '래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩'
  ],
  ['b841', '퇐', 7, '퇙', 17],
  ['b861', '퇫', 8, '퇵퇶퇷퇹', 13],
  [
    'b881',
    '툈툊',
    5,
    '툑',
    24,
    '륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많',
    4,
    '맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼'
  ],
  ['b941', '툪툫툮툯툱툲툳툵', 6, '툾퉀퉂', 5, '퉉퉊퉋퉌'],
  ['b961', '퉍', 14, '퉝', 6, '퉥퉦퉧퉨'],
  [
    'b981',
    '퉩',
    22,
    '튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바',
    4,
    '받',
    4,
    '밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗'
  ],
  ['ba41', '튍튎튏튒튓튔튖', 5, '튝튞튟튡튢튣튥', 6, '튭'],
  ['ba61', '튮튯튰튲', 5, '튺튻튽튾틁틃', 4, '틊틌', 5],
  [
    'ba81',
    '틒틓틕틖틗틙틚틛틝',
    6,
    '틦',
    9,
    '틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤'
  ],
  ['bb41', '틻', 4, '팂팄팆', 5, '팏팑팒팓팕팗', 4, '팞팢팣'],
  ['bb61', '팤팦팧팪팫팭팮팯팱', 6, '팺팾', 5, '퍆퍇퍈퍉'],
  [
    'bb81',
    '퍊',
    31,
    '빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤'
  ],
  ['bc41', '퍪', 17, '퍾퍿펁펂펃펅펆펇'],
  ['bc61', '펈펉펊펋펎펒', 5, '펚펛펝펞펟펡', 6, '펪펬펮'],
  [
    'bc81',
    '펯',
    4,
    '펵펶펷펹펺펻펽',
    6,
    '폆폇폊',
    5,
    '폑',
    5,
    '샥샨샬샴샵샷샹섀섄섈섐섕서',
    4,
    '섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭'
  ],
  ['bd41', '폗폙', 7, '폢폤', 7, '폮폯폱폲폳폵폶폷'],
  ['bd61', '폸폹폺폻폾퐀퐂', 5, '퐉', 13],
  [
    'bd81',
    '퐗',
    5,
    '퐞',
    25,
    '숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰'
  ],
  ['be41', '퐸', 7, '푁푂푃푅', 14],
  ['be61', '푔', 7, '푝푞푟푡푢푣푥', 7, '푮푰푱푲'],
  [
    'be81',
    '푳',
    4,
    '푺푻푽푾풁풃',
    4,
    '풊풌풎',
    5,
    '풕',
    8,
    '쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄',
    6,
    '엌엎'
  ],
  ['bf41', '풞', 10, '풪', 14],
  ['bf61', '풹', 18, '퓍퓎퓏퓑퓒퓓퓕'],
  [
    'bf81',
    '퓖',
    5,
    '퓝퓞퓠',
    7,
    '퓩퓪퓫퓭퓮퓯퓱',
    6,
    '퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염',
    5,
    '옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨'
  ],
  ['c041', '퓾', 5, '픅픆픇픉픊픋픍', 6, '픖픘', 5],
  ['c061', '픞', 25],
  [
    'c081',
    '픸픹픺픻픾픿핁핂핃핅',
    6,
    '핎핐핒',
    5,
    '핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응',
    7,
    '읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊'
  ],
  ['c141', '핤핦핧핪핬핮', 5, '핶핷핹핺핻핽', 6, '햆햊햋'],
  ['c161', '햌햍햎햏햑', 19, '햦햧'],
  [
    'c181',
    '햨',
    31,
    '점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓'
  ],
  ['c241', '헊헋헍헎헏헑헓', 4, '헚헜헞', 5, '헦헧헩헪헫헭헮'],
  ['c261', '헯', 4, '헶헸헺', 5, '혂혃혅혆혇혉', 6, '혒'],
  [
    'c281',
    '혖',
    5,
    '혝혞혟혡혢혣혥',
    7,
    '혮',
    9,
    '혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻'
  ],
  ['c341', '혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝', 4],
  ['c361', '홢', 4, '홨홪', 5, '홲홳홵', 11],
  [
    'c381',
    '횁횂횄횆',
    5,
    '횎횏횑횒횓횕',
    7,
    '횞횠횢',
    5,
    '횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층'
  ],
  ['c441', '횫횭횮횯횱', 7, '횺횼', 7, '훆훇훉훊훋'],
  ['c461', '훍훎훏훐훒훓훕훖훘훚', 5, '훡훢훣훥훦훧훩', 4],
  [
    'c481',
    '훮훯훱훲훳훴훶',
    5,
    '훾훿휁휂휃휅',
    11,
    '휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼'
  ],
  ['c541', '휕휖휗휚휛휝휞휟휡', 6, '휪휬휮', 5, '휶휷휹'],
  ['c561', '휺휻휽', 6, '흅흆흈흊', 5, '흒흓흕흚', 4],
  [
    'c581',
    '흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵',
    6,
    '흾흿힀힂',
    5,
    '힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜'
  ],
  ['c641', '힍힎힏힑', 6, '힚힜힞', 5],
  [
    'c6a1',
    '퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁'
  ],
  [
    'c7a1',
    '퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠'
  ],
  [
    'c8a1',
    '혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝'
  ],
  [
    'caa1',
    '伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕'
  ],
  [
    'cba1',
    '匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢'
  ],
  [
    'cca1',
    '瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械'
  ],
  [
    'cda1',
    '棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜'
  ],
  [
    'cea1',
    '科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾'
  ],
  [
    'cfa1',
    '區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴'
  ],
  [
    'd0a1',
    '鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣'
  ],
  [
    'd1a1',
    '朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩',
    5,
    '那樂',
    4,
    '諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉'
  ],
  [
    'd2a1',
    '納臘蠟衲囊娘廊',
    4,
    '乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧',
    5,
    '駑魯',
    10,
    '濃籠聾膿農惱牢磊腦賂雷尿壘',
    7,
    '嫩訥杻紐勒',
    5,
    '能菱陵尼泥匿溺多茶'
  ],
  [
    'd3a1',
    '丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃'
  ],
  [
    'd4a1',
    '棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅'
  ],
  [
    'd5a1',
    '蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣'
  ],
  [
    'd6a1',
    '煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼'
  ],
  [
    'd7a1',
    '遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬'
  ],
  [
    'd8a1',
    '立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅'
  ],
  [
    'd9a1',
    '蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文'
  ],
  [
    'daa1',
    '汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑'
  ],
  [
    'dba1',
    '發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖'
  ],
  [
    'dca1',
    '碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦'
  ],
  [
    'dda1',
    '孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥'
  ],
  [
    'dea1',
    '脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索'
  ],
  [
    'dfa1',
    '傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署'
  ],
  [
    'e0a1',
    '胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬'
  ],
  [
    'e1a1',
    '聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁'
  ],
  [
    'e2a1',
    '戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧'
  ],
  [
    'e3a1',
    '嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁'
  ],
  [
    'e4a1',
    '沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額'
  ],
  [
    'e5a1',
    '櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬'
  ],
  [
    'e6a1',
    '旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒'
  ],
  [
    'e7a1',
    '簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳'
  ],
  [
    'e8a1',
    '烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療'
  ],
  [
    'e9a1',
    '窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓'
  ],
  [
    'eaa1',
    '運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜'
  ],
  [
    'eba1',
    '濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼'
  ],
  [
    'eca1',
    '議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄'
  ],
  [
    'eda1',
    '立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長'
  ],
  [
    'eea1',
    '障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱'
  ],
  [
    'efa1',
    '煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖'
  ],
  [
    'f0a1',
    '靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫'
  ],
  [
    'f1a1',
    '踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只'
  ],
  [
    'f2a1',
    '咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯'
  ],
  [
    'f3a1',
    '鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策'
  ],
  [
    'f4a1',
    '責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢'
  ],
  [
    'f5a1',
    '椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃'
  ],
  [
    'f6a1',
    '贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託'
  ],
  [
    'f7a1',
    '鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑'
  ],
  [
    'f8a1',
    '阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃'
  ],
  [
    'f9a1',
    '品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航'
  ],
  [
    'faa1',
    '行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型'
  ],
  [
    'fba1',
    '形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵'
  ],
  [
    'fca1',
    '禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆'
  ],
  [
    'fda1',
    '爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰'
  ]
]

const require$$6 = [
  ['0', '\u0000', 127],
  [
    'a140',
    '　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚'
  ],
  [
    'a1a1',
    '﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢',
    4,
    '～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／'
  ],
  [
    'a240',
    '＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁',
    7,
    '▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭'
  ],
  ['a2a1', '╮╰╯═╞╪╡◢◣◥◤╱╲╳０', 9, 'Ⅰ', 9, '〡', 8, '十卄卅Ａ', 25, 'ａ', 21],
  ['a340', 'ｗｘｙｚΑ', 16, 'Σ', 6, 'α', 16, 'σ', 6, 'ㄅ', 10],
  ['a3a1', 'ㄐ', 25, '˙ˉˊˇˋ'],
  ['a3e1', '€'],
  [
    'a440',
    '一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才'
  ],
  [
    'a4a1',
    '丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙'
  ],
  [
    'a540',
    '世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外'
  ],
  [
    'a5a1',
    '央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全'
  ],
  [
    'a640',
    '共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年'
  ],
  [
    'a6a1',
    '式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣'
  ],
  [
    'a740',
    '作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍'
  ],
  [
    'a7a1',
    '均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠'
  ],
  [
    'a840',
    '杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒'
  ],
  [
    'a8a1',
    '芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵'
  ],
  [
    'a940',
    '咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居'
  ],
  [
    'a9a1',
    '屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊'
  ],
  [
    'aa40',
    '昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠'
  ],
  [
    'aaa1',
    '炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附'
  ],
  [
    'ab40',
    '陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品'
  ],
  [
    'aba1',
    '哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷'
  ],
  [
    'ac40',
    '拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗'
  ],
  [
    'aca1',
    '活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄'
  ],
  [
    'ad40',
    '耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥'
  ],
  [
    'ada1',
    '迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪'
  ],
  [
    'ae40',
    '哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙'
  ],
  [
    'aea1',
    '恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓'
  ],
  [
    'af40',
    '浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷'
  ],
  [
    'afa1',
    '砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃'
  ],
  [
    'b040',
    '虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡'
  ],
  [
    'b0a1',
    '陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀'
  ],
  [
    'b140',
    '娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽'
  ],
  [
    'b1a1',
    '情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺'
  ],
  [
    'b240',
    '毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶'
  ],
  [
    'b2a1',
    '瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼'
  ],
  [
    'b340',
    '莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途'
  ],
  [
    'b3a1',
    '部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠'
  ],
  [
    'b440',
    '婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍'
  ],
  [
    'b4a1',
    '插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋'
  ],
  [
    'b540',
    '溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘'
  ],
  [
    'b5a1',
    '窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁'
  ],
  [
    'b640',
    '詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑'
  ],
  [
    'b6a1',
    '間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼'
  ],
  [
    'b740',
    '媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業'
  ],
  [
    'b7a1',
    '楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督'
  ],
  [
    'b840',
    '睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫'
  ],
  [
    'b8a1',
    '腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊'
  ],
  [
    'b940',
    '辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴'
  ],
  [
    'b9a1',
    '飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇'
  ],
  [
    'ba40',
    '愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢'
  ],
  [
    'baa1',
    '滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬'
  ],
  [
    'bb40',
    '罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤'
  ],
  [
    'bba1',
    '說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜'
  ],
  [
    'bc40',
    '劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂'
  ],
  [
    'bca1',
    '慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃'
  ],
  [
    'bd40',
    '瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯'
  ],
  [
    'bda1',
    '翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞'
  ],
  [
    'be40',
    '輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉'
  ],
  [
    'bea1',
    '鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡'
  ],
  [
    'bf40',
    '濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊'
  ],
  [
    'bfa1',
    '縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚'
  ],
  [
    'c040',
    '錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇'
  ],
  [
    'c0a1',
    '嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬'
  ],
  [
    'c140',
    '瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪'
  ],
  [
    'c1a1',
    '薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁'
  ],
  [
    'c240',
    '駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘'
  ],
  [
    'c2a1',
    '癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦'
  ],
  [
    'c340',
    '鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸'
  ],
  [
    'c3a1',
    '獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類'
  ],
  [
    'c440',
    '願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼'
  ],
  [
    'c4a1',
    '纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴'
  ],
  [
    'c540',
    '護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬'
  ],
  [
    'c5a1',
    '禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒'
  ],
  [
    'c640',
    '讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲'
  ],
  [
    'c940',
    '乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕'
  ],
  [
    'c9a1',
    '氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋'
  ],
  [
    'ca40',
    '汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘'
  ],
  [
    'caa1',
    '吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇'
  ],
  [
    'cb40',
    '杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓'
  ],
  [
    'cba1',
    '芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢'
  ],
  [
    'cc40',
    '坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋'
  ],
  [
    'cca1',
    '怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲'
  ],
  [
    'cd40',
    '泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺'
  ],
  [
    'cda1',
    '矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏'
  ],
  [
    'ce40',
    '哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛'
  ],
  [
    'cea1',
    '峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺'
  ],
  [
    'cf40',
    '柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂'
  ],
  [
    'cfa1',
    '洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀'
  ],
  [
    'd040',
    '穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪'
  ],
  [
    'd0a1',
    '苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱'
  ],
  [
    'd140',
    '唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧'
  ],
  [
    'd1a1',
    '恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤'
  ],
  [
    'd240',
    '毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸'
  ],
  [
    'd2a1',
    '牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐'
  ],
  [
    'd340',
    '笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢'
  ],
  [
    'd3a1',
    '荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐'
  ],
  [
    'd440',
    '酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅'
  ],
  [
    'd4a1',
    '唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏'
  ],
  [
    'd540',
    '崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟'
  ],
  [
    'd5a1',
    '捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉'
  ],
  [
    'd640',
    '淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏'
  ],
  [
    'd6a1',
    '痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟'
  ],
  [
    'd740',
    '耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷'
  ],
  [
    'd7a1',
    '蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪'
  ],
  [
    'd840',
    '釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷'
  ],
  [
    'd8a1',
    '堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔'
  ],
  [
    'd940',
    '惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒'
  ],
  [
    'd9a1',
    '晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞'
  ],
  [
    'da40',
    '湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖'
  ],
  [
    'daa1',
    '琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥'
  ],
  [
    'db40',
    '罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳'
  ],
  [
    'dba1',
    '菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺'
  ],
  [
    'dc40',
    '軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈'
  ],
  [
    'dca1',
    '隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆'
  ],
  [
    'dd40',
    '媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤'
  ],
  [
    'dda1',
    '搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼'
  ],
  [
    'de40',
    '毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓'
  ],
  [
    'dea1',
    '煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓'
  ],
  [
    'df40',
    '稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯'
  ],
  [
    'dfa1',
    '腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤'
  ],
  [
    'e040',
    '觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿'
  ],
  [
    'e0a1',
    '遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠'
  ],
  [
    'e140',
    '凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠'
  ],
  [
    'e1a1',
    '寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉'
  ],
  [
    'e240',
    '榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊'
  ],
  [
    'e2a1',
    '漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓'
  ],
  [
    'e340',
    '禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞'
  ],
  [
    'e3a1',
    '耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻'
  ],
  [
    'e440',
    '裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍'
  ],
  [
    'e4a1',
    '銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘'
  ],
  [
    'e540',
    '噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉'
  ],
  [
    'e5a1',
    '憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒'
  ],
  [
    'e640',
    '澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙'
  ],
  [
    'e6a1',
    '獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟'
  ],
  [
    'e740',
    '膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢'
  ],
  [
    'e7a1',
    '蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧'
  ],
  [
    'e840',
    '踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓'
  ],
  [
    'e8a1',
    '銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮'
  ],
  [
    'e940',
    '噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺'
  ],
  [
    'e9a1',
    '憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸'
  ],
  [
    'ea40',
    '澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙'
  ],
  [
    'eaa1',
    '瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘'
  ],
  [
    'eb40',
    '蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠'
  ],
  [
    'eba1',
    '諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌'
  ],
  [
    'ec40',
    '錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕'
  ],
  [
    'eca1',
    '魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎'
  ],
  [
    'ed40',
    '檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶'
  ],
  [
    'eda1',
    '瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞'
  ],
  [
    'ee40',
    '蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞'
  ],
  [
    'eea1',
    '謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜'
  ],
  [
    'ef40',
    '鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰'
  ],
  [
    'efa1',
    '鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶'
  ],
  [
    'f040',
    '璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒'
  ],
  [
    'f0a1',
    '臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧'
  ],
  [
    'f140',
    '蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪'
  ],
  [
    'f1a1',
    '鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰'
  ],
  [
    'f240',
    '徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛'
  ],
  [
    'f2a1',
    '礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕'
  ],
  [
    'f340',
    '譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦'
  ],
  [
    'f3a1',
    '鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲'
  ],
  [
    'f440',
    '嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩'
  ],
  [
    'f4a1',
    '禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿'
  ],
  [
    'f540',
    '鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛'
  ],
  [
    'f5a1',
    '鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥'
  ],
  [
    'f640',
    '蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺'
  ],
  [
    'f6a1',
    '騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚'
  ],
  [
    'f740',
    '糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊'
  ],
  [
    'f7a1',
    '驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾'
  ],
  [
    'f840',
    '讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏'
  ],
  [
    'f8a1',
    '齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚'
  ],
  [
    'f940',
    '纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊'
  ],
  [
    'f9a1',
    '龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓'
  ]
]

const require$$7$1 = [
  [
    '8740',
    '䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻'
  ],
  ['8767', '綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬'],
  [
    '87a1',
    '𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋'
  ],
  [
    '8840',
    '㇀',
    4,
    '𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ'
  ],
  ['88a1', 'ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛'],
  ['8940', '𪎩𡅅'],
  ['8943', '攊'],
  ['8946', '丽滝鵎釟'],
  [
    '894c',
    '𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮'
  ],
  ['89a1', '琑糼緍楆竉刧'],
  ['89ab', '醌碸酞肼'],
  ['89b0', '贋胶𠧧'],
  ['89b5', '肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁'],
  ['89c1', '溚舾甙'],
  [
    '89c5',
    '䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅'
  ],
  ['8a40', '𧶄唥'],
  ['8a43', '𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓'],
  ['8a64', '𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕'],
  ['8a76', '䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯'],
  ['8aa1', '𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱'],
  ['8aac', '䠋𠆩㿺塳𢶍'],
  ['8ab2', '𤗈𠓼𦂗𠽌𠶖啹䂻䎺'],
  ['8abb', '䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃'],
  ['8ac9', '𪘁𠸉𢫏𢳉'],
  ['8ace', '𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻'],
  ['8adf', '𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌'],
  ['8af6', '𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭'],
  ['8b40', '𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹'],
  [
    '8b55',
    '𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑'
  ],
  [
    '8ba1',
    '𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁'
  ],
  ['8bde', '𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢'],
  [
    '8c40',
    '倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋'
  ],
  ['8ca1', '𣏹椙橃𣱣泿'],
  ['8ca7', '爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚'],
  ['8cc9', '顨杫䉶圽'],
  ['8cce', '藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶'],
  ['8ce6', '峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻'],
  ['8d40', '𠮟'],
  [
    '8d42',
    '𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱'
  ],
  [
    '8da1',
    '㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘'
  ],
  [
    '8e40',
    '𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎'
  ],
  [
    '8ea1',
    '繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛'
  ],
  [
    '8f40',
    '蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖'
  ],
  [
    '8fa1',
    '𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起'
  ],
  [
    '9040',
    '趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛'
  ],
  [
    '90a1',
    '𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜'
  ],
  [
    '9140',
    '𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈'
  ],
  [
    '91a1',
    '鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨'
  ],
  [
    '9240',
    '𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘'
  ],
  [
    '92a1',
    '働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃'
  ],
  [
    '9340',
    '媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍'
  ],
  [
    '93a1',
    '摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋'
  ],
  [
    '9440',
    '銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻'
  ],
  [
    '94a1',
    '㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡'
  ],
  [
    '9540',
    '𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂'
  ],
  [
    '95a1',
    '衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰'
  ],
  [
    '9640',
    '桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸'
  ],
  [
    '96a1',
    '𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉'
  ],
  [
    '9740',
    '愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫'
  ],
  [
    '97a1',
    '𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎'
  ],
  [
    '9840',
    '𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦'
  ],
  [
    '98a1',
    '咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃'
  ],
  [
    '9940',
    '䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚'
  ],
  [
    '99a1',
    '䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿'
  ],
  [
    '9a40',
    '鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺'
  ],
  [
    '9aa1',
    '黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪'
  ],
  [
    '9b40',
    '𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌'
  ],
  ['9b62', '𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎'],
  [
    '9ba1',
    '椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊'
  ],
  [
    '9c40',
    '嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶'
  ],
  [
    '9ca1',
    '㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏'
  ],
  [
    '9d40',
    '𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁'
  ],
  [
    '9da1',
    '辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢'
  ],
  [
    '9e40',
    '𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺'
  ],
  ['9ea1', '鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭'],
  ['9ead', '𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹'],
  [
    '9ec5',
    '㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲'
  ],
  ['9ef5', '噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼'],
  ['9f40', '籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱'],
  [
    '9f4f',
    '凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰'
  ],
  ['9fa1', '椬叚鰊鴂䰻陁榀傦畆𡝭駚剳'],
  ['9fae', '酙隁酜'],
  ['9fb2', '酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽'],
  ['9fc1', '𤤙盖鮝个𠳔莾衂'],
  ['9fc9', '届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳'],
  ['9fdb', '歒酼龥鮗頮颴骺麨麄煺笔'],
  ['9fe7', '毺蠘罸'],
  ['9feb', '嘠𪙊蹷齓'],
  ['9ff0', '跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇'],
  ['a040', '𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷'],
  ['a055', '𡠻𦸅'],
  ['a058', '詾𢔛'],
  ['a05b', '惽癧髗鵄鍮鮏蟵'],
  ['a063', '蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽'],
  ['a073', '坟慯抦戹拎㩜懢厪𣏵捤栂㗒'],
  ['a0a1', '嵗𨯂迚𨸹'],
  ['a0a6', '僙𡵆礆匲阸𠼻䁥'],
  ['a0ae', '矾'],
  [
    'a0b0',
    '糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦'
  ],
  ['a0d4', '覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷'],
  ['a0e2', '罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫'],
  ['a3c0', '␀', 31, '␡'],
  [
    'c6a1',
    '①',
    9,
    '⑴',
    9,
    'ⅰ',
    9,
    '丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ',
    23
  ],
  ['c740', 'す', 58, 'ァアィイ'],
  ['c7a1', 'ゥ', 81, 'А', 5, 'ЁЖ', 4],
  ['c840', 'Л', 26, 'ёж', 25, '⇧↸↹㇏𠃌乚𠂊刂䒑'],
  ['c8a1', '龰冈龱𧘇'],
  [
    'c8cd',
    '￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣'
  ],
  ['c8f5', 'ʃɐɛɔɵœøŋʊɪ'],
  ['f9fe', '￭'],
  [
    'fa40',
    '𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸'
  ],
  [
    'faa1',
    '鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍'
  ],
  [
    'fb40',
    '𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙'
  ],
  [
    'fba1',
    '𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂'
  ],
  [
    'fc40',
    '廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷'
  ],
  [
    'fca1',
    '𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝'
  ],
  [
    'fd40',
    '𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀'
  ],
  [
    'fda1',
    '𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎'
  ],
  [
    'fe40',
    '鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌'
  ],
  [
    'fea1',
    '𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔'
  ]
]

let dbcsData
let hasRequiredDbcsData
function requireDbcsData() {
  if (hasRequiredDbcsData) {
    return dbcsData
  }
  hasRequiredDbcsData = 1

  // Description of supported double byte encodings and aliases.
  // Tables are not require()-d until they are needed to speed up library load.
  // require()-s are direct to support Browserify.

  dbcsData = {
    // == Japanese/ShiftJIS ====================================================
    // All japanese encodings are based on JIS X set of standards:
    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes.
    //              Has several variations in 1978, 1983, 1990 and 1997.
    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
    //              2 planes, first is superset of 0208, second - revised 0212.
    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

    // Byte encodings are:
    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
    //               0x00-0x7F       - lower part of 0201
    //               0x8E, 0xA1-0xDF - upper part of 0201
    //               (0xA1-0xFE)x2   - 0208 plane (94x94).
    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
    //               Used as-is in ISO2022 family.
    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII,
    //                0201-1976 Roman, 0208-1978, 0208-1983.
    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
    //
    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
    //
    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

    shiftjis: {
      type: '_dbcs',
      table: function () {
        return require$$0$1
      },
      encodeAdd: {
        '\u00a5': 0x5c,
        '\u203E': 0x7e
      },
      encodeSkipVals: [
        {
          from: 0xed40,
          to: 0xf940
        }
      ]
    },
    csshiftjis: 'shiftjis',
    mskanji: 'shiftjis',
    sjis: 'shiftjis',
    windows31j: 'shiftjis',
    ms31j: 'shiftjis',
    xsjis: 'shiftjis',
    windows932: 'shiftjis',
    ms932: 'shiftjis',
    932: 'shiftjis',
    cp932: 'shiftjis',
    eucjp: {
      type: '_dbcs',
      table: function () {
        return require$$1$1
      },
      encodeAdd: {
        '\u00a5': 0x5c,
        '\u203E': 0x7e
      }
    },
    // TODO: KDDI extension to Shift_JIS
    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.

    // == Chinese/GBK ==========================================================
    // http://en.wikipedia.org/wiki/GBK
    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
    gb2312: 'cp936',
    gb231280: 'cp936',
    gb23121980: 'cp936',
    csgb2312: 'cp936',
    csiso58gb231280: 'cp936',
    euccn: 'cp936',
    // Microsoft's CP936 is a subset and approximation of GBK.
    windows936: 'cp936',
    ms936: 'cp936',
    936: 'cp936',
    cp936: {
      type: '_dbcs',
      table: function () {
        return require$$2
      }
    },
    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
    gbk: {
      type: '_dbcs',
      table: function () {
        return require$$2.concat(require$$3)
      }
    },
    xgbk: 'gbk',
    isoir58: 'gbk',
    // GB18030 is an algorithmic extension of GBK.
    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
    // http://icu-project.org/docs/papers/gb18030.html
    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
    gb18030: {
      type: '_dbcs',
      table: function () {
        return require$$2.concat(require$$3)
      },
      gb18030: function () {
        return require$$4$1
      },
      encodeSkipVals: [0x80],
      encodeAdd: {
        '€': 0xa2e3
      }
    },
    chinese: 'gb18030',
    // == Korean ===============================================================
    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
    windows949: 'cp949',
    ms949: 'cp949',
    949: 'cp949',
    cp949: {
      type: '_dbcs',
      table: function () {
        return require$$5$1
      }
    },
    cseuckr: 'cp949',
    csksc56011987: 'cp949',
    euckr: 'cp949',
    isoir149: 'cp949',
    korean: 'cp949',
    ksc56011987: 'cp949',
    ksc56011989: 'cp949',
    ksc5601: 'cp949',
    // == Big5/Taiwan/Hong Kong ================================================
    // There are lots of tables for Big5 and cp950. Please see the following links for history:
    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
    // Variations, in roughly number of defined chars:
    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
    //  * Big5-2003 (Taiwan standard) almost superset of cp950.
    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard.
    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
    //    Plus, it has 4 combining sequences.
    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
    //    Implementations are not consistent within browsers; sometimes labeled as just big5.
    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
    //
    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

    windows950: 'cp950',
    ms950: 'cp950',
    950: 'cp950',
    cp950: {
      type: '_dbcs',
      table: function () {
        return require$$6
      }
    },
    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
    big5: 'big5hkscs',
    big5hkscs: {
      type: '_dbcs',
      table: function () {
        return require$$6.concat(require$$7$1)
      },
      encodeSkipVals: [
        // Although Encoding Standard says we should avoid encoding to HKSCS area (See Step 1 of
        // https://encoding.spec.whatwg.org/#index-big5-pointer), we still do it to increase compatibility with ICU.
        // But if a single unicode point can be encoded both as HKSCS and regular Big5, we prefer the latter.
        0x8e69,
        0x8e6f, 0x8e7e, 0x8eab, 0x8eb4, 0x8ecd, 0x8ed0, 0x8f57, 0x8f69, 0x8f6e,
        0x8fcb, 0x8ffe, 0x906d, 0x907a, 0x90c4, 0x90dc, 0x90f1, 0x91bf, 0x92af,
        0x92b0, 0x92b1, 0x92b2, 0x92d1, 0x9447, 0x94ca, 0x95d9, 0x96fc, 0x9975,
        0x9b76, 0x9b78, 0x9b7b, 0x9bc6, 0x9bde, 0x9bec, 0x9bf6, 0x9c42, 0x9c53,
        0x9c62, 0x9c68, 0x9c6b, 0x9c77, 0x9cbc, 0x9cbd, 0x9cd0, 0x9d57, 0x9d5a,
        0x9dc4, 0x9def, 0x9dfb, 0x9ea9, 0x9eef, 0x9efd, 0x9f60, 0x9fcb, 0xa077,
        0xa0dc, 0xa0df, 0x8fcc, 0x92c8, 0x9644, 0x96ed,
        // Step 2 of https://encoding.spec.whatwg.org/#index-big5-pointer: Use last pointer for U+2550, U+255E, U+2561, U+256A, U+5341, or U+5345
        0xa2a4,
        0xa2a5, 0xa2a7, 0xa2a6, 0xa2cc, 0xa2ce
      ]
    },
    cnbig5: 'big5hkscs',
    csbig5: 'big5hkscs',
    xxbig5: 'big5hkscs'
  }
  return dbcsData
}

let hasRequiredEncodings
function requireEncodings() {
  if (hasRequiredEncodings) {
    return encodings
  }
  hasRequiredEncodings = 1
  ;(function (exports) {
    // Update this array if you add/rename/remove files in this directory.
    // We support Browserify by skipping automatic module discovery and requiring modules directly.
    const modules = [
      requireInternal(),
      requireUtf32(),
      requireUtf16(),
      requireUtf7(),
      requireSbcsCodec(),
      requireSbcsData(),
      requireSbcsDataGenerated(),
      requireDbcsCodec(),
      requireDbcsData()
    ]

    // Put all encoding/alias/codec definitions to single object and export it.
    for (let i = 0; i < modules.length; i++) {
      const module = modules[i]
      for (const enc in module) {
        if (Object.prototype.hasOwnProperty.call(module, enc))
          exports[enc] = module[enc]
      }
    }
  })(encodings)
  return encodings
}

let streams
let hasRequiredStreams
function requireStreams() {
  if (hasRequiredStreams) {
    return streams
  }
  hasRequiredStreams = 1
  const Buffer = /*@__PURE__*/ requireSafer().Buffer

  // NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments),
  // we opt to dependency-inject it instead of creating a hard dependency.
  streams = function (stream_module) {
    const Transform = stream_module.Transform

    // == Encoder stream =======================================================

    function IconvLiteEncoderStream(conv, options) {
      this.conv = conv
      options = options || {}
      options.decodeStrings = false // We accept only strings, so we don't need to decode them.
      Transform.call(this, options)
    }
    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
      constructor: {
        value: IconvLiteEncoderStream
      }
    })
    IconvLiteEncoderStream.prototype._transform = function (
      chunk,
      encoding,
      done
    ) {
      if (typeof chunk != 'string') {
        return done(
          new Error('Iconv encoding stream needs strings as its input.')
        )
      }
      try {
        const res = this.conv.write(chunk)
        if (res && res.length) {
          this.push(res)
        }
        done()
      } catch (e) {
        done(e)
      }
    }
    IconvLiteEncoderStream.prototype._flush = function (done) {
      try {
        const res = this.conv.end()
        if (res && res.length) {
          this.push(res)
        }
        done()
      } catch (e) {
        done(e)
      }
    }
    IconvLiteEncoderStream.prototype.collect = function (cb) {
      const chunks = []
      this.on('error', cb)
      this.on('data', function (chunk) {
        chunks.push(chunk)
      })
      this.on('end', function () {
        cb(null, Buffer.concat(chunks))
      })
      return this
    }

    // == Decoder stream =======================================================

    function IconvLiteDecoderStream(conv, options) {
      this.conv = conv
      options = options || {}
      options.encoding = this.encoding = 'utf8' // We output strings.
      Transform.call(this, options)
    }
    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
      constructor: {
        value: IconvLiteDecoderStream
      }
    })
    IconvLiteDecoderStream.prototype._transform = function (
      chunk,
      encoding,
      done
    ) {
      if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array)) {
        return done(
          new Error('Iconv decoding stream needs buffers as its input.')
        )
      }
      try {
        const res = this.conv.write(chunk)
        if (res && res.length) {
          this.push(res, this.encoding)
        }
        done()
      } catch (e) {
        done(e)
      }
    }
    IconvLiteDecoderStream.prototype._flush = function (done) {
      try {
        const res = this.conv.end()
        if (res && res.length) {
          this.push(res, this.encoding)
        }
        done()
      } catch (e) {
        done(e)
      }
    }
    IconvLiteDecoderStream.prototype.collect = function (cb) {
      let res = ''
      this.on('error', cb)
      this.on('data', function (chunk) {
        res += chunk
      })
      this.on('end', function () {
        cb(null, res)
      })
      return this
    }
    return {
      IconvLiteEncoderStream: IconvLiteEncoderStream,
      IconvLiteDecoderStream: IconvLiteDecoderStream
    }
  }
  return streams
}

let hasRequiredLib$8
function requireLib$8() {
  if (hasRequiredLib$8) {
    return lib$7.exports
  }
  hasRequiredLib$8 = 1
  ;(function (module) {
    const Buffer = /*@__PURE__*/ requireSafer().Buffer
    const bomHandling = requireBomHandling(),
      iconv = module.exports

    // All codecs and aliases are kept here, keyed by encoding name/alias.
    // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
    iconv.encodings = null

    // Characters emitted in case of error.
    iconv.defaultCharUnicode = '�'
    iconv.defaultCharSingleByte = '?'

    // Public API.
    iconv.encode = function encode(str, encoding, options) {
      str = '' + (str || '') // Ensure string.

      const encoder = iconv.getEncoder(encoding, options)
      const res = encoder.write(str)
      const trail = encoder.end()
      return trail && trail.length > 0 ? Buffer.concat([res, trail]) : res
    }
    iconv.decode = function decode(buf, encoding, options) {
      if (typeof buf === 'string') {
        if (!iconv.skipDecodeWarning) {
          console.error(
            'Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding'
          )
          iconv.skipDecodeWarning = true
        }
        buf = Buffer.from('' + (buf || ''), 'binary') // Ensure buffer.
      }
      const decoder = iconv.getDecoder(encoding, options)
      const res = decoder.write(buf)
      const trail = decoder.end()
      return trail ? res + trail : res
    }
    iconv.encodingExists = function encodingExists(enc) {
      try {
        iconv.getCodec(enc)
        return true
      } catch (e) {
        return false
      }
    }

    // Legacy aliases to convert functions
    iconv.toEncoding = iconv.encode
    iconv.fromEncoding = iconv.decode

    // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
    iconv._codecDataCache = {}
    iconv.getCodec = function getCodec(encoding) {
      if (!iconv.encodings) {
        iconv.encodings = requireEncodings()
      } // Lazy load all encoding definitions.

      // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
      let enc = iconv._canonicalizeEncoding(encoding)

      // Traverse iconv.encodings to find actual codec.
      const codecOptions = {}
      while (true) {
        let codec = iconv._codecDataCache[enc]
        if (codec) {
          return codec
        }
        const codecDef = iconv.encodings[enc]
        switch (typeof codecDef) {
          case 'string':
            // Direct alias to other encoding.
            enc = codecDef
            break
          case 'object':
            // Alias with options. Can be layered.
            for (const key in codecDef) {
              codecOptions[key] = codecDef[key]
            }
            if (!codecOptions.encodingName) {
              codecOptions.encodingName = enc
            }
            enc = codecDef.type
            break
          case 'function':
            // Codec itself.
            if (!codecOptions.encodingName) {
              codecOptions.encodingName = enc
            }

            // The codec function must load all tables and return object with .encoder and .decoder methods.
            // It'll be called only once (for each different options object).
            codec = new codecDef(codecOptions, iconv)
            iconv._codecDataCache[codecOptions.encodingName] = codec // Save it to be reused later.
            return codec
          default:
            throw new Error(
              "Encoding not recognized: '" +
                encoding +
                "' (searched as: '" +
                enc +
                "')"
            )
        }
      }
    }
    iconv._canonicalizeEncoding = function (encoding) {
      // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
      return ('' + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, '')
    }
    iconv.getEncoder = function getEncoder(encoding, options) {
      let codec = iconv.getCodec(encoding),
        encoder = new codec.encoder(options, codec)
      if (codec.bomAware && options && options.addBOM) {
        encoder = new bomHandling.PrependBOM(encoder, options)
      }
      return encoder
    }
    iconv.getDecoder = function getDecoder(encoding, options) {
      let codec = iconv.getCodec(encoding),
        decoder = new codec.decoder(options, codec)
      if (codec.bomAware && !(options && options.stripBOM === false)) {
        decoder = new bomHandling.StripBOM(decoder, options)
      }
      return decoder
    }

    // Streaming API
    // NOTE: Streaming API naturally depends on 'stream' module from Node.js. Unfortunately in browser environments this module can add
    // up to 100Kb to the output bundle. To avoid unnecessary code bloat, we don't enable Streaming API in browser by default.
    // If you would like to enable it explicitly, please add the following code to your app:
    // > iconv.enableStreamingAPI(require('stream'));
    iconv.enableStreamingAPI = function enableStreamingAPI(stream_module) {
      if (iconv.supportsStreams) {
        return
      }

      // Dependency-inject stream module to create IconvLite stream classes.
      const streams = requireStreams()(stream_module)

      // Not public API yet, but expose the stream classes.
      iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream
      iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream

      // Streaming API.
      iconv.encodeStream = function encodeStream(encoding, options) {
        return new iconv.IconvLiteEncoderStream(
          iconv.getEncoder(encoding, options),
          options
        )
      }
      iconv.decodeStream = function decodeStream(encoding, options) {
        return new iconv.IconvLiteDecoderStream(
          iconv.getDecoder(encoding, options),
          options
        )
      }
      iconv.supportsStreams = true
    }

    // Enable Streaming API automatically if 'stream' module is available and non-empty (the majority of environments).
    let stream_module
    try {
      stream_module = require('stream')
    } catch (e) {}
    if (stream_module && stream_module.Transform) {
      iconv.enableStreamingAPI(stream_module)
    } else {
      // In rare cases where 'stream' module is not available by default, throw a helpful exception.
      iconv.encodeStream = iconv.decodeStream = function () {
        throw new Error(
          "iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it."
        )
      }
    }
  })(lib$7)
  return lib$7.exports
}

let hasRequiredEncoding$2
function requireEncoding$2() {
  if (hasRequiredEncoding$2) {
    return encoding$2
  }
  hasRequiredEncoding$2 = 1
  const iconvLite = requireLib$8()

  // Expose to the world
  encoding$2.convert = convert

  /**
   * Convert encoding of an UTF-8 string or a buffer
   *
   * @param {String|Buffer} str String to be converted
   * @param {String} to Encoding to be converted to
   * @param {String} [from='UTF-8'] Encoding to be converted from
   * @return {Buffer} Encoded string
   */
  function convert(str, to, from) {
    from = checkEncoding(from || 'UTF-8')
    to = checkEncoding(to || 'UTF-8')
    str = str || ''
    let result
    if (from !== 'UTF-8' && typeof str === 'string') {
      str = Buffer.from(str, 'binary')
    }
    if (from === to) {
      if (typeof str === 'string') {
        result = Buffer.from(str)
      } else {
        result = str
      }
    } else {
      try {
        result = convertIconvLite(str, to, from)
      } catch (E) {
        console.error(E)
        result = str
      }
    }
    if (typeof result === 'string') {
      result = Buffer.from(result, 'utf-8')
    }
    return result
  }

  /**
   * Convert encoding of astring with iconv-lite
   *
   * @param {String|Buffer} str String to be converted
   * @param {String} to Encoding to be converted to
   * @param {String} [from='UTF-8'] Encoding to be converted from
   * @return {Buffer} Encoded string
   */
  function convertIconvLite(str, to, from) {
    if (to === 'UTF-8') {
      return iconvLite.decode(str, from)
    } else if (from === 'UTF-8') {
      return iconvLite.encode(str, to)
    } else {
      return iconvLite.encode(iconvLite.decode(str, from), to)
    }
  }

  /**
   * Converts charset name if needed
   *
   * @param {String} name Character set
   * @return {String} Character set name
   */
  function checkEncoding(name) {
    return (name || '')
      .toString()
      .trim()
      .replace(/^latin[-_]?(\d+)$/i, 'ISO-8859-$1')
      .replace(/^win(?:dows)?[-_]?(\d+)$/i, 'WINDOWS-$1')
      .replace(/^utf[-_]?(\d+)$/i, 'UTF-$1')
      .replace(/^ks_c_5601-1987$/i, 'CP949')
      .replace(/^us[-_]?ascii$/i, 'ASCII')
      .toUpperCase()
  }
  return encoding$2
}

let body
let hasRequiredBody
function requireBody() {
  if (hasRequiredBody) {
    return body
  }
  hasRequiredBody = 1
  const { Minipass } = requireCommonjs$7()
  const MinipassSized = requireMinipassSized()
  const Blob = requireBlob()
  const { BUFFER } = Blob
  const FetchError = requireFetchError()

  // optional dependency on 'encoding'
  let convert
  try {
    convert = requireEncoding$2().convert
  } catch (e) {
    // defer error until textConverted is called
  }
  const INTERNALS = Symbol('Body internals')
  const CONSUME_BODY = Symbol('consumeBody')
  class Body {
    constructor(bodyArg, options = {}) {
      const { size = 0, timeout = 0 } = options
      const body =
        bodyArg === undefined || bodyArg === null
          ? null
          : isURLSearchParams(bodyArg)
            ? Buffer.from(bodyArg.toString())
            : isBlob(bodyArg)
              ? bodyArg
              : Buffer.isBuffer(bodyArg)
                ? bodyArg
                : Object.prototype.toString.call(bodyArg) ===
                    '[object ArrayBuffer]'
                  ? Buffer.from(bodyArg)
                  : ArrayBuffer.isView(bodyArg)
                    ? Buffer.from(
                        bodyArg.buffer,
                        bodyArg.byteOffset,
                        bodyArg.byteLength
                      )
                    : Minipass.isStream(bodyArg)
                      ? bodyArg
                      : Buffer.from(String(bodyArg))
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      }
      this.size = size
      this.timeout = timeout
      if (Minipass.isStream(body)) {
        body.on('error', er => {
          const error =
            er.name === 'AbortError'
              ? er
              : new FetchError(
                  `Invalid response while trying to fetch ${this.url}: ${er.message}`,
                  'system',
                  er
                )
          this[INTERNALS].error = error
        })
      }
    }
    get body() {
      return this[INTERNALS].body
    }
    get bodyUsed() {
      return this[INTERNALS].disturbed
    }
    arrayBuffer() {
      return this[CONSUME_BODY]().then(buf =>
        buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
      )
    }
    blob() {
      const ct = (this.headers && this.headers.get('content-type')) || ''
      return this[CONSUME_BODY]().then(buf =>
        Object.assign(
          new Blob([], {
            type: ct.toLowerCase()
          }),
          {
            [BUFFER]: buf
          }
        )
      )
    }
    async json() {
      const buf = await this[CONSUME_BODY]()
      try {
        return JSON.parse(buf.toString())
      } catch (er) {
        throw new FetchError(
          `invalid json response body at ${this.url} reason: ${er.message}`,
          'invalid-json'
        )
      }
    }
    text() {
      return this[CONSUME_BODY]().then(buf => buf.toString())
    }
    buffer() {
      return this[CONSUME_BODY]()
    }
    textConverted() {
      return this[CONSUME_BODY]().then(buf => convertBody(buf, this.headers))
    }
    [CONSUME_BODY]() {
      if (this[INTERNALS].disturbed) {
        return Promise.reject(
          new TypeError(`body used already for: ${this.url}`)
        )
      }
      this[INTERNALS].disturbed = true
      if (this[INTERNALS].error) {
        return Promise.reject(this[INTERNALS].error)
      }

      // body is null
      if (this.body === null) {
        return Promise.resolve(Buffer.alloc(0))
      }
      if (Buffer.isBuffer(this.body)) {
        return Promise.resolve(this.body)
      }
      const upstream = isBlob(this.body) ? this.body.stream() : this.body

      /* istanbul ignore if: should never happen */
      if (!Minipass.isStream(upstream)) {
        return Promise.resolve(Buffer.alloc(0))
      }
      const stream =
        this.size && upstream instanceof MinipassSized
          ? upstream
          : !this.size &&
              upstream instanceof Minipass &&
              !(upstream instanceof MinipassSized)
            ? upstream
            : this.size
              ? new MinipassSized({
                  size: this.size
                })
              : new Minipass()

      // allow timeout on slow response body, but only if the stream is still writable. this
      // makes the timeout center on the socket stream from lib/index.js rather than the
      // intermediary minipass stream we create to receive the data
      const resTimeout =
        this.timeout && stream.writable
          ? setTimeout(() => {
              stream.emit(
                'error',
                new FetchError(
                  `Response timeout while trying to fetch ${this.url} (over ${this.timeout}ms)`,
                  'body-timeout'
                )
              )
            }, this.timeout)
          : null

      // do not keep the process open just for this timeout, even
      // though we expect it'll get cleared eventually.
      if (resTimeout && resTimeout.unref) {
        resTimeout.unref()
      }

      // do the pipe in the promise, because the pipe() can send too much
      // data through right away and upset the MP Sized object
      return new Promise(resolve => {
        // if the stream is some other kind of stream, then pipe through a MP
        // so we can collect it more easily.
        if (stream !== upstream) {
          upstream.on('error', er => stream.emit('error', er))
          upstream.pipe(stream)
        }
        resolve()
      })
        .then(() => stream.concat())
        .then(buf => {
          clearTimeout(resTimeout)
          return buf
        })
        .catch(er => {
          clearTimeout(resTimeout)
          // request was aborted, reject with this Error
          if (er.name === 'AbortError' || er.name === 'FetchError') {
            throw er
          } else if (er.name === 'RangeError') {
            throw new FetchError(
              `Could not create Buffer from response body for ${this.url}: ${er.message}`,
              'system',
              er
            )
          } else {
            // other errors, such as incorrect content-encoding or content-length
            throw new FetchError(
              `Invalid response body while trying to fetch ${this.url}: ${er.message}`,
              'system',
              er
            )
          }
        })
    }
    static clone(instance) {
      if (instance.bodyUsed) {
        throw new Error('cannot clone body after it is used')
      }
      const body = instance.body

      // check that body is a stream and not form-data object
      // NB: can't clone the form-data object without having it as a dependency
      if (Minipass.isStream(body) && typeof body.getBoundary !== 'function') {
        // create a dedicated tee stream so that we don't lose data
        // potentially sitting in the body stream's buffer by writing it
        // immediately to p1 and not having it for p2.
        const tee = new Minipass()
        const p1 = new Minipass()
        const p2 = new Minipass()
        tee.on('error', er => {
          p1.emit('error', er)
          p2.emit('error', er)
        })
        body.on('error', er => tee.emit('error', er))
        tee.pipe(p1)
        tee.pipe(p2)
        body.pipe(tee)
        // set instance body to one fork, return the other
        instance[INTERNALS].body = p1
        return p2
      } else {
        return instance.body
      }
    }
    static extractContentType(body) {
      return body === null || body === undefined
        ? null
        : typeof body === 'string'
          ? 'text/plain;charset=UTF-8'
          : isURLSearchParams(body)
            ? 'application/x-www-form-urlencoded;charset=UTF-8'
            : isBlob(body)
              ? body.type || null
              : Buffer.isBuffer(body)
                ? null
                : Object.prototype.toString.call(body) ===
                    '[object ArrayBuffer]'
                  ? null
                  : ArrayBuffer.isView(body)
                    ? null
                    : typeof body.getBoundary === 'function'
                      ? `multipart/form-data;boundary=${body.getBoundary()}`
                      : Minipass.isStream(body)
                        ? null
                        : 'text/plain;charset=UTF-8'
    }
    static getTotalBytes(instance) {
      const { body } = instance
      return body === null || body === undefined
        ? 0
        : isBlob(body)
          ? body.size
          : Buffer.isBuffer(body)
            ? body.length
            : body &&
                typeof body.getLengthSync === 'function' &&
                // detect form data input from form-data module
                ((body._lengthRetrievers &&
                  /* istanbul ignore next */ body._lengthRetrievers.length ===
                    0) ||
                  // 1.x
                  (body.hasKnownLength && body.hasKnownLength())) // 2.x
              ? body.getLengthSync()
              : null
    }
    static writeToStream(dest, instance) {
      const { body } = instance
      if (body === null || body === undefined) {
        dest.end()
      } else if (Buffer.isBuffer(body) || typeof body === 'string') {
        dest.end(body)
      } else {
        // body is stream or blob
        const stream = isBlob(body) ? body.stream() : body
        stream.on('error', er => dest.emit('error', er)).pipe(dest)
      }
      return dest
    }
  }
  Object.defineProperties(Body.prototype, {
    body: {
      enumerable: true
    },
    bodyUsed: {
      enumerable: true
    },
    arrayBuffer: {
      enumerable: true
    },
    blob: {
      enumerable: true
    },
    json: {
      enumerable: true
    },
    text: {
      enumerable: true
    }
  })
  const isURLSearchParams = obj =>
    // Duck-typing as a necessary condition.
    typeof obj !== 'object' ||
    typeof obj.append !== 'function' ||
    typeof obj.delete !== 'function' ||
    typeof obj.get !== 'function' ||
    typeof obj.getAll !== 'function' ||
    typeof obj.has !== 'function' ||
    typeof obj.set !== 'function'
      ? false
      : // Brand-checking and more duck-typing as optional condition.
        obj.constructor.name === 'URLSearchParams' ||
        Object.prototype.toString.call(obj) === '[object URLSearchParams]' ||
        typeof obj.sort === 'function'
  const isBlob = obj =>
    typeof obj === 'object' &&
    typeof obj.arrayBuffer === 'function' &&
    typeof obj.type === 'string' &&
    typeof obj.stream === 'function' &&
    typeof obj.constructor === 'function' &&
    typeof obj.constructor.name === 'string' &&
    /^(Blob|File)$/.test(obj.constructor.name) &&
    /^(Blob|File)$/.test(obj[Symbol.toStringTag])
  const convertBody = (buffer, headers) => {
    /* istanbul ignore if */
    if (typeof convert !== 'function') {
      throw new Error(
        'The package `encoding` must be installed to use the textConverted() function'
      )
    }
    const ct = headers && headers.get('content-type')
    let charset = 'utf-8'
    let res

    // header
    if (ct) {
      res = /charset=([^;]*)/i.exec(ct)
    }

    // no charset in content type, peek at response body for at most 1024 bytes
    const str = buffer.slice(0, 1024).toString()

    // html5
    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str)
    }

    // html4
    if (!res && str) {
      res =
        /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(
          str
        )
      if (!res) {
        res =
          /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(
            str
          )
        if (res) {
          res.pop()
        } // drop last quote
      }
      if (res) {
        res = /charset=(.*)/i.exec(res.pop())
      }
    }

    // xml
    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str)
    }

    // found charset
    if (res) {
      charset = res.pop()

      // prevent decode issues when sites use incorrect encoding
      // ref: https://hsivonen.fi/encoding-menu/
      if (charset === 'gb2312' || charset === 'gbk') {
        charset = 'gb18030'
      }
    }

    // turn raw buffers into a single utf-8 buffer
    return convert(buffer, 'UTF-8', charset).toString()
  }
  body = Body
  return body
}

let headers
let hasRequiredHeaders
function requireHeaders() {
  if (hasRequiredHeaders) {
    return headers
  }
  hasRequiredHeaders = 1
  const invalidTokenRegex = /[^^_`a-zA-Z\-0-9!#$%&'*+.|~]/
  const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/
  const validateName = name => {
    name = `${name}`
    if (invalidTokenRegex.test(name) || name === '') {
      throw new TypeError(`${name} is not a legal HTTP header name`)
    }
  }
  const validateValue = value => {
    value = `${value}`
    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError(`${value} is not a legal HTTP header value`)
    }
  }
  const find = (map, name) => {
    name = name.toLowerCase()
    for (const key in map) {
      if (key.toLowerCase() === name) {
        return key
      }
    }
    return undefined
  }
  const MAP = Symbol('map')
  class Headers {
    constructor(init = undefined) {
      this[MAP] = Object.create(null)
      if (init instanceof Headers) {
        const rawHeaders = init.raw()
        const headerNames = Object.keys(rawHeaders)
        for (const headerName of headerNames) {
          for (const value of rawHeaders[headerName]) {
            this.append(headerName, value)
          }
        }
        return
      }

      // no-op
      if (init === undefined || init === null) {
        return
      }
      if (typeof init === 'object') {
        const method = init[Symbol.iterator]
        if (method !== null && method !== undefined) {
          if (typeof method !== 'function') {
            throw new TypeError('Header pairs must be iterable')
          }

          // sequence<sequence<ByteString>>
          // Note: per spec we have to first exhaust the lists then process them
          const pairs = []
          for (const pair of init) {
            if (
              typeof pair !== 'object' ||
              typeof pair[Symbol.iterator] !== 'function'
            ) {
              throw new TypeError('Each header pair must be iterable')
            }
            const arrPair = Array.from(pair)
            if (arrPair.length !== 2) {
              throw new TypeError('Each header pair must be a name/value tuple')
            }
            pairs.push(arrPair)
          }
          for (const pair of pairs) {
            this.append(pair[0], pair[1])
          }
        } else {
          // record<ByteString, ByteString>
          for (const key of Object.keys(init)) {
            this.append(key, init[key])
          }
        }
      } else {
        throw new TypeError('Provided initializer must be an object')
      }
    }
    get(name) {
      name = `${name}`
      validateName(name)
      const key = find(this[MAP], name)
      if (key === undefined) {
        return null
      }
      return this[MAP][key].join(', ')
    }
    forEach(callback, thisArg = undefined) {
      let pairs = getHeaders(this)
      for (let i = 0; i < pairs.length; i++) {
        const [name, value] = pairs[i]
        callback.call(thisArg, value, name, this)
        // refresh in case the callback added more headers
        pairs = getHeaders(this)
      }
    }
    set(name, value) {
      name = `${name}`
      value = `${value}`
      validateName(name)
      validateValue(value)
      const key = find(this[MAP], name)
      this[MAP][key !== undefined ? key : name] = [value]
    }
    append(name, value) {
      name = `${name}`
      value = `${value}`
      validateName(name)
      validateValue(value)
      const key = find(this[MAP], name)
      if (key !== undefined) {
        this[MAP][key].push(value)
      } else {
        this[MAP][name] = [value]
      }
    }
    has(name) {
      name = `${name}`
      validateName(name)
      return find(this[MAP], name) !== undefined
    }
    delete(name) {
      name = `${name}`
      validateName(name)
      const key = find(this[MAP], name)
      if (key !== undefined) {
        delete this[MAP][key]
      }
    }
    raw() {
      return this[MAP]
    }
    keys() {
      return new HeadersIterator(this, 'key')
    }
    values() {
      return new HeadersIterator(this, 'value')
    }
    [Symbol.iterator]() {
      return new HeadersIterator(this, 'key+value')
    }
    entries() {
      return new HeadersIterator(this, 'key+value')
    }
    get [Symbol.toStringTag]() {
      return 'Headers'
    }
    static exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign(Object.create(null), headers[MAP])

      // http.request() only supports string as Host header. This hack makes
      // specifying custom Host header possible.
      const hostHeaderKey = find(headers[MAP], 'Host')
      if (hostHeaderKey !== undefined) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0]
      }
      return obj
    }
    static createHeadersLenient(obj) {
      const headers = new Headers()
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue
            }
            if (headers[MAP][name] === undefined) {
              headers[MAP][name] = [val]
            } else {
              headers[MAP][name].push(val)
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]]
        }
      }
      return headers
    }
  }
  Object.defineProperties(Headers.prototype, {
    get: {
      enumerable: true
    },
    forEach: {
      enumerable: true
    },
    set: {
      enumerable: true
    },
    append: {
      enumerable: true
    },
    has: {
      enumerable: true
    },
    delete: {
      enumerable: true
    },
    keys: {
      enumerable: true
    },
    values: {
      enumerable: true
    },
    entries: {
      enumerable: true
    }
  })
  const getHeaders = (headers, kind = 'key+value') =>
    Object.keys(headers[MAP])
      .sort()
      .map(
        kind === 'key'
          ? k => k.toLowerCase()
          : kind === 'value'
            ? k => headers[MAP][k].join(', ')
            : k => [k.toLowerCase(), headers[MAP][k].join(', ')]
      )
  const INTERNAL = Symbol('internal')
  class HeadersIterator {
    constructor(target, kind) {
      this[INTERNAL] = {
        target,
        kind,
        index: 0
      }
    }
    get [Symbol.toStringTag]() {
      return 'HeadersIterator'
    }
    next() {
      /* istanbul ignore if: should be impossible */
      if (!this || Object.getPrototypeOf(this) !== HeadersIterator.prototype) {
        throw new TypeError('Value of `this` is not a HeadersIterator')
      }
      const { target, kind, index } = this[INTERNAL]
      const values = getHeaders(target, kind)
      const len = values.length
      if (index >= len) {
        return {
          value: undefined,
          done: true
        }
      }
      this[INTERNAL].index++
      return {
        value: values[index],
        done: false
      }
    }
  }

  // manually extend because 'extends' requires a ctor
  Object.setPrototypeOf(
    HeadersIterator.prototype,
    Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))
  )
  headers = Headers
  return headers
}

let response
let hasRequiredResponse
function requireResponse() {
  if (hasRequiredResponse) {
    return response
  }
  hasRequiredResponse = 1
  const http = require$$0$i
  const { STATUS_CODES } = http
  const Headers = requireHeaders()
  const Body = requireBody()
  const { clone, extractContentType } = Body
  const INTERNALS = Symbol('Response internals')
  class Response extends Body {
    constructor(body = null, opts = {}) {
      super(body, opts)
      const status = opts.status || 200
      const headers = new Headers(opts.headers)
      if (body !== null && body !== undefined && !headers.has('Content-Type')) {
        const contentType = extractContentType(body)
        if (contentType) {
          headers.append('Content-Type', contentType)
        }
      }
      this[INTERNALS] = {
        url: opts.url,
        status,
        statusText: opts.statusText || STATUS_CODES[status],
        headers,
        counter: opts.counter,
        trailer: Promise.resolve(opts.trailer || new Headers())
      }
    }
    get trailer() {
      return this[INTERNALS].trailer
    }
    get url() {
      return this[INTERNALS].url || ''
    }
    get status() {
      return this[INTERNALS].status
    }
    get ok() {
      return this[INTERNALS].status >= 200 && this[INTERNALS].status < 300
    }
    get redirected() {
      return this[INTERNALS].counter > 0
    }
    get statusText() {
      return this[INTERNALS].statusText
    }
    get headers() {
      return this[INTERNALS].headers
    }
    clone() {
      return new Response(clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected,
        trailer: this.trailer
      })
    }
    get [Symbol.toStringTag]() {
      return 'Response'
    }
  }
  response = Response
  Object.defineProperties(Response.prototype, {
    url: {
      enumerable: true
    },
    status: {
      enumerable: true
    },
    ok: {
      enumerable: true
    },
    redirected: {
      enumerable: true
    },
    statusText: {
      enumerable: true
    },
    headers: {
      enumerable: true
    },
    clone: {
      enumerable: true
    }
  })
  return response
}

const version$4 = '4.0.1'
const require$$4 = {
  version: version$4
}

let request
let hasRequiredRequest
function requireRequest() {
  if (hasRequiredRequest) {
    return request
  }
  hasRequiredRequest = 1
  const { URL } = require$$0$2
  const { Minipass } = requireCommonjs$7()
  const Headers = requireHeaders()
  const { exportNodeCompatibleHeaders } = Headers
  const Body = requireBody()
  const { clone, extractContentType, getTotalBytes } = Body
  const version = require$$4.version
  const defaultUserAgent = `minipass-fetch/${version} (+https://github.com/isaacs/minipass-fetch)`
  const INTERNALS = Symbol('Request internals')
  const isRequest = input =>
    typeof input === 'object' && typeof input[INTERNALS] === 'object'
  const isAbortSignal = signal => {
    const proto =
      signal && typeof signal === 'object' && Object.getPrototypeOf(signal)
    return !!(proto && proto.constructor.name === 'AbortSignal')
  }
  class Request extends Body {
    constructor(input, init = {}) {
      const parsedURL = isRequest(input)
        ? new URL(input.url)
        : input && input.href
          ? new URL(input.href)
          : new URL(`${input}`)
      if (isRequest(input)) {
        init = {
          ...input[INTERNALS],
          ...init
        }
      } else if (!input || typeof input === 'string') {
        input = {}
      }
      const method = (init.method || input.method || 'GET').toUpperCase()
      const isGETHEAD = method === 'GET' || method === 'HEAD'
      if (
        ((init.body !== null && init.body !== undefined) ||
          (isRequest(input) && input.body !== null)) &&
        isGETHEAD
      ) {
        throw new TypeError('Request with GET/HEAD method cannot have body')
      }
      const inputBody =
        init.body !== null && init.body !== undefined
          ? init.body
          : isRequest(input) && input.body !== null
            ? clone(input)
            : null
      super(inputBody, {
        timeout: init.timeout || input.timeout || 0,
        size: init.size || input.size || 0
      })
      const headers = new Headers(init.headers || input.headers || {})
      if (
        inputBody !== null &&
        inputBody !== undefined &&
        !headers.has('Content-Type')
      ) {
        const contentType = extractContentType(inputBody)
        if (contentType) {
          headers.append('Content-Type', contentType)
        }
      }
      const signal = 'signal' in init ? init.signal : null
      if (signal !== null && signal !== undefined && !isAbortSignal(signal)) {
        throw new TypeError('Expected signal must be an instanceof AbortSignal')
      }

      // TLS specific options that are handled by node
      const {
        ca,
        cert,
        ciphers,
        clientCertEngine,
        crl,
        dhparam,
        ecdhCurve,
        family,
        honorCipherOrder,
        key,
        passphrase,
        pfx,
        rejectUnauthorized = process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0',
        secureOptions,
        secureProtocol,
        servername,
        sessionIdContext
      } = init
      this[INTERNALS] = {
        method,
        redirect: init.redirect || input.redirect || 'follow',
        headers,
        parsedURL,
        signal,
        ca,
        cert,
        ciphers,
        clientCertEngine,
        crl,
        dhparam,
        ecdhCurve,
        family,
        honorCipherOrder,
        key,
        passphrase,
        pfx,
        rejectUnauthorized,
        secureOptions,
        secureProtocol,
        servername,
        sessionIdContext
      }

      // node-fetch-only options
      this.follow =
        init.follow !== undefined
          ? init.follow
          : input.follow !== undefined
            ? input.follow
            : 20
      this.compress =
        init.compress !== undefined
          ? init.compress
          : input.compress !== undefined
            ? input.compress
            : true
      this.counter = init.counter || input.counter || 0
      this.agent = init.agent || input.agent
    }
    get method() {
      return this[INTERNALS].method
    }
    get url() {
      return this[INTERNALS].parsedURL.toString()
    }
    get headers() {
      return this[INTERNALS].headers
    }
    get redirect() {
      return this[INTERNALS].redirect
    }
    get signal() {
      return this[INTERNALS].signal
    }
    clone() {
      return new Request(this)
    }
    get [Symbol.toStringTag]() {
      return 'Request'
    }
    static getNodeRequestOptions(request) {
      const parsedURL = request[INTERNALS].parsedURL
      const headers = new Headers(request[INTERNALS].headers)

      // fetch step 1.3
      if (!headers.has('Accept')) {
        headers.set('Accept', '*/*')
      }

      // Basic fetch
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError('Only HTTP(S) protocols are supported')
      }
      if (
        request.signal &&
        Minipass.isStream(request.body) &&
        typeof request.body.destroy !== 'function'
      ) {
        throw new Error(
          'Cancellation of streamed requests with AbortSignal is not supported'
        )
      }

      // HTTP-network-or-cache fetch steps 2.4-2.7
      const contentLengthValue =
        (request.body === null || request.body === undefined) &&
        /^(POST|PUT)$/i.test(request.method)
          ? '0'
          : request.body !== null && request.body !== undefined
            ? getTotalBytes(request)
            : null
      if (contentLengthValue) {
        headers.set('Content-Length', contentLengthValue + '')
      }

      // HTTP-network-or-cache fetch step 2.11
      if (!headers.has('User-Agent')) {
        headers.set('User-Agent', defaultUserAgent)
      }

      // HTTP-network-or-cache fetch step 2.15
      if (request.compress && !headers.has('Accept-Encoding')) {
        headers.set('Accept-Encoding', 'gzip,deflate')
      }
      const agent =
        typeof request.agent === 'function'
          ? request.agent(parsedURL)
          : request.agent
      if (!headers.has('Connection') && !agent) {
        headers.set('Connection', 'close')
      }

      // TLS specific options that are handled by node
      const {
        ca,
        cert,
        ciphers,
        clientCertEngine,
        crl,
        dhparam,
        ecdhCurve,
        family,
        honorCipherOrder,
        key,
        passphrase,
        pfx,
        rejectUnauthorized,
        secureOptions,
        secureProtocol,
        servername,
        sessionIdContext
      } = request[INTERNALS]

      // HTTP-network fetch step 4.2
      // chunked encoding is handled by Node.js

      // we cannot spread parsedURL directly, so we have to read each property one-by-one
      // and map them to the equivalent https?.request() method options
      const urlProps = {
        auth:
          parsedURL.username || parsedURL.password
            ? `${parsedURL.username}:${parsedURL.password}`
            : '',
        host: parsedURL.host,
        hostname: parsedURL.hostname,
        path: `${parsedURL.pathname}${parsedURL.search}`,
        port: parsedURL.port,
        protocol: parsedURL.protocol
      }
      return {
        ...urlProps,
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent,
        ca,
        cert,
        ciphers,
        clientCertEngine,
        crl,
        dhparam,
        ecdhCurve,
        family,
        honorCipherOrder,
        key,
        passphrase,
        pfx,
        rejectUnauthorized,
        secureOptions,
        secureProtocol,
        servername,
        sessionIdContext,
        timeout: request.timeout
      }
    }
  }
  request = Request
  Object.defineProperties(Request.prototype, {
    method: {
      enumerable: true
    },
    url: {
      enumerable: true
    },
    headers: {
      enumerable: true
    },
    redirect: {
      enumerable: true
    },
    clone: {
      enumerable: true
    },
    signal: {
      enumerable: true
    }
  })
  return request
}

let abortError
let hasRequiredAbortError
function requireAbortError() {
  if (hasRequiredAbortError) {
    return abortError
  }
  hasRequiredAbortError = 1
  class AbortError extends Error {
    constructor(message) {
      super(message)
      this.code = 'FETCH_ABORTED'
      this.type = 'aborted'
      Error.captureStackTrace(this, this.constructor)
    }
    get name() {
      return 'AbortError'
    }

    // don't allow name to be overridden, but don't throw either
    set name(s) {}
  }
  abortError = AbortError
  return abortError
}

let lib$6
let hasRequiredLib$7
function requireLib$7() {
  if (hasRequiredLib$7) {
    return lib$6
  }
  hasRequiredLib$7 = 1
  const { URL } = require$$0$2
  const http = require$$0$i
  const https = require$$2$5
  const zlib = requireCommonjs$1()
  const { Minipass } = requireCommonjs$7()
  const Body = requireBody()
  const { writeToStream, getTotalBytes } = Body
  const Response = requireResponse()
  const Headers = requireHeaders()
  const { createHeadersLenient } = Headers
  const Request = requireRequest()
  const { getNodeRequestOptions } = Request
  const FetchError = requireFetchError()
  const AbortError = requireAbortError()

  // XXX this should really be split up and unit-ized for easier testing
  // and better DRY implementation of data/http request aborting
  const fetch = async (url, opts) => {
    if (/^data:/.test(url)) {
      const request = new Request(url, opts)
      // delay 1 promise tick so that the consumer can abort right away
      return Promise.resolve().then(
        () =>
          new Promise((resolve, reject) => {
            let type, data
            try {
              const { pathname, search } = new URL(url)
              const split = pathname.split(',')
              if (split.length < 2) {
                throw new Error('invalid data: URI')
              }
              const mime = split.shift()
              const base64 = /;base64$/.test(mime)
              type = base64 ? mime.slice(0, -1 * ';base64'.length) : mime
              const rawData = decodeURIComponent(split.join(',') + search)
              data = base64
                ? Buffer.from(rawData, 'base64')
                : Buffer.from(rawData)
            } catch (er) {
              return reject(
                new FetchError(
                  `[${request.method}] ${request.url} invalid URL, ${er.message}`,
                  'system',
                  er
                )
              )
            }
            const { signal } = request
            if (signal && signal.aborted) {
              return reject(new AbortError('The user aborted a request.'))
            }
            const headers = {
              'Content-Length': data.length
            }
            if (type) {
              headers['Content-Type'] = type
            }
            return resolve(
              new Response(data, {
                headers
              })
            )
          })
      )
    }
    return new Promise((resolve, reject) => {
      // build request object
      const request = new Request(url, opts)
      let options
      try {
        options = getNodeRequestOptions(request)
      } catch (er) {
        return reject(er)
      }
      const send = (options.protocol === 'https:' ? https : http).request
      const { signal } = request
      let response = null
      const abort = () => {
        const error = new AbortError('The user aborted a request.')
        reject(error)
        if (
          Minipass.isStream(request.body) &&
          typeof request.body.destroy === 'function'
        ) {
          request.body.destroy(error)
        }
        if (response && response.body) {
          response.body.emit('error', error)
        }
      }
      if (signal && signal.aborted) {
        return abort()
      }
      const abortAndFinalize = () => {
        abort()
        finalize()
      }
      const finalize = () => {
        req.abort()
        if (signal) {
          signal.removeEventListener('abort', abortAndFinalize)
        }
        clearTimeout(reqTimeout)
      }

      // send request
      const req = send(options)
      if (signal) {
        signal.addEventListener('abort', abortAndFinalize)
      }
      let reqTimeout = null
      if (request.timeout) {
        req.once('socket', () => {
          reqTimeout = setTimeout(() => {
            reject(
              new FetchError(
                `network timeout at: ${request.url}`,
                'request-timeout'
              )
            )
            finalize()
          }, request.timeout)
        })
      }
      req.on('error', er => {
        // if a 'response' event is emitted before the 'error' event, then by the
        // time this handler is run it's too late to reject the Promise for the
        // response. instead, we forward the error event to the response stream
        // so that the error will surface to the user when they try to consume
        // the body. this is done as a side effect of aborting the request except
        // for in windows, where we must forward the event manually, otherwise
        // there is no longer a ref'd socket attached to the request and the
        // stream never ends so the event loop runs out of work and the process
        // exits without warning.
        // coverage skipped here due to the difficulty in testing
        // istanbul ignore next
        if (req.res) {
          req.res.emit('error', er)
        }
        reject(
          new FetchError(
            `request to ${request.url} failed, reason: ${er.message}`,
            'system',
            er
          )
        )
        finalize()
      })
      req.on('response', res => {
        clearTimeout(reqTimeout)
        const headers = createHeadersLenient(res.headers)

        // HTTP fetch step 5
        if (fetch.isRedirect(res.statusCode)) {
          // HTTP fetch step 5.2
          const location = headers.get('Location')

          // HTTP fetch step 5.3
          let locationURL = null
          try {
            locationURL =
              location === null
                ? null
                : new URL(location, request.url).toString()
          } catch {
            // error here can only be invalid URL in Location: header
            // do not throw when options.redirect == manual
            // let the user extract the errorneous redirect URL
            if (request.redirect !== 'manual') {
              /* eslint-disable-next-line max-len */
              reject(
                new FetchError(
                  `uri requested responds with an invalid redirect URL: ${location}`,
                  'invalid-redirect'
                )
              )
              finalize()
              return
            }
          }

          // HTTP fetch step 5.5
          if (request.redirect === 'error') {
            reject(
              new FetchError(
                'uri requested responds with a redirect, ' +
                  `redirect mode is set to error: ${request.url}`,
                'no-redirect'
              )
            )
            finalize()
            return
          } else if (request.redirect === 'manual') {
            // node-fetch-specific step: make manual redirect a bit easier to
            // use by setting the Location header value to the resolved URL.
            if (locationURL !== null) {
              // handle corrupted header
              try {
                headers.set('Location', locationURL)
              } catch (err) {
                /* istanbul ignore next: nodejs server prevent invalid
                   response headers, we can't test this through normal
                   request */
                reject(err)
              }
            }
          } else if (request.redirect === 'follow' && locationURL !== null) {
            // HTTP-redirect fetch step 5
            if (request.counter >= request.follow) {
              reject(
                new FetchError(
                  `maximum redirect reached at: ${request.url}`,
                  'max-redirect'
                )
              )
              finalize()
              return
            }

            // HTTP-redirect fetch step 9
            if (
              res.statusCode !== 303 &&
              request.body &&
              getTotalBytes(request) === null
            ) {
              reject(
                new FetchError(
                  'Cannot follow redirect with body being a readable stream',
                  'unsupported-redirect'
                )
              )
              finalize()
              return
            }

            // Update host due to redirection
            request.headers.set('host', new URL(locationURL).host)

            // HTTP-redirect fetch step 6 (counter increment)
            // Create a new Request object.
            const requestOpts = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              timeout: request.timeout
            }

            // if the redirect is to a new hostname, strip the authorization and cookie headers
            const parsedOriginal = new URL(request.url)
            const parsedRedirect = new URL(locationURL)
            if (parsedOriginal.hostname !== parsedRedirect.hostname) {
              requestOpts.headers.delete('authorization')
              requestOpts.headers.delete('cookie')
            }

            // HTTP-redirect fetch step 11
            if (
              res.statusCode === 303 ||
              ((res.statusCode === 301 || res.statusCode === 302) &&
                request.method === 'POST')
            ) {
              requestOpts.method = 'GET'
              requestOpts.body = undefined
              requestOpts.headers.delete('content-length')
            }

            // HTTP-redirect fetch step 15
            resolve(fetch(new Request(locationURL, requestOpts)))
            finalize()
            return
          }
        } // end if(isRedirect)

        // prepare response
        res.once(
          'end',
          () => signal && signal.removeEventListener('abort', abortAndFinalize)
        )
        const body = new Minipass()
        // if an error occurs, either on the response stream itself, on one of the
        // decoder streams, or a response length timeout from the Body class, we
        // forward the error through to our internal body stream. If we see an
        // error event on that, we call finalize to abort the request and ensure
        // we don't leave a socket believing a request is in flight.
        // this is difficult to test, so lacks specific coverage.
        body.on('error', finalize)
        // exceedingly rare that the stream would have an error,
        // but just in case we proxy it to the stream in use.
        res.on('error', /* istanbul ignore next */ er => body.emit('error', er))
        res.on('data', chunk => body.write(chunk))
        res.on('end', () => body.end())
        const responseOptions = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers: headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter,
          trailer: new Promise(resolveTrailer =>
            res.on('end', () =>
              resolveTrailer(createHeadersLenient(res.trailers))
            )
          )
        }

        // HTTP-network fetch step 12.1.1.3
        const codings = headers.get('Content-Encoding')

        // HTTP-network fetch step 12.1.1.4: handle content codings

        // in following scenarios we ignore compression support
        // 1. compression support is disabled
        // 2. HEAD request
        // 3. no Content-Encoding header
        // 4. no content response (204)
        // 5. content not modified response (304)
        if (
          !request.compress ||
          request.method === 'HEAD' ||
          codings === null ||
          res.statusCode === 204 ||
          res.statusCode === 304
        ) {
          response = new Response(body, responseOptions)
          resolve(response)
          return
        }

        // Be less strict when decoding compressed responses, since sometimes
        // servers send slightly invalid responses that are still accepted
        // by common browsers.
        // Always using Z_SYNC_FLUSH is what cURL does.
        const zlibOptions = {
          flush: zlib.constants.Z_SYNC_FLUSH,
          finishFlush: zlib.constants.Z_SYNC_FLUSH
        }

        // for gzip
        if (codings === 'gzip' || codings === 'x-gzip') {
          const unzip = new zlib.Gunzip(zlibOptions)
          response = new Response(
            // exceedingly rare that the stream would have an error,
            // but just in case we proxy it to the stream in use.
            body
              .on(
                'error',
                /* istanbul ignore next */ er => unzip.emit('error', er)
              )
              .pipe(unzip),
            responseOptions
          )
          resolve(response)
          return
        }

        // for deflate
        if (codings === 'deflate' || codings === 'x-deflate') {
          // handle the infamous raw deflate response from old servers
          // a hack for old IIS and Apache servers
          res.once('data', chunk => {
            // see http://stackoverflow.com/questions/37519828
            const decoder =
              (chunk[0] & 0x0f) === 0x08
                ? new zlib.Inflate()
                : new zlib.InflateRaw()
            // exceedingly rare that the stream would have an error,
            // but just in case we proxy it to the stream in use.
            body
              .on(
                'error',
                /* istanbul ignore next */ er => decoder.emit('error', er)
              )
              .pipe(decoder)
            response = new Response(decoder, responseOptions)
            resolve(response)
          })
          return
        }

        // for br
        if (codings === 'br') {
          // ignoring coverage so tests don't have to fake support (or lack of) for brotli
          // istanbul ignore next
          try {
            var decoder = new zlib.BrotliDecompress()
          } catch (err) {
            reject(err)
            finalize()
            return
          }
          // exceedingly rare that the stream would have an error,
          // but just in case we proxy it to the stream in use.
          body
            .on(
              'error',
              /* istanbul ignore next */ er => decoder.emit('error', er)
            )
            .pipe(decoder)
          response = new Response(decoder, responseOptions)
          resolve(response)
          return
        }

        // otherwise, use response as-is
        response = new Response(body, responseOptions)
        resolve(response)
      })
      writeToStream(req, request)
    })
  }
  lib$6 = fetch
  fetch.isRedirect = code =>
    code === 301 || code === 302 || code === 303 || code === 307 || code === 308
  fetch.Headers = Headers
  fetch.Request = Request
  fetch.Response = Response
  fetch.FetchError = FetchError
  fetch.AbortError = AbortError
  return lib$6
}

const name$1 = 'npm-registry-fetch'
const version$3 = '18.0.2'
const require$$0 = {
  name: name$1,
  version: version$3
}

let defaultOpts
let hasRequiredDefaultOpts
function requireDefaultOpts() {
  if (hasRequiredDefaultOpts) {
    return defaultOpts
  }
  hasRequiredDefaultOpts = 1
  const pkg = require$$0
  defaultOpts = {
    maxSockets: 12,
    method: 'GET',
    registry: 'https://registry.npmjs.org/',
    timeout: 5 * 60 * 1000,
    // 5 minutes
    strictSSL: true,
    noProxy: process.env.NOPROXY,
    userAgent: `${pkg.name}@${pkg.version}/node@${process.version}+${process.arch} (${process.platform})`
  }
  return defaultOpts
}

let matchers
let hasRequiredMatchers
function requireMatchers() {
  if (hasRequiredMatchers) {
    return matchers
  }
  hasRequiredMatchers = 1
  const TYPE_REGEX = 'regex'
  const TYPE_URL = 'url'
  const TYPE_PATH = 'path'
  const NPM_SECRET = {
    type: TYPE_REGEX,
    pattern: /\b(npms?_)[a-zA-Z0-9]{36,48}\b/gi,
    replacement: `[REDACTED_NPM_SECRET]`
  }
  const AUTH_HEADER = {
    type: TYPE_REGEX,
    pattern: /\b(Basic\s+|Bearer\s+)[\w+=\-.]+\b/gi,
    replacement: `[REDACTED_AUTH_HEADER]`
  }
  const JSON_WEB_TOKEN = {
    type: TYPE_REGEX,
    pattern:
      /\b[A-Za-z0-9-_]{10,}(?!\.\d+\.)\.[A-Za-z0-9-_]{3,}\.[A-Za-z0-9-_]{20,}\b/gi,
    replacement: `[REDACTED_JSON_WEB_TOKEN]`
  }
  const UUID = {
    type: TYPE_REGEX,
    pattern:
      /\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b/gi,
    replacement: `[REDACTED_UUID]`
  }
  const URL_MATCHER = {
    type: TYPE_REGEX,
    pattern: /(?:https?|ftp):\/\/[^\s/"$.?#].[^\s"]*/gi,
    replacement: '[REDACTED_URL]'
  }
  const DEEP_HEADER_AUTHORIZATION = {
    type: TYPE_PATH,
    predicate: ({ path }) => path.endsWith('.headers.authorization'),
    replacement: '[REDACTED_HEADER_AUTHORIZATION]'
  }
  const DEEP_HEADER_SET_COOKIE = {
    type: TYPE_PATH,
    predicate: ({ path }) => path.endsWith('.headers.set-cookie'),
    replacement: '[REDACTED_HEADER_SET_COOKIE]'
  }
  const DEEP_HEADER_COOKIE = {
    type: TYPE_PATH,
    predicate: ({ path }) => path.endsWith('.headers.cookie'),
    replacement: '[REDACTED_HEADER_COOKIE]'
  }
  const REWRITE_REQUEST = {
    type: TYPE_PATH,
    predicate: ({ path }) => path.endsWith('.request'),
    replacement: input => ({
      method: input?.method,
      path: input?.path,
      headers: input?.headers,
      url: input?.url
    })
  }
  const REWRITE_RESPONSE = {
    type: TYPE_PATH,
    predicate: ({ path }) => path.endsWith('.response'),
    replacement: input => ({
      data: input?.data,
      status: input?.status,
      headers: input?.headers
    })
  }
  matchers = {
    TYPE_REGEX,
    TYPE_URL,
    TYPE_PATH,
    NPM_SECRET,
    AUTH_HEADER,
    JSON_WEB_TOKEN,
    UUID,
    URL_MATCHER,
    DEEP_HEADER_AUTHORIZATION,
    DEEP_HEADER_SET_COOKIE,
    DEEP_HEADER_COOKIE,
    REWRITE_REQUEST,
    REWRITE_RESPONSE
  }
  return matchers
}

let utils$2
let hasRequiredUtils$2
function requireUtils$2() {
  if (hasRequiredUtils$2) {
    return utils$2
  }
  hasRequiredUtils$2 = 1
  const { URL_MATCHER, TYPE_URL, TYPE_REGEX, TYPE_PATH } = requireMatchers()

  /**
   * creates a string of asterisks,
   * this forces a minimum asterisk for security purposes
   */
  const asterisk = (length = 0) => {
    length = typeof length === 'string' ? length.length : length
    if (length < 8) {
      return '*'.repeat(8)
    }
    return '*'.repeat(length)
  }

  /**
   * escapes all special regex chars
   * @see https://stackoverflow.com/a/9310752
   * @see https://github.com/tc39/proposal-regex-escaping
   */
  const escapeRegExp = text => {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, `\\$&`)
  }

  /**
   * provieds a regex "or" of the url versions of a string
   */
  const urlEncodeRegexGroup = value => {
    const decoded = decodeURIComponent(value)
    const encoded = encodeURIComponent(value)
    const union = [...new Set([encoded, decoded, value])]
      .map(escapeRegExp)
      .join('|')
    return union
  }

  /**
   * a tagged template literal that returns a regex ensures all variables are excaped
   */
  const urlEncodeRegexTag = (strings, ...values) => {
    let pattern = ''
    for (let i = 0; i < values.length; i++) {
      pattern += strings[i] + `(${urlEncodeRegexGroup(values[i])})`
    }
    pattern += strings[strings.length - 1]
    return new RegExp(pattern)
  }

  /**
   * creates a matcher for redacting url hostname
   */
  const redactUrlHostnameMatcher = ({ hostname, replacement } = {}) => ({
    type: TYPE_URL,
    predicate: ({ url }) => url.hostname === hostname,
    pattern: ({ url }) => {
      return urlEncodeRegexTag`(^${url.protocol}//${url.username}:.+@)?${url.hostname}`
    },
    replacement: `$1${replacement || asterisk()}`
  })

  /**
   * creates a matcher for redacting url search / query parameter values
   */
  const redactUrlSearchParamsMatcher = ({ param, replacement } = {}) => ({
    type: TYPE_URL,
    predicate: ({ url }) => url.searchParams.has(param),
    pattern: ({ url }) =>
      urlEncodeRegexTag`(${param}=)${url.searchParams.get(param)}`,
    replacement: `$1${replacement || asterisk()}`
  })

  /** creates a matcher for redacting the url password */
  const redactUrlPasswordMatcher = ({ replacement } = {}) => ({
    type: TYPE_URL,
    predicate: ({ url }) => url.password,
    pattern: ({ url }) =>
      urlEncodeRegexTag`(^${url.protocol}//${url.username}:)${url.password}`,
    replacement: `$1${replacement || asterisk()}`
  })
  const redactUrlReplacement =
    (...matchers) =>
    subValue => {
      try {
        const url = new URL(subValue)
        return redactMatchers(...matchers)(subValue, {
          url
        })
      } catch (err) {
        return subValue
      }
    }

  /**
   * creates a matcher / submatcher for urls, this function allows you to first
   * collect all urls within a larger string and then pass those urls to a
   * submatcher
   *
   * @example
   * console.log("this will first match all urls, then pass those urls to the password patcher")
   * redactMatchers(redactUrlMatcher(redactUrlPasswordMatcher()))
   *
   * @example
   * console.log(
   *   "this will assume you are passing in a string that is a url, and will redact the password"
   * )
   * redactMatchers(redactUrlPasswordMatcher())
   *
   */
  const redactUrlMatcher = (...matchers) => {
    return {
      ...URL_MATCHER,
      replacement: redactUrlReplacement(...matchers)
    }
  }
  const matcherFunctions = {
    [TYPE_REGEX]: matcher => value => {
      if (typeof value === 'string') {
        value = value.replace(matcher.pattern, matcher.replacement)
      }
      return value
    },
    [TYPE_URL]: matcher => (value, ctx) => {
      if (typeof value === 'string') {
        try {
          const url = ctx?.url || new URL(value)
          const { predicate, pattern } = matcher
          const predicateValue = predicate({
            url
          })
          if (predicateValue) {
            value = value.replace(
              pattern({
                url
              }),
              matcher.replacement
            )
          }
        } catch (_e) {
          return value
        }
      }
      return value
    },
    [TYPE_PATH]: matcher => (value, ctx) => {
      const rawPath = ctx?.path
      const path = rawPath.join('.').toLowerCase()
      const { predicate, replacement } = matcher
      const replace =
        typeof replacement === 'function' ? replacement : () => replacement
      const shouldRun = predicate({
        rawPath,
        path
      })
      if (shouldRun) {
        value = replace(value, {
          rawPath,
          path
        })
      }
      return value
    }
  }

  /** converts a matcher to a function */
  const redactMatcher = matcher => {
    return matcherFunctions[matcher.type](matcher)
  }

  /** converts a series of matchers to a function */
  const redactMatchers =
    (...matchers) =>
    (value, ctx) => {
      const flatMatchers = matchers.flat()
      return flatMatchers.reduce((result, matcher) => {
        const fn =
          typeof matcher === 'function' ? matcher : redactMatcher(matcher)
        return fn(result, ctx)
      }, value)
    }

  /**
   * replacement handler, keeping $1 (if it exists) and replacing the
   * rest of the string with asterisks, maintaining string length
   */
  const redactDynamicReplacement = () => (value, start) => {
    if (typeof start === 'number') {
      return asterisk(value)
    }
    return start + asterisk(value.substring(start.length).length)
  }

  /**
   * replacement handler, keeping $1 (if it exists) and replacing the
   * rest of the string with a fixed number of asterisks
   */
  const redactFixedReplacement = length => (_value, start) => {
    if (typeof start === 'number') {
      return asterisk(length)
    }
    return start + asterisk(length)
  }
  const redactUrlPassword = (value, replacement) => {
    return redactMatchers(
      redactUrlPasswordMatcher({
        replacement
      })
    )(value)
  }
  utils$2 = {
    asterisk,
    escapeRegExp,
    urlEncodeRegexGroup,
    urlEncodeRegexTag,
    redactUrlHostnameMatcher,
    redactUrlSearchParamsMatcher,
    redactUrlPasswordMatcher,
    redactUrlMatcher,
    redactUrlReplacement,
    redactDynamicReplacement,
    redactFixedReplacement,
    redactMatchers,
    redactUrlPassword
  }
  return utils$2
}

let lib$5
let hasRequiredLib$6
function requireLib$6() {
  if (hasRequiredLib$6) {
    return lib$5
  }
  hasRequiredLib$6 = 1
  const matchers = requireMatchers()
  const { redactUrlPassword } = requireUtils$2()
  const REPLACE = '***'
  const redact = value => {
    if (typeof value !== 'string' || !value) {
      return value
    }
    return redactUrlPassword(value, REPLACE)
      .replace(matchers.NPM_SECRET.pattern, `npm_${REPLACE}`)
      .replace(matchers.UUID.pattern, REPLACE)
  }

  // split on \s|= similar to how nopt parses options
  const splitAndRedact = str => {
    // stateful regex, don't move out of this scope
    const splitChars = /[\s=]/g
    let match = null
    let result = ''
    let index = 0
    while ((match = splitChars.exec(str))) {
      result += redact(str.slice(index, match.index)) + match[0]
      index = splitChars.lastIndex
    }
    return result + redact(str.slice(index))
  }

  // replaces auth info in an array of arguments or in a strings
  const redactLog = arg => {
    if (typeof arg === 'string') {
      return splitAndRedact(arg)
    } else if (Array.isArray(arg)) {
      return arg.map(a => (typeof a === 'string' ? splitAndRedact(a) : a))
    }
    return arg
  }
  lib$5 = {
    redact,
    redactLog
  }
  return lib$5
}

let checkResponse_1
let hasRequiredCheckResponse
function requireCheckResponse() {
  if (hasRequiredCheckResponse) {
    return checkResponse_1
  }
  hasRequiredCheckResponse = 1
  const errors = requireErrors$2()
  const { Response } = requireLib$7()
  const defaultOpts = requireDefaultOpts()
  const { log } = requireLib$t()
  const { redact: cleanUrl } = requireLib$6()

  /* eslint-disable-next-line max-len */
  const moreInfoUrl =
    'https://github.com/npm/cli/wiki/No-auth-for-URI,-but-auth-present-for-scoped-registry'
  const checkResponse = async ({ method, uri, res, startTime, auth, opts }) => {
    opts = {
      ...defaultOpts,
      ...opts
    }
    if (res.headers.has('npm-notice') && !res.headers.has('x-local-cache')) {
      log.notice('', res.headers.get('npm-notice'))
    }
    if (res.status >= 400) {
      logRequest(method, res, startTime)
      if (auth && auth.scopeAuthKey && !auth.token && !auth.auth) {
        // we didn't have auth for THIS request, but we do have auth for
        // requests to the registry indicated by the spec's scope value.
        // Warn the user.
        log.warn(
          'registry',
          `No auth for URI, but auth present for scoped registry.

URI: ${uri}
Scoped Registry Key: ${auth.scopeAuthKey}

More info here: ${moreInfoUrl}`
        )
      }
      return checkErrors(method, res, startTime, opts)
    } else {
      res.body.on('end', () => logRequest(method, res, startTime))
      if (opts.ignoreBody) {
        res.body.resume()
        return new Response(null, res)
      }
      return res
    }
  }
  checkResponse_1 = checkResponse
  function logRequest(method, res, startTime) {
    const elapsedTime = Date.now() - startTime
    const attempt = res.headers.get('x-fetch-attempts')
    const attemptStr = attempt && attempt > 1 ? ` attempt #${attempt}` : ''
    const cacheStatus = res.headers.get('x-local-cache-status')
    const cacheStr = cacheStatus ? ` (cache ${cacheStatus})` : ''
    const urlStr = cleanUrl(res.url)

    // If make-fetch-happen reports a cache hit, then there was no fetch
    if (cacheStatus === 'hit') {
      log.http('cache', `${urlStr} ${elapsedTime}ms${attemptStr}${cacheStr}`)
    } else {
      log.http(
        'fetch',
        `${method.toUpperCase()} ${res.status} ${urlStr} ${elapsedTime}ms${attemptStr}${cacheStr}`
      )
    }
  }
  function checkErrors(method, res, startTime, opts) {
    return res
      .buffer()
      .catch(() => null)
      .then(body => {
        let parsed = body
        try {
          parsed = JSON.parse(body.toString('utf8'))
        } catch {
          // ignore errors
        }
        if (res.status === 401 && res.headers.get('www-authenticate')) {
          const auth = res.headers
            .get('www-authenticate')
            .split(/,\s*/)
            .map(s => s.toLowerCase())
          if (auth.indexOf('ipaddress') !== -1) {
            throw new errors.HttpErrorAuthIPAddress(
              method,
              res,
              parsed,
              opts.spec
            )
          } else if (auth.indexOf('otp') !== -1) {
            throw new errors.HttpErrorAuthOTP(method, res, parsed, opts.spec)
          } else {
            throw new errors.HttpErrorAuthUnknown(
              method,
              res,
              parsed,
              opts.spec
            )
          }
        } else if (
          res.status === 401 &&
          body != null &&
          /one-time pass/.test(body.toString('utf8'))
        ) {
          // Heuristic for malformed OTP responses that don't include the
          // www-authenticate header.
          throw new errors.HttpErrorAuthOTP(method, res, parsed, opts.spec)
        } else {
          throw new errors.HttpErrorGeneral(method, res, parsed, opts.spec)
        }
      })
  }
  return checkResponse_1
}

const npa = { exports: {} }

let hasRequiredNpa
function requireNpa() {
  if (hasRequiredNpa) {
    return npa.exports
  }
  hasRequiredNpa = 1
  const isWindows = process.platform === 'win32'
  const { URL } = require$$0$6
  // We need to use path/win32 so that we get consistent results in tests, but this also means we need to manually convert backslashes to forward slashes when generating file: urls with paths.
  const path = isWindows ? require$$1$7 : require$$2$3
  const { homedir } = require$$1$6
  const HostedGit = requireLib$s()
  const semver = requireSemver()
  const validatePackageName = requireLib$p()
  const { log } = requireLib$t()
  const hasSlashes = isWindows ? /\\|[/]/ : /[/]/
  const isURL = /^(?:git[+])?[a-z]+:/i
  const isGit = /^[^@]+@[^:.]+\.[^:]+:.+$/i
  const isFileType = /[.](?:tgz|tar.gz|tar)$/i
  const isPortNumber = /:[0-9]+(\/|$)/i
  const isWindowsFile = /^(?:[.]|~[/]|[/\\]|[a-zA-Z]:)/
  const isPosixFile = /^(?:[.]|~[/]|[/]|[a-zA-Z]:)/
  const defaultRegistry = 'https://registry.npmjs.org'
  function npa$1(arg, where) {
    let name
    let spec
    if (typeof arg === 'object') {
      if (arg instanceof Result && (!where || where === arg.where)) {
        return arg
      } else if (arg.name && arg.rawSpec) {
        return npa$1.resolve(arg.name, arg.rawSpec, where || arg.where)
      } else {
        return npa$1(arg.raw, where || arg.where)
      }
    }
    const nameEndsAt = arg.indexOf('@', 1) // Skip possible leading @
    const namePart = nameEndsAt > 0 ? arg.slice(0, nameEndsAt) : arg
    if (isURL.test(arg)) {
      spec = arg
    } else if (isGit.test(arg)) {
      spec = `git+ssh://${arg}`
      // eslint-disable-next-line max-len
    } else if (
      !namePart.startsWith('@') &&
      (hasSlashes.test(namePart) || isFileType.test(namePart))
    ) {
      spec = arg
    } else if (nameEndsAt > 0) {
      name = namePart
      spec = arg.slice(nameEndsAt + 1) || '*'
    } else {
      const valid = validatePackageName(arg)
      if (valid.validForOldPackages) {
        name = arg
        spec = '*'
      } else {
        spec = arg
      }
    }
    return resolve(name, spec, where, arg)
  }
  function isFileSpec(spec) {
    if (!spec) {
      return false
    }
    if (spec.toLowerCase().startsWith('file:')) {
      return true
    }
    if (isWindows) {
      return isWindowsFile.test(spec)
    }
    // We never hit this in windows tests, obviously
    /* istanbul ignore next */
    return isPosixFile.test(spec)
  }
  function isAliasSpec(spec) {
    if (!spec) {
      return false
    }
    return spec.toLowerCase().startsWith('npm:')
  }
  function resolve(name, spec, where, arg) {
    const res = new Result({
      raw: arg,
      name: name,
      rawSpec: spec,
      fromArgument: arg != null
    })
    if (name) {
      res.name = name
    }
    if (!where) {
      where = process.cwd()
    }
    if (isFileSpec(spec)) {
      return fromFile(res, where)
    } else if (isAliasSpec(spec)) {
      return fromAlias(res, where)
    }
    const hosted = HostedGit.fromUrl(spec, {
      noGitPlus: true,
      noCommittish: true
    })
    if (hosted) {
      return fromHostedGit(res, hosted)
    } else if (spec && isURL.test(spec)) {
      return fromURL(res)
    } else if (spec && (hasSlashes.test(spec) || isFileType.test(spec))) {
      return fromFile(res, where)
    } else {
      return fromRegistry(res)
    }
  }
  function toPurl(arg, reg = defaultRegistry) {
    const res = npa$1(arg)
    if (res.type !== 'version') {
      throw invalidPurlType(res.type, res.raw)
    }

    // URI-encode leading @ of scoped packages
    let purl = 'pkg:npm/' + res.name.replace(/^@/, '%40') + '@' + res.rawSpec
    if (reg !== defaultRegistry) {
      purl += '?repository_url=' + reg
    }
    return purl
  }
  function invalidPackageName(name, valid, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid package name "${name}" of package "${raw}": ${valid.errors.join('; ')}.`
    )
    err.code = 'EINVALIDPACKAGENAME'
    return err
  }
  function invalidTagName(name, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid tag name "${name}" of package "${raw}": Tags may not have any characters that encodeURIComponent encodes.`
    )
    err.code = 'EINVALIDTAGNAME'
    return err
  }
  function invalidPurlType(type, raw) {
    // eslint-disable-next-line max-len
    const err = new Error(
      `Invalid type "${type}" of package "${raw}": Purl can only be generated for "version" types.`
    )
    err.code = 'EINVALIDPURLTYPE'
    return err
  }
  class Result {
    constructor(opts) {
      this.type = opts.type
      this.registry = opts.registry
      this.where = opts.where
      if (opts.raw == null) {
        this.raw = opts.name ? `${opts.name}@${opts.rawSpec}` : opts.rawSpec
      } else {
        this.raw = opts.raw
      }
      this.name = undefined
      this.escapedName = undefined
      this.scope = undefined
      this.rawSpec = opts.rawSpec || ''
      this.saveSpec = opts.saveSpec
      this.fetchSpec = opts.fetchSpec
      if (opts.name) {
        this.setName(opts.name)
      }
      this.gitRange = opts.gitRange
      this.gitCommittish = opts.gitCommittish
      this.gitSubdir = opts.gitSubdir
      this.hosted = opts.hosted
    }

    // TODO move this to a getter/setter in a semver major
    setName(name) {
      const valid = validatePackageName(name)
      if (!valid.validForOldPackages) {
        throw invalidPackageName(name, valid, this.raw)
      }
      this.name = name
      this.scope =
        name[0] === '@' ? name.slice(0, name.indexOf('/')) : undefined
      // scoped packages in couch must have slash url-encoded, e.g. @foo%2Fbar
      this.escapedName = name.replace('/', '%2f')
      return this
    }
    toString() {
      const full = []
      if (this.name != null && this.name !== '') {
        full.push(this.name)
      }
      const spec = this.saveSpec || this.fetchSpec || this.rawSpec
      if (spec != null && spec !== '') {
        full.push(spec)
      }
      return full.length ? full.join('@') : this.raw
    }
    toJSON() {
      const result = Object.assign({}, this)
      delete result.hosted
      return result
    }
  }

  // sets res.gitCommittish, res.gitRange, and res.gitSubdir
  function setGitAttrs(res, committish) {
    if (!committish) {
      res.gitCommittish = null
      return
    }

    // for each :: separated item:
    for (const part of committish.split('::')) {
      // if the item has no : the n it is a commit-ish
      if (!part.includes(':')) {
        if (res.gitRange) {
          throw new Error(
            'cannot override existing semver range with a committish'
          )
        }
        if (res.gitCommittish) {
          throw new Error(
            'cannot override existing committish with a second committish'
          )
        }
        res.gitCommittish = part
        continue
      }
      // split on name:value
      const [name, value] = part.split(':')
      // if name is semver do semver lookup of ref or tag
      if (name === 'semver') {
        if (res.gitCommittish) {
          throw new Error(
            'cannot override existing committish with a semver range'
          )
        }
        if (res.gitRange) {
          throw new Error(
            'cannot override existing semver range with a second semver range'
          )
        }
        res.gitRange = decodeURIComponent(value)
        continue
      }
      if (name === 'path') {
        if (res.gitSubdir) {
          throw new Error('cannot override existing path with a second path')
        }
        res.gitSubdir = `/${value}`
        continue
      }
      log.warn('npm-package-arg', `ignoring unknown key "${name}"`)
    }
  }

  // Taken from: EncodePathChars and lookup_table in src/node_url.cc
  // url.pathToFileURL only returns absolute references.  We can't use it to encode paths.
  // encodeURI mangles windows paths. We can't use it to encode paths.
  // Under the hood, url.pathToFileURL does a limited set of encoding, with an extra windows step, and then calls path.resolve.
  // The encoding node does without path.resolve is not available outside of the source, so we are recreating it here.
  const encodedPathChars = new Map([
    ['\0', '%00'],
    ['\t', '%09'],
    ['\n', '%0A'],
    ['\r', '%0D'],
    [' ', '%20'],
    ['"', '%22'],
    ['#', '%23'],
    ['%', '%25'],
    ['?', '%3F'],
    ['[', '%5B'],
    ['\\', isWindows ? '/' : '%5C'],
    [']', '%5D'],
    ['^', '%5E'],
    ['|', '%7C'],
    ['~', '%7E']
  ])
  function pathToFileURL(str) {
    let result = ''
    for (let i = 0; i < str.length; i++) {
      result = `${result}${encodedPathChars.get(str[i]) ?? str[i]}`
    }
    if (result.startsWith('file:')) {
      return result
    }
    return `file:${result}`
  }
  function fromFile(res, where) {
    res.type = isFileType.test(res.rawSpec) ? 'file' : 'directory'
    res.where = where
    let rawSpec = pathToFileURL(res.rawSpec)
    if (rawSpec.startsWith('file:/')) {
      // XXX backwards compatibility lack of compliance with RFC 8089

      // turn file://path into file:/path
      if (/^file:\/\/[^/]/.test(rawSpec)) {
        rawSpec = `file:/${rawSpec.slice(5)}`
      }

      // turn file:/../path into file:../path
      // for 1 or 3 leading slashes (2 is already ruled out from handling file:// explicitly above)
      if (/^\/{1,3}\.\.?(\/|$)/.test(rawSpec.slice(5))) {
        rawSpec = rawSpec.replace(/^file:\/{1,3}/, 'file:')
      }
    }
    let resolvedUrl
    let specUrl
    try {
      // always put the '/' on "where", or else file:foo from /path/to/bar goes to /path/to/foo, when we want it to be /path/to/bar/foo
      resolvedUrl = new URL(rawSpec, `${pathToFileURL(path.resolve(where))}/`)
      specUrl = new URL(rawSpec)
    } catch (originalError) {
      const er = new Error('Invalid file: URL, must comply with RFC 8089')
      throw Object.assign(er, {
        raw: res.rawSpec,
        spec: res,
        where,
        originalError
      })
    }

    // turn /C:/blah into just C:/blah on windows
    let specPath = decodeURIComponent(specUrl.pathname)
    let resolvedPath = decodeURIComponent(resolvedUrl.pathname)
    if (isWindows) {
      specPath = specPath.replace(/^\/+([a-z]:\/)/i, '$1')
      resolvedPath = resolvedPath.replace(/^\/+([a-z]:\/)/i, '$1')
    }

    // replace ~ with homedir, but keep the ~ in the saveSpec
    // otherwise, make it relative to where param
    if (/^\/~(\/|$)/.test(specPath)) {
      res.saveSpec = `file:${specPath.substr(1)}`
      resolvedPath = path.resolve(homedir(), specPath.substr(3))
    } else if (!path.isAbsolute(rawSpec.slice(5))) {
      res.saveSpec = `file:${path.relative(where, resolvedPath)}`
    } else {
      res.saveSpec = `file:${path.resolve(resolvedPath)}`
    }
    res.fetchSpec = path.resolve(where, resolvedPath)
    // re-normalize the slashes in saveSpec due to node:path/win32 behavior in windows
    res.saveSpec = res.saveSpec.split('\\').join('/')
    // Ignoring because this only happens in windows
    /* istanbul ignore next */
    if (res.saveSpec.startsWith('file://')) {
      // normalization of \\win32\root paths can cause a double / which we don't want
      res.saveSpec = `file:/${res.saveSpec.slice(7)}`
    }
    return res
  }
  function fromHostedGit(res, hosted) {
    res.type = 'git'
    res.hosted = hosted
    res.saveSpec = hosted.toString({
      noGitPlus: false,
      noCommittish: false
    })
    res.fetchSpec =
      hosted.getDefaultRepresentation() === 'shortcut'
        ? null
        : hosted.toString()
    setGitAttrs(res, hosted.committish)
    return res
  }
  function unsupportedURLType(protocol, spec) {
    const err = new Error(`Unsupported URL Type "${protocol}": ${spec}`)
    err.code = 'EUNSUPPORTEDPROTOCOL'
    return err
  }
  function fromURL(res) {
    let rawSpec = res.rawSpec
    res.saveSpec = rawSpec
    if (rawSpec.startsWith('git+ssh:')) {
      // git ssh specifiers are overloaded to also use scp-style git
      // specifiers, so we have to parse those out and treat them special.
      // They are NOT true URIs, so we can't hand them to URL.

      // This regex looks for things that look like:
      // git+ssh://git@my.custom.git.com:username/project.git#deadbeef
      // ...and various combinations. The username in the beginning is *required*.
      const matched = rawSpec.match(
        /^git\+ssh:\/\/([^:#]+:[^#]+(?:\.git)?)(?:#(.*))?$/i
      )
      // Filter out all-number "usernames" which are really port numbers
      // They can either be :1234 :1234/ or :1234/path but not :12abc
      if (matched && !matched[1].match(isPortNumber)) {
        res.type = 'git'
        setGitAttrs(res, matched[2])
        res.fetchSpec = matched[1]
        return res
      }
    } else if (rawSpec.startsWith('git+file://')) {
      // URL can't handle windows paths
      rawSpec = rawSpec.replace(/\\/g, '/')
    }
    const parsedUrl = new URL(rawSpec)
    // check the protocol, and then see if it's git or not
    switch (parsedUrl.protocol) {
      case 'git:':
      case 'git+http:':
      case 'git+https:':
      case 'git+rsync:':
      case 'git+ftp:':
      case 'git+file:':
      case 'git+ssh:':
        res.type = 'git'
        setGitAttrs(res, parsedUrl.hash.slice(1))
        if (
          parsedUrl.protocol === 'git+file:' &&
          /^git\+file:\/\/[a-z]:/i.test(rawSpec)
        ) {
          // URL can't handle drive letters on windows file paths, the host can't contain a :
          res.fetchSpec = `git+file://${parsedUrl.host.toLowerCase()}:${parsedUrl.pathname}`
        } else {
          parsedUrl.hash = ''
          res.fetchSpec = parsedUrl.toString()
        }
        if (res.fetchSpec.startsWith('git+')) {
          res.fetchSpec = res.fetchSpec.slice(4)
        }
        break
      case 'http:':
      case 'https:':
        res.type = 'remote'
        res.fetchSpec = res.saveSpec
        break
      default:
        throw unsupportedURLType(parsedUrl.protocol, rawSpec)
    }
    return res
  }
  function fromAlias(res, where) {
    const subSpec = npa$1(res.rawSpec.substr(4), where)
    if (subSpec.type === 'alias') {
      throw new Error('nested aliases not supported')
    }
    if (!subSpec.registry) {
      throw new Error('aliases only work for registry deps')
    }
    if (!subSpec.name) {
      throw new Error('aliases must have a name')
    }
    res.subSpec = subSpec
    res.registry = true
    res.type = 'alias'
    res.saveSpec = null
    res.fetchSpec = null
    return res
  }
  function fromRegistry(res) {
    res.registry = true
    const spec = res.rawSpec.trim()
    // no save spec for registry components as we save based on the fetched
    // version, not on the argument so this can't compute that.
    res.saveSpec = null
    res.fetchSpec = spec
    const version = semver.valid(spec, true)
    const range = semver.validRange(spec, true)
    if (version) {
      res.type = 'version'
    } else if (range) {
      res.type = 'range'
    } else {
      if (encodeURIComponent(spec) !== spec) {
        throw invalidTagName(spec, res.raw)
      }
      res.type = 'tag'
    }
    return res
  }
  npa.exports = npa$1
  npa.exports.resolve = resolve
  npa.exports.toPurl = toPurl
  npa.exports.Result = Result
  return npa.exports
}

let auth
let hasRequiredAuth
function requireAuth() {
  if (hasRequiredAuth) {
    return auth
  }
  hasRequiredAuth = 1
  const fs = require$$0$4
  const npa = requireNpa()
  const { URL } = require$$0$2

  // Find the longest registry key that is used for some kind of auth
  // in the options.  Returns the registry key and the auth config.
  const regFromURI = (uri, opts) => {
    const parsed = new URL(uri)
    // try to find a config key indicating we have auth for this registry
    // can be one of :_authToken, :_auth, :_password and :username, or
    // :certfile and :keyfile
    // We walk up the "path" until we're left with just //<host>[:<port>],
    // stopping when we reach '//'.
    let regKey = `//${parsed.host}${parsed.pathname}`
    while (regKey.length > '//'.length) {
      const authKey = hasAuth(regKey, opts)
      // got some auth for this URI
      if (authKey) {
        return {
          regKey,
          authKey
        }
      }

      // can be either //host/some/path/:_auth or //host/some/path:_auth
      // walk up by removing EITHER what's after the slash OR the slash itself
      regKey = regKey.replace(/([^/]+|\/)$/, '')
    }
    return {
      regKey: false,
      authKey: null
    }
  }

  // Not only do we want to know if there is auth, but if we are calling `npm
  // logout` we want to know what config value specifically provided it.  This is
  // so we can look up where the config came from to delete it (i.e. user vs
  // project)
  const hasAuth = (regKey, opts) => {
    if (opts[`${regKey}:_authToken`]) {
      return '_authToken'
    }
    if (opts[`${regKey}:_auth`]) {
      return '_auth'
    }
    if (opts[`${regKey}:username`] && opts[`${regKey}:_password`]) {
      // 'password' can be inferred to also be present
      return 'username'
    }
    if (opts[`${regKey}:certfile`] && opts[`${regKey}:keyfile`]) {
      // 'keyfile' can be inferred to also be present
      return 'certfile'
    }
    return false
  }
  const sameHost = (a, b) => {
    const parsedA = new URL(a)
    const parsedB = new URL(b)
    return parsedA.host === parsedB.host
  }
  const getRegistry = opts => {
    const { spec } = opts
    const { scope: specScope, subSpec } = spec ? npa(spec) : {}
    const subSpecScope = subSpec && subSpec.scope
    const scope = subSpec ? subSpecScope : specScope
    const scopeReg = scope && opts[`${scope}:registry`]
    return scopeReg || opts.registry
  }
  const maybeReadFile = file => {
    try {
      return fs.readFileSync(file, 'utf8')
    } catch (er) {
      if (er.code !== 'ENOENT') {
        throw er
      }
      return null
    }
  }
  const getAuth = (uri, opts = {}) => {
    const { forceAuth } = opts
    if (!uri) {
      throw new Error('URI is required')
    }
    const { regKey, authKey } = regFromURI(uri, forceAuth || opts)

    // we are only allowed to use what's in forceAuth if specified
    if (forceAuth && !regKey) {
      return new Auth({
        // if we force auth we don't want to refer back to anything in config
        regKey: false,
        authKey: null,
        scopeAuthKey: null,
        token: forceAuth._authToken || forceAuth.token,
        username: forceAuth.username,
        password: forceAuth._password || forceAuth.password,
        auth: forceAuth._auth || forceAuth.auth,
        certfile: forceAuth.certfile,
        keyfile: forceAuth.keyfile
      })
    }

    // no auth for this URI, but might have it for the registry
    if (!regKey) {
      const registry = getRegistry(opts)
      if (registry && uri !== registry && sameHost(uri, registry)) {
        return getAuth(registry, opts)
      } else if (registry !== opts.registry) {
        // If making a tarball request to a different base URI than the
        // registry where we logged in, but the same auth SHOULD be sent
        // to that artifact host, then we track where it was coming in from,
        // and warn the user if we get a 4xx error on it.
        const { regKey: scopeAuthKey, authKey: _authKey } = regFromURI(
          registry,
          opts
        )
        return new Auth({
          scopeAuthKey,
          regKey: scopeAuthKey,
          authKey: _authKey
        })
      }
    }
    const {
      [`${regKey}:_authToken`]: token,
      [`${regKey}:username`]: username,
      [`${regKey}:_password`]: password,
      [`${regKey}:_auth`]: auth,
      [`${regKey}:certfile`]: certfile,
      [`${regKey}:keyfile`]: keyfile
    } = opts
    return new Auth({
      scopeAuthKey: null,
      regKey,
      authKey,
      token,
      auth,
      username,
      password,
      certfile,
      keyfile
    })
  }
  class Auth {
    constructor({
      token,
      auth,
      username,
      password,
      scopeAuthKey,
      certfile,
      keyfile,
      regKey,
      authKey
    }) {
      // same as regKey but only present for scoped auth. Should have been named scopeRegKey
      this.scopeAuthKey = scopeAuthKey
      // `${regKey}:${authKey}` will get you back to the auth config that gave us auth
      this.regKey = regKey
      this.authKey = authKey
      this.token = null
      this.auth = null
      this.isBasicAuth = false
      this.cert = null
      this.key = null
      if (token) {
        this.token = token
      } else if (auth) {
        this.auth = auth
      } else if (username && password) {
        const p = Buffer.from(password, 'base64').toString('utf8')
        this.auth = Buffer.from(`${username}:${p}`, 'utf8').toString('base64')
        this.isBasicAuth = true
      }
      // mTLS may be used in conjunction with another auth method above
      if (certfile && keyfile) {
        const cert = maybeReadFile(certfile)
        const key = maybeReadFile(keyfile)
        if (cert && key) {
          this.cert = cert
          this.key = key
        }
      }
    }
  }
  auth = getAuth
  return auth
}

const lib$4 = { exports: {} }

let options$1
let hasRequiredOptions$1
function requireOptions$1() {
  if (hasRequiredOptions$1) {
    return options$1
  }
  hasRequiredOptions$1 = 1
  const dns = require$$0$j
  const conditionalHeaders = new Set([
    'if-modified-since',
    'if-none-match',
    'if-unmodified-since',
    'if-match',
    'if-range'
  ])
  const configureOptions = opts => {
    const { strictSSL, ...options } = {
      ...opts
    }
    options.method = options.method ? options.method.toUpperCase() : 'GET'
    if (strictSSL === undefined || strictSSL === null) {
      options.rejectUnauthorized =
        process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0'
    } else {
      options.rejectUnauthorized = strictSSL !== false
    }
    if (!options.retry) {
      options.retry = {
        retries: 0
      }
    } else if (typeof options.retry === 'string') {
      const retries = parseInt(options.retry, 10)
      if (isFinite(retries)) {
        options.retry = {
          retries
        }
      } else {
        options.retry = {
          retries: 0
        }
      }
    } else if (typeof options.retry === 'number') {
      options.retry = {
        retries: options.retry
      }
    } else {
      options.retry = {
        retries: 0,
        ...options.retry
      }
    }
    options.dns = {
      ttl: 5 * 60 * 1000,
      lookup: dns.lookup,
      ...options.dns
    }
    options.cache = options.cache || 'default'
    if (options.cache === 'default') {
      const hasConditionalHeader = Object.keys(options.headers || {}).some(
        name => {
          return conditionalHeaders.has(name.toLowerCase())
        }
      )
      if (hasConditionalHeader) {
        options.cache = 'no-store'
      }
    }
    options.cacheAdditionalHeaders = options.cacheAdditionalHeaders || []

    // cacheManager is deprecated, but if it's set and
    // cachePath is not we should copy it to the new field
    if (options.cacheManager && !options.cachePath) {
      options.cachePath = options.cacheManager
    }
    return options
  }
  options$1 = configureOptions
  return options$1
}

let httpCacheSemantics
let hasRequiredHttpCacheSemantics
function requireHttpCacheSemantics() {
  if (hasRequiredHttpCacheSemantics) {
    return httpCacheSemantics
  }
  hasRequiredHttpCacheSemantics = 1

  /**
   * @typedef {Object} HttpRequest
   * @property {Record<string, string>} headers - Request headers
   * @property {string} [method] - HTTP method
   * @property {string} [url] - Request URL
   */

  /**
   * @typedef {Object} HttpResponse
   * @property {Record<string, string>} headers - Response headers
   * @property {number} [status] - HTTP status code
   */

  /**
   * Set of default cacheable status codes per RFC 7231 section 6.1.
   * @type {Set<number>}
   */
  const statusCodeCacheableByDefault = new Set([
    200, 203, 204, 206, 300, 301, 308, 404, 405, 410, 414, 501
  ])

  /**
   * Set of HTTP status codes that the cache implementation understands.
   * Note: This implementation does not understand partial responses (206).
   * @type {Set<number>}
   */
  const understoodStatuses = new Set([
    200, 203, 204, 300, 301, 302, 303, 307, 308, 404, 405, 410, 414, 501
  ])

  /**
   * Set of HTTP error status codes.
   * @type {Set<number>}
   */
  const errorStatusCodes = new Set([500, 502, 503, 504])

  /**
   * Object representing hop-by-hop headers that should be removed.
   * @type {Record<string, boolean>}
   */
  const hopByHopHeaders = {
    date: true,
    // included, because we add Age update Date
    connection: true,
    'keep-alive': true,
    'proxy-authenticate': true,
    'proxy-authorization': true,
    te: true,
    trailer: true,
    'transfer-encoding': true,
    upgrade: true
  }

  /**
   * Headers that are excluded from revalidation update.
   * @type {Record<string, boolean>}
   */
  const excludedFromRevalidationUpdate = {
    // Since the old body is reused, it doesn't make sense to change properties of the body
    'content-length': true,
    'content-encoding': true,
    'transfer-encoding': true,
    'content-range': true
  }

  /**
   * Converts a string to a number or returns zero if the conversion fails.
   * @param {string} s - The string to convert.
   * @returns {number} The parsed number or 0.
   */
  function toNumberOrZero(s) {
    const n = parseInt(s, 10)
    return isFinite(n) ? n : 0
  }

  /**
   * Determines if the given response is an error response.
   * Implements RFC 5861 behavior.
   * @param {HttpResponse|undefined} response - The HTTP response object.
   * @returns {boolean} true if the response is an error or undefined, false otherwise.
   */
  function isErrorResponse(response) {
    // consider undefined response as faulty
    if (!response) {
      return true
    }
    return errorStatusCodes.has(response.status)
  }

  /**
   * Parses a Cache-Control header string into an object.
   * @param {string} [header] - The Cache-Control header value.
   * @returns {Record<string, string|boolean>} An object representing Cache-Control directives.
   */
  function parseCacheControl(header) {
    /** @type {Record<string, string|boolean>} */
    const cc = {}
    if (!header) {
      return cc
    }

    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),
    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale
    const parts = header.trim().split(/,/)
    for (const part of parts) {
      const [k, v] = part.split(/=/, 2)
      cc[k.trim()] = v === undefined ? true : v.trim().replace(/^"|"$/g, '')
    }
    return cc
  }

  /**
   * Formats a Cache-Control directives object into a header string.
   * @param {Record<string, string|boolean>} cc - The Cache-Control directives.
   * @returns {string|undefined} A formatted Cache-Control header string or undefined if empty.
   */
  function formatCacheControl(cc) {
    let parts = []
    for (const k in cc) {
      const v = cc[k]
      parts.push(v === true ? k : k + '=' + v)
    }
    if (!parts.length) {
      return undefined
    }
    return parts.join(', ')
  }
  httpCacheSemantics = class CachePolicy {
    /**
     * Creates a new CachePolicy instance.
     * @param {HttpRequest} req - Incoming client request.
     * @param {HttpResponse} res - Received server response.
     * @param {Object} [options={}] - Configuration options.
     * @param {boolean} [options.shared=true] - Is the cache shared (a public proxy)? `false` for personal browser caches.
     * @param {number} [options.cacheHeuristic=0.1] - Fallback heuristic (age fraction) for cache duration.
     * @param {number} [options.immutableMinTimeToLive=86400000] - Minimum TTL for immutable responses in milliseconds.
     * @param {boolean} [options.ignoreCargoCult=false] - Detect nonsense cache headers, and override them.
     * @param {any} [options._fromObject] - Internal parameter for deserialization. Do not use.
     */
    constructor(
      req,
      res,
      {
        shared,
        cacheHeuristic,
        immutableMinTimeToLive,
        ignoreCargoCult,
        _fromObject
      } = {}
    ) {
      if (_fromObject) {
        this._fromObject(_fromObject)
        return
      }
      if (!res || !res.headers) {
        throw Error('Response headers missing')
      }
      this._assertRequestHasHeaders(req)

      /** @type {number} Timestamp when the response was received */
      this._responseTime = this.now()
      /** @type {boolean} Indicates if the cache is shared */
      this._isShared = shared !== false
      /** @type {boolean} Indicates if legacy cargo cult directives should be ignored */
      this._ignoreCargoCult = !!ignoreCargoCult
      /** @type {number} Heuristic cache fraction */
      this._cacheHeuristic = undefined !== cacheHeuristic ? cacheHeuristic : 0.1 // 10% matches IE
      /** @type {number} Minimum TTL for immutable responses in ms */
      this._immutableMinTtl =
        undefined !== immutableMinTimeToLive
          ? immutableMinTimeToLive
          : 24 * 3600 * 1000

      /** @type {number} HTTP status code */
      this._status = 'status' in res ? res.status : 200
      /** @type {Record<string, string>} Response headers */
      this._resHeaders = res.headers
      /** @type {Record<string, string|boolean>} Parsed Cache-Control directives from response */
      this._rescc = parseCacheControl(res.headers['cache-control'])
      /** @type {string} HTTP method (e.g., GET, POST) */
      this._method = 'method' in req ? req.method : 'GET'
      /** @type {string} Request URL */
      this._url = req.url
      /** @type {string} Host header from the request */
      this._host = req.headers.host
      /** @type {boolean} Whether the request does not include an Authorization header */
      this._noAuthorization = !req.headers.authorization
      /** @type {Record<string, string>|null} Request headers used for Vary matching */
      this._reqHeaders = res.headers.vary ? req.headers : null // Don't keep all request headers if they won't be used
      /** @type {Record<string, string|boolean>} Parsed Cache-Control directives from request */
      this._reqcc = parseCacheControl(req.headers['cache-control'])

      // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,
      // so there's no point stricly adhering to the blindly copy&pasted directives.
      if (
        this._ignoreCargoCult &&
        'pre-check' in this._rescc &&
        'post-check' in this._rescc
      ) {
        delete this._rescc['pre-check']
        delete this._rescc['post-check']
        delete this._rescc['no-cache']
        delete this._rescc['no-store']
        delete this._rescc['must-revalidate']
        this._resHeaders = Object.assign({}, this._resHeaders, {
          'cache-control': formatCacheControl(this._rescc)
        })
        delete this._resHeaders.expires
        delete this._resHeaders.pragma
      }

      // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive
      // as having the same effect as if "Cache-Control: no-cache" were present (see Section 5.2.1).
      if (
        res.headers['cache-control'] == null &&
        /no-cache/.test(res.headers.pragma)
      ) {
        this._rescc['no-cache'] = true
      }
    }

    /**
     * You can monkey-patch it for testing.
     * @returns {number} Current time in milliseconds.
     */
    now() {
      return Date.now()
    }

    /**
     * Determines if the response is storable in a cache.
     * @returns {boolean} `false` if can never be cached.
     */
    storable() {
      // The "no-store" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.
      return !!(
        !this._reqcc['no-store'] &&
        // A cache MUST NOT store a response to any request, unless:
        // The request method is understood by the cache and defined as being cacheable, and
        ('GET' === this._method ||
          'HEAD' === this._method ||
          ('POST' === this._method && this._hasExplicitExpiration())) &&
        // the response status code is understood by the cache, and
        understoodStatuses.has(this._status) &&
        // the "no-store" cache directive does not appear in request or response header fields, and
        !this._rescc['no-store'] &&
        // the "private" response directive does not appear in the response, if the cache is shared, and
        (!this._isShared || !this._rescc.private) &&
        // the Authorization header field does not appear in the request, if the cache is shared,
        (!this._isShared ||
          this._noAuthorization ||
          this._allowsStoringAuthenticated()) &&
        // the response either:
        // contains an Expires header field, or
        (this._resHeaders.expires ||
          // contains a max-age response directive, or
          // contains a s-maxage response directive and the cache is shared, or
          // contains a public response directive.
          this._rescc['max-age'] ||
          (this._isShared && this._rescc['s-maxage']) ||
          this._rescc.public ||
          // has a status code that is defined as cacheable by default
          statusCodeCacheableByDefault.has(this._status))
      )
    }

    /**
     * @returns {boolean} true if expiration is explicitly defined.
     */
    _hasExplicitExpiration() {
      // 4.2.1 Calculating Freshness Lifetime
      return !!(
        (this._isShared && this._rescc['s-maxage']) ||
        this._rescc['max-age'] ||
        this._resHeaders.expires
      )
    }

    /**
     * @param {HttpRequest} req - a request
     * @throws {Error} if the headers are missing.
     */
    _assertRequestHasHeaders(req) {
      if (!req || !req.headers) {
        throw Error('Request headers missing')
      }
    }

    /**
     * Checks if the request matches the cache and can be satisfied from the cache immediately,
     * without having to make a request to the server.
     *
     * This doesn't support `stale-while-revalidate`. See `evaluateRequest()` for a more complete solution.
     *
     * @param {HttpRequest} req - The new incoming HTTP request.
     * @returns {boolean} `true`` if the cached response used to construct this cache policy satisfies the request without revalidation.
     */
    satisfiesWithoutRevalidation(req) {
      const result = this.evaluateRequest(req)
      return !result.revalidation
    }

    /**
     * @param {{headers: Record<string, string>, synchronous: boolean}|undefined} revalidation - Revalidation information, if any.
     * @returns {{response: {headers: Record<string, string>}, revalidation: {headers: Record<string, string>, synchronous: boolean}|undefined}} An object with a cached response headers and revalidation info.
     */
    _evaluateRequestHitResult(revalidation) {
      return {
        response: {
          headers: this.responseHeaders()
        },
        revalidation
      }
    }

    /**
     * @param {HttpRequest} request - new incoming
     * @param {boolean} synchronous - whether revalidation must be synchronous (not s-w-r).
     * @returns {{headers: Record<string, string>, synchronous: boolean}} An object with revalidation headers and a synchronous flag.
     */
    _evaluateRequestRevalidation(request, synchronous) {
      return {
        synchronous,
        headers: this.revalidationHeaders(request)
      }
    }

    /**
     * @param {HttpRequest} request - new incoming
     * @returns {{response: undefined, revalidation: {headers: Record<string, string>, synchronous: boolean}}} An object indicating no cached response and revalidation details.
     */
    _evaluateRequestMissResult(request) {
      return {
        response: undefined,
        revalidation: this._evaluateRequestRevalidation(request, true)
      }
    }

    /**
     * Checks if the given request matches this cache entry, and how the cache can be used to satisfy it. Returns an object with:
     *
     * ```
     * {
     *     // If defined, you must send a request to the server.
     *     revalidation: {
     *         headers: {}, // HTTP headers to use when sending the revalidation response
     *         // If true, you MUST wait for a response from the server before using the cache
     *         // If false, this is stale-while-revalidate. The cache is stale, but you can use it while you update it asynchronously.
     *         synchronous: bool,
     *     },
     *     // If defined, you can use this cached response.
     *     response: {
     *         headers: {}, // Updated cached HTTP headers you must use when responding to the client
     *     },
     * }
     * ```
     * @param {HttpRequest} req - new incoming HTTP request
     * @returns {{response: {headers: Record<string, string>}|undefined, revalidation: {headers: Record<string, string>, synchronous: boolean}|undefined}} An object containing keys:
     *   - revalidation: { headers: Record<string, string>, synchronous: boolean } Set if you should send this to the origin server
     *   - response: { headers: Record<string, string> } Set if you can respond to the client with these cached headers
     */
    evaluateRequest(req) {
      this._assertRequestHasHeaders(req)

      // In all circumstances, a cache MUST NOT ignore the must-revalidate directive
      if (this._rescc['must-revalidate']) {
        return this._evaluateRequestMissResult(req)
      }
      if (!this._requestMatches(req, false)) {
        return this._evaluateRequestMissResult(req)
      }

      // When presented with a request, a cache MUST NOT reuse a stored response, unless:
      // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,
      // unless the stored response is successfully validated (Section 4.3), and
      const requestCC = parseCacheControl(req.headers['cache-control'])
      if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {
        return this._evaluateRequestMissResult(req)
      }
      if (
        requestCC['max-age'] &&
        this.age() > toNumberOrZero(requestCC['max-age'])
      ) {
        return this._evaluateRequestMissResult(req)
      }
      if (
        requestCC['min-fresh'] &&
        this.maxAge() - this.age() < toNumberOrZero(requestCC['min-fresh'])
      ) {
        return this._evaluateRequestMissResult(req)
      }

      // the stored response is either:
      // fresh, or allowed to be served stale
      if (this.stale()) {
        // If a value is present, then the client is willing to accept a response that has
        // exceeded its freshness lifetime by no more than the specified number of seconds
        const allowsStaleWithoutRevalidation =
          'max-stale' in requestCC &&
          (true === requestCC['max-stale'] ||
            requestCC['max-stale'] > this.age() - this.maxAge())
        if (allowsStaleWithoutRevalidation) {
          return this._evaluateRequestHitResult(undefined)
        }
        if (this.useStaleWhileRevalidate()) {
          return this._evaluateRequestHitResult(
            this._evaluateRequestRevalidation(req, false)
          )
        }
        return this._evaluateRequestMissResult(req)
      }
      return this._evaluateRequestHitResult(undefined)
    }

    /**
     * @param {HttpRequest} req - check if this is for the same cache entry
     * @param {boolean} allowHeadMethod - allow a HEAD method to match.
     * @returns {boolean} `true` if the request matches.
     */
    _requestMatches(req, allowHeadMethod) {
      // The presented effective request URI and that of the stored response match, and
      return !!(
        (!this._url || this._url === req.url) &&
        this._host === req.headers.host &&
        // the request method associated with the stored response allows it to be used for the presented request, and
        (!req.method ||
          this._method === req.method ||
          (allowHeadMethod && 'HEAD' === req.method)) &&
        // selecting header fields nominated by the stored response (if any) match those presented, and
        this._varyMatches(req)
      )
    }

    /**
     * Determines whether storing authenticated responses is allowed.
     * @returns {boolean} `true` if allowed.
     */
    _allowsStoringAuthenticated() {
      // following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.
      return !!(
        this._rescc['must-revalidate'] ||
        this._rescc.public ||
        this._rescc['s-maxage']
      )
    }

    /**
     * Checks whether the Vary header in the response matches the new request.
     * @param {HttpRequest} req - incoming HTTP request
     * @returns {boolean} `true` if the vary headers match.
     */
    _varyMatches(req) {
      if (!this._resHeaders.vary) {
        return true
      }

      // A Vary header field-value of "*" always fails to match
      if (this._resHeaders.vary === '*') {
        return false
      }
      const fields = this._resHeaders.vary
        .trim()
        .toLowerCase()
        .split(/\s*,\s*/)
      for (const name of fields) {
        if (req.headers[name] !== this._reqHeaders[name]) {
          return false
        }
      }
      return true
    }

    /**
     * Creates a copy of the given headers without any hop-by-hop headers.
     * @param {Record<string, string>} inHeaders - old headers from the cached response
     * @returns {Record<string, string>} A new headers object without hop-by-hop headers.
     */
    _copyWithoutHopByHopHeaders(inHeaders) {
      /** @type {Record<string, string>} */
      const headers = {}
      for (const name in inHeaders) {
        if (hopByHopHeaders[name]) {
          continue
        }
        headers[name] = inHeaders[name]
      }
      // 9.1.  Connection
      if (inHeaders.connection) {
        const tokens = inHeaders.connection.trim().split(/\s*,\s*/)
        for (const name of tokens) {
          delete headers[name]
        }
      }
      if (headers.warning) {
        const warnings = headers.warning.split(/,/).filter(warning => {
          return !/^\s*1[0-9][0-9]/.test(warning)
        })
        if (!warnings.length) {
          delete headers.warning
        } else {
          headers.warning = warnings.join(',').trim()
        }
      }
      return headers
    }

    /**
     * Returns the response headers adjusted for serving the cached response.
     * Removes hop-by-hop headers and updates the Age and Date headers.
     * @returns {Record<string, string>} The adjusted response headers.
     */
    responseHeaders() {
      const headers = this._copyWithoutHopByHopHeaders(this._resHeaders)
      const age = this.age()

      // A cache SHOULD generate 113 warning if it heuristically chose a freshness
      // lifetime greater than 24 hours and the response's age is greater than 24 hours.
      if (
        age > 3600 * 24 &&
        !this._hasExplicitExpiration() &&
        this.maxAge() > 3600 * 24
      ) {
        headers.warning =
          (headers.warning ? `${headers.warning}, ` : '') +
          '113 - "rfc7234 5.5.4"'
      }
      headers.age = `${Math.round(age)}`
      headers.date = new Date(this.now()).toUTCString()
      return headers
    }

    /**
     * Returns the Date header value from the response or the current time if invalid.
     * @returns {number} Timestamp (in milliseconds) representing the Date header or response time.
     */
    date() {
      const serverDate = Date.parse(this._resHeaders.date)
      if (isFinite(serverDate)) {
        return serverDate
      }
      return this._responseTime
    }

    /**
     * Value of the Age header, in seconds, updated for the current time.
     * May be fractional.
     * @returns {number} The age in seconds.
     */
    age() {
      let age = this._ageValue()
      const residentTime = (this.now() - this._responseTime) / 1000
      return age + residentTime
    }

    /**
     * @returns {number} The Age header value as a number.
     */
    _ageValue() {
      return toNumberOrZero(this._resHeaders.age)
    }

    /**
     * Possibly outdated value of applicable max-age (or heuristic equivalent) in seconds.
     * This counts since response's `Date`.
     *
     * For an up-to-date value, see `timeToLive()`.
     *
     * Returns the maximum age (freshness lifetime) of the response in seconds.
     * @returns {number} The max-age value in seconds.
     */
    maxAge() {
      if (!this.storable() || this._rescc['no-cache']) {
        return 0
      }

      // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default
      // so this implementation requires explicit opt-in via public header
      if (
        this._isShared &&
        this._resHeaders['set-cookie'] &&
        !this._rescc.public &&
        !this._rescc.immutable
      ) {
        return 0
      }
      if (this._resHeaders.vary === '*') {
        return 0
      }
      if (this._isShared) {
        if (this._rescc['proxy-revalidate']) {
          return 0
        }
        // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.
        if (this._rescc['s-maxage']) {
          return toNumberOrZero(this._rescc['s-maxage'])
        }
      }

      // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.
      if (this._rescc['max-age']) {
        return toNumberOrZero(this._rescc['max-age'])
      }
      const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0
      const serverDate = this.date()
      if (this._resHeaders.expires) {
        const expires = Date.parse(this._resHeaders.expires)
        // A cache recipient MUST interpret invalid date formats, especially the value "0", as representing a time in the past (i.e., "already expired").
        if (Number.isNaN(expires) || expires < serverDate) {
          return 0
        }
        return Math.max(defaultMinTtl, (expires - serverDate) / 1000)
      }
      if (this._resHeaders['last-modified']) {
        const lastModified = Date.parse(this._resHeaders['last-modified'])
        if (isFinite(lastModified) && serverDate > lastModified) {
          return Math.max(
            defaultMinTtl,
            ((serverDate - lastModified) / 1000) * this._cacheHeuristic
          )
        }
      }
      return defaultMinTtl
    }

    /**
     * Remaining time this cache entry may be useful for, in *milliseconds*.
     * You can use this as an expiration time for your cache storage.
     *
     * Prefer this method over `maxAge()`, because it includes other factors like `age` and `stale-while-revalidate`.
     * @returns {number} Time-to-live in milliseconds.
     */
    timeToLive() {
      const age = this.maxAge() - this.age()
      const staleIfErrorAge =
        age + toNumberOrZero(this._rescc['stale-if-error'])
      const staleWhileRevalidateAge =
        age + toNumberOrZero(this._rescc['stale-while-revalidate'])
      return Math.round(
        Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000
      )
    }

    /**
     * If true, this cache entry is past its expiration date.
     * Note that stale cache may be useful sometimes, see `evaluateRequest()`.
     * @returns {boolean} `false` doesn't mean it's fresh nor usable
     */
    stale() {
      return this.maxAge() <= this.age()
    }

    /**
     * @returns {boolean} `true` if `stale-if-error` condition allows use of a stale response.
     */
    _useStaleIfError() {
      return (
        this.maxAge() + toNumberOrZero(this._rescc['stale-if-error']) >
        this.age()
      )
    }

    /** See `evaluateRequest()` for a more complete solution
     * @returns {boolean} `true` if `stale-while-revalidate` is currently allowed.
     */
    useStaleWhileRevalidate() {
      const swr = toNumberOrZero(this._rescc['stale-while-revalidate'])
      return swr > 0 && this.maxAge() + swr > this.age()
    }

    /**
     * Creates a `CachePolicy` instance from a serialized object.
     * @param {Object} obj - The serialized object.
     * @returns {CachePolicy} A new CachePolicy instance.
     */
    static fromObject(obj) {
      return new this(undefined, undefined, {
        _fromObject: obj
      })
    }

    /**
     * @param {any} obj - The serialized object.
     * @throws {Error} If already initialized or if the object is invalid.
     */
    _fromObject(obj) {
      if (this._responseTime) {
        throw Error('Reinitialized')
      }
      if (!obj || obj.v !== 1) {
        throw Error('Invalid serialization')
      }
      this._responseTime = obj.t
      this._isShared = obj.sh
      this._cacheHeuristic = obj.ch
      this._immutableMinTtl = obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000
      this._ignoreCargoCult = !!obj.icc
      this._status = obj.st
      this._resHeaders = obj.resh
      this._rescc = obj.rescc
      this._method = obj.m
      this._url = obj.u
      this._host = obj.h
      this._noAuthorization = obj.a
      this._reqHeaders = obj.reqh
      this._reqcc = obj.reqcc
    }

    /**
     * Serializes the `CachePolicy` instance into a JSON-serializable object.
     * @returns {Object} The serialized object.
     */
    toObject() {
      return {
        v: 1,
        t: this._responseTime,
        sh: this._isShared,
        ch: this._cacheHeuristic,
        imm: this._immutableMinTtl,
        icc: this._ignoreCargoCult,
        st: this._status,
        resh: this._resHeaders,
        rescc: this._rescc,
        m: this._method,
        u: this._url,
        h: this._host,
        a: this._noAuthorization,
        reqh: this._reqHeaders,
        reqcc: this._reqcc
      }
    }

    /**
     * Headers for sending to the origin server to revalidate stale response.
     * Allows server to return 304 to allow reuse of the previous response.
     *
     * Hop by hop headers are always stripped.
     * Revalidation headers may be added or removed, depending on request.
     * @param {HttpRequest} incomingReq - The incoming HTTP request.
     * @returns {Record<string, string>} The headers for the revalidation request.
     */
    revalidationHeaders(incomingReq) {
      this._assertRequestHasHeaders(incomingReq)
      const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers)

      // This implementation does not understand range requests
      delete headers['if-range']
      if (!this._requestMatches(incomingReq, true) || !this.storable()) {
        // revalidation allowed via HEAD
        // not for the same resource, or wasn't allowed to be cached anyway
        delete headers['if-none-match']
        delete headers['if-modified-since']
        return headers
      }

      /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */
      if (this._resHeaders.etag) {
        headers['if-none-match'] = headers['if-none-match']
          ? `${headers['if-none-match']}, ${this._resHeaders.etag}`
          : this._resHeaders.etag
      }

      // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.
      const forbidsWeakValidators =
        headers['accept-ranges'] ||
        headers['if-match'] ||
        headers['if-unmodified-since'] ||
        (this._method && this._method != 'GET')

      /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.
      Note: This implementation does not understand partial responses (206) */
      if (forbidsWeakValidators) {
        delete headers['if-modified-since']
        if (headers['if-none-match']) {
          const etags = headers['if-none-match'].split(/,/).filter(etag => {
            return !/^\s*W\//.test(etag)
          })
          if (!etags.length) {
            delete headers['if-none-match']
          } else {
            headers['if-none-match'] = etags.join(',').trim()
          }
        }
      } else if (
        this._resHeaders['last-modified'] &&
        !headers['if-modified-since']
      ) {
        headers['if-modified-since'] = this._resHeaders['last-modified']
      }
      return headers
    }

    /**
     * Creates new CachePolicy with information combined from the previews response,
     * and the new revalidation response.
     *
     * Returns {policy, modified} where modified is a boolean indicating
     * whether the response body has been modified, and old cached body can't be used.
     *
     * @param {HttpRequest} request - The latest HTTP request asking for the cached entry.
     * @param {HttpResponse} response - The latest revalidation HTTP response from the origin server.
     * @returns {{policy: CachePolicy, modified: boolean, matches: boolean}} The updated policy and modification status.
     * @throws {Error} If the response headers are missing.
     */
    revalidatedPolicy(request, response) {
      this._assertRequestHasHeaders(request)
      if (this._useStaleIfError() && isErrorResponse(response)) {
        return {
          policy: this,
          modified: false,
          matches: true
        }
      }
      if (!response || !response.headers) {
        throw Error('Response headers missing')
      }

      // These aren't going to be supported exactly, since one CachePolicy object
      // doesn't know about all the other cached objects.
      let matches = false
      if (response.status !== undefined && response.status != 304) {
        matches = false
      } else if (
        response.headers.etag &&
        !/^\s*W\//.test(response.headers.etag)
      ) {
        // "All of the stored responses with the same strong validator are selected.
        // If none of the stored responses contain the same strong validator,
        // then the cache MUST NOT use the new response to update any stored responses."
        matches =
          this._resHeaders.etag &&
          this._resHeaders.etag.replace(/^\s*W\//, '') === response.headers.etag
      } else if (this._resHeaders.etag && response.headers.etag) {
        // "If the new response contains a weak validator and that validator corresponds
        // to one of the cache's stored responses,
        // then the most recent of those matching stored responses is selected for update."
        matches =
          this._resHeaders.etag.replace(/^\s*W\//, '') ===
          response.headers.etag.replace(/^\s*W\//, '')
      } else if (this._resHeaders['last-modified']) {
        matches =
          this._resHeaders['last-modified'] ===
          response.headers['last-modified']
      } else {
        // If the new response does not include any form of validator (such as in the case where
        // a client generates an If-Modified-Since request from a source other than the Last-Modified
        // response header field), and there is only one stored response, and that stored response also
        // lacks a validator, then that stored response is selected for update.
        if (
          !this._resHeaders.etag &&
          !this._resHeaders['last-modified'] &&
          !response.headers.etag &&
          !response.headers['last-modified']
        ) {
          matches = true
        }
      }
      const optionsCopy = {
        shared: this._isShared,
        cacheHeuristic: this._cacheHeuristic,
        immutableMinTimeToLive: this._immutableMinTtl,
        ignoreCargoCult: this._ignoreCargoCult
      }
      if (!matches) {
        return {
          policy: new this.constructor(request, response, optionsCopy),
          // Client receiving 304 without body, even if it's invalid/mismatched has no option
          // but to reuse a cached body. We don't have a good way to tell clients to do
          // error recovery in such case.
          modified: response.status != 304,
          matches: false
        }
      }

      // use other header fields provided in the 304 (Not Modified) response to replace all instances
      // of the corresponding header fields in the stored response.
      const headers = {}
      for (const k in this._resHeaders) {
        headers[k] =
          k in response.headers && !excludedFromRevalidationUpdate[k]
            ? response.headers[k]
            : this._resHeaders[k]
      }
      const newResponse = Object.assign({}, response, {
        status: this._status,
        method: this._method,
        headers
      })
      return {
        policy: new this.constructor(request, newResponse, optionsCopy),
        modified: false,
        matches: true
      }
    }
  }
  return httpCacheSemantics
}

const negotiator = { exports: {} }

const charset = { exports: {} }

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */
let hasRequiredCharset
function requireCharset() {
  if (hasRequiredCharset) {
    return charset.exports
  }
  hasRequiredCharset = 1

  /**
   * Module exports.
   * @public
   */

  charset.exports = preferredCharsets
  charset.exports.preferredCharsets = preferredCharsets

  /**
   * Module variables.
   * @private
   */

  const simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/

  /**
   * Parse the Accept-Charset header.
   * @private
   */

  function parseAcceptCharset(accept) {
    const accepts = accept.split(',')
    for (var i = 0, j = 0; i < accepts.length; i++) {
      const charset = parseCharset(accepts[i].trim(), i)
      if (charset) {
        accepts[j++] = charset
      }
    }

    // trim accepts
    accepts.length = j
    return accepts
  }

  /**
   * Parse a charset from the Accept-Charset header.
   * @private
   */

  function parseCharset(str, i) {
    const match = simpleCharsetRegExp.exec(str)
    if (!match) {
      return null
    }
    const charset = match[1]
    let q = 1
    if (match[2]) {
      const params = match[2].split(';')
      for (let j = 0; j < params.length; j++) {
        const p = params[j].trim().split('=')
        if (p[0] === 'q') {
          q = parseFloat(p[1])
          break
        }
      }
    }
    return {
      charset: charset,
      q: q,
      i: i
    }
  }

  /**
   * Get the priority of a charset.
   * @private
   */

  function getCharsetPriority(charset, accepted, index) {
    let priority = {
      o: -1,
      q: 0,
      s: 0
    }
    for (let i = 0; i < accepted.length; i++) {
      const spec = specify(charset, accepted[i], index)
      if (
        spec &&
        (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0
      ) {
        priority = spec
      }
    }
    return priority
  }

  /**
   * Get the specificity of the charset.
   * @private
   */

  function specify(charset, spec, index) {
    let s = 0
    if (spec.charset.toLowerCase() === charset.toLowerCase()) {
      s |= 1
    } else if (spec.charset !== '*') {
      return null
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    }
  }

  /**
   * Get the preferred charsets from an Accept-Charset header.
   * @public
   */

  function preferredCharsets(accept, provided) {
    // RFC 2616 sec 14.2: no header = *
    const accepts = parseAcceptCharset(
      accept === undefined ? '*' : accept || ''
    )
    if (!provided) {
      // sorted list of all charsets
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset)
    }
    const priorities = provided.map(function getPriority(type, index) {
      return getCharsetPriority(type, accepts, index)
    })

    // sorted list of accepted charsets
    return priorities
      .filter(isQuality)
      .sort(compareSpecs)
      .map(function getCharset(priority) {
        return provided[priorities.indexOf(priority)]
      })
  }

  /**
   * Compare two specs.
   * @private
   */

  function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0
  }

  /**
   * Get full charset string.
   * @private
   */

  function getFullCharset(spec) {
    return spec.charset
  }

  /**
   * Check if a spec has any quality.
   * @private
   */

  function isQuality(spec) {
    return spec.q > 0
  }
  return charset.exports
}

const encoding$1 = { exports: {} }

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */
let hasRequiredEncoding$1
function requireEncoding$1() {
  if (hasRequiredEncoding$1) {
    return encoding$1.exports
  }
  hasRequiredEncoding$1 = 1

  /**
   * Module exports.
   * @public
   */

  encoding$1.exports = preferredEncodings
  encoding$1.exports.preferredEncodings = preferredEncodings

  /**
   * Module variables.
   * @private
   */

  const simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/

  /**
   * Parse the Accept-Encoding header.
   * @private
   */

  function parseAcceptEncoding(accept) {
    const accepts = accept.split(',')
    let hasIdentity = false
    let minQuality = 1
    for (var i = 0, j = 0; i < accepts.length; i++) {
      const encoding = parseEncoding(accepts[i].trim(), i)
      if (encoding) {
        accepts[j++] = encoding
        hasIdentity = hasIdentity || specify('identity', encoding)
        minQuality = Math.min(minQuality, encoding.q || 1)
      }
    }
    if (!hasIdentity) {
      /*
       * If identity doesn't explicitly appear in the accept-encoding header,
       * it's added to the list of acceptable encoding with the lowest q
       */
      accepts[j++] = {
        encoding: 'identity',
        q: minQuality,
        i: i
      }
    }

    // trim accepts
    accepts.length = j
    return accepts
  }

  /**
   * Parse an encoding from the Accept-Encoding header.
   * @private
   */

  function parseEncoding(str, i) {
    const match = simpleEncodingRegExp.exec(str)
    if (!match) {
      return null
    }
    const encoding = match[1]
    let q = 1
    if (match[2]) {
      const params = match[2].split(';')
      for (let j = 0; j < params.length; j++) {
        const p = params[j].trim().split('=')
        if (p[0] === 'q') {
          q = parseFloat(p[1])
          break
        }
      }
    }
    return {
      encoding: encoding,
      q: q,
      i: i
    }
  }

  /**
   * Get the priority of an encoding.
   * @private
   */

  function getEncodingPriority(encoding, accepted, index) {
    let priority = {
      encoding: encoding,
      o: -1,
      q: 0,
      s: 0
    }
    for (let i = 0; i < accepted.length; i++) {
      const spec = specify(encoding, accepted[i], index)
      if (
        spec &&
        (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0
      ) {
        priority = spec
      }
    }
    return priority
  }

  /**
   * Get the specificity of the encoding.
   * @private
   */

  function specify(encoding, spec, index) {
    let s = 0
    if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {
      s |= 1
    } else if (spec.encoding !== '*') {
      return null
    }
    return {
      encoding: encoding,
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    }
  }

  /**
   * Get the preferred encodings from an Accept-Encoding header.
   * @public
   */

  function preferredEncodings(accept, provided, preferred) {
    const accepts = parseAcceptEncoding(accept || '')
    const comparator = preferred
      ? function comparator(a, b) {
          if (a.q !== b.q) {
            return b.q - a.q // higher quality first
          }
          const aPreferred = preferred.indexOf(a.encoding)
          const bPreferred = preferred.indexOf(b.encoding)
          if (aPreferred === -1 && bPreferred === -1) {
            // consider the original specifity/order
            return b.s - a.s || a.o - b.o || a.i - b.i
          }
          if (aPreferred !== -1 && bPreferred !== -1) {
            return aPreferred - bPreferred // consider the preferred order
          }
          return aPreferred === -1 ? 1 : -1 // preferred first
        }
      : compareSpecs
    if (!provided) {
      // sorted list of all encodings
      return accepts.filter(isQuality).sort(comparator).map(getFullEncoding)
    }
    const priorities = provided.map(function getPriority(type, index) {
      return getEncodingPriority(type, accepts, index)
    })

    // sorted list of accepted encodings
    return priorities
      .filter(isQuality)
      .sort(comparator)
      .map(function getEncoding(priority) {
        return provided[priorities.indexOf(priority)]
      })
  }

  /**
   * Compare two specs.
   * @private
   */

  function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i
  }

  /**
   * Get full encoding string.
   * @private
   */

  function getFullEncoding(spec) {
    return spec.encoding
  }

  /**
   * Check if a spec has any quality.
   * @private
   */

  function isQuality(spec) {
    return spec.q > 0
  }
  return encoding$1.exports
}

const language = { exports: {} }

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */
let hasRequiredLanguage
function requireLanguage() {
  if (hasRequiredLanguage) {
    return language.exports
  }
  hasRequiredLanguage = 1

  /**
   * Module exports.
   * @public
   */

  language.exports = preferredLanguages
  language.exports.preferredLanguages = preferredLanguages

  /**
   * Module variables.
   * @private
   */

  const simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/

  /**
   * Parse the Accept-Language header.
   * @private
   */

  function parseAcceptLanguage(accept) {
    const accepts = accept.split(',')
    for (var i = 0, j = 0; i < accepts.length; i++) {
      const language = parseLanguage(accepts[i].trim(), i)
      if (language) {
        accepts[j++] = language
      }
    }

    // trim accepts
    accepts.length = j
    return accepts
  }

  /**
   * Parse a language from the Accept-Language header.
   * @private
   */

  function parseLanguage(str, i) {
    const match = simpleLanguageRegExp.exec(str)
    if (!match) {
      return null
    }
    const prefix = match[1]
    const suffix = match[2]
    let full = prefix
    if (suffix) {
      full += '-' + suffix
    }
    let q = 1
    if (match[3]) {
      const params = match[3].split(';')
      for (let j = 0; j < params.length; j++) {
        const p = params[j].split('=')
        if (p[0] === 'q') {
          q = parseFloat(p[1])
        }
      }
    }
    return {
      prefix: prefix,
      suffix: suffix,
      q: q,
      i: i,
      full: full
    }
  }

  /**
   * Get the priority of a language.
   * @private
   */

  function getLanguagePriority(language, accepted, index) {
    let priority = {
      o: -1,
      q: 0,
      s: 0
    }
    for (let i = 0; i < accepted.length; i++) {
      const spec = specify(language, accepted[i], index)
      if (
        spec &&
        (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0
      ) {
        priority = spec
      }
    }
    return priority
  }

  /**
   * Get the specificity of the language.
   * @private
   */

  function specify(language, spec, index) {
    const p = parseLanguage(language)
    if (!p) {
      return null
    }
    let s = 0
    if (spec.full.toLowerCase() === p.full.toLowerCase()) {
      s |= 4
    } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
      s |= 2
    } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
      s |= 1
    } else if (spec.full !== '*') {
      return null
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    }
  }

  /**
   * Get the preferred languages from an Accept-Language header.
   * @public
   */

  function preferredLanguages(accept, provided) {
    // RFC 2616 sec 14.4: no header = *
    const accepts = parseAcceptLanguage(
      accept === undefined ? '*' : accept || ''
    )
    if (!provided) {
      // sorted list of all languages
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage)
    }
    const priorities = provided.map(function getPriority(type, index) {
      return getLanguagePriority(type, accepts, index)
    })

    // sorted list of accepted languages
    return priorities
      .filter(isQuality)
      .sort(compareSpecs)
      .map(function getLanguage(priority) {
        return provided[priorities.indexOf(priority)]
      })
  }

  /**
   * Compare two specs.
   * @private
   */

  function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0
  }

  /**
   * Get full language string.
   * @private
   */

  function getFullLanguage(spec) {
    return spec.full
  }

  /**
   * Check if a spec has any quality.
   * @private
   */

  function isQuality(spec) {
    return spec.q > 0
  }
  return language.exports
}

const mediaType = { exports: {} }

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */
let hasRequiredMediaType
function requireMediaType() {
  if (hasRequiredMediaType) {
    return mediaType.exports
  }
  hasRequiredMediaType = 1

  /**
   * Module exports.
   * @public
   */

  mediaType.exports = preferredMediaTypes
  mediaType.exports.preferredMediaTypes = preferredMediaTypes

  /**
   * Module variables.
   * @private
   */

  const simpleMediaTypeRegExp = /^\s*([^\s/;]+)\/([^;\s]+)\s*(?:;(.*))?$/

  /**
   * Parse the Accept header.
   * @private
   */

  function parseAccept(accept) {
    const accepts = splitMediaTypes(accept)
    for (var i = 0, j = 0; i < accepts.length; i++) {
      const mediaType = parseMediaType(accepts[i].trim(), i)
      if (mediaType) {
        accepts[j++] = mediaType
      }
    }

    // trim accepts
    accepts.length = j
    return accepts
  }

  /**
   * Parse a media type from the Accept header.
   * @private
   */

  function parseMediaType(str, i) {
    const match = simpleMediaTypeRegExp.exec(str)
    if (!match) {
      return null
    }
    const params = Object.create(null)
    let q = 1
    const subtype = match[2]
    const type = match[1]
    if (match[3]) {
      const kvps = splitParameters(match[3]).map(splitKeyValuePair)
      for (let j = 0; j < kvps.length; j++) {
        const pair = kvps[j]
        const key = pair[0].toLowerCase()
        const val = pair[1]

        // get the value, unwrapping quotes
        const value =
          val && val[0] === '"' && val[val.length - 1] === '"'
            ? val.slice(1, -1)
            : val
        if (key === 'q') {
          q = parseFloat(value)
          break
        }

        // store parameter
        params[key] = value
      }
    }
    return {
      type: type,
      subtype: subtype,
      params: params,
      q: q,
      i: i
    }
  }

  /**
   * Get the priority of a media type.
   * @private
   */

  function getMediaTypePriority(type, accepted, index) {
    let priority = {
      o: -1,
      q: 0,
      s: 0
    }
    for (let i = 0; i < accepted.length; i++) {
      const spec = specify(type, accepted[i], index)
      if (
        spec &&
        (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0
      ) {
        priority = spec
      }
    }
    return priority
  }

  /**
   * Get the specificity of the media type.
   * @private
   */

  function specify(type, spec, index) {
    const p = parseMediaType(type)
    let s = 0
    if (!p) {
      return null
    }
    if (spec.type.toLowerCase() == p.type.toLowerCase()) {
      s |= 4
    } else if (spec.type != '*') {
      return null
    }
    if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
      s |= 2
    } else if (spec.subtype != '*') {
      return null
    }
    const keys = Object.keys(spec.params)
    if (keys.length > 0) {
      if (
        keys.every(function (k) {
          return (
            spec.params[k] == '*' ||
            (spec.params[k] || '').toLowerCase() ==
              (p.params[k] || '').toLowerCase()
          )
        })
      ) {
        s |= 1
      } else {
        return null
      }
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    }
  }

  /**
   * Get the preferred media types from an Accept header.
   * @public
   */

  function preferredMediaTypes(accept, provided) {
    // RFC 2616 sec 14.2: no header = */*
    const accepts = parseAccept(accept === undefined ? '*/*' : accept || '')
    if (!provided) {
      // sorted list of all types
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullType)
    }
    const priorities = provided.map(function getPriority(type, index) {
      return getMediaTypePriority(type, accepts, index)
    })

    // sorted list of accepted types
    return priorities
      .filter(isQuality)
      .sort(compareSpecs)
      .map(function getType(priority) {
        return provided[priorities.indexOf(priority)]
      })
  }

  /**
   * Compare two specs.
   * @private
   */

  function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0
  }

  /**
   * Get full type string.
   * @private
   */

  function getFullType(spec) {
    return spec.type + '/' + spec.subtype
  }

  /**
   * Check if a spec has any quality.
   * @private
   */

  function isQuality(spec) {
    return spec.q > 0
  }

  /**
   * Count the number of quotes in a string.
   * @private
   */

  function quoteCount(string) {
    let count = 0
    let index = 0
    while ((index = string.indexOf('"', index)) !== -1) {
      count++
      index++
    }
    return count
  }

  /**
   * Split a key value pair.
   * @private
   */

  function splitKeyValuePair(str) {
    const index = str.indexOf('=')
    let key
    let val
    if (index === -1) {
      key = str
    } else {
      key = str.slice(0, index)
      val = str.slice(index + 1)
    }
    return [key, val]
  }

  /**
   * Split an Accept header into media types.
   * @private
   */

  function splitMediaTypes(accept) {
    const accepts = accept.split(',')
    for (var i = 1, j = 0; i < accepts.length; i++) {
      if (quoteCount(accepts[j]) % 2 == 0) {
        accepts[++j] = accepts[i]
      } else {
        accepts[j] += ',' + accepts[i]
      }
    }

    // trim accepts
    accepts.length = j + 1
    return accepts
  }

  /**
   * Split a string of parameters.
   * @private
   */

  function splitParameters(str) {
    const parameters = str.split(';')
    for (var i = 1, j = 0; i < parameters.length; i++) {
      if (quoteCount(parameters[j]) % 2 == 0) {
        parameters[++j] = parameters[i]
      } else {
        parameters[j] += ';' + parameters[i]
      }
    }

    // trim parameters
    parameters.length = j + 1
    for (var i = 0; i < parameters.length; i++) {
      parameters[i] = parameters[i].trim()
    }
    return parameters
  }
  return mediaType.exports
}

/*!
 * negotiator
 * Copyright(c) 2012 Federico Romero
 * Copyright(c) 2012-2014 Isaac Z. Schlueter
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
let hasRequiredNegotiator
function requireNegotiator() {
  if (hasRequiredNegotiator) {
    return negotiator.exports
  }
  hasRequiredNegotiator = 1
  const preferredCharsets = requireCharset()
  const preferredEncodings = requireEncoding$1()
  const preferredLanguages = requireLanguage()
  const preferredMediaTypes = requireMediaType()

  /**
   * Module exports.
   * @public
   */

  negotiator.exports = Negotiator
  negotiator.exports.Negotiator = Negotiator

  /**
   * Create a Negotiator instance from a request.
   * @param {object} request
   * @public
   */

  function Negotiator(request) {
    if (!(this instanceof Negotiator)) {
      return new Negotiator(request)
    }
    this.request = request
  }
  Negotiator.prototype.charset = function charset(available) {
    const set = this.charsets(available)
    return set && set[0]
  }
  Negotiator.prototype.charsets = function charsets(available) {
    return preferredCharsets(this.request.headers['accept-charset'], available)
  }
  Negotiator.prototype.encoding = function encoding(available, opts) {
    const set = this.encodings(available, opts)
    return set && set[0]
  }
  Negotiator.prototype.encodings = function encodings(available, options) {
    const opts = options || {}
    return preferredEncodings(
      this.request.headers['accept-encoding'],
      available,
      opts.preferred
    )
  }
  Negotiator.prototype.language = function language(available) {
    const set = this.languages(available)
    return set && set[0]
  }
  Negotiator.prototype.languages = function languages(available) {
    return preferredLanguages(
      this.request.headers['accept-language'],
      available
    )
  }
  Negotiator.prototype.mediaType = function mediaType(available) {
    const set = this.mediaTypes(available)
    return set && set[0]
  }
  Negotiator.prototype.mediaTypes = function mediaTypes(available) {
    return preferredMediaTypes(this.request.headers.accept, available)
  }

  // Backwards compatibility
  Negotiator.prototype.preferredCharset = Negotiator.prototype.charset
  Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets
  Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding
  Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings
  Negotiator.prototype.preferredLanguage = Negotiator.prototype.language
  Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages
  Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType
  Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes
  return negotiator.exports
}

let policy$1
let hasRequiredPolicy$1
function requirePolicy$1() {
  if (hasRequiredPolicy$1) {
    return policy$1
  }
  hasRequiredPolicy$1 = 1
  const CacheSemantics = requireHttpCacheSemantics()
  const Negotiator = requireNegotiator()
  const ssri = requireLib$j()

  // options passed to http-cache-semantics constructor
  const policyOptions = {
    shared: false,
    ignoreCargoCult: true
  }

  // a fake empty response, used when only testing the
  // request for storability
  const emptyResponse = {
    status: 200,
    headers: {}
  }

  // returns a plain object representation of the Request
  const requestObject = request => {
    const _obj = {
      method: request.method,
      url: request.url,
      headers: {},
      compress: request.compress
    }
    request.headers.forEach((value, key) => {
      _obj.headers[key] = value
    })
    return _obj
  }

  // returns a plain object representation of the Response
  const responseObject = response => {
    const _obj = {
      status: response.status,
      headers: {}
    }
    response.headers.forEach((value, key) => {
      _obj.headers[key] = value
    })
    return _obj
  }
  class CachePolicy {
    constructor({ entry, request, response, options }) {
      this.entry = entry
      this.request = requestObject(request)
      this.response = responseObject(response)
      this.options = options
      this.policy = new CacheSemantics(
        this.request,
        this.response,
        policyOptions
      )
      if (this.entry) {
        // if we have an entry, copy the timestamp to the _responseTime
        // this is necessary because the CacheSemantics constructor forces
        // the value to Date.now() which means a policy created from a
        // cache entry is likely to always identify itself as stale
        this.policy._responseTime = this.entry.metadata.time
      }
    }

    // static method to quickly determine if a request alone is storable
    static storable(request, options) {
      // no cachePath means no caching
      if (!options.cachePath) {
        return false
      }

      // user explicitly asked not to cache
      if (options.cache === 'no-store') {
        return false
      }

      // we only cache GET and HEAD requests
      if (!['GET', 'HEAD'].includes(request.method)) {
        return false
      }

      // otherwise, let http-cache-semantics make the decision
      // based on the request's headers
      const policy = new CacheSemantics(
        requestObject(request),
        emptyResponse,
        policyOptions
      )
      return policy.storable()
    }

    // returns true if the policy satisfies the request
    satisfies(request) {
      const _req = requestObject(request)
      if (this.request.headers.host !== _req.headers.host) {
        return false
      }
      if (this.request.compress !== _req.compress) {
        return false
      }
      const negotiatorA = new Negotiator(this.request)
      const negotiatorB = new Negotiator(_req)
      if (
        JSON.stringify(negotiatorA.mediaTypes()) !==
        JSON.stringify(negotiatorB.mediaTypes())
      ) {
        return false
      }
      if (
        JSON.stringify(negotiatorA.languages()) !==
        JSON.stringify(negotiatorB.languages())
      ) {
        return false
      }
      if (
        JSON.stringify(negotiatorA.encodings()) !==
        JSON.stringify(negotiatorB.encodings())
      ) {
        return false
      }
      if (this.options.integrity) {
        return ssri.parse(this.options.integrity).match(this.entry.integrity)
      }
      return true
    }

    // returns true if the request and response allow caching
    storable() {
      return this.policy.storable()
    }

    // NOTE: this is a hack to avoid parsing the cache-control
    // header ourselves, it returns true if the response's
    // cache-control contains must-revalidate
    get mustRevalidate() {
      return !!this.policy._rescc['must-revalidate']
    }

    // returns true if the cached response requires revalidation
    // for the given request
    needsRevalidation(request) {
      const _req = requestObject(request)
      // force method to GET because we only cache GETs
      // but can serve a HEAD from a cached GET
      _req.method = 'GET'
      return !this.policy.satisfiesWithoutRevalidation(_req)
    }
    responseHeaders() {
      return this.policy.responseHeaders()
    }

    // returns a new object containing the appropriate headers
    // to send a revalidation request
    revalidationHeaders(request) {
      const _req = requestObject(request)
      return this.policy.revalidationHeaders(_req)
    }

    // returns true if the request/response was revalidated
    // successfully. returns false if a new response was received
    revalidated(request, response) {
      const _req = requestObject(request)
      const _res = responseObject(response)
      const policy = this.policy.revalidatedPolicy(_req, _res)
      return !policy.modified
    }
  }
  policy$1 = CachePolicy
  return policy$1
}

let errors$1
let hasRequiredErrors$1
function requireErrors$1() {
  if (hasRequiredErrors$1) {
    return errors$1
  }
  hasRequiredErrors$1 = 1
  class NotCachedError extends Error {
    constructor(url) {
      /* eslint-disable-next-line max-len */
      super(
        `request to ${url} failed: cache mode is 'only-if-cached' but no cached response is available.`
      )
      this.code = 'ENOTCACHED'
    }
  }
  errors$1 = {
    NotCachedError
  }
  return errors$1
}

const lib$3 = { exports: {} }

const get = { exports: {} }

const entryIndex = {}

const path = { exports: {} }

const require$$8 = {
  'cache-version': {
    content: '2',
    index: '5'
  }
}

let hashToSegments_1
let hasRequiredHashToSegments
function requireHashToSegments() {
  if (hasRequiredHashToSegments) {
    return hashToSegments_1
  }
  hasRequiredHashToSegments = 1
  hashToSegments_1 = hashToSegments
  function hashToSegments(hash) {
    return [hash.slice(0, 2), hash.slice(2, 4), hash.slice(4)]
  }
  return hashToSegments_1
}

let hasRequiredPath
function requirePath() {
  if (hasRequiredPath) {
    return path.exports
  }
  hasRequiredPath = 1
  const contentVer = require$$8['cache-version'].content
  const hashToSegments = requireHashToSegments()
  const path$1 = require$$1$5
  const ssri = requireLib$j()

  // Current format of content file path:
  //
  // sha512-BaSE64Hex= ->
  // ~/.my-cache/content-v2/sha512/ba/da/55deadbeefc0ffee
  //
  path.exports = contentPath
  function contentPath(cache, integrity) {
    const sri = ssri.parse(integrity, {
      single: true
    })
    // contentPath is the *strongest* algo given
    return path$1.join(
      contentDir(cache),
      sri.algorithm,
      ...hashToSegments(sri.hexDigest())
    )
  }
  path.exports.contentDir = contentDir
  function contentDir(cache) {
    return path$1.join(cache, `content-v${contentVer}`)
  }
  return path.exports
}

let hasRequiredEntryIndex
function requireEntryIndex() {
  if (hasRequiredEntryIndex) {
    return entryIndex
  }
  hasRequiredEntryIndex = 1
  const crypto = require$$0$d
  const { appendFile, mkdir, readFile, readdir, rm, writeFile } = require$$0$7
  const { Minipass } = requireCommonjs$7()
  const path = require$$1$5
  const ssri = requireLib$j()
  const uniqueFilename = requireLib$h()
  const contentPath = requirePath()
  const hashToSegments = requireHashToSegments()
  const indexV = require$$8['cache-version'].index
  const { moveFile } = requireLib$g()
  const lsStreamConcurrency = 5
  entryIndex.NotFoundError = class NotFoundError extends Error {
    constructor(cache, key) {
      super(`No cache entry for ${key} found in ${cache}`)
      this.code = 'ENOENT'
      this.cache = cache
      this.key = key
    }
  }
  entryIndex.compact = compact
  async function compact(cache, key, matchFn, opts = {}) {
    const bucket = bucketPath(cache, key)
    const entries = await bucketEntries(bucket)
    const newEntries = []
    // we loop backwards because the bottom-most result is the newest
    // since we add new entries with appendFile
    for (let i = entries.length - 1; i >= 0; --i) {
      const entry = entries[i]
      // a null integrity could mean either a delete was appended
      // or the user has simply stored an index that does not map
      // to any content. we determine if the user wants to keep the
      // null integrity based on the validateEntry function passed in options.
      // if the integrity is null and no validateEntry is provided, we break
      // as we consider the null integrity to be a deletion of everything
      // that came before it.
      if (entry.integrity === null && !opts.validateEntry) {
        break
      }

      // if this entry is valid, and it is either the first entry or
      // the newEntries array doesn't already include an entry that
      // matches this one based on the provided matchFn, then we add
      // it to the beginning of our list
      if (
        (!opts.validateEntry || opts.validateEntry(entry) === true) &&
        (newEntries.length === 0 ||
          !newEntries.find(oldEntry => matchFn(oldEntry, entry)))
      ) {
        newEntries.unshift(entry)
      }
    }
    const newIndex =
      '\n' +
      newEntries
        .map(entry => {
          const stringified = JSON.stringify(entry)
          const hash = hashEntry(stringified)
          return `${hash}\t${stringified}`
        })
        .join('\n')
    const setup = async () => {
      const target = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)
      await mkdir(path.dirname(target), {
        recursive: true
      })
      return {
        target,
        moved: false
      }
    }
    const teardown = async tmp => {
      if (!tmp.moved) {
        return rm(tmp.target, {
          recursive: true,
          force: true
        })
      }
    }
    const write = async tmp => {
      await writeFile(tmp.target, newIndex, {
        flag: 'wx'
      })
      await mkdir(path.dirname(bucket), {
        recursive: true
      })
      // we use @npmcli/move-file directly here because we
      // want to overwrite the existing file
      await moveFile(tmp.target, bucket)
      tmp.moved = true
    }

    // write the file atomically
    const tmp = await setup()
    try {
      await write(tmp)
    } finally {
      await teardown(tmp)
    }

    // we reverse the list we generated such that the newest
    // entries come first in order to make looping through them easier
    // the true passed to formatEntry tells it to keep null
    // integrity values, if they made it this far it's because
    // validateEntry returned true, and as such we should return it
    return newEntries.reverse().map(entry => formatEntry(cache, entry, true))
  }
  entryIndex.insert = insert
  async function insert(cache, key, integrity, opts = {}) {
    const { metadata, size, time } = opts
    const bucket = bucketPath(cache, key)
    const entry = {
      key,
      integrity: integrity && ssri.stringify(integrity),
      time: time || Date.now(),
      size,
      metadata
    }
    try {
      await mkdir(path.dirname(bucket), {
        recursive: true
      })
      const stringified = JSON.stringify(entry)
      // NOTE - Cleverness ahoy!
      //
      // This works because it's tremendously unlikely for an entry to corrupt
      // another while still preserving the string length of the JSON in
      // question. So, we just slap the length in there and verify it on read.
      //
      // Thanks to @isaacs for the whiteboarding session that ended up with
      // this.
      await appendFile(bucket, `\n${hashEntry(stringified)}\t${stringified}`)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return undefined
      }
      throw err
    }
    return formatEntry(cache, entry)
  }
  entryIndex.find = find
  async function find(cache, key) {
    const bucket = bucketPath(cache, key)
    try {
      const entries = await bucketEntries(bucket)
      return entries.reduce((latest, next) => {
        if (next && next.key === key) {
          return formatEntry(cache, next)
        } else {
          return latest
        }
      }, null)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return null
      } else {
        throw err
      }
    }
  }
  entryIndex.delete = del
  function del(cache, key, opts = {}) {
    if (!opts.removeFully) {
      return insert(cache, key, null, opts)
    }
    const bucket = bucketPath(cache, key)
    return rm(bucket, {
      recursive: true,
      force: true
    })
  }
  entryIndex.lsStream = lsStream
  function lsStream(cache) {
    const indexDir = bucketDir(cache)
    const stream = new Minipass({
      objectMode: true
    })

    // Set all this up to run on the stream and then just return the stream
    Promise.resolve()
      .then(async () => {
        const { default: pMap } = await Promise.resolve().then(function () {
          return index
        })
        const buckets = await readdirOrEmpty(indexDir)
        await pMap(
          buckets,
          async bucket => {
            const bucketPath = path.join(indexDir, bucket)
            const subbuckets = await readdirOrEmpty(bucketPath)
            await pMap(
              subbuckets,
              async subbucket => {
                const subbucketPath = path.join(bucketPath, subbucket)

                // "/cachename/<bucket 0xFF>/<bucket 0xFF>./*"
                const subbucketEntries = await readdirOrEmpty(subbucketPath)
                await pMap(
                  subbucketEntries,
                  async entry => {
                    const entryPath = path.join(subbucketPath, entry)
                    try {
                      const entries = await bucketEntries(entryPath)
                      // using a Map here prevents duplicate keys from showing up
                      // twice, I guess?
                      const reduced = entries.reduce((acc, entry) => {
                        acc.set(entry.key, entry)
                        return acc
                      }, new Map())
                      // reduced is a map of key => entry
                      for (const entry of reduced.values()) {
                        const formatted = formatEntry(cache, entry)
                        if (formatted) {
                          stream.write(formatted)
                        }
                      }
                    } catch (err) {
                      if (err.code === 'ENOENT') {
                        return undefined
                      }
                      throw err
                    }
                  },
                  {
                    concurrency: lsStreamConcurrency
                  }
                )
              },
              {
                concurrency: lsStreamConcurrency
              }
            )
          },
          {
            concurrency: lsStreamConcurrency
          }
        )
        stream.end()
        return stream
      })
      .catch(err => stream.emit('error', err))
    return stream
  }
  entryIndex.ls = ls
  async function ls(cache) {
    const entries = await lsStream(cache).collect()
    return entries.reduce((acc, xs) => {
      acc[xs.key] = xs
      return acc
    }, {})
  }
  entryIndex.bucketEntries = bucketEntries
  async function bucketEntries(bucket, filter) {
    const data = await readFile(bucket, 'utf8')
    return _bucketEntries(data)
  }
  function _bucketEntries(data) {
    const entries = []
    data.split('\n').forEach(entry => {
      if (!entry) {
        return
      }
      const pieces = entry.split('\t')
      if (!pieces[1] || hashEntry(pieces[1]) !== pieces[0]) {
        // Hash is no good! Corruption or malice? Doesn't matter!
        // EJECT EJECT
        return
      }
      let obj
      try {
        obj = JSON.parse(pieces[1])
      } catch (_) {
        // eslint-ignore-next-line no-empty-block
      }
      // coverage disabled here, no need to test with an entry that parses to something falsey
      // istanbul ignore else
      if (obj) {
        entries.push(obj)
      }
    })
    return entries
  }
  entryIndex.bucketDir = bucketDir
  function bucketDir(cache) {
    return path.join(cache, `index-v${indexV}`)
  }
  entryIndex.bucketPath = bucketPath
  function bucketPath(cache, key) {
    const hashed = hashKey(key)
    return path.join.apply(
      path,
      [bucketDir(cache)].concat(hashToSegments(hashed))
    )
  }
  entryIndex.hashKey = hashKey
  function hashKey(key) {
    return hash(key, 'sha256')
  }
  entryIndex.hashEntry = hashEntry
  function hashEntry(str) {
    return hash(str, 'sha1')
  }
  function hash(str, digest) {
    return crypto.createHash(digest).update(str).digest('hex')
  }
  function formatEntry(cache, entry, keepAll) {
    // Treat null digests as deletions. They'll shadow any previous entries.
    if (!entry.integrity && !keepAll) {
      return null
    }
    return {
      key: entry.key,
      integrity: entry.integrity,
      path: entry.integrity ? contentPath(cache, entry.integrity) : undefined,
      size: entry.size,
      time: entry.time,
      metadata: entry.metadata
    }
  }
  function readdirOrEmpty(dir) {
    return readdir(dir).catch(err => {
      if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
        return []
      }
      throw err
    })
  }
  return entryIndex
}

const memoization = { exports: {} }

let hasRequiredMemoization
function requireMemoization() {
  if (hasRequiredMemoization) {
    return memoization.exports
  }
  hasRequiredMemoization = 1
  ;(function (module) {
    const { LRUCache } = /*@__PURE__*/ requireCommonjs$9()
    const MEMOIZED = new LRUCache({
      max: 500,
      maxSize: 50 * 1024 * 1024,
      // 50MB
      ttl: 3 * 60 * 1000,
      // 3 minutes
      sizeCalculation: (entry, key) =>
        key.startsWith('key:') ? entry.data.length : entry.length
    })
    module.exports.clearMemoized = clearMemoized
    function clearMemoized() {
      const old = {}
      MEMOIZED.forEach((v, k) => {
        old[k] = v
      })
      MEMOIZED.clear()
      return old
    }
    module.exports.put = put
    function put(cache, entry, data, opts) {
      pickMem(opts).set(`key:${cache}:${entry.key}`, {
        entry,
        data
      })
      putDigest(cache, entry.integrity, data, opts)
    }
    module.exports.put.byDigest = putDigest
    function putDigest(cache, integrity, data, opts) {
      pickMem(opts).set(`digest:${cache}:${integrity}`, data)
    }
    module.exports.get = get
    function get(cache, key, opts) {
      return pickMem(opts).get(`key:${cache}:${key}`)
    }
    module.exports.get.byDigest = getDigest
    function getDigest(cache, integrity, opts) {
      return pickMem(opts).get(`digest:${cache}:${integrity}`)
    }
    class ObjProxy {
      constructor(obj) {
        this.obj = obj
      }
      get(key) {
        return this.obj[key]
      }
      set(key, val) {
        this.obj[key] = val
      }
    }
    function pickMem(opts) {
      if (!opts || !opts.memoize) {
        return MEMOIZED
      } else if (opts.memoize.get && opts.memoize.set) {
        return opts.memoize
      } else if (typeof opts.memoize === 'object') {
        return new ObjProxy(opts.memoize)
      } else {
        return MEMOIZED
      }
    }
  })(memoization)
  return memoization.exports
}

const read = { exports: {} }

let hasRequiredRead
function requireRead() {
  if (hasRequiredRead) {
    return read.exports
  }
  hasRequiredRead = 1
  const fs = require$$0$7
  const fsm = requireLib$f()
  const ssri = requireLib$j()
  const contentPath = requirePath()
  const Pipeline = requireMinipassPipeline()
  read.exports = read$1
  const MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024
  async function read$1(cache, integrity, opts = {}) {
    const { size } = opts
    const { stat, cpath, sri } = await withContentSri(
      cache,
      integrity,
      async (cpath, sri) => {
        // get size
        const stat = size
          ? {
              size
            }
          : await fs.stat(cpath)
        return {
          stat,
          cpath,
          sri
        }
      }
    )
    if (stat.size > MAX_SINGLE_READ_SIZE) {
      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()
    }
    const data = await fs.readFile(cpath, {
      encoding: null
    })
    if (stat.size !== data.length) {
      throw sizeError(stat.size, data.length)
    }
    if (!ssri.checkData(data, sri)) {
      throw integrityError(sri, cpath)
    }
    return data
  }
  const readPipeline = (cpath, size, sri, stream) => {
    stream.push(
      new fsm.ReadStream(cpath, {
        size,
        readSize: MAX_SINGLE_READ_SIZE
      }),
      ssri.integrityStream({
        integrity: sri,
        size
      })
    )
    return stream
  }
  read.exports.stream = readStream
  read.exports.readStream = readStream
  function readStream(cache, integrity, opts = {}) {
    const { size } = opts
    const stream = new Pipeline()
    // Set all this up to run on the stream and then just return the stream
    Promise.resolve()
      .then(async () => {
        const { stat, cpath, sri } = await withContentSri(
          cache,
          integrity,
          async (cpath, sri) => {
            // get size
            const stat = size
              ? {
                  size
                }
              : await fs.stat(cpath)
            return {
              stat,
              cpath,
              sri
            }
          }
        )
        return readPipeline(cpath, stat.size, sri, stream)
      })
      .catch(err => stream.emit('error', err))
    return stream
  }
  read.exports.copy = copy
  function copy(cache, integrity, dest) {
    return withContentSri(cache, integrity, cpath => {
      return fs.copyFile(cpath, dest)
    })
  }
  read.exports.hasContent = hasContent
  async function hasContent(cache, integrity) {
    if (!integrity) {
      return false
    }
    try {
      return await withContentSri(cache, integrity, async (cpath, sri) => {
        const stat = await fs.stat(cpath)
        return {
          size: stat.size,
          sri,
          stat
        }
      })
    } catch (err) {
      if (err.code === 'ENOENT') {
        return false
      }
      if (err.code === 'EPERM') {
        /* istanbul ignore else */
        if (process.platform !== 'win32') {
          throw err
        } else {
          return false
        }
      }
    }
  }
  async function withContentSri(cache, integrity, fn) {
    const sri = ssri.parse(integrity)
    // If `integrity` has multiple entries, pick the first digest
    // with available local data.
    const algo = sri.pickAlgorithm()
    const digests = sri[algo]
    if (digests.length <= 1) {
      const cpath = contentPath(cache, digests[0])
      return fn(cpath, digests[0])
    } else {
      // Can't use race here because a generic error can happen before
      // a ENOENT error, and can happen before a valid result
      const results = await Promise.all(
        digests.map(async meta => {
          try {
            return await withContentSri(cache, meta, fn)
          } catch (err) {
            if (err.code === 'ENOENT') {
              return Object.assign(
                new Error('No matching content found for ' + sri.toString()),
                {
                  code: 'ENOENT'
                }
              )
            }
            return err
          }
        })
      )
      // Return the first non error if it is found
      const result = results.find(r => !(r instanceof Error))
      if (result) {
        return result
      }

      // Throw the No matching content found error
      const enoentError = results.find(r => r.code === 'ENOENT')
      if (enoentError) {
        throw enoentError
      }

      // Throw generic error
      throw results.find(r => r instanceof Error)
    }
  }
  function sizeError(expected, found) {
    /* eslint-disable-next-line max-len */
    const err = new Error(
      `Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`
    )
    err.expected = expected
    err.found = found
    err.code = 'EBADSIZE'
    return err
  }
  function integrityError(sri, path) {
    const err = new Error(`Integrity verification failed for ${sri} (${path})`)
    err.code = 'EINTEGRITY'
    err.sri = sri
    err.path = path
    return err
  }
  return read.exports
}

let hasRequiredGet
function requireGet() {
  if (hasRequiredGet) {
    return get.exports
  }
  hasRequiredGet = 1
  ;(function (module) {
    const Collect = requireMinipassCollect()
    const { Minipass } = requireCommonjs$7()
    const Pipeline = requireMinipassPipeline()
    const index = requireEntryIndex()
    const memo = requireMemoization()
    const read = requireRead()
    async function getData(cache, key, opts = {}) {
      const { integrity, memoize, size } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return {
          metadata: memoized.entry.metadata,
          data: memoized.data,
          integrity: memoized.entry.integrity,
          size: memoized.entry.size
        }
      }
      const entry = await index.find(cache, key, opts)
      if (!entry) {
        throw new index.NotFoundError(cache, key)
      }
      const data = await read(cache, entry.integrity, {
        integrity,
        size
      })
      if (memoize) {
        memo.put(cache, entry, data, opts)
      }
      return {
        data,
        metadata: entry.metadata,
        size: entry.size,
        integrity: entry.integrity
      }
    }
    module.exports = getData
    async function getDataByDigest(cache, key, opts = {}) {
      const { integrity, memoize, size } = opts
      const memoized = memo.get.byDigest(cache, key, opts)
      if (memoized && memoize !== false) {
        return memoized
      }
      const res = await read(cache, key, {
        integrity,
        size
      })
      if (memoize) {
        memo.put.byDigest(cache, key, res, opts)
      }
      return res
    }
    module.exports.byDigest = getDataByDigest
    const getMemoizedStream = memoized => {
      const stream = new Minipass()
      stream.on('newListener', function (ev, cb) {
        ev === 'metadata' && cb(memoized.entry.metadata)
        ev === 'integrity' && cb(memoized.entry.integrity)
        ev === 'size' && cb(memoized.entry.size)
      })
      stream.end(memoized.data)
      return stream
    }
    function getStream(cache, key, opts = {}) {
      const { memoize, size } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return getMemoizedStream(memoized)
      }
      const stream = new Pipeline()
      // Set all this up to run on the stream and then just return the stream
      Promise.resolve()
        .then(async () => {
          const entry = await index.find(cache, key)
          if (!entry) {
            throw new index.NotFoundError(cache, key)
          }
          stream.emit('metadata', entry.metadata)
          stream.emit('integrity', entry.integrity)
          stream.emit('size', entry.size)
          stream.on('newListener', function (ev, cb) {
            ev === 'metadata' && cb(entry.metadata)
            ev === 'integrity' && cb(entry.integrity)
            ev === 'size' && cb(entry.size)
          })
          const src = read.readStream(cache, entry.integrity, {
            ...opts,
            size: typeof size !== 'number' ? entry.size : size
          })
          if (memoize) {
            const memoStream = new Collect.PassThrough()
            memoStream.on('collect', data => memo.put(cache, entry, data, opts))
            stream.unshift(memoStream)
          }
          stream.unshift(src)
          return stream
        })
        .catch(err => stream.emit('error', err))
      return stream
    }
    module.exports.stream = getStream
    function getStreamDigest(cache, integrity, opts = {}) {
      const { memoize } = opts
      const memoized = memo.get.byDigest(cache, integrity, opts)
      if (memoized && memoize !== false) {
        const stream = new Minipass()
        stream.end(memoized)
        return stream
      } else {
        const stream = read.readStream(cache, integrity, opts)
        if (!memoize) {
          return stream
        }
        const memoStream = new Collect.PassThrough()
        memoStream.on('collect', data =>
          memo.put.byDigest(cache, integrity, data, opts)
        )
        return new Pipeline(stream, memoStream)
      }
    }
    module.exports.stream.byDigest = getStreamDigest
    function info(cache, key, opts = {}) {
      const { memoize } = opts
      const memoized = memo.get(cache, key, opts)
      if (memoized && memoize !== false) {
        return Promise.resolve(memoized.entry)
      } else {
        return index.find(cache, key)
      }
    }
    module.exports.info = info
    async function copy(cache, key, dest, opts = {}) {
      const entry = await index.find(cache, key, opts)
      if (!entry) {
        throw new index.NotFoundError(cache, key)
      }
      await read.copy(cache, entry.integrity, dest, opts)
      return {
        metadata: entry.metadata,
        size: entry.size,
        integrity: entry.integrity
      }
    }
    module.exports.copy = copy
    async function copyByDigest(cache, key, dest, opts = {}) {
      await read.copy(cache, key, dest, opts)
      return key
    }
    module.exports.copy.byDigest = copyByDigest
    module.exports.hasContent = read.hasContent
  })(get)
  return get.exports
}

const put = { exports: {} }

const write = { exports: {} }

let hasRequiredWrite
function requireWrite() {
  if (hasRequiredWrite) {
    return write.exports
  }
  hasRequiredWrite = 1
  const events = require$$0$c
  const contentPath = requirePath()
  const fs = require$$0$7
  const { moveFile } = requireLib$g()
  const { Minipass } = requireCommonjs$7()
  const Pipeline = requireMinipassPipeline()
  const Flush = requireMinipassFlush()
  const path = require$$1$5
  const ssri = requireLib$j()
  const uniqueFilename = requireLib$h()
  const fsm = requireLib$f()
  write.exports = write$1

  // Cache of move operations in process so we don't duplicate
  const moveOperations = new Map()
  async function write$1(cache, data, opts = {}) {
    const { algorithms, size, integrity } = opts
    if (typeof size === 'number' && data.length !== size) {
      throw sizeError(size, data.length)
    }
    const sri = ssri.fromData(
      data,
      algorithms
        ? {
            algorithms
          }
        : {}
    )
    if (integrity && !ssri.checkData(data, integrity, opts)) {
      throw checksumError(integrity, sri)
    }
    for (const algo in sri) {
      const tmp = await makeTmp(cache, opts)
      const hash = sri[algo].toString()
      try {
        await fs.writeFile(tmp.target, data, {
          flag: 'wx'
        })
        await moveToDestination(tmp, cache, hash, opts)
      } finally {
        if (!tmp.moved) {
          await fs.rm(tmp.target, {
            recursive: true,
            force: true
          })
        }
      }
    }
    return {
      integrity: sri,
      size: data.length
    }
  }
  write.exports.stream = writeStream

  // writes proxied to the 'inputStream' that is passed to the Promise
  // 'end' is deferred until content is handled.
  class CacacheWriteStream extends Flush {
    constructor(cache, opts) {
      super()
      this.opts = opts
      this.cache = cache
      this.inputStream = new Minipass()
      this.inputStream.on('error', er => this.emit('error', er))
      this.inputStream.on('drain', () => this.emit('drain'))
      this.handleContentP = null
    }
    write(chunk, encoding, cb) {
      if (!this.handleContentP) {
        this.handleContentP = handleContent(
          this.inputStream,
          this.cache,
          this.opts
        )
        this.handleContentP.catch(error => this.emit('error', error))
      }
      return this.inputStream.write(chunk, encoding, cb)
    }
    flush(cb) {
      this.inputStream.end(() => {
        if (!this.handleContentP) {
          const e = new Error('Cache input stream was empty')
          e.code = 'ENODATA'
          // empty streams are probably emitting end right away.
          // defer this one tick by rejecting a promise on it.
          return Promise.reject(e).catch(cb)
        }
        // eslint-disable-next-line promise/catch-or-return
        this.handleContentP.then(
          res => {
            res.integrity && this.emit('integrity', res.integrity)
            // eslint-disable-next-line promise/always-return
            res.size !== null && this.emit('size', res.size)
            cb()
          },
          er => cb(er)
        )
      })
    }
  }
  function writeStream(cache, opts = {}) {
    return new CacacheWriteStream(cache, opts)
  }
  async function handleContent(inputStream, cache, opts) {
    const tmp = await makeTmp(cache, opts)
    try {
      const res = await pipeToTmp(inputStream, cache, tmp.target, opts)
      await moveToDestination(tmp, cache, res.integrity, opts)
      return res
    } finally {
      if (!tmp.moved) {
        await fs.rm(tmp.target, {
          recursive: true,
          force: true
        })
      }
    }
  }
  async function pipeToTmp(inputStream, cache, tmpTarget, opts) {
    const outStream = new fsm.WriteStream(tmpTarget, {
      flags: 'wx'
    })
    if (opts.integrityEmitter) {
      // we need to create these all simultaneously since they can fire in any order
      const [integrity, size] = await Promise.all([
        events.once(opts.integrityEmitter, 'integrity').then(res => res[0]),
        events.once(opts.integrityEmitter, 'size').then(res => res[0]),
        new Pipeline(inputStream, outStream).promise()
      ])
      return {
        integrity,
        size
      }
    }
    let integrity
    let size
    const hashStream = ssri.integrityStream({
      integrity: opts.integrity,
      algorithms: opts.algorithms,
      size: opts.size
    })
    hashStream.on('integrity', i => {
      integrity = i
    })
    hashStream.on('size', s => {
      size = s
    })
    const pipeline = new Pipeline(inputStream, hashStream, outStream)
    await pipeline.promise()
    return {
      integrity,
      size
    }
  }
  async function makeTmp(cache, opts) {
    const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)
    await fs.mkdir(path.dirname(tmpTarget), {
      recursive: true
    })
    return {
      target: tmpTarget,
      moved: false
    }
  }
  async function moveToDestination(tmp, cache, sri) {
    const destination = contentPath(cache, sri)
    const destDir = path.dirname(destination)
    if (moveOperations.has(destination)) {
      return moveOperations.get(destination)
    }
    moveOperations.set(
      destination,
      fs
        .mkdir(destDir, {
          recursive: true
        })
        .then(async () => {
          await moveFile(tmp.target, destination, {
            overwrite: false
          })
          tmp.moved = true
          return tmp.moved
        })
        .catch(err => {
          if (!err.message.startsWith('The destination file exists')) {
            throw Object.assign(err, {
              code: 'EEXIST'
            })
          }
        })
        .finally(() => {
          moveOperations.delete(destination)
        })
    )
    return moveOperations.get(destination)
  }
  function sizeError(expected, found) {
    /* eslint-disable-next-line max-len */
    const err = new Error(
      `Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`
    )
    err.expected = expected
    err.found = found
    err.code = 'EBADSIZE'
    return err
  }
  function checksumError(expected, found) {
    const err = new Error(`Integrity check failed:
  Wanted: ${expected}
   Found: ${found}`)
    err.code = 'EINTEGRITY'
    err.expected = expected
    err.found = found
    return err
  }
  return write.exports
}

let hasRequiredPut
function requirePut() {
  if (hasRequiredPut) {
    return put.exports
  }
  hasRequiredPut = 1
  const index = requireEntryIndex()
  const memo = requireMemoization()
  const write = requireWrite()
  const Flush = requireMinipassFlush()
  const { PassThrough } = requireMinipassCollect()
  const Pipeline = requireMinipassPipeline()
  const putOpts = opts => ({
    algorithms: ['sha512'],
    ...opts
  })
  put.exports = putData
  async function putData(cache, key, data, opts = {}) {
    const { memoize } = opts
    opts = putOpts(opts)
    const res = await write(cache, data, opts)
    const entry = await index.insert(cache, key, res.integrity, {
      ...opts,
      size: res.size
    })
    if (memoize) {
      memo.put(cache, entry, data, opts)
    }
    return res.integrity
  }
  put.exports.stream = putStream
  function putStream(cache, key, opts = {}) {
    const { memoize } = opts
    opts = putOpts(opts)
    let integrity
    let size
    let error
    let memoData
    const pipeline = new Pipeline()
    // first item in the pipeline is the memoizer, because we need
    // that to end first and get the collected data.
    if (memoize) {
      const memoizer = new PassThrough().on('collect', data => {
        memoData = data
      })
      pipeline.push(memoizer)
    }

    // contentStream is a write-only, not a passthrough
    // no data comes out of it.
    const contentStream = write
      .stream(cache, opts)
      .on('integrity', int => {
        integrity = int
      })
      .on('size', s => {
        size = s
      })
      .on('error', err => {
        error = err
      })
    pipeline.push(contentStream)

    // last but not least, we write the index and emit hash and size,
    // and memoize if we're doing that
    pipeline.push(
      new Flush({
        async flush() {
          if (!error) {
            const entry = await index.insert(cache, key, integrity, {
              ...opts,
              size
            })
            if (memoize && memoData) {
              memo.put(cache, entry, memoData, opts)
            }
            pipeline.emit('integrity', integrity)
            pipeline.emit('size', size)
          }
        }
      })
    )
    return pipeline
  }
  return put.exports
}

const rm = { exports: {} }

let glob_1
let hasRequiredGlob
function requireGlob() {
  if (hasRequiredGlob) {
    return glob_1
  }
  hasRequiredGlob = 1
  const { glob } = requireCommonjs$5()
  const path = require$$1$5
  const globify = pattern => pattern.split(path.win32.sep).join(path.posix.sep)
  glob_1 = (path, options) => glob(globify(path), options)
  return glob_1
}

let rm_1
let hasRequiredRm$1
function requireRm$1() {
  if (hasRequiredRm$1) {
    return rm_1
  }
  hasRequiredRm$1 = 1
  const fs = require$$0$7
  const contentPath = requirePath()
  const { hasContent } = requireRead()
  rm_1 = rm
  async function rm(cache, integrity) {
    const content = await hasContent(cache, integrity)
    // ~pretty~ sure we can't end up with a content lacking sri, but be safe
    if (content && content.sri) {
      await fs.rm(contentPath(cache, content.sri), {
        recursive: true,
        force: true
      })
      return true
    } else {
      return false
    }
  }
  return rm_1
}

let hasRequiredRm
function requireRm() {
  if (hasRequiredRm) {
    return rm.exports
  }
  hasRequiredRm = 1
  const { rm: rm$1 } = require$$0$7
  const glob = requireGlob()
  const index = requireEntryIndex()
  const memo = requireMemoization()
  const path = require$$1$5
  const rmContent = requireRm$1()
  rm.exports = entry
  rm.exports.entry = entry
  function entry(cache, key, opts) {
    memo.clearMemoized()
    return index.delete(cache, key, opts)
  }
  rm.exports.content = content
  function content(cache, integrity) {
    memo.clearMemoized()
    return rmContent(cache, integrity)
  }
  rm.exports.all = all
  async function all(cache) {
    memo.clearMemoized()
    const paths = await glob(path.join(cache, '*(content-*|index-*)'), {
      silent: true,
      nosort: true
    })
    return Promise.all(
      paths.map(p =>
        rm$1(p, {
          recursive: true,
          force: true
        })
      )
    )
  }
  return rm.exports
}

const verify$1 = { exports: {} }

let hasRequiredVerify$1
function requireVerify$1() {
  if (hasRequiredVerify$1) {
    return verify$1.exports
  }
  hasRequiredVerify$1 = 1
  const { mkdir, readFile, rm, stat, truncate, writeFile } = require$$0$7
  const contentPath = requirePath()
  const fsm = requireLib$f()
  const glob = requireGlob()
  const index$1 = requireEntryIndex()
  const path = require$$1$5
  const ssri = requireLib$j()
  const hasOwnProperty = (obj, key) =>
    Object.prototype.hasOwnProperty.call(obj, key)
  const verifyOpts = opts => ({
    concurrency: 20,
    log: {
      silly() {}
    },
    ...opts
  })
  verify$1.exports = verify
  async function verify(cache, opts) {
    opts = verifyOpts(opts)
    opts.log.silly('verify', 'verifying cache at', cache)
    const steps = [
      markStartTime,
      fixPerms,
      garbageCollect,
      rebuildIndex,
      cleanTmp,
      writeVerifile,
      markEndTime
    ]
    const stats = {}
    for (const step of steps) {
      const label = step.name
      const start = new Date()
      const s = await step(cache, opts)
      if (s) {
        Object.keys(s).forEach(k => {
          stats[k] = s[k]
        })
      }
      const end = new Date()
      if (!stats.runTime) {
        stats.runTime = {}
      }
      stats.runTime[label] = end - start
    }
    stats.runTime.total = stats.endTime - stats.startTime
    opts.log.silly(
      'verify',
      'verification finished for',
      cache,
      'in',
      `${stats.runTime.total}ms`
    )
    return stats
  }
  async function markStartTime() {
    return {
      startTime: new Date()
    }
  }
  async function markEndTime() {
    return {
      endTime: new Date()
    }
  }
  async function fixPerms(cache, opts) {
    opts.log.silly('verify', 'fixing cache permissions')
    await mkdir(cache, {
      recursive: true
    })
    return null
  }

  // Implements a naive mark-and-sweep tracing garbage collector.
  //
  // The algorithm is basically as follows:
  // 1. Read (and filter) all index entries ("pointers")
  // 2. Mark each integrity value as "live"
  // 3. Read entire filesystem tree in `content-vX/` dir
  // 4. If content is live, verify its checksum and delete it if it fails
  // 5. If content is not marked as live, rm it.
  //
  async function garbageCollect(cache, opts) {
    opts.log.silly('verify', 'garbage collecting content')
    const { default: pMap } = await Promise.resolve().then(function () {
      return index
    })
    const indexStream = index$1.lsStream(cache)
    const liveContent = new Set()
    indexStream.on('data', entry => {
      if (opts.filter && !opts.filter(entry)) {
        return
      }

      // integrity is stringified, re-parse it so we can get each hash
      const integrity = ssri.parse(entry.integrity)
      for (const algo in integrity) {
        liveContent.add(integrity[algo].toString())
      }
    })
    await new Promise((resolve, reject) => {
      indexStream.on('end', resolve).on('error', reject)
    })
    const contentDir = contentPath.contentDir(cache)
    const files = await glob(path.join(contentDir, '**'), {
      follow: false,
      nodir: true,
      nosort: true
    })
    const stats = {
      verifiedContent: 0,
      reclaimedCount: 0,
      reclaimedSize: 0,
      badContentCount: 0,
      keptSize: 0
    }
    await pMap(
      files,
      async f => {
        const split = f.split(/[/\\]/)
        const digest = split.slice(split.length - 3).join('')
        const algo = split[split.length - 4]
        const integrity = ssri.fromHex(digest, algo)
        if (liveContent.has(integrity.toString())) {
          const info = await verifyContent(f, integrity)
          if (!info.valid) {
            stats.reclaimedCount++
            stats.badContentCount++
            stats.reclaimedSize += info.size
          } else {
            stats.verifiedContent++
            stats.keptSize += info.size
          }
        } else {
          // No entries refer to this content. We can delete.
          stats.reclaimedCount++
          const s = await stat(f)
          await rm(f, {
            recursive: true,
            force: true
          })
          stats.reclaimedSize += s.size
        }
        return stats
      },
      {
        concurrency: opts.concurrency
      }
    )
    return stats
  }
  async function verifyContent(filepath, sri) {
    const contentInfo = {}
    try {
      const { size } = await stat(filepath)
      contentInfo.size = size
      contentInfo.valid = true
      await ssri.checkStream(new fsm.ReadStream(filepath), sri)
    } catch (err) {
      if (err.code === 'ENOENT') {
        return {
          size: 0,
          valid: false
        }
      }
      if (err.code !== 'EINTEGRITY') {
        throw err
      }
      await rm(filepath, {
        recursive: true,
        force: true
      })
      contentInfo.valid = false
    }
    return contentInfo
  }
  async function rebuildIndex(cache, opts) {
    opts.log.silly('verify', 'rebuilding index')
    const { default: pMap } = await Promise.resolve().then(function () {
      return index
    })
    const entries = await index$1.ls(cache)
    const stats = {
      missingContent: 0,
      rejectedEntries: 0,
      totalEntries: 0
    }
    const buckets = {}
    for (const k in entries) {
      /* istanbul ignore else */
      if (hasOwnProperty(entries, k)) {
        const hashed = index$1.hashKey(k)
        const entry = entries[k]
        const excluded = opts.filter && !opts.filter(entry)
        excluded && stats.rejectedEntries++
        if (buckets[hashed] && !excluded) {
          buckets[hashed].push(entry)
        } else if (buckets[hashed] && excluded) {
        } else if (excluded) {
          buckets[hashed] = []
          buckets[hashed]._path = index$1.bucketPath(cache, k)
        } else {
          buckets[hashed] = [entry]
          buckets[hashed]._path = index$1.bucketPath(cache, k)
        }
      }
    }
    await pMap(
      Object.keys(buckets),
      key => {
        return rebuildBucket(cache, buckets[key], stats)
      },
      {
        concurrency: opts.concurrency
      }
    )
    return stats
  }
  async function rebuildBucket(cache, bucket, stats) {
    await truncate(bucket._path)
    // This needs to be serialized because cacache explicitly
    // lets very racy bucket conflicts clobber each other.
    for (const entry of bucket) {
      const content = contentPath(cache, entry.integrity)
      try {
        await stat(content)
        await index$1.insert(cache, entry.key, entry.integrity, {
          metadata: entry.metadata,
          size: entry.size,
          time: entry.time
        })
        stats.totalEntries++
      } catch (err) {
        if (err.code === 'ENOENT') {
          stats.rejectedEntries++
          stats.missingContent++
        } else {
          throw err
        }
      }
    }
  }
  function cleanTmp(cache, opts) {
    opts.log.silly('verify', 'cleaning tmp directory')
    return rm(path.join(cache, 'tmp'), {
      recursive: true,
      force: true
    })
  }
  async function writeVerifile(cache, opts) {
    const verifile = path.join(cache, '_lastverified')
    opts.log.silly('verify', 'writing verifile to ' + verifile)
    return writeFile(verifile, `${Date.now()}`)
  }
  verify$1.exports.lastRun = lastRun
  async function lastRun(cache) {
    const data = await readFile(path.join(cache, '_lastverified'), {
      encoding: 'utf8'
    })
    return new Date(+data)
  }
  return verify$1.exports
}

const tmp = {}

let hasRequiredTmp
function requireTmp() {
  if (hasRequiredTmp) {
    return tmp
  }
  hasRequiredTmp = 1
  const { withTempDir } = requireLib$g()
  const fs = require$$0$7
  const path = require$$1$5
  tmp.mkdir = mktmpdir
  async function mktmpdir(cache, opts = {}) {
    const { tmpPrefix } = opts
    const tmpDir = path.join(cache, 'tmp')
    await fs.mkdir(tmpDir, {
      recursive: true,
      owner: 'inherit'
    })
    // do not use path.join(), it drops the trailing / if tmpPrefix is unset
    const target = `${tmpDir}${path.sep}${tmpPrefix || ''}`
    return fs.mkdtemp(target, {
      owner: 'inherit'
    })
  }
  tmp.withTmp = withTmp
  function withTmp(cache, opts, cb) {
    if (!cb) {
      cb = opts
      opts = {}
    }
    return withTempDir(path.join(cache, 'tmp'), cb, opts)
  }
  return tmp
}

lib$3.exports
let hasRequiredLib$5
function requireLib$5() {
  if (hasRequiredLib$5) {
    return lib$3.exports
  }
  hasRequiredLib$5 = 1
  ;(function (module) {
    const get = requireGet()
    const put = requirePut()
    const rm = requireRm()
    const verify = requireVerify$1()
    const { clearMemoized } = requireMemoization()
    const tmp = requireTmp()
    const index = requireEntryIndex()
    module.exports.index = {}
    module.exports.index.compact = index.compact
    module.exports.index.insert = index.insert
    module.exports.ls = index.ls
    module.exports.ls.stream = index.lsStream
    module.exports.get = get
    module.exports.get.byDigest = get.byDigest
    module.exports.get.stream = get.stream
    module.exports.get.stream.byDigest = get.stream.byDigest
    module.exports.get.copy = get.copy
    module.exports.get.copy.byDigest = get.copy.byDigest
    module.exports.get.info = get.info
    module.exports.get.hasContent = get.hasContent
    module.exports.put = put
    module.exports.put.stream = put.stream
    module.exports.rm = rm.entry
    module.exports.rm.all = rm.all
    module.exports.rm.entry = module.exports.rm
    module.exports.rm.content = rm.content
    module.exports.clearMemoized = clearMemoized
    module.exports.tmp = {}
    module.exports.tmp.mkdir = tmp.mkdir
    module.exports.tmp.withTmp = tmp.withTmp
    module.exports.verify = verify
    module.exports.verify.lastRun = verify.lastRun
  })(lib$3)
  return lib$3.exports
}

let pipeline
let hasRequiredPipeline
function requirePipeline() {
  if (hasRequiredPipeline) {
    return pipeline
  }
  hasRequiredPipeline = 1
  const MinipassPipeline = requireMinipassPipeline()
  class CachingMinipassPipeline extends MinipassPipeline {
    #events = []
    #data = new Map()
    constructor(opts, ...streams) {
      // CRITICAL: do NOT pass the streams to the call to super(), this will start
      // the flow of data and potentially cause the events we need to catch to emit
      // before we've finished our own setup. instead we call super() with no args,
      // finish our setup, and then push the streams into ourselves to start the
      // data flow
      super()
      this.#events = opts.events

      /* istanbul ignore next - coverage disabled because this is pointless to test here */
      if (streams.length) {
        this.push(...streams)
      }
    }
    on(event, handler) {
      if (this.#events.includes(event) && this.#data.has(event)) {
        return handler(...this.#data.get(event))
      }
      return super.on(event, handler)
    }
    emit(event, ...data) {
      if (this.#events.includes(event)) {
        this.#data.set(event, data)
      }
      return super.emit(event, ...data)
    }
  }
  pipeline = CachingMinipassPipeline
  return pipeline
}

let key$3
let hasRequiredKey$3
function requireKey$3() {
  if (hasRequiredKey$3) {
    return key$3
  }
  hasRequiredKey$3 = 1
  const { URL, format } = require$$0$2

  // options passed to url.format() when generating a key
  const formatOptions = {
    auth: false,
    fragment: false,
    search: true,
    unicode: false
  }

  // returns a string to be used as the cache key for the Request
  const cacheKey = request => {
    const parsed = new URL(request.url)
    return `make-fetch-happen:request-cache:${format(parsed, formatOptions)}`
  }
  key$3 = cacheKey
  return key$3
}

let dns_1
let hasRequiredDns
function requireDns() {
  if (hasRequiredDns) {
    return dns_1
  }
  hasRequiredDns = 1
  const { LRUCache } = /*@__PURE__*/ requireCommonjs$9()
  const dns = require$$0$j

  // this is a factory so that each request can have its own opts (i.e. ttl)
  // while still sharing the cache across all requests
  const cache = new LRUCache({
    max: 50
  })
  const getOptions = ({
    family = 0,
    hints = dns.ADDRCONFIG,
    all = false,
    verbatim = undefined,
    ttl = 5 * 60 * 1000,
    lookup = dns.lookup
  }) => ({
    // hints and lookup are returned since both are top level properties to (net|tls).connect
    hints,
    lookup: (hostname, ...args) => {
      const callback = args.pop() // callback is always last arg
      const lookupOptions = args[0] ?? {}
      const options = {
        family,
        hints,
        all,
        verbatim,
        ...(typeof lookupOptions === 'number'
          ? {
              family: lookupOptions
            }
          : lookupOptions)
      }
      const key = JSON.stringify({
        hostname,
        ...options
      })
      if (cache.has(key)) {
        const cached = cache.get(key)
        return process.nextTick(callback, null, ...cached)
      }
      lookup(hostname, options, (err, ...result) => {
        if (err) {
          return callback(err)
        }
        cache.set(key, result, {
          ttl
        })
        return callback(null, ...result)
      })
    }
  })
  dns_1 = {
    cache,
    getOptions
  }
  return dns_1
}

let options
let hasRequiredOptions
function requireOptions() {
  if (hasRequiredOptions) {
    return options
  }
  hasRequiredOptions = 1
  const dns = requireDns()
  const normalizeOptions = opts => {
    const family = parseInt(opts.family ?? '0', 10)
    const keepAlive = opts.keepAlive ?? true
    const normalized = {
      // nodejs http agent options. these are all the defaults
      // but kept here to increase the likelihood of cache hits
      // https://nodejs.org/api/http.html#new-agentoptions
      keepAliveMsecs: keepAlive ? 1000 : undefined,
      maxSockets: opts.maxSockets ?? 15,
      maxTotalSockets: Infinity,
      maxFreeSockets: keepAlive ? 256 : undefined,
      scheduling: 'fifo',
      // then spread the rest of the options
      ...opts,
      // we already set these to their defaults that we want
      family,
      keepAlive,
      // our custom timeout options
      timeouts: {
        // the standard timeout option is mapped to our idle timeout
        // and then deleted below
        idle: opts.timeout ?? 0,
        connection: 0,
        response: 0,
        transfer: 0,
        ...opts.timeouts
      },
      // get the dns options that go at the top level of socket connection
      ...dns.getOptions({
        family,
        ...opts.dns
      })
    }

    // remove timeout since we already used it to set our own idle timeout
    delete normalized.timeout
    return normalized
  }
  const createKey = obj => {
    let key = ''
    const sorted = Object.entries(obj).sort((a, b) => a[0] - b[0])
    for (let [k, v] of sorted) {
      if (v == null) {
        v = 'null'
      } else if (v instanceof URL) {
        v = v.toString()
      } else if (typeof v === 'object') {
        v = createKey(v)
      }
      key += `${k}:${v}:`
    }
    return key
  }
  const cacheOptions = ({ secureEndpoint, ...options }) =>
    createKey({
      secureEndpoint: !!secureEndpoint,
      // socket connect options
      family: options.family,
      hints: options.hints,
      localAddress: options.localAddress,
      // tls specific connect options
      strictSsl: secureEndpoint ? !!options.rejectUnauthorized : false,
      ca: secureEndpoint ? options.ca : null,
      cert: secureEndpoint ? options.cert : null,
      key: secureEndpoint ? options.key : null,
      // http agent options
      keepAlive: options.keepAlive,
      keepAliveMsecs: options.keepAliveMsecs,
      maxSockets: options.maxSockets,
      maxTotalSockets: options.maxTotalSockets,
      maxFreeSockets: options.maxFreeSockets,
      scheduling: options.scheduling,
      // timeout options
      timeouts: options.timeouts,
      // proxy
      proxy: options.proxy
    })
  options = {
    normalizeOptions,
    cacheOptions
  }
  return options
}

const dist$c = {}

const src = { exports: {} }

const browser = { exports: {} }

/**
 * Helpers.
 */
let ms
let hasRequiredMs
function requireMs() {
  if (hasRequiredMs) {
    return ms
  }
  hasRequiredMs = 1
  const s = 1000
  const m = s * 60
  const h = m * 60
  const d = h * 24
  const w = d * 7
  const y = d * 365.25

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  ms = function (val, options) {
    options = options || {}
    const type = typeof val
    if (type === 'string' && val.length > 0) {
      return parse(val)
    } else if (type === 'number' && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val)
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    )
  }

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str)
    if (str.length > 100) {
      return
    }
    const match =
      /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      )
    if (!match) {
      return
    }
    const n = parseFloat(match[1])
    const type = (match[2] || 'ms').toLowerCase()
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y
      case 'weeks':
      case 'week':
      case 'w':
        return n * w
      case 'days':
      case 'day':
      case 'd':
        return n * d
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n
      default:
        return undefined
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    const msAbs = Math.abs(ms)
    if (msAbs >= d) {
      return Math.round(ms / d) + 'd'
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + 'h'
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + 'm'
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + 's'
    }
    return ms + 'ms'
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    const msAbs = Math.abs(ms)
    if (msAbs >= d) {
      return plural(ms, msAbs, d, 'day')
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, 'hour')
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, 'minute')
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, 'second')
    }
    return ms + ' ms'
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, msAbs, n, name) {
    const isPlural = msAbs >= n * 1.5
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '')
  }
  return ms
}

let common$1
let hasRequiredCommon$1
function requireCommon$1() {
  if (hasRequiredCommon$1) {
    return common$1
  }
  hasRequiredCommon$1 = 1
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */

  function setup(env) {
    createDebug.debug = createDebug
    createDebug.default = createDebug
    createDebug.coerce = coerce
    createDebug.disable = disable
    createDebug.enable = enable
    createDebug.enabled = enabled
    createDebug.humanize = requireMs()
    createDebug.destroy = destroy
    Object.keys(env).forEach(key => {
      createDebug[key] = env[key]
    })

    /**
     * The currently active debug mode names, and names to skip.
     */

    createDebug.names = []
    createDebug.skips = []

    /**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
     */
    createDebug.formatters = {}

    /**
     * Selects a color for a debug namespace
     * @param {String} namespace The namespace string for the debug instance to be colored
     * @return {Number|String} An ANSI color code for the given namespace
     * @api private
     */
    function selectColor(namespace) {
      let hash = 0
      for (let i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i)
        hash |= 0 // Convert to 32bit integer
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length]
    }
    createDebug.selectColor = selectColor

    /**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */
    function createDebug(namespace) {
      let prevTime
      let enableOverride = null
      let namespacesCache
      let enabledCache
      function debug(...args) {
        // Disabled?
        if (!debug.enabled) {
          return
        }
        const self = debug

        // Set `diff` timestamp
        const curr = Number(new Date())
        const ms = curr - (prevTime || curr)
        self.diff = ms
        self.prev = prevTime
        self.curr = curr
        prevTime = curr
        args[0] = createDebug.coerce(args[0])
        if (typeof args[0] !== 'string') {
          // Anything else let's inspect with %O
          args.unshift('%O')
        }

        // Apply any `formatters` transformations
        let index = 0
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          // If we encounter an escaped % then don't increase the array index
          if (match === '%%') {
            return '%'
          }
          index++
          const formatter = createDebug.formatters[format]
          if (typeof formatter === 'function') {
            const val = args[index]
            match = formatter.call(self, val)

            // Now we need to remove `args[index]` since it's inlined in the `format`
            args.splice(index, 1)
            index--
          }
          return match
        })

        // Apply env-specific formatting (colors, etc.)
        createDebug.formatArgs.call(self, args)
        const logFn = self.log || createDebug.log
        logFn.apply(self, args)
      }
      debug.namespace = namespace
      debug.useColors = createDebug.useColors()
      debug.color = createDebug.selectColor(namespace)
      debug.extend = extend
      debug.destroy = createDebug.destroy // XXX Temporary. Will be removed in the next major release.

      Object.defineProperty(debug, 'enabled', {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces
            enabledCache = createDebug.enabled(namespace)
          }
          return enabledCache
        },
        set: v => {
          enableOverride = v
        }
      })

      // Env-specific initialization logic for debug instances
      if (typeof createDebug.init === 'function') {
        createDebug.init(debug)
      }
      return debug
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(
        this.namespace +
          (typeof delimiter === 'undefined' ? ':' : delimiter) +
          namespace
      )
      newDebug.log = this.log
      return newDebug
    }

    /**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */
    function enable(namespaces) {
      createDebug.save(namespaces)
      createDebug.namespaces = namespaces
      createDebug.names = []
      createDebug.skips = []
      const split = (typeof namespaces === 'string' ? namespaces : '')
        .trim()
        .replace(/\s+/g, ',')
        .split(',')
        .filter(Boolean)
      for (const ns of split) {
        if (ns[0] === '-') {
          createDebug.skips.push(ns.slice(1))
        } else {
          createDebug.names.push(ns)
        }
      }
    }

    /**
     * Checks if the given string matches a namespace template, honoring
     * asterisks as wildcards.
     *
     * @param {String} search
     * @param {String} template
     * @return {Boolean}
     */
    function matchesTemplate(search, template) {
      let searchIndex = 0
      let templateIndex = 0
      let starIndex = -1
      let matchIndex = 0
      while (searchIndex < search.length) {
        if (
          templateIndex < template.length &&
          (template[templateIndex] === search[searchIndex] ||
            template[templateIndex] === '*')
        ) {
          // Match character or proceed with wildcard
          if (template[templateIndex] === '*') {
            starIndex = templateIndex
            matchIndex = searchIndex
            templateIndex++ // Skip the '*'
          } else {
            searchIndex++
            templateIndex++
          }
        } else if (starIndex !== -1) {
          // eslint-disable-line no-negated-condition
          // Backtrack to the last '*' and try to match more characters
          templateIndex = starIndex + 1
          matchIndex++
          searchIndex = matchIndex
        } else {
          return false // No match
        }
      }

      // Handle trailing '*' in template
      while (
        templateIndex < template.length &&
        template[templateIndex] === '*'
      ) {
        templateIndex++
      }
      return templateIndex === template.length
    }

    /**
     * Disable debug output.
     *
     * @return {String} namespaces
     * @api public
     */
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map(namespace => '-' + namespace)
      ].join(',')
      createDebug.enable('')
      return namespaces
    }

    /**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true
        }
      }
      return false
    }

    /**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message
      }
      return val
    }

    /**
     * XXX DO NOT USE. This is a temporary stub function.
     * XXX It WILL be removed in the next major release.
     */
    function destroy() {
      console.warn(
        'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
      )
    }
    createDebug.enable(createDebug.load())
    return createDebug
  }
  common$1 = setup
  return common$1
}

/* eslint-env browser */
let hasRequiredBrowser
function requireBrowser() {
  if (hasRequiredBrowser) {
    return browser.exports
  }
  hasRequiredBrowser = 1
  ;(function (module, exports) {
    /**
     * This is the web browser implementation of `debug()`.
     */

    exports.formatArgs = formatArgs
    exports.save = save
    exports.load = load
    exports.useColors = useColors
    exports.storage = localstorage()
    exports.destroy = (() => {
      let warned = false
      return () => {
        if (!warned) {
          warned = true
          console.warn(
            'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
          )
        }
      }
    })()

    /**
     * Colors.
     */

    exports.colors = [
      '#0000CC',
      '#0000FF',
      '#0033CC',
      '#0033FF',
      '#0066CC',
      '#0066FF',
      '#0099CC',
      '#0099FF',
      '#00CC00',
      '#00CC33',
      '#00CC66',
      '#00CC99',
      '#00CCCC',
      '#00CCFF',
      '#3300CC',
      '#3300FF',
      '#3333CC',
      '#3333FF',
      '#3366CC',
      '#3366FF',
      '#3399CC',
      '#3399FF',
      '#33CC00',
      '#33CC33',
      '#33CC66',
      '#33CC99',
      '#33CCCC',
      '#33CCFF',
      '#6600CC',
      '#6600FF',
      '#6633CC',
      '#6633FF',
      '#66CC00',
      '#66CC33',
      '#9900CC',
      '#9900FF',
      '#9933CC',
      '#9933FF',
      '#99CC00',
      '#99CC33',
      '#CC0000',
      '#CC0033',
      '#CC0066',
      '#CC0099',
      '#CC00CC',
      '#CC00FF',
      '#CC3300',
      '#CC3333',
      '#CC3366',
      '#CC3399',
      '#CC33CC',
      '#CC33FF',
      '#CC6600',
      '#CC6633',
      '#CC9900',
      '#CC9933',
      '#CCCC00',
      '#CCCC33',
      '#FF0000',
      '#FF0033',
      '#FF0066',
      '#FF0099',
      '#FF00CC',
      '#FF00FF',
      '#FF3300',
      '#FF3333',
      '#FF3366',
      '#FF3399',
      '#FF33CC',
      '#FF33FF',
      '#FF6600',
      '#FF6633',
      '#FF9900',
      '#FF9933',
      '#FFCC00',
      '#FFCC33'
    ]

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    // eslint-disable-next-line complexity
    function useColors() {
      // NB: In an Electron preload script, document will be defined but not fully
      // initialized. Since we know we're in Chrome, we'll just detect this case
      // explicitly
      if (
        typeof window !== 'undefined' &&
        window.process &&
        (window.process.type === 'renderer' || window.process.__nwjs)
      ) {
        return true
      }

      // Internet Explorer and Edge do not support colors.
      if (
        typeof navigator !== 'undefined' &&
        navigator.userAgent &&
        navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
      ) {
        return false
      }
      let m

      // Is webkit? http://stackoverflow.com/a/16459606/376773
      // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
      // eslint-disable-next-line no-return-assign
      return (
        (typeof document !== 'undefined' &&
          document.documentElement &&
          document.documentElement.style &&
          document.documentElement.style.WebkitAppearance) ||
        // Is firebug? http://stackoverflow.com/a/398120/376773
        (typeof window !== 'undefined' &&
          window.console &&
          (window.console.firebug ||
            (window.console.exception && window.console.table))) ||
        // Is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        (typeof navigator !== 'undefined' &&
          navigator.userAgent &&
          (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) &&
          parseInt(m[1], 10) >= 31) ||
        // Double check webkit in userAgent just in case we are in a worker
        (typeof navigator !== 'undefined' &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
      )
    }

    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
      args[0] =
        (this.useColors ? '%c' : '') +
        this.namespace +
        (this.useColors ? ' %c' : ' ') +
        args[0] +
        (this.useColors ? '%c ' : ' ') +
        '+' +
        module.exports.humanize(this.diff)
      if (!this.useColors) {
        return
      }
      const c = 'color: ' + this.color
      args.splice(1, 0, c, 'color: inherit')

      // The final "%c" is somewhat tricky, because there could be other
      // arguments passed either before or after the %c, so we need to
      // figure out the correct index to insert the CSS into
      let index = 0
      let lastC = 0
      args[0].replace(/%[a-zA-Z%]/g, match => {
        if (match === '%%') {
          return
        }
        index++
        if (match === '%c') {
          // We only are interested in the *last* %c
          // (the user may have provided their own)
          lastC = index
        }
      })
      args.splice(lastC, 0, c)
    }

    /**
     * Invokes `console.debug()` when available.
     * No-op when `console.debug` is not a "function".
     * If `console.debug` is not available, falls back
     * to `console.log`.
     *
     * @api public
     */
    exports.log = console.debug || console.log || (() => {})

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem('debug', namespaces)
        } else {
          exports.storage.removeItem('debug')
        }
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */
    function load() {
      let r
      try {
        r = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG')
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }

      // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
      if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG
      }
      return r
    }

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
      try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }
    }
    module.exports = requireCommon$1()(exports)
    const { formatters } = module.exports

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    formatters.j = function (v) {
      try {
        return JSON.stringify(v)
      } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message
      }
    }
  })(browser, browser.exports)
  return browser.exports
}

const node = { exports: {} }

let hasFlag
let hasRequiredHasFlag
function requireHasFlag() {
  if (hasRequiredHasFlag) {
    return hasFlag
  }
  hasRequiredHasFlag = 1
  hasFlag = (flag, argv = process.argv) => {
    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--'
    const position = argv.indexOf(prefix + flag)
    const terminatorPosition = argv.indexOf('--')
    return (
      position !== -1 &&
      (terminatorPosition === -1 || position < terminatorPosition)
    )
  }
  return hasFlag
}

let supportsColor_1
let hasRequiredSupportsColor
function requireSupportsColor() {
  if (hasRequiredSupportsColor) {
    return supportsColor_1
  }
  hasRequiredSupportsColor = 1
  const os = require$$0$9
  const tty = require$$1$9
  const hasFlag = requireHasFlag()
  const { env } = process
  let forceColor
  if (
    hasFlag('no-color') ||
    hasFlag('no-colors') ||
    hasFlag('color=false') ||
    hasFlag('color=never')
  ) {
    forceColor = 0
  } else if (
    hasFlag('color') ||
    hasFlag('colors') ||
    hasFlag('color=true') ||
    hasFlag('color=always')
  ) {
    forceColor = 1
  }
  if ('FORCE_COLOR' in env) {
    if (env.FORCE_COLOR === 'true') {
      forceColor = 1
    } else if (env.FORCE_COLOR === 'false') {
      forceColor = 0
    } else {
      forceColor =
        env.FORCE_COLOR.length === 0
          ? 1
          : Math.min(parseInt(env.FORCE_COLOR, 10), 3)
    }
  }
  function translateLevel(level) {
    if (level === 0) {
      return false
    }
    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    }
  }
  function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
      return 0
    }
    if (
      hasFlag('color=16m') ||
      hasFlag('color=full') ||
      hasFlag('color=truecolor')
    ) {
      return 3
    }
    if (hasFlag('color=256')) {
      return 2
    }
    if (haveStream && !streamIsTTY && forceColor === undefined) {
      return 0
    }
    const min = forceColor || 0
    if (env.TERM === 'dumb') {
      return min
    }
    if (process.platform === 'win32') {
      // Windows 10 build 10586 is the first Windows release that supports 256 colors.
      // Windows 10 build 14931 is the first release that supports 16m/TrueColor.
      const osRelease = os.release().split('.')
      if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2
      }
      return 1
    }
    if ('CI' in env) {
      if (
        [
          'TRAVIS',
          'CIRCLECI',
          'APPVEYOR',
          'GITLAB_CI',
          'GITHUB_ACTIONS',
          'BUILDKITE'
        ].some(sign => sign in env) ||
        env.CI_NAME === 'codeship'
      ) {
        return 1
      }
      return min
    }
    if ('TEAMCITY_VERSION' in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0
    }
    if (env.COLORTERM === 'truecolor') {
      return 3
    }
    if ('TERM_PROGRAM' in env) {
      const version = parseInt(
        (env.TERM_PROGRAM_VERSION || '').split('.')[0],
        10
      )
      switch (env.TERM_PROGRAM) {
        case 'iTerm.app':
          return version >= 3 ? 3 : 2
        case 'Apple_Terminal':
          return 2
        // No default
      }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
      return 2
    }
    if (
      /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(
        env.TERM
      )
    ) {
      return 1
    }
    if ('COLORTERM' in env) {
      return 1
    }
    return min
  }
  function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY)
    return translateLevel(level)
  }
  supportsColor_1 = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
  }
  return supportsColor_1
}

/**
 * Module dependencies.
 */
let hasRequiredNode
function requireNode() {
  if (hasRequiredNode) {
    return node.exports
  }
  hasRequiredNode = 1
  ;(function (module, exports) {
    const tty = require$$1$9
    const util = require$$0$e

    /**
     * This is the Node.js implementation of `debug()`.
     */

    exports.init = init
    exports.log = log
    exports.formatArgs = formatArgs
    exports.save = save
    exports.load = load
    exports.useColors = useColors
    exports.destroy = util.deprecate(
      () => {},
      'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
    )

    /**
     * Colors.
     */

    exports.colors = [6, 2, 3, 4, 5, 1]
    try {
      // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
      // eslint-disable-next-line import/no-extraneous-dependencies
      const supportsColor = requireSupportsColor()
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62,
          63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113,
          128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167,
          168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199,
          200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221
        ]
      }
    } catch (error) {
      // Swallow - we only care if `supports-color` is available; it doesn't have to be.
    }

    /**
     * Build up the default `inspectOpts` object from the environment variables.
     *
     *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
     */

    exports.inspectOpts = Object.keys(process.env)
      .filter(key => {
        return /^debug_/i.test(key)
      })
      .reduce((obj, key) => {
        // Camel-case
        const prop = key
          .substring(6)
          .toLowerCase()
          .replace(/_([a-z])/g, (_, k) => {
            return k.toUpperCase()
          })

        // Coerce string value into JS value
        let val = process.env[key]
        if (/^(yes|on|true|enabled)$/i.test(val)) {
          val = true
        } else if (/^(no|off|false|disabled)$/i.test(val)) {
          val = false
        } else if (val === 'null') {
          val = null
        } else {
          val = Number(val)
        }
        obj[prop] = val
        return obj
      }, {})

    /**
     * Is stdout a TTY? Colored output is enabled when `true`.
     */

    function useColors() {
      return 'colors' in exports.inspectOpts
        ? Boolean(exports.inspectOpts.colors)
        : tty.isatty(process.stderr.fd)
    }

    /**
     * Adds ANSI color escape codes if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
      const { namespace: name, useColors } = this
      if (useColors) {
        const c = this.color
        const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c)
        const prefix = `  ${colorCode};1m${name} \u001B[0m`
        args[0] = prefix + args[0].split('\n').join('\n' + prefix)
        args.push(
          colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m'
        )
      } else {
        args[0] = getDate() + name + ' ' + args[0]
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return ''
      }
      return new Date().toISOString() + ' '
    }

    /**
     * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
     */

    function log(...args) {
      return process.stderr.write(
        util.formatWithOptions(exports.inspectOpts, ...args) + '\n'
      )
    }

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces
      } else {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG
      }
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */

    function load() {
      return process.env.DEBUG
    }

    /**
     * Init logic for `debug` instances.
     *
     * Create a new `inspectOpts` object in case `useColors` is set
     * differently for a particular `debug` instance.
     */

    function init(debug) {
      debug.inspectOpts = {}
      const keys = Object.keys(exports.inspectOpts)
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]]
      }
    }
    module.exports = requireCommon$1()(exports)
    const { formatters } = module.exports

    /**
     * Map %o to `util.inspect()`, all on a single line.
     */

    formatters.o = function (v) {
      this.inspectOpts.colors = this.useColors
      return util
        .inspect(v, this.inspectOpts)
        .split('\n')
        .map(str => str.trim())
        .join(' ')
    }

    /**
     * Map %O to `util.inspect()`, allowing multiple lines if needed.
     */

    formatters.O = function (v) {
      this.inspectOpts.colors = this.useColors
      return util.inspect(v, this.inspectOpts)
    }
  })(node, node.exports)
  return node.exports
}

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */
let hasRequiredSrc
function requireSrc() {
  if (hasRequiredSrc) {
    return src.exports
  }
  hasRequiredSrc = 1
  if (
    typeof process === 'undefined' ||
    process.type === 'renderer' ||
    process.browser === true ||
    process.__nwjs
  ) {
    src.exports = requireBrowser()
  } else {
    src.exports = requireNode()
  }
  return src.exports
}

const dist$b = {}

const helpers$2 = {}

let hasRequiredHelpers$2
function requireHelpers$2() {
  if (hasRequiredHelpers$2) {
    return helpers$2
  }
  hasRequiredHelpers$2 = 1
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(helpers$2, '__esModule', {
    value: true
  })
  helpers$2.req = helpers$2.json = helpers$2.toBuffer = void 0
  const http = __importStar(require$$0$i)
  const https = __importStar(require$$2$5)
  async function toBuffer(stream) {
    let length = 0
    const chunks = []
    for await (const chunk of stream) {
      length += chunk.length
      chunks.push(chunk)
    }
    return Buffer.concat(chunks, length)
  }
  helpers$2.toBuffer = toBuffer
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async function json(stream) {
    const buf = await toBuffer(stream)
    const str = buf.toString('utf8')
    try {
      return JSON.parse(str)
    } catch (_err) {
      const err = _err
      err.message += ` (input: ${str})`
      throw err
    }
  }
  helpers$2.json = json
  function req(url, opts = {}) {
    const href = typeof url === 'string' ? url : url.href
    const req = (href.startsWith('https:') ? https : http).request(url, opts)
    const promise = new Promise((resolve, reject) => {
      req.once('response', resolve).once('error', reject).end()
    })
    req.then = promise.then.bind(promise)
    return req
  }
  helpers$2.req = req
  return helpers$2
}

let hasRequiredDist$c
function requireDist$c() {
  if (hasRequiredDist$c) {
    return dist$b
  }
  hasRequiredDist$c = 1
  ;(function (exports) {
    const __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            let desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            o[k2] = m[k]
          })
    const __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', {
              enumerable: true,
              value: v
            })
          }
        : function (o, v) {
            o['default'] = v
          })
    const __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) {
          return mod
        }
        const result = {}
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        }
        __setModuleDefault(result, mod)
        return result
      }
    const __exportStar =
      (this && this.__exportStar) ||
      function (m, exports) {
        for (const p in m) {
          if (
            p !== 'default' &&
            !Object.prototype.hasOwnProperty.call(exports, p)
          )
            __createBinding(exports, m, p)
        }
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Agent = void 0
    const net = __importStar(require$$0$k)
    const http = __importStar(require$$0$i)
    const https_1 = require$$2$5
    __exportStar(requireHelpers$2(), exports)
    const INTERNAL = Symbol('AgentBaseInternalState')
    class Agent extends http.Agent {
      constructor(opts) {
        super(opts)
        this[INTERNAL] = {}
      }
      /**
       * Determine whether this is an `http` or `https` request.
       */
      isSecureEndpoint(options) {
        if (options) {
          // First check the `secureEndpoint` property explicitly, since this
          // means that a parent `Agent` is "passing through" to this instance.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          if (typeof options.secureEndpoint === 'boolean') {
            return options.secureEndpoint
          }
          // If no explicit `secure` endpoint, check if `protocol` property is
          // set. This will usually be the case since using a full string URL
          // or `URL` instance should be the most common usage.
          if (typeof options.protocol === 'string') {
            return options.protocol === 'https:'
          }
        }
        // Finally, if no `protocol` property was set, then fall back to
        // checking the stack trace of the current call stack, and try to
        // detect the "https" module.
        const { stack } = new Error()
        if (typeof stack !== 'string') {
          return false
        }
        return stack
          .split('\n')
          .some(
            l =>
              l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1
          )
      }
      // In order to support async signatures in `connect()` and Node's native
      // connection pooling in `http.Agent`, the array of sockets for each origin
      // has to be updated synchronously. This is so the length of the array is
      // accurate when `addRequest()` is next called. We achieve this by creating a
      // fake socket and adding it to `sockets[origin]` and incrementing
      // `totalSocketCount`.
      incrementSockets(name) {
        // If `maxSockets` and `maxTotalSockets` are both Infinity then there is no
        // need to create a fake socket because Node.js native connection pooling
        // will never be invoked.
        if (this.maxSockets === Infinity && this.maxTotalSockets === Infinity) {
          return null
        }
        // All instances of `sockets` are expected TypeScript errors. The
        // alternative is to add it as a private property of this class but that
        // will break TypeScript subclassing.
        if (!this.sockets[name]) {
          // @ts-expect-error `sockets` is readonly in `@types/node`
          this.sockets[name] = []
        }
        const fakeSocket = new net.Socket({
          writable: false
        })
        this.sockets[name].push(fakeSocket)
        // @ts-expect-error `totalSocketCount` isn't defined in `@types/node`
        this.totalSocketCount++
        return fakeSocket
      }
      decrementSockets(name, socket) {
        if (!this.sockets[name] || socket === null) {
          return
        }
        const sockets = this.sockets[name]
        const index = sockets.indexOf(socket)
        if (index !== -1) {
          sockets.splice(index, 1)
          // @ts-expect-error  `totalSocketCount` isn't defined in `@types/node`
          this.totalSocketCount--
          if (sockets.length === 0) {
            // @ts-expect-error `sockets` is readonly in `@types/node`
            delete this.sockets[name]
          }
        }
      }
      // In order to properly update the socket pool, we need to call `getName()` on
      // the core `https.Agent` if it is a secureEndpoint.
      getName(options) {
        const secureEndpoint = this.isSecureEndpoint(options)
        if (secureEndpoint) {
          // @ts-expect-error `getName()` isn't defined in `@types/node`
          return https_1.Agent.prototype.getName.call(this, options)
        }
        // @ts-expect-error `getName()` isn't defined in `@types/node`
        return super.getName(options)
      }
      createSocket(req, options, cb) {
        const connectOpts = {
          ...options,
          secureEndpoint: this.isSecureEndpoint(options)
        }
        const name = this.getName(connectOpts)
        const fakeSocket = this.incrementSockets(name)
        Promise.resolve()
          .then(() => this.connect(req, connectOpts))
          .then(
            socket => {
              this.decrementSockets(name, fakeSocket)
              if (socket instanceof http.Agent) {
                try {
                  // @ts-expect-error `addRequest()` isn't defined in `@types/node`
                  return socket.addRequest(req, connectOpts)
                } catch (err) {
                  return cb(err)
                }
              }
              this[INTERNAL].currentSocket = socket
              // @ts-expect-error `createSocket()` isn't defined in `@types/node`
              super.createSocket(req, options, cb)
            },
            err => {
              this.decrementSockets(name, fakeSocket)
              cb(err)
            }
          )
      }
      createConnection() {
        const socket = this[INTERNAL].currentSocket
        this[INTERNAL].currentSocket = undefined
        if (!socket) {
          throw new Error('No socket was returned in the `connect()` function')
        }
        return socket
      }
      get defaultPort() {
        return (
          this[INTERNAL].defaultPort ?? (this.protocol === 'https:' ? 443 : 80)
        )
      }
      set defaultPort(v) {
        if (this[INTERNAL]) {
          this[INTERNAL].defaultPort = v
        }
      }
      get protocol() {
        return (
          this[INTERNAL].protocol ??
          (this.isSecureEndpoint() ? 'https:' : 'http:')
        )
      }
      set protocol(v) {
        if (this[INTERNAL]) {
          this[INTERNAL].protocol = v
        }
      }
    }
    exports.Agent = Agent
  })(dist$b)
  return dist$b
}

let hasRequiredDist$b
function requireDist$b() {
  if (hasRequiredDist$b) {
    return dist$c
  }
  hasRequiredDist$b = 1
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  const __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(dist$c, '__esModule', {
    value: true
  })
  dist$c.HttpProxyAgent = void 0
  const net = __importStar(require$$0$k)
  const tls = __importStar(require$$1$a)
  const debug_1 = __importDefault(requireSrc())
  const events_1 = require$$0$c
  const agent_base_1 = requireDist$c()
  const url_1 = require$$0$2
  const debug = (0, debug_1.default)('http-proxy-agent')
  /**
   * The `HttpProxyAgent` implements an HTTP Agent subclass that connects
   * to the specified "HTTP proxy server" in order to proxy HTTP requests.
   */
  class HttpProxyAgent extends agent_base_1.Agent {
    constructor(proxy, opts) {
      super(opts)
      this.proxy = typeof proxy === 'string' ? new url_1.URL(proxy) : proxy
      this.proxyHeaders = opts?.headers ?? {}
      debug('Creating new HttpProxyAgent instance: %o', this.proxy.href)
      // Trim off the brackets from IPv6 addresses
      const host = (this.proxy.hostname || this.proxy.host).replace(
        /^\[|\]$/g,
        ''
      )
      const port = this.proxy.port
        ? parseInt(this.proxy.port, 10)
        : this.proxy.protocol === 'https:'
          ? 443
          : 80
      this.connectOpts = {
        ...(opts ? omit(opts, 'headers') : null),
        host,
        port
      }
    }
    addRequest(req, opts) {
      req._header = null
      this.setRequestProps(req, opts)
      // @ts-expect-error `addRequest()` isn't defined in `@types/node`
      super.addRequest(req, opts)
    }
    setRequestProps(req, opts) {
      const { proxy } = this
      const protocol = opts.secureEndpoint ? 'https:' : 'http:'
      const hostname = req.getHeader('host') || 'localhost'
      const base = `${protocol}//${hostname}`
      const url = new url_1.URL(req.path, base)
      if (opts.port !== 80) {
        url.port = String(opts.port)
      }
      // Change the `http.ClientRequest` instance's "path" field
      // to the absolute path of the URL that will be requested.
      req.path = String(url)
      // Inject the `Proxy-Authorization` header if necessary.
      const headers =
        typeof this.proxyHeaders === 'function'
          ? this.proxyHeaders()
          : {
              ...this.proxyHeaders
            }
      if (proxy.username || proxy.password) {
        const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`
        headers['Proxy-Authorization'] =
          `Basic ${Buffer.from(auth).toString('base64')}`
      }
      if (!headers['Proxy-Connection']) {
        headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close'
      }
      for (const name of Object.keys(headers)) {
        const value = headers[name]
        if (value) {
          req.setHeader(name, value)
        }
      }
    }
    async connect(req, opts) {
      req._header = null
      if (!req.path.includes('://')) {
        this.setRequestProps(req, opts)
      }
      // At this point, the http ClientRequest's internal `_header` field
      // might have already been set. If this is the case then we'll need
      // to re-generate the string since we just changed the `req.path`.
      let first
      let endOfHeaders
      debug('Regenerating stored HTTP header string for request')
      req._implicitHeader()
      if (req.outputData && req.outputData.length > 0) {
        debug('Patching connection write() output buffer with updated header')
        first = req.outputData[0].data
        endOfHeaders = first.indexOf('\r\n\r\n') + 4
        req.outputData[0].data = req._header + first.substring(endOfHeaders)
        debug('Output buffer: %o', req.outputData[0].data)
      }
      // Create a socket connection to the proxy server.
      let socket
      if (this.proxy.protocol === 'https:') {
        debug('Creating `tls.Socket`: %o', this.connectOpts)
        socket = tls.connect(this.connectOpts)
      } else {
        debug('Creating `net.Socket`: %o', this.connectOpts)
        socket = net.connect(this.connectOpts)
      }
      // Wait for the socket's `connect` event, so that this `callback()`
      // function throws instead of the `http` request machinery. This is
      // important for i.e. `PacProxyAgent` which determines a failed proxy
      // connection via the `callback()` function throwing.
      await (0, events_1.once)(socket, 'connect')
      return socket
    }
  }
  HttpProxyAgent.protocols = ['http', 'https']
  dist$c.HttpProxyAgent = HttpProxyAgent
  function omit(obj, ...keys) {
    const ret = {}
    let key
    for (key in obj) {
      if (!keys.includes(key)) {
        ret[key] = obj[key]
      }
    }
    return ret
  }
  return dist$c
}

const dist$a = {}

const parseProxyResponse = {}

let hasRequiredParseProxyResponse
function requireParseProxyResponse() {
  if (hasRequiredParseProxyResponse) {
    return parseProxyResponse
  }
  hasRequiredParseProxyResponse = 1
  const __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(parseProxyResponse, '__esModule', {
    value: true
  })
  parseProxyResponse.parseProxyResponse = void 0
  const debug_1 = __importDefault(requireSrc())
  const debug = (0, debug_1.default)('https-proxy-agent:parse-proxy-response')
  function parseProxyResponse$1(socket) {
    return new Promise((resolve, reject) => {
      // we need to buffer any HTTP traffic that happens with the proxy before we get
      // the CONNECT response, so that if the response is anything other than an "200"
      // response code, then we can re-play the "data" events on the socket once the
      // HTTP parser is hooked up...
      let buffersLength = 0
      const buffers = []
      function read() {
        const b = socket.read()
        if (b) {
          ondata(b)
        } else {
          socket.once('readable', read)
        }
      }
      function cleanup() {
        socket.removeListener('end', onend)
        socket.removeListener('error', onerror)
        socket.removeListener('readable', read)
      }
      function onend() {
        cleanup()
        debug('onend')
        reject(
          new Error('Proxy connection ended before receiving CONNECT response')
        )
      }
      function onerror(err) {
        cleanup()
        debug('onerror %o', err)
        reject(err)
      }
      function ondata(b) {
        buffers.push(b)
        buffersLength += b.length
        const buffered = Buffer.concat(buffers, buffersLength)
        const endOfHeaders = buffered.indexOf('\r\n\r\n')
        if (endOfHeaders === -1) {
          // keep buffering
          debug('have not received end of HTTP headers yet...')
          read()
          return
        }
        const headerParts = buffered
          .slice(0, endOfHeaders)
          .toString('ascii')
          .split('\r\n')
        const firstLine = headerParts.shift()
        if (!firstLine) {
          socket.destroy()
          return reject(
            new Error('No header received from proxy CONNECT response')
          )
        }
        const firstLineParts = firstLine.split(' ')
        const statusCode = +firstLineParts[1]
        const statusText = firstLineParts.slice(2).join(' ')
        const headers = {}
        for (const header of headerParts) {
          if (!header) {
            continue
          }
          const firstColon = header.indexOf(':')
          if (firstColon === -1) {
            socket.destroy()
            return reject(
              new Error(
                `Invalid header from proxy CONNECT response: "${header}"`
              )
            )
          }
          const key = header.slice(0, firstColon).toLowerCase()
          const value = header.slice(firstColon + 1).trimStart()
          const current = headers[key]
          if (typeof current === 'string') {
            headers[key] = [current, value]
          } else if (Array.isArray(current)) {
            current.push(value)
          } else {
            headers[key] = value
          }
        }
        debug('got proxy server response: %o %o', firstLine, headers)
        cleanup()
        resolve({
          connect: {
            statusCode,
            statusText,
            headers
          },
          buffered
        })
      }
      socket.on('error', onerror)
      socket.on('end', onend)
      read()
    })
  }
  parseProxyResponse.parseProxyResponse = parseProxyResponse$1
  return parseProxyResponse
}

let hasRequiredDist$a
function requireDist$a() {
  if (hasRequiredDist$a) {
    return dist$a
  }
  hasRequiredDist$a = 1
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  const __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(dist$a, '__esModule', {
    value: true
  })
  dist$a.HttpsProxyAgent = void 0
  const net = __importStar(require$$0$k)
  const tls = __importStar(require$$1$a)
  const assert_1 = __importDefault(require$$0$h)
  const debug_1 = __importDefault(requireSrc())
  const agent_base_1 = requireDist$c()
  const url_1 = require$$0$2
  const parse_proxy_response_1 = requireParseProxyResponse()
  const debug = (0, debug_1.default)('https-proxy-agent')
  const setServernameFromNonIpHost = options => {
    if (
      options.servername === undefined &&
      options.host &&
      !net.isIP(options.host)
    ) {
      return {
        ...options,
        servername: options.host
      }
    }
    return options
  }
  /**
   * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to
   * the specified "HTTP(s) proxy server" in order to proxy HTTPS requests.
   *
   * Outgoing HTTP requests are first tunneled through the proxy server using the
   * `CONNECT` HTTP request method to establish a connection to the proxy server,
   * and then the proxy server connects to the destination target and issues the
   * HTTP request from the proxy server.
   *
   * `https:` requests have their socket connection upgraded to TLS once
   * the connection to the proxy server has been established.
   */
  class HttpsProxyAgent extends agent_base_1.Agent {
    constructor(proxy, opts) {
      super(opts)
      this.options = {
        path: undefined
      }
      this.proxy = typeof proxy === 'string' ? new url_1.URL(proxy) : proxy
      this.proxyHeaders = opts?.headers ?? {}
      debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href)
      // Trim off the brackets from IPv6 addresses
      const host = (this.proxy.hostname || this.proxy.host).replace(
        /^\[|\]$/g,
        ''
      )
      const port = this.proxy.port
        ? parseInt(this.proxy.port, 10)
        : this.proxy.protocol === 'https:'
          ? 443
          : 80
      this.connectOpts = {
        // Attempt to negotiate http/1.1 for proxy servers that support http/2
        ALPNProtocols: ['http/1.1'],
        ...(opts ? omit(opts, 'headers') : null),
        host,
        port
      }
    }
    /**
     * Called when the node-core HTTP client library is creating a
     * new HTTP request.
     */
    async connect(req, opts) {
      const { proxy } = this
      if (!opts.host) {
        throw new TypeError('No "host" provided')
      }
      // Create a socket connection to the proxy server.
      let socket
      if (proxy.protocol === 'https:') {
        debug('Creating `tls.Socket`: %o', this.connectOpts)
        socket = tls.connect(setServernameFromNonIpHost(this.connectOpts))
      } else {
        debug('Creating `net.Socket`: %o', this.connectOpts)
        socket = net.connect(this.connectOpts)
      }
      const headers =
        typeof this.proxyHeaders === 'function'
          ? this.proxyHeaders()
          : {
              ...this.proxyHeaders
            }
      const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host
      let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\r\n`
      // Inject the `Proxy-Authorization` header if necessary.
      if (proxy.username || proxy.password) {
        const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`
        headers['Proxy-Authorization'] =
          `Basic ${Buffer.from(auth).toString('base64')}`
      }
      headers.Host = `${host}:${opts.port}`
      if (!headers['Proxy-Connection']) {
        headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close'
      }
      for (const name of Object.keys(headers)) {
        payload += `${name}: ${headers[name]}\r\n`
      }
      const proxyResponsePromise = (0,
      parse_proxy_response_1.parseProxyResponse)(socket)
      socket.write(`${payload}\r\n`)
      const { connect, buffered } = await proxyResponsePromise
      req.emit('proxyConnect', connect)
      this.emit('proxyConnect', connect, req)
      if (connect.statusCode === 200) {
        req.once('socket', resume)
        if (opts.secureEndpoint) {
          // The proxy is connecting to a TLS server, so upgrade
          // this socket connection to a TLS connection.
          debug('Upgrading socket connection to TLS')
          return tls.connect({
            ...omit(setServernameFromNonIpHost(opts), 'host', 'path', 'port'),
            socket
          })
        }
        return socket
      }
      // Some other status code that's not 200... need to re-play the HTTP
      // header "data" events onto the socket once the HTTP machinery is
      // attached so that the node core `http` can parse and handle the
      // error status code.
      // Close the original socket, and a new "fake" socket is returned
      // instead, so that the proxy doesn't get the HTTP request
      // written to it (which may contain `Authorization` headers or other
      // sensitive data).
      //
      // See: https://hackerone.com/reports/541502
      socket.destroy()
      const fakeSocket = new net.Socket({
        writable: false
      })
      fakeSocket.readable = true
      // Need to wait for the "socket" event to re-play the "data" events.
      req.once('socket', s => {
        debug('Replaying proxy buffer for failed request')
        ;(0, assert_1.default)(s.listenerCount('data') > 0)
        // Replay the "buffered" Buffer onto the fake `socket`, since at
        // this point the HTTP module machinery has been hooked up for
        // the user.
        s.push(buffered)
        s.push(null)
      })
      return fakeSocket
    }
  }
  HttpsProxyAgent.protocols = ['http', 'https']
  dist$a.HttpsProxyAgent = HttpsProxyAgent
  function resume(socket) {
    socket.resume()
  }
  function omit(obj, ...keys) {
    const ret = {}
    let key
    for (key in obj) {
      if (!keys.includes(key)) {
        ret[key] = obj[key]
      }
    }
    return ret
  }
  return dist$a
}

const dist$9 = {}

const build$1 = {}

const socksclient = {}

const smartbuffer = {}

const utils$1 = {}

let hasRequiredUtils$1
function requireUtils$1() {
  if (hasRequiredUtils$1) {
    return utils$1
  }
  hasRequiredUtils$1 = 1
  Object.defineProperty(utils$1, '__esModule', {
    value: true
  })
  const buffer_1 = require$$0$g
  /**
   * Error strings
   */
  const ERRORS = {
    INVALID_ENCODING:
      'Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.',
    INVALID_SMARTBUFFER_SIZE:
      'Invalid size provided. Size must be a valid integer greater than zero.',
    INVALID_SMARTBUFFER_BUFFER:
      'Invalid Buffer provided in SmartBufferOptions.',
    INVALID_SMARTBUFFER_OBJECT:
      'Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.',
    INVALID_OFFSET: 'An invalid offset value was provided.',
    INVALID_OFFSET_NON_NUMBER:
      'An invalid offset value was provided. A numeric value is required.',
    INVALID_LENGTH: 'An invalid length value was provided.',
    INVALID_LENGTH_NON_NUMBER:
      'An invalid length value was provived. A numeric value is required.',
    INVALID_TARGET_OFFSET:
      'Target offset is beyond the bounds of the internal SmartBuffer data.',
    INVALID_TARGET_LENGTH:
      'Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.',
    INVALID_READ_BEYOND_BOUNDS:
      'Attempted to read beyond the bounds of the managed data.',
    INVALID_WRITE_BEYOND_BOUNDS:
      'Attempted to write beyond the bounds of the managed data.'
  }
  utils$1.ERRORS = ERRORS
  /**
   * Checks if a given encoding is a valid Buffer encoding. (Throws an exception if check fails)
   *
   * @param { String } encoding The encoding string to check.
   */
  function checkEncoding(encoding) {
    if (!buffer_1.Buffer.isEncoding(encoding)) {
      throw new Error(ERRORS.INVALID_ENCODING)
    }
  }
  utils$1.checkEncoding = checkEncoding
  /**
   * Checks if a given number is a finite integer. (Throws an exception if check fails)
   *
   * @param { Number } value The number value to check.
   */
  function isFiniteInteger(value) {
    return typeof value === 'number' && isFinite(value) && isInteger(value)
  }
  utils$1.isFiniteInteger = isFiniteInteger
  /**
   * Checks if an offset/length value is valid. (Throws an exception if check fails)
   *
   * @param value The value to check.
   * @param offset True if checking an offset, false if checking a length.
   */
  function checkOffsetOrLengthValue(value, offset) {
    if (typeof value === 'number') {
      // Check for non finite/non integers
      if (!isFiniteInteger(value) || value < 0) {
        throw new Error(offset ? ERRORS.INVALID_OFFSET : ERRORS.INVALID_LENGTH)
      }
    } else {
      throw new Error(
        offset
          ? ERRORS.INVALID_OFFSET_NON_NUMBER
          : ERRORS.INVALID_LENGTH_NON_NUMBER
      )
    }
  }
  /**
   * Checks if a length value is valid. (Throws an exception if check fails)
   *
   * @param { Number } length The value to check.
   */
  function checkLengthValue(length) {
    checkOffsetOrLengthValue(length, false)
  }
  utils$1.checkLengthValue = checkLengthValue
  /**
   * Checks if a offset value is valid. (Throws an exception if check fails)
   *
   * @param { Number } offset The value to check.
   */
  function checkOffsetValue(offset) {
    checkOffsetOrLengthValue(offset, true)
  }
  utils$1.checkOffsetValue = checkOffsetValue
  /**
   * Checks if a target offset value is out of bounds. (Throws an exception if check fails)
   *
   * @param { Number } offset The offset value to check.
   * @param { SmartBuffer } buff The SmartBuffer instance to check against.
   */
  function checkTargetOffset(offset, buff) {
    if (offset < 0 || offset > buff.length) {
      throw new Error(ERRORS.INVALID_TARGET_OFFSET)
    }
  }
  utils$1.checkTargetOffset = checkTargetOffset
  /**
   * Determines whether a given number is a integer.
   * @param value The number to check.
   */
  function isInteger(value) {
    return (
      typeof value === 'number' &&
      isFinite(value) &&
      Math.floor(value) === value
    )
  }
  /**
   * Throws if Node.js version is too low to support bigint
   */
  function bigIntAndBufferInt64Check(bufferMethod) {
    if (typeof BigInt === 'undefined') {
      throw new Error('Platform does not support JS BigInt type.')
    }
    if (typeof buffer_1.Buffer.prototype[bufferMethod] === 'undefined') {
      throw new Error(
        `Platform does not support Buffer.prototype.${bufferMethod}.`
      )
    }
  }
  utils$1.bigIntAndBufferInt64Check = bigIntAndBufferInt64Check
  return utils$1
}

let hasRequiredSmartbuffer
function requireSmartbuffer() {
  if (hasRequiredSmartbuffer) {
    return smartbuffer
  }
  hasRequiredSmartbuffer = 1
  Object.defineProperty(smartbuffer, '__esModule', {
    value: true
  })
  const utils_1 = requireUtils$1()
  // The default Buffer size if one is not provided.
  const DEFAULT_SMARTBUFFER_SIZE = 4096
  // The default string encoding to use for reading/writing strings.
  const DEFAULT_SMARTBUFFER_ENCODING = 'utf8'
  class SmartBuffer {
    /**
     * Creates a new SmartBuffer instance.
     *
     * @param options { SmartBufferOptions } The SmartBufferOptions to apply to this instance.
     */
    constructor(options) {
      this.length = 0
      this._encoding = DEFAULT_SMARTBUFFER_ENCODING
      this._writeOffset = 0
      this._readOffset = 0
      if (SmartBuffer.isSmartBufferOptions(options)) {
        // Checks for encoding
        if (options.encoding) {
          utils_1.checkEncoding(options.encoding)
          this._encoding = options.encoding
        }
        // Checks for initial size length
        if (options.size) {
          if (utils_1.isFiniteInteger(options.size) && options.size > 0) {
            this._buff = Buffer.allocUnsafe(options.size)
          } else {
            throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_SIZE)
          }
          // Check for initial Buffer
        } else if (options.buff) {
          if (Buffer.isBuffer(options.buff)) {
            this._buff = options.buff
            this.length = options.buff.length
          } else {
            throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_BUFFER)
          }
        } else {
          this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE)
        }
      } else {
        // If something was passed but it's not a SmartBufferOptions object
        if (typeof options !== 'undefined') {
          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_OBJECT)
        }
        // Otherwise default to sane options
        this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE)
      }
    }
    /**
     * Creates a new SmartBuffer instance with the provided internal Buffer size and optional encoding.
     *
     * @param size { Number } The size of the internal Buffer.
     * @param encoding { String } The BufferEncoding to use for strings.
     *
     * @return { SmartBuffer }
     */
    static fromSize(size, encoding) {
      return new this({
        size: size,
        encoding: encoding
      })
    }
    /**
     * Creates a new SmartBuffer instance with the provided Buffer and optional encoding.
     *
     * @param buffer { Buffer } The Buffer to use as the internal Buffer value.
     * @param encoding { String } The BufferEncoding to use for strings.
     *
     * @return { SmartBuffer }
     */
    static fromBuffer(buff, encoding) {
      return new this({
        buff: buff,
        encoding: encoding
      })
    }
    /**
     * Creates a new SmartBuffer instance with the provided SmartBufferOptions options.
     *
     * @param options { SmartBufferOptions } The options to use when creating the SmartBuffer instance.
     */
    static fromOptions(options) {
      return new this(options)
    }
    /**
     * Type checking function that determines if an object is a SmartBufferOptions object.
     */
    static isSmartBufferOptions(options) {
      const castOptions = options
      return (
        castOptions &&
        (castOptions.encoding !== undefined ||
          castOptions.size !== undefined ||
          castOptions.buff !== undefined)
      )
    }
    // Signed integers
    /**
     * Reads an Int8 value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readInt8(offset) {
      return this._readNumberValue(Buffer.prototype.readInt8, 1, offset)
    }
    /**
     * Reads an Int16BE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readInt16BE(offset) {
      return this._readNumberValue(Buffer.prototype.readInt16BE, 2, offset)
    }
    /**
     * Reads an Int16LE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readInt16LE(offset) {
      return this._readNumberValue(Buffer.prototype.readInt16LE, 2, offset)
    }
    /**
     * Reads an Int32BE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readInt32BE(offset) {
      return this._readNumberValue(Buffer.prototype.readInt32BE, 4, offset)
    }
    /**
     * Reads an Int32LE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readInt32LE(offset) {
      return this._readNumberValue(Buffer.prototype.readInt32LE, 4, offset)
    }
    /**
     * Reads a BigInt64BE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { BigInt }
     */
    readBigInt64BE(offset) {
      utils_1.bigIntAndBufferInt64Check('readBigInt64BE')
      return this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, offset)
    }
    /**
     * Reads a BigInt64LE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { BigInt }
     */
    readBigInt64LE(offset) {
      utils_1.bigIntAndBufferInt64Check('readBigInt64LE')
      return this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, offset)
    }
    /**
     * Writes an Int8 value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeInt8(value, offset) {
      this._writeNumberValue(Buffer.prototype.writeInt8, 1, value, offset)
      return this
    }
    /**
     * Inserts an Int8 value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertInt8(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeInt8,
        1,
        value,
        offset
      )
    }
    /**
     * Writes an Int16BE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeInt16BE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeInt16BE,
        2,
        value,
        offset
      )
    }
    /**
     * Inserts an Int16BE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertInt16BE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeInt16BE,
        2,
        value,
        offset
      )
    }
    /**
     * Writes an Int16LE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeInt16LE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeInt16LE,
        2,
        value,
        offset
      )
    }
    /**
     * Inserts an Int16LE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertInt16LE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeInt16LE,
        2,
        value,
        offset
      )
    }
    /**
     * Writes an Int32BE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeInt32BE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeInt32BE,
        4,
        value,
        offset
      )
    }
    /**
     * Inserts an Int32BE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertInt32BE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeInt32BE,
        4,
        value,
        offset
      )
    }
    /**
     * Writes an Int32LE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeInt32LE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeInt32LE,
        4,
        value,
        offset
      )
    }
    /**
     * Inserts an Int32LE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertInt32LE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeInt32LE,
        4,
        value,
        offset
      )
    }
    /**
     * Writes a BigInt64BE value to the current write position (or at optional offset).
     *
     * @param value { BigInt } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeBigInt64BE(value, offset) {
      utils_1.bigIntAndBufferInt64Check('writeBigInt64BE')
      return this._writeNumberValue(
        Buffer.prototype.writeBigInt64BE,
        8,
        value,
        offset
      )
    }
    /**
     * Inserts a BigInt64BE value at the given offset value.
     *
     * @param value { BigInt } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertBigInt64BE(value, offset) {
      utils_1.bigIntAndBufferInt64Check('writeBigInt64BE')
      return this._insertNumberValue(
        Buffer.prototype.writeBigInt64BE,
        8,
        value,
        offset
      )
    }
    /**
     * Writes a BigInt64LE value to the current write position (or at optional offset).
     *
     * @param value { BigInt } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeBigInt64LE(value, offset) {
      utils_1.bigIntAndBufferInt64Check('writeBigInt64LE')
      return this._writeNumberValue(
        Buffer.prototype.writeBigInt64LE,
        8,
        value,
        offset
      )
    }
    /**
     * Inserts a Int64LE value at the given offset value.
     *
     * @param value { BigInt } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertBigInt64LE(value, offset) {
      utils_1.bigIntAndBufferInt64Check('writeBigInt64LE')
      return this._insertNumberValue(
        Buffer.prototype.writeBigInt64LE,
        8,
        value,
        offset
      )
    }
    // Unsigned Integers
    /**
     * Reads an UInt8 value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readUInt8(offset) {
      return this._readNumberValue(Buffer.prototype.readUInt8, 1, offset)
    }
    /**
     * Reads an UInt16BE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readUInt16BE(offset) {
      return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, offset)
    }
    /**
     * Reads an UInt16LE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readUInt16LE(offset) {
      return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, offset)
    }
    /**
     * Reads an UInt32BE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readUInt32BE(offset) {
      return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, offset)
    }
    /**
     * Reads an UInt32LE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readUInt32LE(offset) {
      return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, offset)
    }
    /**
     * Reads a BigUInt64BE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { BigInt }
     */
    readBigUInt64BE(offset) {
      utils_1.bigIntAndBufferInt64Check('readBigUInt64BE')
      return this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, offset)
    }
    /**
     * Reads a BigUInt64LE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { BigInt }
     */
    readBigUInt64LE(offset) {
      utils_1.bigIntAndBufferInt64Check('readBigUInt64LE')
      return this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, offset)
    }
    /**
     * Writes an UInt8 value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeUInt8(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeUInt8,
        1,
        value,
        offset
      )
    }
    /**
     * Inserts an UInt8 value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertUInt8(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeUInt8,
        1,
        value,
        offset
      )
    }
    /**
     * Writes an UInt16BE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeUInt16BE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeUInt16BE,
        2,
        value,
        offset
      )
    }
    /**
     * Inserts an UInt16BE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertUInt16BE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeUInt16BE,
        2,
        value,
        offset
      )
    }
    /**
     * Writes an UInt16LE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeUInt16LE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeUInt16LE,
        2,
        value,
        offset
      )
    }
    /**
     * Inserts an UInt16LE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertUInt16LE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeUInt16LE,
        2,
        value,
        offset
      )
    }
    /**
     * Writes an UInt32BE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeUInt32BE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeUInt32BE,
        4,
        value,
        offset
      )
    }
    /**
     * Inserts an UInt32BE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertUInt32BE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeUInt32BE,
        4,
        value,
        offset
      )
    }
    /**
     * Writes an UInt32LE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeUInt32LE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeUInt32LE,
        4,
        value,
        offset
      )
    }
    /**
     * Inserts an UInt32LE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertUInt32LE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeUInt32LE,
        4,
        value,
        offset
      )
    }
    /**
     * Writes a BigUInt64BE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeBigUInt64BE(value, offset) {
      utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE')
      return this._writeNumberValue(
        Buffer.prototype.writeBigUInt64BE,
        8,
        value,
        offset
      )
    }
    /**
     * Inserts a BigUInt64BE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertBigUInt64BE(value, offset) {
      utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE')
      return this._insertNumberValue(
        Buffer.prototype.writeBigUInt64BE,
        8,
        value,
        offset
      )
    }
    /**
     * Writes a BigUInt64LE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeBigUInt64LE(value, offset) {
      utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE')
      return this._writeNumberValue(
        Buffer.prototype.writeBigUInt64LE,
        8,
        value,
        offset
      )
    }
    /**
     * Inserts a BigUInt64LE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertBigUInt64LE(value, offset) {
      utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE')
      return this._insertNumberValue(
        Buffer.prototype.writeBigUInt64LE,
        8,
        value,
        offset
      )
    }
    // Floating Point
    /**
     * Reads an FloatBE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readFloatBE(offset) {
      return this._readNumberValue(Buffer.prototype.readFloatBE, 4, offset)
    }
    /**
     * Reads an FloatLE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readFloatLE(offset) {
      return this._readNumberValue(Buffer.prototype.readFloatLE, 4, offset)
    }
    /**
     * Writes a FloatBE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeFloatBE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeFloatBE,
        4,
        value,
        offset
      )
    }
    /**
     * Inserts a FloatBE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertFloatBE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeFloatBE,
        4,
        value,
        offset
      )
    }
    /**
     * Writes a FloatLE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeFloatLE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeFloatLE,
        4,
        value,
        offset
      )
    }
    /**
     * Inserts a FloatLE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertFloatLE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeFloatLE,
        4,
        value,
        offset
      )
    }
    // Double Floating Point
    /**
     * Reads an DoublEBE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readDoubleBE(offset) {
      return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, offset)
    }
    /**
     * Reads an DoubleLE value from the current read position or an optionally provided offset.
     *
     * @param offset { Number } The offset to read data from (optional)
     * @return { Number }
     */
    readDoubleLE(offset) {
      return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, offset)
    }
    /**
     * Writes a DoubleBE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeDoubleBE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeDoubleBE,
        8,
        value,
        offset
      )
    }
    /**
     * Inserts a DoubleBE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertDoubleBE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeDoubleBE,
        8,
        value,
        offset
      )
    }
    /**
     * Writes a DoubleLE value to the current write position (or at optional offset).
     *
     * @param value { Number } The value to write.
     * @param offset { Number } The offset to write the value at.
     *
     * @return this
     */
    writeDoubleLE(value, offset) {
      return this._writeNumberValue(
        Buffer.prototype.writeDoubleLE,
        8,
        value,
        offset
      )
    }
    /**
     * Inserts a DoubleLE value at the given offset value.
     *
     * @param value { Number } The value to insert.
     * @param offset { Number } The offset to insert the value at.
     *
     * @return this
     */
    insertDoubleLE(value, offset) {
      return this._insertNumberValue(
        Buffer.prototype.writeDoubleLE,
        8,
        value,
        offset
      )
    }
    // Strings
    /**
     * Reads a String from the current read position.
     *
     * @param arg1 { Number | String } The number of bytes to read as a String, or the BufferEncoding to use for
     *             the string (Defaults to instance level encoding).
     * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).
     *
     * @return { String }
     */
    readString(arg1, encoding) {
      let lengthVal
      // Length provided
      if (typeof arg1 === 'number') {
        utils_1.checkLengthValue(arg1)
        lengthVal = Math.min(arg1, this.length - this._readOffset)
      } else {
        encoding = arg1
        lengthVal = this.length - this._readOffset
      }
      // Check encoding
      if (typeof encoding !== 'undefined') {
        utils_1.checkEncoding(encoding)
      }
      const value = this._buff
        .slice(this._readOffset, this._readOffset + lengthVal)
        .toString(encoding || this._encoding)
      this._readOffset += lengthVal
      return value
    }
    /**
     * Inserts a String
     *
     * @param value { String } The String value to insert.
     * @param offset { Number } The offset to insert the string at.
     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).
     *
     * @return this
     */
    insertString(value, offset, encoding) {
      utils_1.checkOffsetValue(offset)
      return this._handleString(value, true, offset, encoding)
    }
    /**
     * Writes a String
     *
     * @param value { String } The String value to write.
     * @param arg2 { Number | String } The offset to write the string at, or the BufferEncoding to use.
     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).
     *
     * @return this
     */
    writeString(value, arg2, encoding) {
      return this._handleString(value, false, arg2, encoding)
    }
    /**
     * Reads a null-terminated String from the current read position.
     *
     * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).
     *
     * @return { String }
     */
    readStringNT(encoding) {
      if (typeof encoding !== 'undefined') {
        utils_1.checkEncoding(encoding)
      }
      // Set null character position to the end SmartBuffer instance.
      let nullPos = this.length
      // Find next null character (if one is not found, default from above is used)
      for (let i = this._readOffset; i < this.length; i++) {
        if (this._buff[i] === 0x00) {
          nullPos = i
          break
        }
      }
      // Read string value
      const value = this._buff.slice(this._readOffset, nullPos)
      // Increment internal Buffer read offset
      this._readOffset = nullPos + 1
      return value.toString(encoding || this._encoding)
    }
    /**
     * Inserts a null-terminated String.
     *
     * @param value { String } The String value to write.
     * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.
     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).
     *
     * @return this
     */
    insertStringNT(value, offset, encoding) {
      utils_1.checkOffsetValue(offset)
      // Write Values
      this.insertString(value, offset, encoding)
      this.insertUInt8(0x00, offset + value.length)
      return this
    }
    /**
     * Writes a null-terminated String.
     *
     * @param value { String } The String value to write.
     * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.
     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).
     *
     * @return this
     */
    writeStringNT(value, arg2, encoding) {
      // Write Values
      this.writeString(value, arg2, encoding)
      this.writeUInt8(
        0x00,
        typeof arg2 === 'number' ? arg2 + value.length : this.writeOffset
      )
      return this
    }
    // Buffers
    /**
     * Reads a Buffer from the internal read position.
     *
     * @param length { Number } The length of data to read as a Buffer.
     *
     * @return { Buffer }
     */
    readBuffer(length) {
      if (typeof length !== 'undefined') {
        utils_1.checkLengthValue(length)
      }
      const lengthVal = typeof length === 'number' ? length : this.length
      const endPoint = Math.min(this.length, this._readOffset + lengthVal)
      // Read buffer value
      const value = this._buff.slice(this._readOffset, endPoint)
      // Increment internal Buffer read offset
      this._readOffset = endPoint
      return value
    }
    /**
     * Writes a Buffer to the current write position.
     *
     * @param value { Buffer } The Buffer to write.
     * @param offset { Number } The offset to write the Buffer to.
     *
     * @return this
     */
    insertBuffer(value, offset) {
      utils_1.checkOffsetValue(offset)
      return this._handleBuffer(value, true, offset)
    }
    /**
     * Writes a Buffer to the current write position.
     *
     * @param value { Buffer } The Buffer to write.
     * @param offset { Number } The offset to write the Buffer to.
     *
     * @return this
     */
    writeBuffer(value, offset) {
      return this._handleBuffer(value, false, offset)
    }
    /**
     * Reads a null-terminated Buffer from the current read poisiton.
     *
     * @return { Buffer }
     */
    readBufferNT() {
      // Set null character position to the end SmartBuffer instance.
      let nullPos = this.length
      // Find next null character (if one is not found, default from above is used)
      for (let i = this._readOffset; i < this.length; i++) {
        if (this._buff[i] === 0x00) {
          nullPos = i
          break
        }
      }
      // Read value
      const value = this._buff.slice(this._readOffset, nullPos)
      // Increment internal Buffer read offset
      this._readOffset = nullPos + 1
      return value
    }
    /**
     * Inserts a null-terminated Buffer.
     *
     * @param value { Buffer } The Buffer to write.
     * @param offset { Number } The offset to write the Buffer to.
     *
     * @return this
     */
    insertBufferNT(value, offset) {
      utils_1.checkOffsetValue(offset)
      // Write Values
      this.insertBuffer(value, offset)
      this.insertUInt8(0x00, offset + value.length)
      return this
    }
    /**
     * Writes a null-terminated Buffer.
     *
     * @param value { Buffer } The Buffer to write.
     * @param offset { Number } The offset to write the Buffer to.
     *
     * @return this
     */
    writeBufferNT(value, offset) {
      // Checks for valid numberic value;
      if (typeof offset !== 'undefined') {
        utils_1.checkOffsetValue(offset)
      }
      // Write Values
      this.writeBuffer(value, offset)
      this.writeUInt8(
        0x00,
        typeof offset === 'number' ? offset + value.length : this._writeOffset
      )
      return this
    }
    /**
     * Clears the SmartBuffer instance to its original empty state.
     */
    clear() {
      this._writeOffset = 0
      this._readOffset = 0
      this.length = 0
      return this
    }
    /**
     * Gets the remaining data left to be read from the SmartBuffer instance.
     *
     * @return { Number }
     */
    remaining() {
      return this.length - this._readOffset
    }
    /**
     * Gets the current read offset value of the SmartBuffer instance.
     *
     * @return { Number }
     */
    get readOffset() {
      return this._readOffset
    }
    /**
     * Sets the read offset value of the SmartBuffer instance.
     *
     * @param offset { Number } - The offset value to set.
     */
    set readOffset(offset) {
      utils_1.checkOffsetValue(offset)
      // Check for bounds.
      utils_1.checkTargetOffset(offset, this)
      this._readOffset = offset
    }
    /**
     * Gets the current write offset value of the SmartBuffer instance.
     *
     * @return { Number }
     */
    get writeOffset() {
      return this._writeOffset
    }
    /**
     * Sets the write offset value of the SmartBuffer instance.
     *
     * @param offset { Number } - The offset value to set.
     */
    set writeOffset(offset) {
      utils_1.checkOffsetValue(offset)
      // Check for bounds.
      utils_1.checkTargetOffset(offset, this)
      this._writeOffset = offset
    }
    /**
     * Gets the currently set string encoding of the SmartBuffer instance.
     *
     * @return { BufferEncoding } The string Buffer encoding currently set.
     */
    get encoding() {
      return this._encoding
    }
    /**
     * Sets the string encoding of the SmartBuffer instance.
     *
     * @param encoding { BufferEncoding } The string Buffer encoding to set.
     */
    set encoding(encoding) {
      utils_1.checkEncoding(encoding)
      this._encoding = encoding
    }
    /**
     * Gets the underlying internal Buffer. (This includes unmanaged data in the Buffer)
     *
     * @return { Buffer } The Buffer value.
     */
    get internalBuffer() {
      return this._buff
    }
    /**
     * Gets the value of the internal managed Buffer (Includes managed data only)
     *
     * @param { Buffer }
     */
    toBuffer() {
      return this._buff.slice(0, this.length)
    }
    /**
     * Gets the String value of the internal managed Buffer
     *
     * @param encoding { String } The BufferEncoding to display the Buffer as (defaults to instance level encoding).
     */
    toString(encoding) {
      const encodingVal =
        typeof encoding === 'string' ? encoding : this._encoding
      // Check for invalid encoding.
      utils_1.checkEncoding(encodingVal)
      return this._buff.toString(encodingVal, 0, this.length)
    }
    /**
     * Destroys the SmartBuffer instance.
     */
    destroy() {
      this.clear()
      return this
    }
    /**
     * Handles inserting and writing strings.
     *
     * @param value { String } The String value to insert.
     * @param isInsert { Boolean } True if inserting a string, false if writing.
     * @param arg2 { Number | String } The offset to insert the string at, or the BufferEncoding to use.
     * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).
     */
    _handleString(value, isInsert, arg3, encoding) {
      let offsetVal = this._writeOffset
      let encodingVal = this._encoding
      // Check for offset
      if (typeof arg3 === 'number') {
        offsetVal = arg3
        // Check for encoding
      } else if (typeof arg3 === 'string') {
        utils_1.checkEncoding(arg3)
        encodingVal = arg3
      }
      // Check for encoding (third param)
      if (typeof encoding === 'string') {
        utils_1.checkEncoding(encoding)
        encodingVal = encoding
      }
      // Calculate bytelength of string.
      const byteLength = Buffer.byteLength(value, encodingVal)
      // Ensure there is enough internal Buffer capacity.
      if (isInsert) {
        this.ensureInsertable(byteLength, offsetVal)
      } else {
        this._ensureWriteable(byteLength, offsetVal)
      }
      // Write value
      this._buff.write(value, offsetVal, byteLength, encodingVal)
      // Increment internal Buffer write offset;
      if (isInsert) {
        this._writeOffset += byteLength
      } else {
        // If an offset was given, check to see if we wrote beyond the current writeOffset.
        if (typeof arg3 === 'number') {
          this._writeOffset = Math.max(
            this._writeOffset,
            offsetVal + byteLength
          )
        } else {
          // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.
          this._writeOffset += byteLength
        }
      }
      return this
    }
    /**
     * Handles writing or insert of a Buffer.
     *
     * @param value { Buffer } The Buffer to write.
     * @param offset { Number } The offset to write the Buffer to.
     */
    _handleBuffer(value, isInsert, offset) {
      const offsetVal = typeof offset === 'number' ? offset : this._writeOffset
      // Ensure there is enough internal Buffer capacity.
      if (isInsert) {
        this.ensureInsertable(value.length, offsetVal)
      } else {
        this._ensureWriteable(value.length, offsetVal)
      }
      // Write buffer value
      value.copy(this._buff, offsetVal)
      // Increment internal Buffer write offset;
      if (isInsert) {
        this._writeOffset += value.length
      } else {
        // If an offset was given, check to see if we wrote beyond the current writeOffset.
        if (typeof offset === 'number') {
          this._writeOffset = Math.max(
            this._writeOffset,
            offsetVal + value.length
          )
        } else {
          // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.
          this._writeOffset += value.length
        }
      }
      return this
    }
    /**
     * Ensures that the internal Buffer is large enough to read data.
     *
     * @param length { Number } The length of the data that needs to be read.
     * @param offset { Number } The offset of the data that needs to be read.
     */
    ensureReadable(length, offset) {
      // Offset value defaults to managed read offset.
      let offsetVal = this._readOffset
      // If an offset was provided, use it.
      if (typeof offset !== 'undefined') {
        // Checks for valid numberic value;
        utils_1.checkOffsetValue(offset)
        // Overide with custom offset.
        offsetVal = offset
      }
      // Checks if offset is below zero, or the offset+length offset is beyond the total length of the managed data.
      if (offsetVal < 0 || offsetVal + length > this.length) {
        throw new Error(utils_1.ERRORS.INVALID_READ_BEYOND_BOUNDS)
      }
    }
    /**
     * Ensures that the internal Buffer is large enough to insert data.
     *
     * @param dataLength { Number } The length of the data that needs to be written.
     * @param offset { Number } The offset of the data to be written.
     */
    ensureInsertable(dataLength, offset) {
      // Checks for valid numberic value;
      utils_1.checkOffsetValue(offset)
      // Ensure there is enough internal Buffer capacity.
      this._ensureCapacity(this.length + dataLength)
      // If an offset was provided and its not the very end of the buffer, copy data into appropriate location in regards to the offset.
      if (offset < this.length) {
        this._buff.copy(
          this._buff,
          offset + dataLength,
          offset,
          this._buff.length
        )
      }
      // Adjust tracked smart buffer length
      if (offset + dataLength > this.length) {
        this.length = offset + dataLength
      } else {
        this.length += dataLength
      }
    }
    /**
     * Ensures that the internal Buffer is large enough to write data.
     *
     * @param dataLength { Number } The length of the data that needs to be written.
     * @param offset { Number } The offset of the data to be written (defaults to writeOffset).
     */
    _ensureWriteable(dataLength, offset) {
      const offsetVal = typeof offset === 'number' ? offset : this._writeOffset
      // Ensure enough capacity to write data.
      this._ensureCapacity(offsetVal + dataLength)
      // Adjust SmartBuffer length (if offset + length is larger than managed length, adjust length)
      if (offsetVal + dataLength > this.length) {
        this.length = offsetVal + dataLength
      }
    }
    /**
     * Ensures that the internal Buffer is large enough to write at least the given amount of data.
     *
     * @param minLength { Number } The minimum length of the data needs to be written.
     */
    _ensureCapacity(minLength) {
      const oldLength = this._buff.length
      if (minLength > oldLength) {
        let data = this._buff
        let newLength = (oldLength * 3) / 2 + 1
        if (newLength < minLength) {
          newLength = minLength
        }
        this._buff = Buffer.allocUnsafe(newLength)
        data.copy(this._buff, 0, 0, oldLength)
      }
    }
    /**
     * Reads a numeric number value using the provided function.
     *
     * @typeparam T { number | bigint } The type of the value to be read
     *
     * @param func { Function(offset: number) => number } The function to read data on the internal Buffer with.
     * @param byteSize { Number } The number of bytes read.
     * @param offset { Number } The offset to read from (optional). When this is not provided, the managed readOffset is used instead.
     *
     * @returns { T } the number value
     */
    _readNumberValue(func, byteSize, offset) {
      this.ensureReadable(byteSize, offset)
      // Call Buffer.readXXXX();
      const value = func.call(
        this._buff,
        typeof offset === 'number' ? offset : this._readOffset
      )
      // Adjust internal read offset if an optional read offset was not provided.
      if (typeof offset === 'undefined') {
        this._readOffset += byteSize
      }
      return value
    }
    /**
     * Inserts a numeric number value based on the given offset and value.
     *
     * @typeparam T { number | bigint } The type of the value to be written
     *
     * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.
     * @param byteSize { Number } The number of bytes written.
     * @param value { T } The number value to write.
     * @param offset { Number } the offset to write the number at (REQUIRED).
     *
     * @returns SmartBuffer this buffer
     */
    _insertNumberValue(func, byteSize, value, offset) {
      // Check for invalid offset values.
      utils_1.checkOffsetValue(offset)
      // Ensure there is enough internal Buffer capacity. (raw offset is passed)
      this.ensureInsertable(byteSize, offset)
      // Call buffer.writeXXXX();
      func.call(this._buff, value, offset)
      // Adjusts internally managed write offset.
      this._writeOffset += byteSize
      return this
    }
    /**
     * Writes a numeric number value based on the given offset and value.
     *
     * @typeparam T { number | bigint } The type of the value to be written
     *
     * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.
     * @param byteSize { Number } The number of bytes written.
     * @param value { T } The number value to write.
     * @param offset { Number } the offset to write the number at (REQUIRED).
     *
     * @returns SmartBuffer this buffer
     */
    _writeNumberValue(func, byteSize, value, offset) {
      // If an offset was provided, validate it.
      if (typeof offset === 'number') {
        // Check if we're writing beyond the bounds of the managed data.
        if (offset < 0) {
          throw new Error(utils_1.ERRORS.INVALID_WRITE_BEYOND_BOUNDS)
        }
        utils_1.checkOffsetValue(offset)
      }
      // Default to writeOffset if no offset value was given.
      const offsetVal = typeof offset === 'number' ? offset : this._writeOffset
      // Ensure there is enough internal Buffer capacity. (raw offset is passed)
      this._ensureWriteable(byteSize, offsetVal)
      func.call(this._buff, value, offsetVal)
      // If an offset was given, check to see if we wrote beyond the current writeOffset.
      if (typeof offset === 'number') {
        this._writeOffset = Math.max(this._writeOffset, offsetVal + byteSize)
      } else {
        // If no numeric offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.
        this._writeOffset += byteSize
      }
      return this
    }
  }
  smartbuffer.SmartBuffer = SmartBuffer
  return smartbuffer
}

const constants$2 = {}

let hasRequiredConstants$2
function requireConstants$2() {
  if (hasRequiredConstants$2) {
    return constants$2
  }
  hasRequiredConstants$2 = 1
  Object.defineProperty(constants$2, '__esModule', {
    value: true
  })
  constants$2.SOCKS5_NO_ACCEPTABLE_AUTH =
    constants$2.SOCKS5_CUSTOM_AUTH_END =
    constants$2.SOCKS5_CUSTOM_AUTH_START =
    constants$2.SOCKS_INCOMING_PACKET_SIZES =
    constants$2.SocksClientState =
    constants$2.Socks5Response =
    constants$2.Socks5HostType =
    constants$2.Socks5Auth =
    constants$2.Socks4Response =
    constants$2.SocksCommand =
    constants$2.ERRORS =
    constants$2.DEFAULT_TIMEOUT =
      void 0
  const DEFAULT_TIMEOUT = 30000
  constants$2.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT
  // prettier-ignore
  const ERRORS = {
    InvalidSocksCommand:
      'An invalid SOCKS command was provided. Valid options are connect, bind, and associate.',
    InvalidSocksCommandForOperation:
      'An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.',
    InvalidSocksCommandChain:
      'An invalid SOCKS command was provided. Chaining currently only supports the connect command.',
    InvalidSocksClientOptionsDestination:
      'An invalid destination host was provided.',
    InvalidSocksClientOptionsExistingSocket:
      'An invalid existing socket was provided. This should be an instance of stream.Duplex.',
    InvalidSocksClientOptionsProxy:
      'Invalid SOCKS proxy details were provided.',
    InvalidSocksClientOptionsTimeout:
      'An invalid timeout value was provided. Please enter a value above 0 (in ms).',
    InvalidSocksClientOptionsProxiesLength:
      'At least two socks proxies must be provided for chaining.',
    InvalidSocksClientOptionsCustomAuthRange:
      'Custom auth must be a value between 0x80 and 0xFE.',
    InvalidSocksClientOptionsCustomAuthOptions:
      'When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.',
    NegotiationError: 'Negotiation error',
    SocketClosed: 'Socket closed',
    ProxyConnectionTimedOut: 'Proxy connection timed out',
    InternalError: 'SocksClient internal error (this should not happen)',
    InvalidSocks4HandshakeResponse:
      'Received invalid Socks4 handshake response',
    Socks4ProxyRejectedConnection: 'Socks4 Proxy rejected connection',
    InvalidSocks4IncomingConnectionResponse:
      'Socks4 invalid incoming connection response',
    Socks4ProxyRejectedIncomingBoundConnection:
      'Socks4 Proxy rejected incoming bound connection',
    InvalidSocks5InitialHandshakeResponse:
      'Received invalid Socks5 initial handshake response',
    InvalidSocks5IntiailHandshakeSocksVersion:
      'Received invalid Socks5 initial handshake (invalid socks version)',
    InvalidSocks5InitialHandshakeNoAcceptedAuthType:
      'Received invalid Socks5 initial handshake (no accepted authentication type)',
    InvalidSocks5InitialHandshakeUnknownAuthType:
      'Received invalid Socks5 initial handshake (unknown authentication type)',
    Socks5AuthenticationFailed: 'Socks5 Authentication failed',
    InvalidSocks5FinalHandshake:
      'Received invalid Socks5 final handshake response',
    InvalidSocks5FinalHandshakeRejected: 'Socks5 proxy rejected connection',
    InvalidSocks5IncomingConnectionResponse:
      'Received invalid Socks5 incoming connection response',
    Socks5ProxyRejectedIncomingBoundConnection:
      'Socks5 Proxy rejected incoming bound connection'
  }
  constants$2.ERRORS = ERRORS
  const SOCKS_INCOMING_PACKET_SIZES = {
    Socks5InitialHandshakeResponse: 2,
    Socks5UserPassAuthenticationResponse: 2,
    // Command response + incoming connection (bind)
    Socks5ResponseHeader: 5,
    // We need at least 5 to read the hostname length, then we wait for the address+port information.
    Socks5ResponseIPv4: 10,
    // 4 header + 4 ip + 2 port
    Socks5ResponseIPv6: 22,
    // 4 header + 16 ip + 2 port
    Socks5ResponseHostname: hostNameLength => hostNameLength + 7,
    // 4 header + 1 host length + host + 2 port
    // Command response + incoming connection (bind)
    Socks4Response: 8 // 2 header + 2 port + 4 ip
  }
  constants$2.SOCKS_INCOMING_PACKET_SIZES = SOCKS_INCOMING_PACKET_SIZES
  let SocksCommand
  ;(function (SocksCommand) {
    SocksCommand[(SocksCommand['connect'] = 1)] = 'connect'
    SocksCommand[(SocksCommand['bind'] = 2)] = 'bind'
    SocksCommand[(SocksCommand['associate'] = 3)] = 'associate'
  })(SocksCommand || (constants$2.SocksCommand = SocksCommand = {}))
  let Socks4Response
  ;(function (Socks4Response) {
    Socks4Response[(Socks4Response['Granted'] = 90)] = 'Granted'
    Socks4Response[(Socks4Response['Failed'] = 91)] = 'Failed'
    Socks4Response[(Socks4Response['Rejected'] = 92)] = 'Rejected'
    Socks4Response[(Socks4Response['RejectedIdent'] = 93)] = 'RejectedIdent'
  })(Socks4Response || (constants$2.Socks4Response = Socks4Response = {}))
  let Socks5Auth
  ;(function (Socks5Auth) {
    Socks5Auth[(Socks5Auth['NoAuth'] = 0)] = 'NoAuth'
    Socks5Auth[(Socks5Auth['GSSApi'] = 1)] = 'GSSApi'
    Socks5Auth[(Socks5Auth['UserPass'] = 2)] = 'UserPass'
  })(Socks5Auth || (constants$2.Socks5Auth = Socks5Auth = {}))
  const SOCKS5_CUSTOM_AUTH_START = 0x80
  constants$2.SOCKS5_CUSTOM_AUTH_START = SOCKS5_CUSTOM_AUTH_START
  const SOCKS5_CUSTOM_AUTH_END = 0xfe
  constants$2.SOCKS5_CUSTOM_AUTH_END = SOCKS5_CUSTOM_AUTH_END
  const SOCKS5_NO_ACCEPTABLE_AUTH = 0xff
  constants$2.SOCKS5_NO_ACCEPTABLE_AUTH = SOCKS5_NO_ACCEPTABLE_AUTH
  let Socks5Response
  ;(function (Socks5Response) {
    Socks5Response[(Socks5Response['Granted'] = 0)] = 'Granted'
    Socks5Response[(Socks5Response['Failure'] = 1)] = 'Failure'
    Socks5Response[(Socks5Response['NotAllowed'] = 2)] = 'NotAllowed'
    Socks5Response[(Socks5Response['NetworkUnreachable'] = 3)] =
      'NetworkUnreachable'
    Socks5Response[(Socks5Response['HostUnreachable'] = 4)] = 'HostUnreachable'
    Socks5Response[(Socks5Response['ConnectionRefused'] = 5)] =
      'ConnectionRefused'
    Socks5Response[(Socks5Response['TTLExpired'] = 6)] = 'TTLExpired'
    Socks5Response[(Socks5Response['CommandNotSupported'] = 7)] =
      'CommandNotSupported'
    Socks5Response[(Socks5Response['AddressNotSupported'] = 8)] =
      'AddressNotSupported'
  })(Socks5Response || (constants$2.Socks5Response = Socks5Response = {}))
  let Socks5HostType
  ;(function (Socks5HostType) {
    Socks5HostType[(Socks5HostType['IPv4'] = 1)] = 'IPv4'
    Socks5HostType[(Socks5HostType['Hostname'] = 3)] = 'Hostname'
    Socks5HostType[(Socks5HostType['IPv6'] = 4)] = 'IPv6'
  })(Socks5HostType || (constants$2.Socks5HostType = Socks5HostType = {}))
  let SocksClientState
  ;(function (SocksClientState) {
    SocksClientState[(SocksClientState['Created'] = 0)] = 'Created'
    SocksClientState[(SocksClientState['Connecting'] = 1)] = 'Connecting'
    SocksClientState[(SocksClientState['Connected'] = 2)] = 'Connected'
    SocksClientState[(SocksClientState['SentInitialHandshake'] = 3)] =
      'SentInitialHandshake'
    SocksClientState[
      (SocksClientState['ReceivedInitialHandshakeResponse'] = 4)
    ] = 'ReceivedInitialHandshakeResponse'
    SocksClientState[(SocksClientState['SentAuthentication'] = 5)] =
      'SentAuthentication'
    SocksClientState[(SocksClientState['ReceivedAuthenticationResponse'] = 6)] =
      'ReceivedAuthenticationResponse'
    SocksClientState[(SocksClientState['SentFinalHandshake'] = 7)] =
      'SentFinalHandshake'
    SocksClientState[(SocksClientState['ReceivedFinalResponse'] = 8)] =
      'ReceivedFinalResponse'
    SocksClientState[(SocksClientState['BoundWaitingForConnection'] = 9)] =
      'BoundWaitingForConnection'
    SocksClientState[(SocksClientState['Established'] = 10)] = 'Established'
    SocksClientState[(SocksClientState['Disconnected'] = 11)] = 'Disconnected'
    SocksClientState[(SocksClientState['Error'] = 99)] = 'Error'
  })(SocksClientState || (constants$2.SocksClientState = SocksClientState = {}))
  return constants$2
}

const helpers$1 = {}

const util$1 = {}

let hasRequiredUtil$1
function requireUtil$1() {
  if (hasRequiredUtil$1) {
    return util$1
  }
  hasRequiredUtil$1 = 1
  Object.defineProperty(util$1, '__esModule', {
    value: true
  })
  util$1.shuffleArray = util$1.SocksClientError = void 0
  /**
   * Error wrapper for SocksClient
   */
  class SocksClientError extends Error {
    constructor(message, options) {
      super(message)
      this.options = options
    }
  }
  util$1.SocksClientError = SocksClientError
  /**
   * Shuffles a given array.
   * @param array The array to shuffle.
   */
  function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[array[i], array[j]] = [array[j], array[i]]
    }
  }
  util$1.shuffleArray = shuffleArray
  return util$1
}

const ipAddress = {}

const ipv4 = {}

const common = {}

let hasRequiredCommon
function requireCommon() {
  if (hasRequiredCommon) {
    return common
  }
  hasRequiredCommon = 1
  Object.defineProperty(common, '__esModule', {
    value: true
  })
  common.isCorrect = common.isInSubnet = void 0
  function isInSubnet(address) {
    if (this.subnetMask < address.subnetMask) {
      return false
    }
    if (this.mask(address.subnetMask) === address.mask()) {
      return true
    }
    return false
  }
  common.isInSubnet = isInSubnet
  function isCorrect(defaultBits) {
    return function () {
      if (this.addressMinusSuffix !== this.correctForm()) {
        return false
      }
      if (this.subnetMask === defaultBits && !this.parsedSubnet) {
        return true
      }
      return this.parsedSubnet === String(this.subnetMask)
    }
  }
  common.isCorrect = isCorrect
  return common
}

const constants$1 = {}

let hasRequiredConstants$1
function requireConstants$1() {
  if (hasRequiredConstants$1) {
    return constants$1
  }
  hasRequiredConstants$1 = 1
  Object.defineProperty(constants$1, '__esModule', {
    value: true
  })
  constants$1.RE_SUBNET_STRING =
    constants$1.RE_ADDRESS =
    constants$1.GROUPS =
    constants$1.BITS =
      void 0
  constants$1.BITS = 32
  constants$1.GROUPS = 4
  constants$1.RE_ADDRESS =
    /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g
  constants$1.RE_SUBNET_STRING = /\/\d{1,2}$/
  return constants$1
}

const addressError = {}

let hasRequiredAddressError
function requireAddressError() {
  if (hasRequiredAddressError) {
    return addressError
  }
  hasRequiredAddressError = 1
  Object.defineProperty(addressError, '__esModule', {
    value: true
  })
  addressError.AddressError = void 0
  class AddressError extends Error {
    constructor(message, parseMessage) {
      super(message)
      this.name = 'AddressError'
      if (parseMessage !== null) {
        this.parseMessage = parseMessage
      }
    }
  }
  addressError.AddressError = AddressError
  return addressError
}

const jsbn = { exports: {} }

let hasRequiredJsbn
function requireJsbn() {
  if (hasRequiredJsbn) {
    return jsbn.exports
  }
  hasRequiredJsbn = 1
  ;(function (module, exports) {
    ;(function () {
      // Copyright (c) 2005  Tom Wu
      // All Rights Reserved.
      // See "LICENSE" for details.

      // Basic JavaScript BN library - subset useful for RSA encryption.

      // Bits per digit
      let dbits

      // JavaScript engine analysis
      const canary = 0xdeadbeefcafe
      const j_lm = (canary & 0xffffff) == 0xefcafe

      // (public) Constructor
      function BigInteger(a, b, c) {
        if (a != null) {
          if ('number' == typeof a) this.fromNumber(a, b, c)
          else if (b == null && 'string' != typeof a) this.fromString(a, 256)
          else this.fromString(a, b)
        }
      }

      // return new, unset BigInteger
      function nbi() {
        return new BigInteger(null)
      }

      // am: Compute w_j += (x*this_i), propagate carries,
      // c is initial carry, returns final carry.
      // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
      // We need to select the fastest one that works in this environment.

      // am1: use a single mult and divide to get the high bits,
      // max digit bits should be 26 because
      // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
      function am1(i, x, w, j, c, n) {
        while (--n >= 0) {
          const v = x * this[i++] + w[j] + c
          c = Math.floor(v / 0x4000000)
          w[j++] = v & 0x3ffffff
        }
        return c
      }
      // am2 avoids a big mult-and-extract completely.
      // Max digit bits should be <= 30 because we do bitwise ops
      // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
      function am2(i, x, w, j, c, n) {
        const xl = x & 0x7fff,
          xh = x >> 15
        while (--n >= 0) {
          let l = this[i] & 0x7fff
          const h = this[i++] >> 15
          const m = xh * l + h * xl
          l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)
          c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)
          w[j++] = l & 0x3fffffff
        }
        return c
      }
      // Alternately, set max digit bits to 28 since some
      // browsers slow down when dealing with 32-bit numbers.
      function am3(i, x, w, j, c, n) {
        const xl = x & 0x3fff,
          xh = x >> 14
        while (--n >= 0) {
          let l = this[i] & 0x3fff
          const h = this[i++] >> 14
          const m = xh * l + h * xl
          l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
          c = (l >> 28) + (m >> 14) + xh * h
          w[j++] = l & 0xfffffff
        }
        return c
      }
      const inBrowser = typeof navigator !== 'undefined'
      if (
        inBrowser &&
        j_lm &&
        navigator.appName == 'Microsoft Internet Explorer'
      ) {
        BigInteger.prototype.am = am2
        dbits = 30
      } else if (inBrowser && j_lm && navigator.appName != 'Netscape') {
        BigInteger.prototype.am = am1
        dbits = 26
      } else {
        // Mozilla/Netscape seems to prefer am3
        BigInteger.prototype.am = am3
        dbits = 28
      }
      BigInteger.prototype.DB = dbits
      BigInteger.prototype.DM = (1 << dbits) - 1
      BigInteger.prototype.DV = 1 << dbits
      const BI_FP = 52
      BigInteger.prototype.FV = Math.pow(2, BI_FP)
      BigInteger.prototype.F1 = BI_FP - dbits
      BigInteger.prototype.F2 = 2 * dbits - BI_FP

      // Digit conversions
      const BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz'
      const BI_RC = new Array()
      let rr, vv
      rr = '0'.charCodeAt(0)
      for (vv = 0; vv <= 9; ++vv) {
        BI_RC[rr++] = vv
      }
      rr = 'a'.charCodeAt(0)
      for (vv = 10; vv < 36; ++vv) {
        BI_RC[rr++] = vv
      }
      rr = 'A'.charCodeAt(0)
      for (vv = 10; vv < 36; ++vv) {
        BI_RC[rr++] = vv
      }
      function int2char(n) {
        return BI_RM.charAt(n)
      }
      function intAt(s, i) {
        const c = BI_RC[s.charCodeAt(i)]
        return c == null ? -1 : c
      }

      // (protected) copy this to r
      function bnpCopyTo(r) {
        for (let i = this.t - 1; i >= 0; --i) {
          r[i] = this[i]
        }
        r.t = this.t
        r.s = this.s
      }

      // (protected) set from integer value x, -DV <= x < DV
      function bnpFromInt(x) {
        this.t = 1
        this.s = x < 0 ? -1 : 0
        if (x > 0) {
          this[0] = x
        } else if (x < -1) {
          this[0] = x + this.DV
        } else {
          this.t = 0
        }
      }

      // return bigint initialized to value
      function nbv(i) {
        const r = nbi()
        r.fromInt(i)
        return r
      }

      // (protected) set from string and radix
      function bnpFromString(s, b) {
        let k
        if (b == 16) {
          k = 4
        } else if (b == 8) {
          k = 3
        } else if (b == 256) {
          k = 8
        } // byte array
        else if (b == 2) {
          k = 1
        } else if (b == 32) {
          k = 5
        } else if (b == 4) {
          k = 2
        } else {
          this.fromRadix(s, b)
          return
        }
        this.t = 0
        this.s = 0
        let i = s.length,
          mi = false,
          sh = 0
        while (--i >= 0) {
          const x = k == 8 ? s[i] & 0xff : intAt(s, i)
          if (x < 0) {
            if (s.charAt(i) == '-') {
              mi = true
            }
            continue
          }
          mi = false
          if (sh == 0) {
            this[this.t++] = x
          } else if (sh + k > this.DB) {
            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh
            this[this.t++] = x >> (this.DB - sh)
          } else {
            this[this.t - 1] |= x << sh
          }
          sh += k
          if (sh >= this.DB) {
            sh -= this.DB
          }
        }
        if (k == 8 && (s[0] & 0x80) != 0) {
          this.s = -1
          if (sh > 0) {
            this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh
          }
        }
        this.clamp()
        if (mi) {
          BigInteger.ZERO.subTo(this, this)
        }
      }

      // (protected) clamp off excess high words
      function bnpClamp() {
        const c = this.s & this.DM
        while (this.t > 0 && this[this.t - 1] == c) {
          --this.t
        }
      }

      // (public) return string representation in given radix
      function bnToString(b) {
        if (this.s < 0) {
          return '-' + this.negate().toString(b)
        }
        let k
        if (b == 16) {
          k = 4
        } else if (b == 8) {
          k = 3
        } else if (b == 2) {
          k = 1
        } else if (b == 32) {
          k = 5
        } else if (b == 4) {
          k = 2
        } else {
          return this.toRadix(b)
        }
        let km = (1 << k) - 1,
          d,
          m = false,
          r = '',
          i = this.t
        let p = this.DB - ((i * this.DB) % k)
        if (i-- > 0) {
          if (p < this.DB && (d = this[i] >> p) > 0) {
            m = true
            r = int2char(d)
          }
          while (i >= 0) {
            if (p < k) {
              d = (this[i] & ((1 << p) - 1)) << (k - p)
              d |= this[--i] >> (p += this.DB - k)
            } else {
              d = (this[i] >> (p -= k)) & km
              if (p <= 0) {
                p += this.DB
                --i
              }
            }
            if (d > 0) {
              m = true
            }
            if (m) {
              r += int2char(d)
            }
          }
        }
        return m ? r : '0'
      }

      // (public) -this
      function bnNegate() {
        const r = nbi()
        BigInteger.ZERO.subTo(this, r)
        return r
      }

      // (public) |this|
      function bnAbs() {
        return this.s < 0 ? this.negate() : this
      }

      // (public) return + if this > a, - if this < a, 0 if equal
      function bnCompareTo(a) {
        let r = this.s - a.s
        if (r != 0) {
          return r
        }
        let i = this.t
        r = i - a.t
        if (r != 0) {
          return this.s < 0 ? -r : r
        }
        while (--i >= 0) {
          if ((r = this[i] - a[i]) != 0) return r
        }
        return 0
      }

      // returns bit length of the integer x
      function nbits(x) {
        let r = 1,
          t
        if ((t = x >>> 16) != 0) {
          x = t
          r += 16
        }
        if ((t = x >> 8) != 0) {
          x = t
          r += 8
        }
        if ((t = x >> 4) != 0) {
          x = t
          r += 4
        }
        if ((t = x >> 2) != 0) {
          x = t
          r += 2
        }
        if ((t = x >> 1) != 0) {
          x = t
          r += 1
        }
        return r
      }

      // (public) return the number of bits in "this"
      function bnBitLength() {
        if (this.t <= 0) {
          return 0
        }
        return (
          this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))
        )
      }

      // (protected) r = this << n*DB
      function bnpDLShiftTo(n, r) {
        let i
        for (i = this.t - 1; i >= 0; --i) {
          r[i + n] = this[i]
        }
        for (i = n - 1; i >= 0; --i) {
          r[i] = 0
        }
        r.t = this.t + n
        r.s = this.s
      }

      // (protected) r = this >> n*DB
      function bnpDRShiftTo(n, r) {
        for (let i = n; i < this.t; ++i) {
          r[i - n] = this[i]
        }
        r.t = Math.max(this.t - n, 0)
        r.s = this.s
      }

      // (protected) r = this << n
      function bnpLShiftTo(n, r) {
        const bs = n % this.DB
        const cbs = this.DB - bs
        const bm = (1 << cbs) - 1
        let ds = Math.floor(n / this.DB),
          c = (this.s << bs) & this.DM,
          i
        for (i = this.t - 1; i >= 0; --i) {
          r[i + ds + 1] = (this[i] >> cbs) | c
          c = (this[i] & bm) << bs
        }
        for (i = ds - 1; i >= 0; --i) {
          r[i] = 0
        }
        r[ds] = c
        r.t = this.t + ds + 1
        r.s = this.s
        r.clamp()
      }

      // (protected) r = this >> n
      function bnpRShiftTo(n, r) {
        r.s = this.s
        const ds = Math.floor(n / this.DB)
        if (ds >= this.t) {
          r.t = 0
          return
        }
        const bs = n % this.DB
        const cbs = this.DB - bs
        const bm = (1 << bs) - 1
        r[0] = this[ds] >> bs
        for (let i = ds + 1; i < this.t; ++i) {
          r[i - ds - 1] |= (this[i] & bm) << cbs
          r[i - ds] = this[i] >> bs
        }
        if (bs > 0) {
          r[this.t - ds - 1] |= (this.s & bm) << cbs
        }
        r.t = this.t - ds
        r.clamp()
      }

      // (protected) r = this - a
      function bnpSubTo(a, r) {
        let i = 0,
          c = 0,
          m = Math.min(a.t, this.t)
        while (i < m) {
          c += this[i] - a[i]
          r[i++] = c & this.DM
          c >>= this.DB
        }
        if (a.t < this.t) {
          c -= a.s
          while (i < this.t) {
            c += this[i]
            r[i++] = c & this.DM
            c >>= this.DB
          }
          c += this.s
        } else {
          c += this.s
          while (i < a.t) {
            c -= a[i]
            r[i++] = c & this.DM
            c >>= this.DB
          }
          c -= a.s
        }
        r.s = c < 0 ? -1 : 0
        if (c < -1) {
          r[i++] = this.DV + c
        } else if (c > 0) {
          r[i++] = c
        }
        r.t = i
        r.clamp()
      }

      // (protected) r = this * a, r != this,a (HAC 14.12)
      // "this" should be the larger one if appropriate.
      function bnpMultiplyTo(a, r) {
        const x = this.abs(),
          y = a.abs()
        let i = x.t
        r.t = i + y.t
        while (--i >= 0) {
          r[i] = 0
        }
        for (i = 0; i < y.t; ++i) {
          r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)
        }
        r.s = 0
        r.clamp()
        if (this.s != a.s) {
          BigInteger.ZERO.subTo(r, r)
        }
      }

      // (protected) r = this^2, r != this (HAC 14.16)
      function bnpSquareTo(r) {
        const x = this.abs()
        let i = (r.t = 2 * x.t)
        while (--i >= 0) {
          r[i] = 0
        }
        for (i = 0; i < x.t - 1; ++i) {
          const c = x.am(i, x[i], r, 2 * i, 0, 1)
          if (
            (r[i + x.t] += x.am(
              i + 1,
              2 * x[i],
              r,
              2 * i + 1,
              c,
              x.t - i - 1
            )) >= x.DV
          ) {
            r[i + x.t] -= x.DV
            r[i + x.t + 1] = 1
          }
        }
        if (r.t > 0) {
          r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)
        }
        r.s = 0
        r.clamp()
      }

      // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
      // r != q, this != m.  q or r may be null.
      function bnpDivRemTo(m, q, r) {
        const pm = m.abs()
        if (pm.t <= 0) {
          return
        }
        const pt = this.abs()
        if (pt.t < pm.t) {
          if (q != null) {
            q.fromInt(0)
          }
          if (r != null) {
            this.copyTo(r)
          }
          return
        }
        if (r == null) {
          r = nbi()
        }
        const y = nbi(),
          ts = this.s,
          ms = m.s
        const nsh = this.DB - nbits(pm[pm.t - 1]) // normalize modulus
        if (nsh > 0) {
          pm.lShiftTo(nsh, y)
          pt.lShiftTo(nsh, r)
        } else {
          pm.copyTo(y)
          pt.copyTo(r)
        }
        const ys = y.t
        const y0 = y[ys - 1]
        if (y0 == 0) {
          return
        }
        const yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0)
        const d1 = this.FV / yt,
          d2 = (1 << this.F1) / yt,
          e = 1 << this.F2
        let i = r.t,
          j = i - ys,
          t = q == null ? nbi() : q
        y.dlShiftTo(j, t)
        if (r.compareTo(t) >= 0) {
          r[r.t++] = 1
          r.subTo(t, r)
        }
        BigInteger.ONE.dlShiftTo(ys, t)
        t.subTo(y, y) // "negative" y so we can replace sub with am later
        while (y.t < ys) {
          y[y.t++] = 0
        }
        while (--j >= 0) {
          // Estimate quotient digit
          let qd =
            r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
          if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
            // Try it out
            y.dlShiftTo(j, t)
            r.subTo(t, r)
            while (r[i] < --qd) {
              r.subTo(t, r)
            }
          }
        }
        if (q != null) {
          r.drShiftTo(ys, q)
          if (ts != ms) {
            BigInteger.ZERO.subTo(q, q)
          }
        }
        r.t = ys
        r.clamp()
        if (nsh > 0) {
          r.rShiftTo(nsh, r)
        } // Denormalize remainder
        if (ts < 0) {
          BigInteger.ZERO.subTo(r, r)
        }
      }

      // (public) this mod a
      function bnMod(a) {
        const r = nbi()
        this.abs().divRemTo(a, null, r)
        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {
          a.subTo(r, r)
        }
        return r
      }

      // Modular reduction using "classic" algorithm
      function Classic(m) {
        this.m = m
      }
      function cConvert(x) {
        if (x.s < 0 || x.compareTo(this.m) >= 0) {
          return x.mod(this.m)
        } else {
          return x
        }
      }
      function cRevert(x) {
        return x
      }
      function cReduce(x) {
        x.divRemTo(this.m, null, x)
      }
      function cMulTo(x, y, r) {
        x.multiplyTo(y, r)
        this.reduce(r)
      }
      function cSqrTo(x, r) {
        x.squareTo(r)
        this.reduce(r)
      }
      Classic.prototype.convert = cConvert
      Classic.prototype.revert = cRevert
      Classic.prototype.reduce = cReduce
      Classic.prototype.mulTo = cMulTo
      Classic.prototype.sqrTo = cSqrTo

      // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
      // justification:
      //         xy == 1 (mod m)
      //         xy =  1+km
      //   xy(2-xy) = (1+km)(1-km)
      // x[y(2-xy)] = 1-k^2m^2
      // x[y(2-xy)] == 1 (mod m^2)
      // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
      // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
      // JS multiply "overflows" differently from C/C++, so care is needed here.
      function bnpInvDigit() {
        if (this.t < 1) {
          return 0
        }
        const x = this[0]
        if ((x & 1) == 0) {
          return 0
        }
        let y = x & 3 // y == 1/x mod 2^2
        y = (y * (2 - (x & 0xf) * y)) & 0xf // y == 1/x mod 2^4
        y = (y * (2 - (x & 0xff) * y)) & 0xff // y == 1/x mod 2^8
        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff // y == 1/x mod 2^16
        // last step - calculate inverse mod DV directly;
        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
        y = (y * (2 - ((x * y) % this.DV))) % this.DV // y == 1/x mod 2^dbits
        // we really want the negative inverse, and -DV < y < DV
        return y > 0 ? this.DV - y : -y
      }

      // Montgomery reduction
      function Montgomery(m) {
        this.m = m
        this.mp = m.invDigit()
        this.mpl = this.mp & 0x7fff
        this.mph = this.mp >> 15
        this.um = (1 << (m.DB - 15)) - 1
        this.mt2 = 2 * m.t
      }

      // xR mod m
      function montConvert(x) {
        const r = nbi()
        x.abs().dlShiftTo(this.m.t, r)
        r.divRemTo(this.m, null, r)
        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {
          this.m.subTo(r, r)
        }
        return r
      }

      // x/R mod m
      function montRevert(x) {
        const r = nbi()
        x.copyTo(r)
        this.reduce(r)
        return r
      }

      // x = x/R mod m (HAC 14.32)
      function montReduce(x) {
        while (x.t <= this.mt2) {
          // pad x so am has enough room later
          x[x.t++] = 0
        }
        for (let i = 0; i < this.m.t; ++i) {
          // faster way of calculating u0 = x[i]*mp mod DV
          let j = x[i] & 0x7fff
          const u0 =
            (j * this.mpl +
              (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) &
            x.DM
          // use am to combine the multiply-shift-add into one call
          j = i + this.m.t
          x[j] += this.m.am(0, u0, x, i, 0, this.m.t)
          // propagate carry
          while (x[j] >= x.DV) {
            x[j] -= x.DV
            x[++j]++
          }
        }
        x.clamp()
        x.drShiftTo(this.m.t, x)
        if (x.compareTo(this.m) >= 0) {
          x.subTo(this.m, x)
        }
      }

      // r = "x^2/R mod m"; x != r
      function montSqrTo(x, r) {
        x.squareTo(r)
        this.reduce(r)
      }

      // r = "xy/R mod m"; x,y != r
      function montMulTo(x, y, r) {
        x.multiplyTo(y, r)
        this.reduce(r)
      }
      Montgomery.prototype.convert = montConvert
      Montgomery.prototype.revert = montRevert
      Montgomery.prototype.reduce = montReduce
      Montgomery.prototype.mulTo = montMulTo
      Montgomery.prototype.sqrTo = montSqrTo

      // (protected) true iff this is even
      function bnpIsEven() {
        return (this.t > 0 ? this[0] & 1 : this.s) == 0
      }

      // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
      function bnpExp(e, z) {
        if (e > 0xffffffff || e < 1) {
          return BigInteger.ONE
        }
        let r = nbi(),
          r2 = nbi(),
          g = z.convert(this),
          i = nbits(e) - 1
        g.copyTo(r)
        while (--i >= 0) {
          z.sqrTo(r, r2)
          if ((e & (1 << i)) > 0) {
            z.mulTo(r2, g, r)
          } else {
            const t = r
            r = r2
            r2 = t
          }
        }
        return z.revert(r)
      }

      // (public) this^e % m, 0 <= e < 2^32
      function bnModPowInt(e, m) {
        let z
        if (e < 256 || m.isEven()) {
          z = new Classic(m)
        } else {
          z = new Montgomery(m)
        }
        return this.exp(e, z)
      }

      // protected
      BigInteger.prototype.copyTo = bnpCopyTo
      BigInteger.prototype.fromInt = bnpFromInt
      BigInteger.prototype.fromString = bnpFromString
      BigInteger.prototype.clamp = bnpClamp
      BigInteger.prototype.dlShiftTo = bnpDLShiftTo
      BigInteger.prototype.drShiftTo = bnpDRShiftTo
      BigInteger.prototype.lShiftTo = bnpLShiftTo
      BigInteger.prototype.rShiftTo = bnpRShiftTo
      BigInteger.prototype.subTo = bnpSubTo
      BigInteger.prototype.multiplyTo = bnpMultiplyTo
      BigInteger.prototype.squareTo = bnpSquareTo
      BigInteger.prototype.divRemTo = bnpDivRemTo
      BigInteger.prototype.invDigit = bnpInvDigit
      BigInteger.prototype.isEven = bnpIsEven
      BigInteger.prototype.exp = bnpExp

      // public
      BigInteger.prototype.toString = bnToString
      BigInteger.prototype.negate = bnNegate
      BigInteger.prototype.abs = bnAbs
      BigInteger.prototype.compareTo = bnCompareTo
      BigInteger.prototype.bitLength = bnBitLength
      BigInteger.prototype.mod = bnMod
      BigInteger.prototype.modPowInt = bnModPowInt

      // "constants"
      BigInteger.ZERO = nbv(0)
      BigInteger.ONE = nbv(1)

      // Copyright (c) 2005-2009  Tom Wu
      // All Rights Reserved.
      // See "LICENSE" for details.

      // Extended JavaScript BN functions, required for RSA private ops.

      // Version 1.1: new BigInteger("0", 10) returns "proper" zero
      // Version 1.2: square() API, isProbablePrime fix

      // (public)
      function bnClone() {
        const r = nbi()
        this.copyTo(r)
        return r
      }

      // (public) return value as integer
      function bnIntValue() {
        if (this.s < 0) {
          if (this.t == 1) {
            return this[0] - this.DV
          } else if (this.t == 0) {
            return -1
          }
        } else if (this.t == 1) {
          return this[0]
        } else if (this.t == 0) {
          return 0
        }
        // assumes 16 < DB < 32
        return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
      }

      // (public) return value as byte
      function bnByteValue() {
        return this.t == 0 ? this.s : (this[0] << 24) >> 24
      }

      // (public) return value as short (assumes DB>=16)
      function bnShortValue() {
        return this.t == 0 ? this.s : (this[0] << 16) >> 16
      }

      // (protected) return x s.t. r^x < DV
      function bnpChunkSize(r) {
        return Math.floor((Math.LN2 * this.DB) / Math.log(r))
      }

      // (public) 0 if this == 0, 1 if this > 0
      function bnSigNum() {
        if (this.s < 0) {
          return -1
        } else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) {
          return 0
        } else {
          return 1
        }
      }

      // (protected) convert to radix string
      function bnpToRadix(b) {
        if (b == null) {
          b = 10
        }
        if (this.signum() == 0 || b < 2 || b > 36) {
          return '0'
        }
        const cs = this.chunkSize(b)
        const a = Math.pow(b, cs)
        let d = nbv(a),
          y = nbi(),
          z = nbi(),
          r = ''
        this.divRemTo(d, y, z)
        while (y.signum() > 0) {
          r = (a + z.intValue()).toString(b).substr(1) + r
          y.divRemTo(d, y, z)
        }
        return z.intValue().toString(b) + r
      }

      // (protected) convert from radix string
      function bnpFromRadix(s, b) {
        this.fromInt(0)
        if (b == null) {
          b = 10
        }
        const cs = this.chunkSize(b)
        let d = Math.pow(b, cs),
          mi = false,
          j = 0,
          w = 0
        for (let i = 0; i < s.length; ++i) {
          const x = intAt(s, i)
          if (x < 0) {
            if (s.charAt(i) == '-' && this.signum() == 0) {
              mi = true
            }
            continue
          }
          w = b * w + x
          if (++j >= cs) {
            this.dMultiply(d)
            this.dAddOffset(w, 0)
            j = 0
            w = 0
          }
        }
        if (j > 0) {
          this.dMultiply(Math.pow(b, j))
          this.dAddOffset(w, 0)
        }
        if (mi) {
          BigInteger.ZERO.subTo(this, this)
        }
      }

      // (protected) alternate constructor
      function bnpFromNumber(a, b, c) {
        if ('number' == typeof b) {
          // new BigInteger(int,int,RNG)
          if (a < 2) {
            this.fromInt(1)
          } else {
            this.fromNumber(a, c)
            if (!this.testBit(a - 1)) {
              // force MSB set
              this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this)
            }
            if (this.isEven()) {
              this.dAddOffset(1, 0)
            } // force odd
            while (!this.isProbablePrime(b)) {
              this.dAddOffset(2, 0)
              if (this.bitLength() > a) {
                this.subTo(BigInteger.ONE.shiftLeft(a - 1), this)
              }
            }
          }
        } else {
          // new BigInteger(int,RNG)
          const x = new Array(),
            t = a & 7
          x.length = (a >> 3) + 1
          b.nextBytes(x)
          if (t > 0) {
            x[0] &= (1 << t) - 1
          } else {
            x[0] = 0
          }
          this.fromString(x, 256)
        }
      }

      // (public) convert to bigendian byte array
      function bnToByteArray() {
        let i = this.t,
          r = new Array()
        r[0] = this.s
        let p = this.DB - ((i * this.DB) % 8),
          d,
          k = 0
        if (i-- > 0) {
          if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {
            r[k++] = d | (this.s << (this.DB - p))
          }
          while (i >= 0) {
            if (p < 8) {
              d = (this[i] & ((1 << p) - 1)) << (8 - p)
              d |= this[--i] >> (p += this.DB - 8)
            } else {
              d = (this[i] >> (p -= 8)) & 0xff
              if (p <= 0) {
                p += this.DB
                --i
              }
            }
            if ((d & 0x80) != 0) {
              d |= -256
            }
            if (k == 0 && (this.s & 0x80) != (d & 0x80)) {
              ++k
            }
            if (k > 0 || d != this.s) {
              r[k++] = d
            }
          }
        }
        return r
      }
      function bnEquals(a) {
        return this.compareTo(a) == 0
      }
      function bnMin(a) {
        return this.compareTo(a) < 0 ? this : a
      }
      function bnMax(a) {
        return this.compareTo(a) > 0 ? this : a
      }

      // (protected) r = this op a (bitwise)
      function bnpBitwiseTo(a, op, r) {
        let i,
          f,
          m = Math.min(a.t, this.t)
        for (i = 0; i < m; ++i) {
          r[i] = op(this[i], a[i])
        }
        if (a.t < this.t) {
          f = a.s & this.DM
          for (i = m; i < this.t; ++i) {
            r[i] = op(this[i], f)
          }
          r.t = this.t
        } else {
          f = this.s & this.DM
          for (i = m; i < a.t; ++i) {
            r[i] = op(f, a[i])
          }
          r.t = a.t
        }
        r.s = op(this.s, a.s)
        r.clamp()
      }

      // (public) this & a
      function op_and(x, y) {
        return x & y
      }
      function bnAnd(a) {
        const r = nbi()
        this.bitwiseTo(a, op_and, r)
        return r
      }

      // (public) this | a
      function op_or(x, y) {
        return x | y
      }
      function bnOr(a) {
        const r = nbi()
        this.bitwiseTo(a, op_or, r)
        return r
      }

      // (public) this ^ a
      function op_xor(x, y) {
        return x ^ y
      }
      function bnXor(a) {
        const r = nbi()
        this.bitwiseTo(a, op_xor, r)
        return r
      }

      // (public) this & ~a
      function op_andnot(x, y) {
        return x & ~y
      }
      function bnAndNot(a) {
        const r = nbi()
        this.bitwiseTo(a, op_andnot, r)
        return r
      }

      // (public) ~this
      function bnNot() {
        const r = nbi()
        for (let i = 0; i < this.t; ++i) {
          r[i] = this.DM & ~this[i]
        }
        r.t = this.t
        r.s = ~this.s
        return r
      }

      // (public) this << n
      function bnShiftLeft(n) {
        const r = nbi()
        if (n < 0) {
          this.rShiftTo(-n, r)
        } else {
          this.lShiftTo(n, r)
        }
        return r
      }

      // (public) this >> n
      function bnShiftRight(n) {
        const r = nbi()
        if (n < 0) {
          this.lShiftTo(-n, r)
        } else {
          this.rShiftTo(n, r)
        }
        return r
      }

      // return index of lowest 1-bit in x, x < 2^31
      function lbit(x) {
        if (x == 0) {
          return -1
        }
        let r = 0
        if ((x & 0xffff) == 0) {
          x >>= 16
          r += 16
        }
        if ((x & 0xff) == 0) {
          x >>= 8
          r += 8
        }
        if ((x & 0xf) == 0) {
          x >>= 4
          r += 4
        }
        if ((x & 3) == 0) {
          x >>= 2
          r += 2
        }
        if ((x & 1) == 0) {
          ++r
        }
        return r
      }

      // (public) returns index of lowest 1-bit (or -1 if none)
      function bnGetLowestSetBit() {
        for (let i = 0; i < this.t; ++i) {
          if (this[i] != 0) return i * this.DB + lbit(this[i])
        }
        if (this.s < 0) {
          return this.t * this.DB
        }
        return -1
      }

      // return number of 1 bits in x
      function cbit(x) {
        let r = 0
        while (x != 0) {
          x &= x - 1
          ++r
        }
        return r
      }

      // (public) return number of set bits
      function bnBitCount() {
        let r = 0,
          x = this.s & this.DM
        for (let i = 0; i < this.t; ++i) {
          r += cbit(this[i] ^ x)
        }
        return r
      }

      // (public) true iff nth bit is set
      function bnTestBit(n) {
        const j = Math.floor(n / this.DB)
        if (j >= this.t) {
          return this.s != 0
        }
        return (this[j] & (1 << (n % this.DB))) != 0
      }

      // (protected) this op (1<<n)
      function bnpChangeBit(n, op) {
        const r = BigInteger.ONE.shiftLeft(n)
        this.bitwiseTo(r, op, r)
        return r
      }

      // (public) this | (1<<n)
      function bnSetBit(n) {
        return this.changeBit(n, op_or)
      }

      // (public) this & ~(1<<n)
      function bnClearBit(n) {
        return this.changeBit(n, op_andnot)
      }

      // (public) this ^ (1<<n)
      function bnFlipBit(n) {
        return this.changeBit(n, op_xor)
      }

      // (protected) r = this + a
      function bnpAddTo(a, r) {
        let i = 0,
          c = 0,
          m = Math.min(a.t, this.t)
        while (i < m) {
          c += this[i] + a[i]
          r[i++] = c & this.DM
          c >>= this.DB
        }
        if (a.t < this.t) {
          c += a.s
          while (i < this.t) {
            c += this[i]
            r[i++] = c & this.DM
            c >>= this.DB
          }
          c += this.s
        } else {
          c += this.s
          while (i < a.t) {
            c += a[i]
            r[i++] = c & this.DM
            c >>= this.DB
          }
          c += a.s
        }
        r.s = c < 0 ? -1 : 0
        if (c > 0) {
          r[i++] = c
        } else if (c < -1) {
          r[i++] = this.DV + c
        }
        r.t = i
        r.clamp()
      }

      // (public) this + a
      function bnAdd(a) {
        const r = nbi()
        this.addTo(a, r)
        return r
      }

      // (public) this - a
      function bnSubtract(a) {
        const r = nbi()
        this.subTo(a, r)
        return r
      }

      // (public) this * a
      function bnMultiply(a) {
        const r = nbi()
        this.multiplyTo(a, r)
        return r
      }

      // (public) this^2
      function bnSquare() {
        const r = nbi()
        this.squareTo(r)
        return r
      }

      // (public) this / a
      function bnDivide(a) {
        const r = nbi()
        this.divRemTo(a, r, null)
        return r
      }

      // (public) this % a
      function bnRemainder(a) {
        const r = nbi()
        this.divRemTo(a, null, r)
        return r
      }

      // (public) [this/a,this%a]
      function bnDivideAndRemainder(a) {
        const q = nbi(),
          r = nbi()
        this.divRemTo(a, q, r)
        return new Array(q, r)
      }

      // (protected) this *= n, this >= 0, 1 < n < DV
      function bnpDMultiply(n) {
        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)
        ++this.t
        this.clamp()
      }

      // (protected) this += n << w words, this >= 0
      function bnpDAddOffset(n, w) {
        if (n == 0) {
          return
        }
        while (this.t <= w) {
          this[this.t++] = 0
        }
        this[w] += n
        while (this[w] >= this.DV) {
          this[w] -= this.DV
          if (++w >= this.t) {
            this[this.t++] = 0
          }
          ++this[w]
        }
      }

      // A "null" reducer
      function NullExp() {}
      function nNop(x) {
        return x
      }
      function nMulTo(x, y, r) {
        x.multiplyTo(y, r)
      }
      function nSqrTo(x, r) {
        x.squareTo(r)
      }
      NullExp.prototype.convert = nNop
      NullExp.prototype.revert = nNop
      NullExp.prototype.mulTo = nMulTo
      NullExp.prototype.sqrTo = nSqrTo

      // (public) this^e
      function bnPow(e) {
        return this.exp(e, new NullExp())
      }

      // (protected) r = lower n words of "this * a", a.t <= n
      // "this" should be the larger one if appropriate.
      function bnpMultiplyLowerTo(a, n, r) {
        let i = Math.min(this.t + a.t, n)
        r.s = 0 // assumes a,this >= 0
        r.t = i
        while (i > 0) {
          r[--i] = 0
        }
        let j
        for (j = r.t - this.t; i < j; ++i) {
          r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)
        }
        for (j = Math.min(a.t, n); i < j; ++i) {
          this.am(0, a[i], r, i, 0, n - i)
        }
        r.clamp()
      }

      // (protected) r = "this * a" without lower n words, n > 0
      // "this" should be the larger one if appropriate.
      function bnpMultiplyUpperTo(a, n, r) {
        --n
        let i = (r.t = this.t + a.t - n)
        r.s = 0 // assumes a,this >= 0
        while (--i >= 0) {
          r[i] = 0
        }
        for (i = Math.max(n - this.t, 0); i < a.t; ++i) {
          r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)
        }
        r.clamp()
        r.drShiftTo(1, r)
      }

      // Barrett modular reduction
      function Barrett(m) {
        // setup Barrett
        this.r2 = nbi()
        this.q3 = nbi()
        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)
        this.mu = this.r2.divide(m)
        this.m = m
      }
      function barrettConvert(x) {
        if (x.s < 0 || x.t > 2 * this.m.t) {
          return x.mod(this.m)
        } else if (x.compareTo(this.m) < 0) {
          return x
        } else {
          const r = nbi()
          x.copyTo(r)
          this.reduce(r)
          return r
        }
      }
      function barrettRevert(x) {
        return x
      }

      // x = x mod m (HAC 14.42)
      function barrettReduce(x) {
        x.drShiftTo(this.m.t - 1, this.r2)
        if (x.t > this.m.t + 1) {
          x.t = this.m.t + 1
          x.clamp()
        }
        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3)
        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2)
        while (x.compareTo(this.r2) < 0) {
          x.dAddOffset(1, this.m.t + 1)
        }
        x.subTo(this.r2, x)
        while (x.compareTo(this.m) >= 0) {
          x.subTo(this.m, x)
        }
      }

      // r = x^2 mod m; x != r
      function barrettSqrTo(x, r) {
        x.squareTo(r)
        this.reduce(r)
      }

      // r = x*y mod m; x,y != r
      function barrettMulTo(x, y, r) {
        x.multiplyTo(y, r)
        this.reduce(r)
      }
      Barrett.prototype.convert = barrettConvert
      Barrett.prototype.revert = barrettRevert
      Barrett.prototype.reduce = barrettReduce
      Barrett.prototype.mulTo = barrettMulTo
      Barrett.prototype.sqrTo = barrettSqrTo

      // (public) this^e % m (HAC 14.85)
      function bnModPow(e, m) {
        let i = e.bitLength(),
          k,
          r = nbv(1),
          z
        if (i <= 0) {
          return r
        } else if (i < 18) {
          k = 1
        } else if (i < 48) {
          k = 3
        } else if (i < 144) {
          k = 4
        } else if (i < 768) {
          k = 5
        } else {
          k = 6
        }
        if (i < 8) {
          z = new Classic(m)
        } else if (m.isEven()) {
          z = new Barrett(m)
        } else {
          z = new Montgomery(m)
        }

        // precomputation
        let g = new Array(),
          n = 3,
          k1 = k - 1,
          km = (1 << k) - 1
        g[1] = z.convert(this)
        if (k > 1) {
          const g2 = nbi()
          z.sqrTo(g[1], g2)
          while (n <= km) {
            g[n] = nbi()
            z.mulTo(g2, g[n - 2], g[n])
            n += 2
          }
        }
        let j = e.t - 1,
          w,
          is1 = true,
          r2 = nbi(),
          t
        i = nbits(e[j]) - 1
        while (j >= 0) {
          if (i >= k1) {
            w = (e[j] >> (i - k1)) & km
          } else {
            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
            if (j > 0) {
              w |= e[j - 1] >> (this.DB + i - k1)
            }
          }
          n = k
          while ((w & 1) == 0) {
            w >>= 1
            --n
          }
          if ((i -= n) < 0) {
            i += this.DB
            --j
          }
          if (is1) {
            // ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r)
            is1 = false
          } else {
            while (n > 1) {
              z.sqrTo(r, r2)
              z.sqrTo(r2, r)
              n -= 2
            }
            if (n > 0) {
              z.sqrTo(r, r2)
            } else {
              t = r
              r = r2
              r2 = t
            }
            z.mulTo(r2, g[w], r)
          }
          while (j >= 0 && (e[j] & (1 << i)) == 0) {
            z.sqrTo(r, r2)
            t = r
            r = r2
            r2 = t
            if (--i < 0) {
              i = this.DB - 1
              --j
            }
          }
        }
        return z.revert(r)
      }

      // (public) gcd(this,a) (HAC 14.54)
      function bnGCD(a) {
        let x = this.s < 0 ? this.negate() : this.clone()
        let y = a.s < 0 ? a.negate() : a.clone()
        if (x.compareTo(y) < 0) {
          const t = x
          x = y
          y = t
        }
        let i = x.getLowestSetBit(),
          g = y.getLowestSetBit()
        if (g < 0) {
          return x
        }
        if (i < g) {
          g = i
        }
        if (g > 0) {
          x.rShiftTo(g, x)
          y.rShiftTo(g, y)
        }
        while (x.signum() > 0) {
          if ((i = x.getLowestSetBit()) > 0) {
            x.rShiftTo(i, x)
          }
          if ((i = y.getLowestSetBit()) > 0) {
            y.rShiftTo(i, y)
          }
          if (x.compareTo(y) >= 0) {
            x.subTo(y, x)
            x.rShiftTo(1, x)
          } else {
            y.subTo(x, y)
            y.rShiftTo(1, y)
          }
        }
        if (g > 0) {
          y.lShiftTo(g, y)
        }
        return y
      }

      // (protected) this % n, n < 2^26
      function bnpModInt(n) {
        if (n <= 0) {
          return 0
        }
        let d = this.DV % n,
          r = this.s < 0 ? n - 1 : 0
        if (this.t > 0) {
          if (d == 0) r = this[0] % n
          else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n
        }
        return r
      }

      // (public) 1/this % m (HAC 14.61)
      function bnModInverse(m) {
        const ac = m.isEven()
        if ((this.isEven() && ac) || m.signum() == 0) {
          return BigInteger.ZERO
        }
        const u = m.clone(),
          v = this.clone()
        const a = nbv(1),
          b = nbv(0),
          c = nbv(0),
          d = nbv(1)
        while (u.signum() != 0) {
          while (u.isEven()) {
            u.rShiftTo(1, u)
            if (ac) {
              if (!a.isEven() || !b.isEven()) {
                a.addTo(this, a)
                b.subTo(m, b)
              }
              a.rShiftTo(1, a)
            } else if (!b.isEven()) {
              b.subTo(m, b)
            }
            b.rShiftTo(1, b)
          }
          while (v.isEven()) {
            v.rShiftTo(1, v)
            if (ac) {
              if (!c.isEven() || !d.isEven()) {
                c.addTo(this, c)
                d.subTo(m, d)
              }
              c.rShiftTo(1, c)
            } else if (!d.isEven()) {
              d.subTo(m, d)
            }
            d.rShiftTo(1, d)
          }
          if (u.compareTo(v) >= 0) {
            u.subTo(v, u)
            if (ac) {
              a.subTo(c, a)
            }
            b.subTo(d, b)
          } else {
            v.subTo(u, v)
            if (ac) {
              c.subTo(a, c)
            }
            d.subTo(b, d)
          }
        }
        if (v.compareTo(BigInteger.ONE) != 0) {
          return BigInteger.ZERO
        }
        if (d.compareTo(m) >= 0) {
          return d.subtract(m)
        }
        if (d.signum() < 0) {
          d.addTo(m, d)
        } else {
          return d
        }
        if (d.signum() < 0) {
          return d.add(m)
        } else {
          return d
        }
      }
      const lowprimes = [
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,
        71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,
        149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,
        227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,
        307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,
        389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
        467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,
        571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,
        653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
        751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
        853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
        947, 953, 967, 971, 977, 983, 991, 997
      ]
      const lplim = (1 << 26) / lowprimes[lowprimes.length - 1]

      // (public) test primality with certainty >= 1-.5^t
      function bnIsProbablePrime(t) {
        let i,
          x = this.abs()
        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
          for (i = 0; i < lowprimes.length; ++i) {
            if (x[0] == lowprimes[i]) return true
          }
          return false
        }
        if (x.isEven()) {
          return false
        }
        i = 1
        while (i < lowprimes.length) {
          let m = lowprimes[i],
            j = i + 1
          while (j < lowprimes.length && m < lplim) {
            m *= lowprimes[j++]
          }
          m = x.modInt(m)
          while (i < j) {
            if (m % lowprimes[i++] == 0) return false
          }
        }
        return x.millerRabin(t)
      }

      // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
      function bnpMillerRabin(t) {
        const n1 = this.subtract(BigInteger.ONE)
        const k = n1.getLowestSetBit()
        if (k <= 0) {
          return false
        }
        const r = n1.shiftRight(k)
        t = (t + 1) >> 1
        if (t > lowprimes.length) {
          t = lowprimes.length
        }
        const a = nbi()
        for (let i = 0; i < t; ++i) {
          //Pick bases at random, instead of starting at 2
          a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)])
          let y = a.modPow(r, this)
          if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
            let j = 1
            while (j++ < k && y.compareTo(n1) != 0) {
              y = y.modPowInt(2, this)
              if (y.compareTo(BigInteger.ONE) == 0) {
                return false
              }
            }
            if (y.compareTo(n1) != 0) {
              return false
            }
          }
        }
        return true
      }

      // protected
      BigInteger.prototype.chunkSize = bnpChunkSize
      BigInteger.prototype.toRadix = bnpToRadix
      BigInteger.prototype.fromRadix = bnpFromRadix
      BigInteger.prototype.fromNumber = bnpFromNumber
      BigInteger.prototype.bitwiseTo = bnpBitwiseTo
      BigInteger.prototype.changeBit = bnpChangeBit
      BigInteger.prototype.addTo = bnpAddTo
      BigInteger.prototype.dMultiply = bnpDMultiply
      BigInteger.prototype.dAddOffset = bnpDAddOffset
      BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo
      BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo
      BigInteger.prototype.modInt = bnpModInt
      BigInteger.prototype.millerRabin = bnpMillerRabin

      // public
      BigInteger.prototype.clone = bnClone
      BigInteger.prototype.intValue = bnIntValue
      BigInteger.prototype.byteValue = bnByteValue
      BigInteger.prototype.shortValue = bnShortValue
      BigInteger.prototype.signum = bnSigNum
      BigInteger.prototype.toByteArray = bnToByteArray
      BigInteger.prototype.equals = bnEquals
      BigInteger.prototype.min = bnMin
      BigInteger.prototype.max = bnMax
      BigInteger.prototype.and = bnAnd
      BigInteger.prototype.or = bnOr
      BigInteger.prototype.xor = bnXor
      BigInteger.prototype.andNot = bnAndNot
      BigInteger.prototype.not = bnNot
      BigInteger.prototype.shiftLeft = bnShiftLeft
      BigInteger.prototype.shiftRight = bnShiftRight
      BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit
      BigInteger.prototype.bitCount = bnBitCount
      BigInteger.prototype.testBit = bnTestBit
      BigInteger.prototype.setBit = bnSetBit
      BigInteger.prototype.clearBit = bnClearBit
      BigInteger.prototype.flipBit = bnFlipBit
      BigInteger.prototype.add = bnAdd
      BigInteger.prototype.subtract = bnSubtract
      BigInteger.prototype.multiply = bnMultiply
      BigInteger.prototype.divide = bnDivide
      BigInteger.prototype.remainder = bnRemainder
      BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder
      BigInteger.prototype.modPow = bnModPow
      BigInteger.prototype.modInverse = bnModInverse
      BigInteger.prototype.pow = bnPow
      BigInteger.prototype.gcd = bnGCD
      BigInteger.prototype.isProbablePrime = bnIsProbablePrime

      // JSBN-specific extension
      BigInteger.prototype.square = bnSquare

      // Expose the Barrett function
      BigInteger.prototype.Barrett = Barrett

      // BigInteger interfaces not implemented in jsbn:

      // BigInteger(int signum, byte[] magnitude)
      // double doubleValue()
      // float floatValue()
      // int hashCode()
      // long longValue()
      // static BigInteger valueOf(long val)

      // Random number generator - requires a PRNG backend, e.g. prng4.js

      // For best results, put code like
      // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
      // in your main HTML document.

      let rng_state
      let rng_pool
      let rng_pptr
      // Pool size must be a multiple of 4 and greater than 32.
      // An array of bytes the size of the pool will be passed to init()
      const rng_psize = 256

      // Mix in a 32-bit integer into the pool
      function rng_seed_int(x) {
        rng_pool[rng_pptr++] ^= x & 255
        rng_pool[rng_pptr++] ^= (x >> 8) & 255
        rng_pool[rng_pptr++] ^= (x >> 16) & 255
        rng_pool[rng_pptr++] ^= (x >> 24) & 255
        if (rng_pptr >= rng_psize) {
          rng_pptr -= rng_psize
        }
      }

      // Mix in the current time (w/milliseconds) into the pool
      function rng_seed_time() {
        rng_seed_int(new Date().getTime())
      }

      // Initialize the pool with junk if needed.
      if (rng_pool == null) {
        rng_pool = new Array()
        rng_pptr = 0
        let t
        if (typeof window !== 'undefined' && window.crypto) {
          if (window.crypto.getRandomValues) {
            // Use webcrypto if available
            const ua = new Uint8Array(32)
            window.crypto.getRandomValues(ua)
            for (t = 0; t < 32; ++t) {
              rng_pool[rng_pptr++] = ua[t]
            }
          } else if (
            navigator.appName == 'Netscape' &&
            navigator.appVersion < '5'
          ) {
            // Extract entropy (256 bits) from NS4 RNG if available
            const z = window.crypto.random(32)
            for (t = 0; t < z.length; ++t) {
              rng_pool[rng_pptr++] = z.charCodeAt(t) & 255
            }
          }
        }
        while (rng_pptr < rng_psize) {
          // extract some randomness from Math.random()
          t = Math.floor(65536 * Math.random())
          rng_pool[rng_pptr++] = t >>> 8
          rng_pool[rng_pptr++] = t & 255
        }
        rng_pptr = 0
        rng_seed_time()
        //rng_seed_int(window.screenX);
        //rng_seed_int(window.screenY);
      }
      function rng_get_byte() {
        if (rng_state == null) {
          rng_seed_time()
          rng_state = prng_newstate()
          rng_state.init(rng_pool)
          for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
            rng_pool[rng_pptr] = 0
          }
          rng_pptr = 0
          //rng_pool = null;
        }
        // TODO: allow reseeding after first request
        return rng_state.next()
      }
      function rng_get_bytes(ba) {
        let i
        for (i = 0; i < ba.length; ++i) {
          ba[i] = rng_get_byte()
        }
      }
      function SecureRandom() {}
      SecureRandom.prototype.nextBytes = rng_get_bytes

      // prng4.js - uses Arcfour as a PRNG

      function Arcfour() {
        this.i = 0
        this.j = 0
        this.S = new Array()
      }

      // Initialize arcfour context from key, an array of ints, each from [0..255]
      function ARC4init(key) {
        let i, j, t
        for (i = 0; i < 256; ++i) {
          this.S[i] = i
        }
        j = 0
        for (i = 0; i < 256; ++i) {
          j = (j + this.S[i] + key[i % key.length]) & 255
          t = this.S[i]
          this.S[i] = this.S[j]
          this.S[j] = t
        }
        this.i = 0
        this.j = 0
      }
      function ARC4next() {
        let t
        this.i = (this.i + 1) & 255
        this.j = (this.j + this.S[this.i]) & 255
        t = this.S[this.i]
        this.S[this.i] = this.S[this.j]
        this.S[this.j] = t
        return this.S[(t + this.S[this.i]) & 255]
      }
      Arcfour.prototype.init = ARC4init
      Arcfour.prototype.next = ARC4next

      // Plug in your RNG constructor here
      function prng_newstate() {
        return new Arcfour()
      }
      {
        module.exports = {
          default: BigInteger,
          BigInteger: BigInteger,
          SecureRandom: SecureRandom
        }
      }
    }).call(this)
  })(jsbn)
  return jsbn.exports
}

const sprintf = {}

/* global window, exports, define */
let hasRequiredSprintf
function requireSprintf() {
  if (hasRequiredSprintf) {
    return sprintf
  }
  hasRequiredSprintf = 1
  ;(function (exports) {
    !(function () {
      const re = {
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder:
          /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[+-]/
      }
      function sprintf(key) {
        // `arguments` is not an array, but should be fine for this call
        return sprintf_format(sprintf_parse(key), arguments)
      }
      function vsprintf(fmt, argv) {
        return sprintf.apply(null, [fmt].concat(argv || []))
      }
      function sprintf_format(parse_tree, argv) {
        let cursor = 1,
          tree_length = parse_tree.length,
          arg,
          output = '',
          i,
          k,
          ph,
          pad,
          pad_character,
          pad_length,
          is_positive,
          sign
        for (i = 0; i < tree_length; i++) {
          if (typeof parse_tree[i] === 'string') {
            output += parse_tree[i]
          } else if (typeof parse_tree[i] === 'object') {
            ph = parse_tree[i] // convenience purposes only
            if (ph.keys) {
              // keyword argument
              arg = argv[cursor]
              for (k = 0; k < ph.keys.length; k++) {
                if (arg == undefined) {
                  throw new Error(
                    sprintf(
                      '[sprintf] Cannot access property "%s" of undefined value "%s"',
                      ph.keys[k],
                      ph.keys[k - 1]
                    )
                  )
                }
                arg = arg[ph.keys[k]]
              }
            } else if (ph.param_no) {
              // positional argument (explicit)
              arg = argv[ph.param_no]
            } else {
              // positional argument (implicit)
              arg = argv[cursor++]
            }
            if (
              re.not_type.test(ph.type) &&
              re.not_primitive.test(ph.type) &&
              arg instanceof Function
            ) {
              arg = arg()
            }
            if (
              re.numeric_arg.test(ph.type) &&
              typeof arg !== 'number' &&
              isNaN(arg)
            ) {
              throw new TypeError(
                sprintf('[sprintf] expecting number but found %T', arg)
              )
            }
            if (re.number.test(ph.type)) {
              is_positive = arg >= 0
            }
            switch (ph.type) {
              case 'b':
                arg = parseInt(arg, 10).toString(2)
                break
              case 'c':
                arg = String.fromCharCode(parseInt(arg, 10))
                break
              case 'd':
              case 'i':
                arg = parseInt(arg, 10)
                break
              case 'j':
                arg = JSON.stringify(
                  arg,
                  null,
                  ph.width ? parseInt(ph.width) : 0
                )
                break
              case 'e':
                arg = ph.precision
                  ? parseFloat(arg).toExponential(ph.precision)
                  : parseFloat(arg).toExponential()
                break
              case 'f':
                arg = ph.precision
                  ? parseFloat(arg).toFixed(ph.precision)
                  : parseFloat(arg)
                break
              case 'g':
                arg = ph.precision
                  ? String(Number(arg.toPrecision(ph.precision)))
                  : parseFloat(arg)
                break
              case 'o':
                arg = (parseInt(arg, 10) >>> 0).toString(8)
                break
              case 's':
                arg = String(arg)
                arg = ph.precision ? arg.substring(0, ph.precision) : arg
                break
              case 't':
                arg = String(!!arg)
                arg = ph.precision ? arg.substring(0, ph.precision) : arg
                break
              case 'T':
                arg = Object.prototype.toString
                  .call(arg)
                  .slice(8, -1)
                  .toLowerCase()
                arg = ph.precision ? arg.substring(0, ph.precision) : arg
                break
              case 'u':
                arg = parseInt(arg, 10) >>> 0
                break
              case 'v':
                arg = arg.valueOf()
                arg = ph.precision ? arg.substring(0, ph.precision) : arg
                break
              case 'x':
                arg = (parseInt(arg, 10) >>> 0).toString(16)
                break
              case 'X':
                arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()
                break
            }
            if (re.json.test(ph.type)) {
              output += arg
            } else {
              if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                sign = is_positive ? '+' : '-'
                arg = arg.toString().replace(re.sign, '')
              } else {
                sign = ''
              }
              pad_character = ph.pad_char
                ? ph.pad_char === '0'
                  ? '0'
                  : ph.pad_char.charAt(1)
                : ' '
              pad_length = ph.width - (sign + arg).length
              pad = ph.width
                ? pad_length > 0
                  ? pad_character.repeat(pad_length)
                  : ''
                : ''
              output += ph.align
                ? sign + arg + pad
                : pad_character === '0'
                  ? sign + pad + arg
                  : pad + sign + arg
            }
          }
        }
        return output
      }
      const sprintf_cache = Object.create(null)
      function sprintf_parse(fmt) {
        if (sprintf_cache[fmt]) {
          return sprintf_cache[fmt]
        }
        let _fmt = fmt,
          match,
          parse_tree = [],
          arg_names = 0
        while (_fmt) {
          if ((match = re.text.exec(_fmt)) !== null) {
            parse_tree.push(match[0])
          } else if ((match = re.modulo.exec(_fmt)) !== null) {
            parse_tree.push('%')
          } else if ((match = re.placeholder.exec(_fmt)) !== null) {
            if (match[2]) {
              arg_names |= 1
              let field_list = [],
                replacement_field = match[2],
                field_match = []
              if ((field_match = re.key.exec(replacement_field)) !== null) {
                field_list.push(field_match[1])
                while (
                  (replacement_field = replacement_field.substring(
                    field_match[0].length
                  )) !== ''
                ) {
                  if (
                    (field_match = re.key_access.exec(replacement_field)) !==
                    null
                  ) {
                    field_list.push(field_match[1])
                  } else if (
                    (field_match = re.index_access.exec(replacement_field)) !==
                    null
                  ) {
                    field_list.push(field_match[1])
                  } else {
                    throw new SyntaxError(
                      '[sprintf] failed to parse named argument key'
                    )
                  }
                }
              } else {
                throw new SyntaxError(
                  '[sprintf] failed to parse named argument key'
                )
              }
              match[2] = field_list
            } else {
              arg_names |= 2
            }
            if (arg_names === 3) {
              throw new Error(
                '[sprintf] mixing positional and named placeholders is not (yet) supported'
              )
            }
            parse_tree.push({
              placeholder: match[0],
              param_no: match[1],
              keys: match[2],
              sign: match[3],
              pad_char: match[4],
              align: match[5],
              width: match[6],
              precision: match[7],
              type: match[8]
            })
          } else {
            throw new SyntaxError('[sprintf] unexpected placeholder')
          }
          _fmt = _fmt.substring(match[0].length)
        }
        return (sprintf_cache[fmt] = parse_tree)
      }

      /**
       * export to either browser or node.js
       */
      /* eslint-disable quote-props */
      {
        exports['sprintf'] = sprintf
        exports['vsprintf'] = vsprintf
      }
      if (typeof window !== 'undefined') {
        window['sprintf'] = sprintf
        window['vsprintf'] = vsprintf
      }
      /* eslint-enable quote-props */
    })() // eslint-disable-line
  })(sprintf)
  return sprintf
}

let hasRequiredIpv4
function requireIpv4() {
  if (hasRequiredIpv4) {
    return ipv4
  }
  hasRequiredIpv4 = 1
  /* eslint-disable no-param-reassign */
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(ipv4, '__esModule', {
    value: true
  })
  ipv4.Address4 = void 0
  const common = __importStar(requireCommon())
  const constants = __importStar(requireConstants$1())
  const address_error_1 = requireAddressError()
  const jsbn_1 = requireJsbn()
  const sprintf_js_1 = requireSprintf()
  /**
   * Represents an IPv4 address
   * @class Address4
   * @param {string} address - An IPv4 address string
   */
  class Address4 {
    constructor(address) {
      this.groups = constants.GROUPS
      this.parsedAddress = []
      this.parsedSubnet = ''
      this.subnet = '/32'
      this.subnetMask = 32
      this.v4 = true
      /**
       * Returns true if the address is correct, false otherwise
       * @memberof Address4
       * @instance
       * @returns {Boolean}
       */
      this.isCorrect = common.isCorrect(constants.BITS)
      /**
       * Returns true if the given address is in the subnet of the current address
       * @memberof Address4
       * @instance
       * @returns {boolean}
       */
      this.isInSubnet = common.isInSubnet
      this.address = address
      const subnet = constants.RE_SUBNET_STRING.exec(address)
      if (subnet) {
        this.parsedSubnet = subnet[0].replace('/', '')
        this.subnetMask = parseInt(this.parsedSubnet, 10)
        this.subnet = `/${this.subnetMask}`
        if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {
          throw new address_error_1.AddressError('Invalid subnet mask.')
        }
        address = address.replace(constants.RE_SUBNET_STRING, '')
      }
      this.addressMinusSuffix = address
      this.parsedAddress = this.parse(address)
    }
    static isValid(address) {
      try {
        // eslint-disable-next-line no-new
        new Address4(address)
        return true
      } catch (e) {
        return false
      }
    }
    /*
     * Parses a v4 address
     */
    parse(address) {
      const groups = address.split('.')
      if (!address.match(constants.RE_ADDRESS)) {
        throw new address_error_1.AddressError('Invalid IPv4 address.')
      }
      return groups
    }
    /**
     * Returns the correct form of an address
     * @memberof Address4
     * @instance
     * @returns {String}
     */
    correctForm() {
      return this.parsedAddress.map(part => parseInt(part, 10)).join('.')
    }
    /**
     * Converts a hex string to an IPv4 address object
     * @memberof Address4
     * @static
     * @param {string} hex - a hex string to convert
     * @returns {Address4}
     */
    static fromHex(hex) {
      const padded = hex.replace(/:/g, '').padStart(8, '0')
      const groups = []
      let i
      for (i = 0; i < 8; i += 2) {
        const h = padded.slice(i, i + 2)
        groups.push(parseInt(h, 16))
      }
      return new Address4(groups.join('.'))
    }
    /**
     * Converts an integer into a IPv4 address object
     * @memberof Address4
     * @static
     * @param {integer} integer - a number to convert
     * @returns {Address4}
     */
    static fromInteger(integer) {
      return Address4.fromHex(integer.toString(16))
    }
    /**
     * Return an address from in-addr.arpa form
     * @memberof Address4
     * @static
     * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address
     * @returns {Adress4}
     * @example
     * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)
     * address.correctForm(); // '192.0.2.42'
     */
    static fromArpa(arpaFormAddress) {
      // remove ending ".in-addr.arpa." or just "."
      const leader = arpaFormAddress.replace(/(\.in-addr\.arpa)?\.$/, '')
      const address = leader.split('.').reverse().join('.')
      return new Address4(address)
    }
    /**
     * Converts an IPv4 address object to a hex string
     * @memberof Address4
     * @instance
     * @returns {String}
     */
    toHex() {
      return this.parsedAddress
        .map(part => (0, sprintf_js_1.sprintf)('%02x', parseInt(part, 10)))
        .join(':')
    }
    /**
     * Converts an IPv4 address object to an array of bytes
     * @memberof Address4
     * @instance
     * @returns {Array}
     */
    toArray() {
      return this.parsedAddress.map(part => parseInt(part, 10))
    }
    /**
     * Converts an IPv4 address object to an IPv6 address group
     * @memberof Address4
     * @instance
     * @returns {String}
     */
    toGroup6() {
      const output = []
      let i
      for (i = 0; i < constants.GROUPS; i += 2) {
        const hex = (0, sprintf_js_1.sprintf)(
          '%02x%02x',
          parseInt(this.parsedAddress[i], 10),
          parseInt(this.parsedAddress[i + 1], 10)
        )
        output.push((0, sprintf_js_1.sprintf)('%x', parseInt(hex, 16)))
      }
      return output.join(':')
    }
    /**
     * Returns the address as a BigInteger
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */
    bigInteger() {
      return new jsbn_1.BigInteger(
        this.parsedAddress
          .map(n => (0, sprintf_js_1.sprintf)('%02x', parseInt(n, 10)))
          .join(''),
        16
      )
    }
    /**
     * Helper function getting start address.
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */
    _startAddress() {
      return new jsbn_1.BigInteger(
        this.mask() + '0'.repeat(constants.BITS - this.subnetMask),
        2
      )
    }
    /**
     * The first address in the range given by this address' subnet.
     * Often referred to as the Network Address.
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */
    startAddress() {
      return Address4.fromBigInteger(this._startAddress())
    }
    /**
     * The first host address in the range given by this address's subnet ie
     * the first address after the Network Address
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */
    startAddressExclusive() {
      const adjust = new jsbn_1.BigInteger('1')
      return Address4.fromBigInteger(this._startAddress().add(adjust))
    }
    /**
     * Helper function getting end address.
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */
    _endAddress() {
      return new jsbn_1.BigInteger(
        this.mask() + '1'.repeat(constants.BITS - this.subnetMask),
        2
      )
    }
    /**
     * The last address in the range given by this address' subnet
     * Often referred to as the Broadcast
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */
    endAddress() {
      return Address4.fromBigInteger(this._endAddress())
    }
    /**
     * The last host address in the range given by this address's subnet ie
     * the last address prior to the Broadcast Address
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */
    endAddressExclusive() {
      const adjust = new jsbn_1.BigInteger('1')
      return Address4.fromBigInteger(this._endAddress().subtract(adjust))
    }
    /**
     * Converts a BigInteger to a v4 address object
     * @memberof Address4
     * @static
     * @param {BigInteger} bigInteger - a BigInteger to convert
     * @returns {Address4}
     */
    static fromBigInteger(bigInteger) {
      return Address4.fromInteger(parseInt(bigInteger.toString(), 10))
    }
    /**
     * Returns the first n bits of the address, defaulting to the
     * subnet mask
     * @memberof Address4
     * @instance
     * @returns {String}
     */
    mask(mask) {
      if (mask === undefined) {
        mask = this.subnetMask
      }
      return this.getBitsBase2(0, mask)
    }
    /**
     * Returns the bits in the given range as a base-2 string
     * @memberof Address4
     * @instance
     * @returns {string}
     */
    getBitsBase2(start, end) {
      return this.binaryZeroPad().slice(start, end)
    }
    /**
     * Return the reversed ip6.arpa form of the address
     * @memberof Address4
     * @param {Object} options
     * @param {boolean} options.omitSuffix - omit the "in-addr.arpa" suffix
     * @instance
     * @returns {String}
     */
    reverseForm(options) {
      if (!options) {
        options = {}
      }
      const reversed = this.correctForm().split('.').reverse().join('.')
      if (options.omitSuffix) {
        return reversed
      }
      return (0, sprintf_js_1.sprintf)('%s.in-addr.arpa.', reversed)
    }
    /**
     * Returns true if the given address is a multicast address
     * @memberof Address4
     * @instance
     * @returns {boolean}
     */
    isMulticast() {
      return this.isInSubnet(new Address4('224.0.0.0/4'))
    }
    /**
     * Returns a zero-padded base-2 string representation of the address
     * @memberof Address4
     * @instance
     * @returns {string}
     */
    binaryZeroPad() {
      return this.bigInteger().toString(2).padStart(constants.BITS, '0')
    }
    /**
     * Groups an IPv4 address for inclusion at the end of an IPv6 address
     * @returns {String}
     */
    groupForV6() {
      const segments = this.parsedAddress
      return this.address.replace(
        constants.RE_ADDRESS,
        (0, sprintf_js_1.sprintf)(
          '<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>',
          segments.slice(0, 2).join('.'),
          segments.slice(2, 4).join('.')
        )
      )
    }
  }
  ipv4.Address4 = Address4
  return ipv4
}

const ipv6 = {}

const constants = {}

let hasRequiredConstants
function requireConstants() {
  if (hasRequiredConstants) {
    return constants
  }
  hasRequiredConstants = 1
  Object.defineProperty(constants, '__esModule', {
    value: true
  })
  constants.RE_URL_WITH_PORT =
    constants.RE_URL =
    constants.RE_ZONE_STRING =
    constants.RE_SUBNET_STRING =
    constants.RE_BAD_ADDRESS =
    constants.RE_BAD_CHARACTERS =
    constants.TYPES =
    constants.SCOPES =
    constants.GROUPS =
    constants.BITS =
      void 0
  constants.BITS = 128
  constants.GROUPS = 8
  /**
   * Represents IPv6 address scopes
   * @memberof Address6
   * @static
   */
  constants.SCOPES = {
    0: 'Reserved',
    1: 'Interface local',
    2: 'Link local',
    4: 'Admin local',
    5: 'Site local',
    8: 'Organization local',
    14: 'Global',
    15: 'Reserved'
  }
  /**
   * Represents IPv6 address types
   * @memberof Address6
   * @static
   */
  constants.TYPES = {
    'ff01::1/128': 'Multicast (All nodes on this interface)',
    'ff01::2/128': 'Multicast (All routers on this interface)',
    'ff02::1/128': 'Multicast (All nodes on this link)',
    'ff02::2/128': 'Multicast (All routers on this link)',
    'ff05::2/128': 'Multicast (All routers in this site)',
    'ff02::5/128': 'Multicast (OSPFv3 AllSPF routers)',
    'ff02::6/128': 'Multicast (OSPFv3 AllDR routers)',
    'ff02::9/128': 'Multicast (RIP routers)',
    'ff02::a/128': 'Multicast (EIGRP routers)',
    'ff02::d/128': 'Multicast (PIM routers)',
    'ff02::16/128': 'Multicast (MLDv2 reports)',
    'ff01::fb/128': 'Multicast (mDNSv6)',
    'ff02::fb/128': 'Multicast (mDNSv6)',
    'ff05::fb/128': 'Multicast (mDNSv6)',
    'ff02::1:2/128':
      'Multicast (All DHCP servers and relay agents on this link)',
    'ff05::1:2/128':
      'Multicast (All DHCP servers and relay agents in this site)',
    'ff02::1:3/128': 'Multicast (All DHCP servers on this link)',
    'ff05::1:3/128': 'Multicast (All DHCP servers in this site)',
    '::/128': 'Unspecified',
    '::1/128': 'Loopback',
    'ff00::/8': 'Multicast',
    'fe80::/10': 'Link-local unicast'
  }
  /**
   * A regular expression that matches bad characters in an IPv6 address
   * @memberof Address6
   * @static
   */
  constants.RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi
  /**
   * A regular expression that matches an incorrect IPv6 address
   * @memberof Address6
   * @static
   */
  constants.RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi
  /**
   * A regular expression that matches an IPv6 subnet
   * @memberof Address6
   * @static
   */
  constants.RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/
  /**
   * A regular expression that matches an IPv6 zone
   * @memberof Address6
   * @static
   */
  constants.RE_ZONE_STRING = /%.*$/
  constants.RE_URL = new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/)
  constants.RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/)
  return constants
}

const helpers = {}

let hasRequiredHelpers$1
function requireHelpers$1() {
  if (hasRequiredHelpers$1) {
    return helpers
  }
  hasRequiredHelpers$1 = 1
  Object.defineProperty(helpers, '__esModule', {
    value: true
  })
  helpers.simpleGroup =
    helpers.spanLeadingZeroes =
    helpers.spanAll =
    helpers.spanAllZeroes =
      void 0
  const sprintf_js_1 = requireSprintf()
  /**
   * @returns {String} the string with all zeroes contained in a <span>
   */
  function spanAllZeroes(s) {
    return s.replace(/(0+)/g, '<span class="zero">$1</span>')
  }
  helpers.spanAllZeroes = spanAllZeroes
  /**
   * @returns {String} the string with each character contained in a <span>
   */
  function spanAll(s, offset = 0) {
    const letters = s.split('')
    return letters
      .map(
        (n, i) =>
          (0, sprintf_js_1.sprintf)(
            '<span class="digit value-%s position-%d">%s</span>',
            n,
            i + offset,
            spanAllZeroes(n)
          ) // XXX Use #base-2 .value-0 instead?
      )
      .join('')
  }
  helpers.spanAll = spanAll
  function spanLeadingZeroesSimple(group) {
    return group.replace(/^(0+)/, '<span class="zero">$1</span>')
  }
  /**
   * @returns {String} the string with leading zeroes contained in a <span>
   */
  function spanLeadingZeroes(address) {
    const groups = address.split(':')
    return groups.map(g => spanLeadingZeroesSimple(g)).join(':')
  }
  helpers.spanLeadingZeroes = spanLeadingZeroes
  /**
   * Groups an address
   * @returns {String} a grouped address
   */
  function simpleGroup(addressString, offset = 0) {
    const groups = addressString.split(':')
    return groups.map((g, i) => {
      if (/group-v4/.test(g)) {
        return g
      }
      return (0, sprintf_js_1.sprintf)(
        '<span class="hover-group group-%d">%s</span>',
        i + offset,
        spanLeadingZeroesSimple(g)
      )
    })
  }
  helpers.simpleGroup = simpleGroup
  return helpers
}

const regularExpressions = {}

let hasRequiredRegularExpressions
function requireRegularExpressions() {
  if (hasRequiredRegularExpressions) {
    return regularExpressions
  }
  hasRequiredRegularExpressions = 1
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(regularExpressions, '__esModule', {
    value: true
  })
  regularExpressions.possibleElisions =
    regularExpressions.simpleRegularExpression =
    regularExpressions.ADDRESS_BOUNDARY =
    regularExpressions.padGroup =
    regularExpressions.groupPossibilities =
      void 0
  const v6 = __importStar(requireConstants())
  const sprintf_js_1 = requireSprintf()
  function groupPossibilities(possibilities) {
    return (0, sprintf_js_1.sprintf)('(%s)', possibilities.join('|'))
  }
  regularExpressions.groupPossibilities = groupPossibilities
  function padGroup(group) {
    if (group.length < 4) {
      return (0, sprintf_js_1.sprintf)('0{0,%d}%s', 4 - group.length, group)
    }
    return group
  }
  regularExpressions.padGroup = padGroup
  regularExpressions.ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]'
  function simpleRegularExpression(groups) {
    const zeroIndexes = []
    groups.forEach((group, i) => {
      const groupInteger = parseInt(group, 16)
      if (groupInteger === 0) {
        zeroIndexes.push(i)
      }
    })
    // You can technically elide a single 0, this creates the regular expressions
    // to match that eventuality
    const possibilities = zeroIndexes.map(zeroIndex =>
      groups
        .map((group, i) => {
          if (i === zeroIndex) {
            const elision = i === 0 || i === v6.GROUPS - 1 ? ':' : ''
            return groupPossibilities([padGroup(group), elision])
          }
          return padGroup(group)
        })
        .join(':')
    )
    // The simplest case
    possibilities.push(groups.map(padGroup).join(':'))
    return groupPossibilities(possibilities)
  }
  regularExpressions.simpleRegularExpression = simpleRegularExpression
  function possibleElisions(elidedGroups, moreLeft, moreRight) {
    const left = moreLeft ? '' : ':'
    const right = moreRight ? '' : ':'
    const possibilities = []
    // 1. elision of everything (::)
    if (!moreLeft && !moreRight) {
      possibilities.push('::')
    }
    // 2. complete elision of the middle
    if (moreLeft && moreRight) {
      possibilities.push('')
    }
    if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {
      // 3. complete elision of one side
      possibilities.push(':')
    }
    // 4. elision from the left side
    possibilities.push(
      (0, sprintf_js_1.sprintf)('%s(:0{1,4}){1,%d}', left, elidedGroups - 1)
    )
    // 5. elision from the right side
    possibilities.push(
      (0, sprintf_js_1.sprintf)('(0{1,4}:){1,%d}%s', elidedGroups - 1, right)
    )
    // 6. no elision
    possibilities.push(
      (0, sprintf_js_1.sprintf)('(0{1,4}:){%d}0{1,4}', elidedGroups - 1)
    )
    // 7. elision (including sloppy elision) from the middle
    for (let groups = 1; groups < elidedGroups - 1; groups++) {
      for (let position = 1; position < elidedGroups - groups; position++) {
        possibilities.push(
          (0, sprintf_js_1.sprintf)(
            '(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}',
            position,
            elidedGroups - position - groups - 1
          )
        )
      }
    }
    return groupPossibilities(possibilities)
  }
  regularExpressions.possibleElisions = possibleElisions
  return regularExpressions
}

let hasRequiredIpv6
function requireIpv6() {
  if (hasRequiredIpv6) {
    return ipv6
  }
  hasRequiredIpv6 = 1
  /* eslint-disable prefer-destructuring */
  /* eslint-disable no-param-reassign */
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(ipv6, '__esModule', {
    value: true
  })
  ipv6.Address6 = void 0
  const common = __importStar(requireCommon())
  const constants4 = __importStar(requireConstants$1())
  const constants6 = __importStar(requireConstants())
  const helpers = __importStar(requireHelpers$1())
  const ipv4_1 = requireIpv4()
  const regular_expressions_1 = requireRegularExpressions()
  const address_error_1 = requireAddressError()
  const jsbn_1 = requireJsbn()
  const sprintf_js_1 = requireSprintf()
  function assert(condition) {
    if (!condition) {
      throw new Error('Assertion failed.')
    }
  }
  function addCommas(number) {
    const r = /(\d+)(\d{3})/
    while (r.test(number)) {
      number = number.replace(r, '$1,$2')
    }
    return number
  }
  function spanLeadingZeroes4(n) {
    n = n.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2')
    n = n.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2')
    return n
  }
  /*
   * A helper function to compact an array
   */
  function compact(address, slice) {
    const s1 = []
    const s2 = []
    let i
    for (i = 0; i < address.length; i++) {
      if (i < slice[0]) {
        s1.push(address[i])
      } else if (i > slice[1]) {
        s2.push(address[i])
      }
    }
    return s1.concat(['compact']).concat(s2)
  }
  function paddedHex(octet) {
    return (0, sprintf_js_1.sprintf)('%04x', parseInt(octet, 16))
  }
  function unsignByte(b) {
    // eslint-disable-next-line no-bitwise
    return b & 0xff
  }
  /**
   * Represents an IPv6 address
   * @class Address6
   * @param {string} address - An IPv6 address string
   * @param {number} [groups=8] - How many octets to parse
   * @example
   * var address = new Address6('2001::/32');
   */
  class Address6 {
    constructor(address, optionalGroups) {
      this.addressMinusSuffix = ''
      this.parsedSubnet = ''
      this.subnet = '/128'
      this.subnetMask = 128
      this.v4 = false
      this.zone = ''
      // #region Attributes
      /**
       * Returns true if the given address is in the subnet of the current address
       * @memberof Address6
       * @instance
       * @returns {boolean}
       */
      this.isInSubnet = common.isInSubnet
      /**
       * Returns true if the address is correct, false otherwise
       * @memberof Address6
       * @instance
       * @returns {boolean}
       */
      this.isCorrect = common.isCorrect(constants6.BITS)
      if (optionalGroups === undefined) {
        this.groups = constants6.GROUPS
      } else {
        this.groups = optionalGroups
      }
      this.address = address
      const subnet = constants6.RE_SUBNET_STRING.exec(address)
      if (subnet) {
        this.parsedSubnet = subnet[0].replace('/', '')
        this.subnetMask = parseInt(this.parsedSubnet, 10)
        this.subnet = `/${this.subnetMask}`
        if (
          Number.isNaN(this.subnetMask) ||
          this.subnetMask < 0 ||
          this.subnetMask > constants6.BITS
        ) {
          throw new address_error_1.AddressError('Invalid subnet mask.')
        }
        address = address.replace(constants6.RE_SUBNET_STRING, '')
      } else if (/\//.test(address)) {
        throw new address_error_1.AddressError('Invalid subnet mask.')
      }
      const zone = constants6.RE_ZONE_STRING.exec(address)
      if (zone) {
        this.zone = zone[0]
        address = address.replace(constants6.RE_ZONE_STRING, '')
      }
      this.addressMinusSuffix = address
      this.parsedAddress = this.parse(this.addressMinusSuffix)
    }
    static isValid(address) {
      try {
        // eslint-disable-next-line no-new
        new Address6(address)
        return true
      } catch (e) {
        return false
      }
    }
    /**
     * Convert a BigInteger to a v6 address object
     * @memberof Address6
     * @static
     * @param {BigInteger} bigInteger - a BigInteger to convert
     * @returns {Address6}
     * @example
     * var bigInteger = new BigInteger('1000000000000');
     * var address = Address6.fromBigInteger(bigInteger);
     * address.correctForm(); // '::e8:d4a5:1000'
     */
    static fromBigInteger(bigInteger) {
      const hex = bigInteger.toString(16).padStart(32, '0')
      const groups = []
      let i
      for (i = 0; i < constants6.GROUPS; i++) {
        groups.push(hex.slice(i * 4, (i + 1) * 4))
      }
      return new Address6(groups.join(':'))
    }
    /**
     * Convert a URL (with optional port number) to an address object
     * @memberof Address6
     * @static
     * @param {string} url - a URL with optional port number
     * @example
     * var addressAndPort = Address6.fromURL('http://[ffff::]:8080/foo/');
     * addressAndPort.address.correctForm(); // 'ffff::'
     * addressAndPort.port; // 8080
     */
    static fromURL(url) {
      let host
      let port = null
      let result
      // If we have brackets parse them and find a port
      if (url.indexOf('[') !== -1 && url.indexOf(']:') !== -1) {
        result = constants6.RE_URL_WITH_PORT.exec(url)
        if (result === null) {
          return {
            error: 'failed to parse address with port',
            address: null,
            port: null
          }
        }
        host = result[1]
        port = result[2]
        // If there's a URL extract the address
      } else if (url.indexOf('/') !== -1) {
        // Remove the protocol prefix
        url = url.replace(/^[a-z0-9]+:\/\//, '')
        // Parse the address
        result = constants6.RE_URL.exec(url)
        if (result === null) {
          return {
            error: 'failed to parse address from URL',
            address: null,
            port: null
          }
        }
        host = result[1]
        // Otherwise just assign the URL to the host and let the library parse it
      } else {
        host = url
      }
      // If there's a port convert it to an integer
      if (port) {
        port = parseInt(port, 10)
        // squelch out of range ports
        if (port < 0 || port > 65536) {
          port = null
        }
      } else {
        // Standardize `undefined` to `null`
        port = null
      }
      return {
        address: new Address6(host),
        port
      }
    }
    /**
     * Create an IPv6-mapped address given an IPv4 address
     * @memberof Address6
     * @static
     * @param {string} address - An IPv4 address string
     * @returns {Address6}
     * @example
     * var address = Address6.fromAddress4('192.168.0.1');
     * address.correctForm(); // '::ffff:c0a8:1'
     * address.to4in6(); // '::ffff:192.168.0.1'
     */
    static fromAddress4(address) {
      const address4 = new ipv4_1.Address4(address)
      const mask6 = constants6.BITS - (constants4.BITS - address4.subnetMask)
      return new Address6(`::ffff:${address4.correctForm()}/${mask6}`)
    }
    /**
     * Return an address from ip6.arpa form
     * @memberof Address6
     * @static
     * @param {string} arpaFormAddress - an 'ip6.arpa' form address
     * @returns {Adress6}
     * @example
     * var address = Address6.fromArpa(e.f.f.f.3.c.2.6.f.f.f.e.6.6.8.e.1.0.6.7.9.4.e.c.0.0.0.0.1.0.0.2.ip6.arpa.)
     * address.correctForm(); // '2001:0:ce49:7601:e866:efff:62c3:fffe'
     */
    static fromArpa(arpaFormAddress) {
      // remove ending ".ip6.arpa." or just "."
      let address = arpaFormAddress.replace(/(\.ip6\.arpa)?\.$/, '')
      const semicolonAmount = 7
      // correct ip6.arpa form with ending removed will be 63 characters
      if (address.length !== 63) {
        throw new address_error_1.AddressError("Invalid 'ip6.arpa' form.")
      }
      const parts = address.split('.').reverse()
      for (let i = semicolonAmount; i > 0; i--) {
        const insertIndex = i * 4
        parts.splice(insertIndex, 0, ':')
      }
      address = parts.join('')
      return new Address6(address)
    }
    /**
     * Return the Microsoft UNC transcription of the address
     * @memberof Address6
     * @instance
     * @returns {String} the Microsoft UNC transcription of the address
     */
    microsoftTranscription() {
      return (0, sprintf_js_1.sprintf)(
        '%s.ipv6-literal.net',
        this.correctForm().replace(/:/g, '-')
      )
    }
    /**
     * Return the first n bits of the address, defaulting to the subnet mask
     * @memberof Address6
     * @instance
     * @param {number} [mask=subnet] - the number of bits to mask
     * @returns {String} the first n bits of the address as a string
     */
    mask(mask = this.subnetMask) {
      return this.getBitsBase2(0, mask)
    }
    /**
     * Return the number of possible subnets of a given size in the address
     * @memberof Address6
     * @instance
     * @param {number} [size=128] - the subnet size
     * @returns {String}
     */
    // TODO: probably useful to have a numeric version of this too
    possibleSubnets(subnetSize = 128) {
      const availableBits = constants6.BITS - this.subnetMask
      const subnetBits = Math.abs(subnetSize - constants6.BITS)
      const subnetPowers = availableBits - subnetBits
      if (subnetPowers < 0) {
        return '0'
      }
      return addCommas(
        new jsbn_1.BigInteger('2', 10).pow(subnetPowers).toString(10)
      )
    }
    /**
     * Helper function getting start address.
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */
    _startAddress() {
      return new jsbn_1.BigInteger(
        this.mask() + '0'.repeat(constants6.BITS - this.subnetMask),
        2
      )
    }
    /**
     * The first address in the range given by this address' subnet
     * Often referred to as the Network Address.
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    startAddress() {
      return Address6.fromBigInteger(this._startAddress())
    }
    /**
     * The first host address in the range given by this address's subnet ie
     * the first address after the Network Address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    startAddressExclusive() {
      const adjust = new jsbn_1.BigInteger('1')
      return Address6.fromBigInteger(this._startAddress().add(adjust))
    }
    /**
     * Helper function getting end address.
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */
    _endAddress() {
      return new jsbn_1.BigInteger(
        this.mask() + '1'.repeat(constants6.BITS - this.subnetMask),
        2
      )
    }
    /**
     * The last address in the range given by this address' subnet
     * Often referred to as the Broadcast
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    endAddress() {
      return Address6.fromBigInteger(this._endAddress())
    }
    /**
     * The last host address in the range given by this address's subnet ie
     * the last address prior to the Broadcast Address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    endAddressExclusive() {
      const adjust = new jsbn_1.BigInteger('1')
      return Address6.fromBigInteger(this._endAddress().subtract(adjust))
    }
    /**
     * Return the scope of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getScope() {
      let scope = constants6.SCOPES[this.getBits(12, 16).intValue()]
      if (this.getType() === 'Global unicast' && scope !== 'Link local') {
        scope = 'Global'
      }
      return scope || 'Unknown'
    }
    /**
     * Return the type of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getType() {
      for (const subnet of Object.keys(constants6.TYPES)) {
        if (this.isInSubnet(new Address6(subnet))) {
          return constants6.TYPES[subnet]
        }
      }
      return 'Global unicast'
    }
    /**
     * Return the bits in the given range as a BigInteger
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */
    getBits(start, end) {
      return new jsbn_1.BigInteger(this.getBitsBase2(start, end), 2)
    }
    /**
     * Return the bits in the given range as a base-2 string
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getBitsBase2(start, end) {
      return this.binaryZeroPad().slice(start, end)
    }
    /**
     * Return the bits in the given range as a base-16 string
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getBitsBase16(start, end) {
      const length = end - start
      if (length % 4 !== 0) {
        throw new Error('Length of bits to retrieve must be divisible by four')
      }
      return this.getBits(start, end)
        .toString(16)
        .padStart(length / 4, '0')
    }
    /**
     * Return the bits that are set past the subnet mask length
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getBitsPastSubnet() {
      return this.getBitsBase2(this.subnetMask, constants6.BITS)
    }
    /**
     * Return the reversed ip6.arpa form of the address
     * @memberof Address6
     * @param {Object} options
     * @param {boolean} options.omitSuffix - omit the "ip6.arpa" suffix
     * @instance
     * @returns {String}
     */
    reverseForm(options) {
      if (!options) {
        options = {}
      }
      const characters = Math.floor(this.subnetMask / 4)
      const reversed = this.canonicalForm()
        .replace(/:/g, '')
        .split('')
        .slice(0, characters)
        .reverse()
        .join('.')
      if (characters > 0) {
        if (options.omitSuffix) {
          return reversed
        }
        return (0, sprintf_js_1.sprintf)('%s.ip6.arpa.', reversed)
      }
      if (options.omitSuffix) {
        return ''
      }
      return 'ip6.arpa.'
    }
    /**
     * Return the correct form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    correctForm() {
      let i
      let groups = []
      let zeroCounter = 0
      const zeroes = []
      for (i = 0; i < this.parsedAddress.length; i++) {
        const value = parseInt(this.parsedAddress[i], 16)
        if (value === 0) {
          zeroCounter++
        }
        if (value !== 0 && zeroCounter > 0) {
          if (zeroCounter > 1) {
            zeroes.push([i - zeroCounter, i - 1])
          }
          zeroCounter = 0
        }
      }
      // Do we end with a string of zeroes?
      if (zeroCounter > 1) {
        zeroes.push([
          this.parsedAddress.length - zeroCounter,
          this.parsedAddress.length - 1
        ])
      }
      const zeroLengths = zeroes.map(n => n[1] - n[0] + 1)
      if (zeroes.length > 0) {
        const index = zeroLengths.indexOf(Math.max(...zeroLengths))
        groups = compact(this.parsedAddress, zeroes[index])
      } else {
        groups = this.parsedAddress
      }
      for (i = 0; i < groups.length; i++) {
        if (groups[i] !== 'compact') {
          groups[i] = parseInt(groups[i], 16).toString(16)
        }
      }
      let correct = groups.join(':')
      correct = correct.replace(/^compact$/, '::')
      correct = correct.replace(/^compact|compact$/, ':')
      correct = correct.replace(/compact/, '')
      return correct
    }
    /**
     * Return a zero-padded base-2 string representation of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     * @example
     * var address = new Address6('2001:4860:4001:803::1011');
     * address.binaryZeroPad();
     * // '0010000000000001010010000110000001000000000000010000100000000011
     * //  0000000000000000000000000000000000000000000000000001000000010001'
     */
    binaryZeroPad() {
      return this.bigInteger().toString(2).padStart(constants6.BITS, '0')
    }
    // TODO: Improve the semantics of this helper function
    parse4in6(address) {
      const groups = address.split(':')
      const lastGroup = groups.slice(-1)[0]
      const address4 = lastGroup.match(constants4.RE_ADDRESS)
      if (address4) {
        this.parsedAddress4 = address4[0]
        this.address4 = new ipv4_1.Address4(this.parsedAddress4)
        for (let i = 0; i < this.address4.groups; i++) {
          if (/^0[0-9]+/.test(this.address4.parsedAddress[i])) {
            throw new address_error_1.AddressError(
              "IPv4 addresses can't have leading zeroes.",
              address.replace(
                constants4.RE_ADDRESS,
                this.address4.parsedAddress.map(spanLeadingZeroes4).join('.')
              )
            )
          }
        }
        this.v4 = true
        groups[groups.length - 1] = this.address4.toGroup6()
        address = groups.join(':')
      }
      return address
    }
    // TODO: Make private?
    parse(address) {
      address = this.parse4in6(address)
      const badCharacters = address.match(constants6.RE_BAD_CHARACTERS)
      if (badCharacters) {
        throw new address_error_1.AddressError(
          (0, sprintf_js_1.sprintf)(
            'Bad character%s detected in address: %s',
            badCharacters.length > 1 ? 's' : '',
            badCharacters.join('')
          ),
          address.replace(
            constants6.RE_BAD_CHARACTERS,
            '<span class="parse-error">$1</span>'
          )
        )
      }
      const badAddress = address.match(constants6.RE_BAD_ADDRESS)
      if (badAddress) {
        throw new address_error_1.AddressError(
          (0, sprintf_js_1.sprintf)(
            'Address failed regex: %s',
            badAddress.join('')
          ),
          address.replace(
            constants6.RE_BAD_ADDRESS,
            '<span class="parse-error">$1</span>'
          )
        )
      }
      let groups = []
      const halves = address.split('::')
      if (halves.length === 2) {
        let first = halves[0].split(':')
        let last = halves[1].split(':')
        if (first.length === 1 && first[0] === '') {
          first = []
        }
        if (last.length === 1 && last[0] === '') {
          last = []
        }
        const remaining = this.groups - (first.length + last.length)
        if (!remaining) {
          throw new address_error_1.AddressError('Error parsing groups')
        }
        this.elidedGroups = remaining
        this.elisionBegin = first.length
        this.elisionEnd = first.length + this.elidedGroups
        groups = groups.concat(first)
        for (let i = 0; i < remaining; i++) {
          groups.push('0')
        }
        groups = groups.concat(last)
      } else if (halves.length === 1) {
        groups = address.split(':')
        this.elidedGroups = 0
      } else {
        throw new address_error_1.AddressError('Too many :: groups found')
      }
      groups = groups.map(group =>
        (0, sprintf_js_1.sprintf)('%x', parseInt(group, 16))
      )
      if (groups.length !== this.groups) {
        throw new address_error_1.AddressError(
          'Incorrect number of groups found'
        )
      }
      return groups
    }
    /**
     * Return the canonical form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    canonicalForm() {
      return this.parsedAddress.map(paddedHex).join(':')
    }
    /**
     * Return the decimal form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    decimal() {
      return this.parsedAddress
        .map(n => (0, sprintf_js_1.sprintf)('%05d', parseInt(n, 16)))
        .join(':')
    }
    /**
     * Return the address as a BigInteger
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */
    bigInteger() {
      return new jsbn_1.BigInteger(
        this.parsedAddress.map(paddedHex).join(''),
        16
      )
    }
    /**
     * Return the last two groups of this address as an IPv4 address string
     * @memberof Address6
     * @instance
     * @returns {Address4}
     * @example
     * var address = new Address6('2001:4860:4001::1825:bf11');
     * address.to4().correctForm(); // '24.37.191.17'
     */
    to4() {
      const binary = this.binaryZeroPad().split('')
      return ipv4_1.Address4.fromHex(
        new jsbn_1.BigInteger(binary.slice(96, 128).join(''), 2).toString(16)
      )
    }
    /**
     * Return the v4-in-v6 form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    to4in6() {
      const address4 = this.to4()
      const address6 = new Address6(this.parsedAddress.slice(0, 6).join(':'), 6)
      const correct = address6.correctForm()
      let infix = ''
      if (!/:$/.test(correct)) {
        infix = ':'
      }
      return correct + infix + address4.address
    }
    /**
     * Return an object containing the Teredo properties of the address
     * @memberof Address6
     * @instance
     * @returns {Object}
     */
    inspectTeredo() {
      /*
      - Bits 0 to 31 are set to the Teredo prefix (normally 2001:0000::/32).
      - Bits 32 to 63 embed the primary IPv4 address of the Teredo server that
        is used.
      - Bits 64 to 79 can be used to define some flags. Currently only the
        higher order bit is used; it is set to 1 if the Teredo client is
        located behind a cone NAT, 0 otherwise. For Microsoft's Windows Vista
        and Windows Server 2008 implementations, more bits are used. In those
        implementations, the format for these 16 bits is "CRAAAAUG AAAAAAAA",
        where "C" remains the "Cone" flag. The "R" bit is reserved for future
        use. The "U" bit is for the Universal/Local flag (set to 0). The "G" bit
        is Individual/Group flag (set to 0). The A bits are set to a 12-bit
        randomly generated number chosen by the Teredo client to introduce
        additional protection for the Teredo node against IPv6-based scanning
        attacks.
      - Bits 80 to 95 contains the obfuscated UDP port number. This is the
        port number that is mapped by the NAT to the Teredo client with all
        bits inverted.
      - Bits 96 to 127 contains the obfuscated IPv4 address. This is the
        public IPv4 address of the NAT with all bits inverted.
      */
      const prefix = this.getBitsBase16(0, 32)
      const udpPort = this.getBits(80, 96)
        .xor(new jsbn_1.BigInteger('ffff', 16))
        .toString()
      const server4 = ipv4_1.Address4.fromHex(this.getBitsBase16(32, 64))
      const client4 = ipv4_1.Address4.fromHex(
        this.getBits(96, 128)
          .xor(new jsbn_1.BigInteger('ffffffff', 16))
          .toString(16)
      )
      const flags = this.getBits(64, 80)
      const flagsBase2 = this.getBitsBase2(64, 80)
      const coneNat = flags.testBit(15)
      const reserved = flags.testBit(14)
      const groupIndividual = flags.testBit(8)
      const universalLocal = flags.testBit(9)
      const nonce = new jsbn_1.BigInteger(
        flagsBase2.slice(2, 6) + flagsBase2.slice(8, 16),
        2
      ).toString(10)
      return {
        prefix: (0, sprintf_js_1.sprintf)(
          '%s:%s',
          prefix.slice(0, 4),
          prefix.slice(4, 8)
        ),
        server4: server4.address,
        client4: client4.address,
        flags: flagsBase2,
        coneNat,
        microsoft: {
          reserved,
          universalLocal,
          groupIndividual,
          nonce
        },
        udpPort
      }
    }
    /**
     * Return an object containing the 6to4 properties of the address
     * @memberof Address6
     * @instance
     * @returns {Object}
     */
    inspect6to4() {
      /*
      - Bits 0 to 15 are set to the 6to4 prefix (2002::/16).
      - Bits 16 to 48 embed the IPv4 address of the 6to4 gateway that is used.
      */
      const prefix = this.getBitsBase16(0, 16)
      const gateway = ipv4_1.Address4.fromHex(this.getBitsBase16(16, 48))
      return {
        prefix: (0, sprintf_js_1.sprintf)('%s', prefix.slice(0, 4)),
        gateway: gateway.address
      }
    }
    /**
     * Return a v6 6to4 address from a v6 v4inv6 address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    to6to4() {
      if (!this.is4()) {
        return null
      }
      const addr6to4 = [
        '2002',
        this.getBitsBase16(96, 112),
        this.getBitsBase16(112, 128),
        '',
        '/16'
      ].join(':')
      return new Address6(addr6to4)
    }
    /**
     * Return a byte array
     * @memberof Address6
     * @instance
     * @returns {Array}
     */
    toByteArray() {
      const byteArray = this.bigInteger().toByteArray()
      // work around issue where `toByteArray` returns a leading 0 element
      if (byteArray.length === 17 && byteArray[0] === 0) {
        return byteArray.slice(1)
      }
      return byteArray
    }
    /**
     * Return an unsigned byte array
     * @memberof Address6
     * @instance
     * @returns {Array}
     */
    toUnsignedByteArray() {
      return this.toByteArray().map(unsignByte)
    }
    /**
     * Convert a byte array to an Address6 object
     * @memberof Address6
     * @static
     * @returns {Address6}
     */
    static fromByteArray(bytes) {
      return this.fromUnsignedByteArray(bytes.map(unsignByte))
    }
    /**
     * Convert an unsigned byte array to an Address6 object
     * @memberof Address6
     * @static
     * @returns {Address6}
     */
    static fromUnsignedByteArray(bytes) {
      const BYTE_MAX = new jsbn_1.BigInteger('256', 10)
      let result = new jsbn_1.BigInteger('0', 10)
      let multiplier = new jsbn_1.BigInteger('1', 10)
      for (let i = bytes.length - 1; i >= 0; i--) {
        result = result.add(
          multiplier.multiply(new jsbn_1.BigInteger(bytes[i].toString(10), 10))
        )
        multiplier = multiplier.multiply(BYTE_MAX)
      }
      return Address6.fromBigInteger(result)
    }
    /**
     * Returns true if the address is in the canonical form, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isCanonical() {
      return this.addressMinusSuffix === this.canonicalForm()
    }
    /**
     * Returns true if the address is a link local address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isLinkLocal() {
      // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'
      if (
        this.getBitsBase2(0, 64) ===
        '1111111010000000000000000000000000000000000000000000000000000000'
      ) {
        return true
      }
      return false
    }
    /**
     * Returns true if the address is a multicast address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isMulticast() {
      return this.getType() === 'Multicast'
    }
    /**
     * Returns true if the address is a v4-in-v6 address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    is4() {
      return this.v4
    }
    /**
     * Returns true if the address is a Teredo address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isTeredo() {
      return this.isInSubnet(new Address6('2001::/32'))
    }
    /**
     * Returns true if the address is a 6to4 address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    is6to4() {
      return this.isInSubnet(new Address6('2002::/16'))
    }
    /**
     * Returns true if the address is a loopback address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isLoopback() {
      return this.getType() === 'Loopback'
    }
    // #endregion
    // #region HTML
    /**
     * @returns {String} the address in link form with a default port of 80
     */
    href(optionalPort) {
      if (optionalPort === undefined) {
        optionalPort = ''
      } else {
        optionalPort = (0, sprintf_js_1.sprintf)(':%s', optionalPort)
      }
      return (0, sprintf_js_1.sprintf)(
        'http://[%s]%s/',
        this.correctForm(),
        optionalPort
      )
    }
    /**
     * @returns {String} a link suitable for conveying the address via a URL hash
     */
    link(options) {
      if (!options) {
        options = {}
      }
      if (options.className === undefined) {
        options.className = ''
      }
      if (options.prefix === undefined) {
        options.prefix = '/#address='
      }
      if (options.v4 === undefined) {
        options.v4 = false
      }
      let formFunction = this.correctForm
      if (options.v4) {
        formFunction = this.to4in6
      }
      if (options.className) {
        return (0, sprintf_js_1.sprintf)(
          '<a href="%1$s%2$s" class="%3$s">%2$s</a>',
          options.prefix,
          formFunction.call(this),
          options.className
        )
      }
      return (0, sprintf_js_1.sprintf)(
        '<a href="%1$s%2$s">%2$s</a>',
        options.prefix,
        formFunction.call(this)
      )
    }
    /**
     * Groups an address
     * @returns {String}
     */
    group() {
      if (this.elidedGroups === 0) {
        // The simple case
        return helpers.simpleGroup(this.address).join(':')
      }
      assert(typeof this.elidedGroups === 'number')
      assert(typeof this.elisionBegin === 'number')
      // The elided case
      const output = []
      const [left, right] = this.address.split('::')
      if (left.length) {
        output.push(...helpers.simpleGroup(left))
      } else {
        output.push('')
      }
      const classes = ['hover-group']
      for (
        let i = this.elisionBegin;
        i < this.elisionBegin + this.elidedGroups;
        i++
      ) {
        classes.push((0, sprintf_js_1.sprintf)('group-%d', i))
      }
      output.push(
        (0, sprintf_js_1.sprintf)('<span class="%s"></span>', classes.join(' '))
      )
      if (right.length) {
        output.push(...helpers.simpleGroup(right, this.elisionEnd))
      } else {
        output.push('')
      }
      if (this.is4()) {
        assert(this.address4 instanceof ipv4_1.Address4)
        output.pop()
        output.push(this.address4.groupForV6())
      }
      return output.join(':')
    }
    // #endregion
    // #region Regular expressions
    /**
     * Generate a regular expression string that can be used to find or validate
     * all variations of this address
     * @memberof Address6
     * @instance
     * @param {boolean} substringSearch
     * @returns {string}
     */
    regularExpressionString(substringSearch = false) {
      let output = []
      // TODO: revisit why this is necessary
      const address6 = new Address6(this.correctForm())
      if (address6.elidedGroups === 0) {
        // The simple case
        output.push(
          (0, regular_expressions_1.simpleRegularExpression)(
            address6.parsedAddress
          )
        )
      } else if (address6.elidedGroups === constants6.GROUPS) {
        // A completely elided address
        output.push(
          (0, regular_expressions_1.possibleElisions)(constants6.GROUPS)
        )
      } else {
        // A partially elided address
        const halves = address6.address.split('::')
        if (halves[0].length) {
          output.push(
            (0, regular_expressions_1.simpleRegularExpression)(
              halves[0].split(':')
            )
          )
        }
        assert(typeof address6.elidedGroups === 'number')
        output.push(
          (0, regular_expressions_1.possibleElisions)(
            address6.elidedGroups,
            halves[0].length !== 0,
            halves[1].length !== 0
          )
        )
        if (halves[1].length) {
          output.push(
            (0, regular_expressions_1.simpleRegularExpression)(
              halves[1].split(':')
            )
          )
        }
        output = [output.join(':')]
      }
      if (!substringSearch) {
        output = [
          '(?=^|',
          regular_expressions_1.ADDRESS_BOUNDARY,
          '|[^\\w\\:])(',
          ...output,
          ')(?=[^\\w\\:]|',
          regular_expressions_1.ADDRESS_BOUNDARY,
          '|$)'
        ]
      }
      return output.join('')
    }
    /**
     * Generate a regular expression that can be used to find or validate all
     * variations of this address.
     * @memberof Address6
     * @instance
     * @param {boolean} substringSearch
     * @returns {RegExp}
     */
    regularExpression(substringSearch = false) {
      return new RegExp(this.regularExpressionString(substringSearch), 'i')
    }
  }
  ipv6.Address6 = Address6
  return ipv6
}

let hasRequiredIpAddress
function requireIpAddress() {
  if (hasRequiredIpAddress) {
    return ipAddress
  }
  hasRequiredIpAddress = 1
  ;(function (exports) {
    const __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            let desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            o[k2] = m[k]
          })
    const __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', {
              enumerable: true,
              value: v
            })
          }
        : function (o, v) {
            o['default'] = v
          })
    const __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) {
          return mod
        }
        const result = {}
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        }
        __setModuleDefault(result, mod)
        return result
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.v6 =
      exports.AddressError =
      exports.Address6 =
      exports.Address4 =
        void 0
    const ipv4_1 = requireIpv4()
    Object.defineProperty(exports, 'Address4', {
      enumerable: true,
      get: function () {
        return ipv4_1.Address4
      }
    })
    const ipv6_1 = requireIpv6()
    Object.defineProperty(exports, 'Address6', {
      enumerable: true,
      get: function () {
        return ipv6_1.Address6
      }
    })
    const address_error_1 = requireAddressError()
    Object.defineProperty(exports, 'AddressError', {
      enumerable: true,
      get: function () {
        return address_error_1.AddressError
      }
    })
    const helpers = __importStar(requireHelpers$1())
    exports.v6 = {
      helpers
    }
  })(ipAddress)
  return ipAddress
}

let hasRequiredHelpers
function requireHelpers() {
  if (hasRequiredHelpers) {
    return helpers$1
  }
  hasRequiredHelpers = 1
  Object.defineProperty(helpers$1, '__esModule', {
    value: true
  })
  helpers$1.ipToBuffer =
    helpers$1.int32ToIpv4 =
    helpers$1.ipv4ToInt32 =
    helpers$1.validateSocksClientChainOptions =
    helpers$1.validateSocksClientOptions =
      void 0
  const util_1 = requireUtil$1()
  const constants_1 = requireConstants$2()
  const stream = require$$1$8
  const ip_address_1 = requireIpAddress()
  const net = require$$0$k
  /**
   * Validates the provided SocksClientOptions
   * @param options { SocksClientOptions }
   * @param acceptedCommands { string[] } A list of accepted SocksProxy commands.
   */
  function validateSocksClientOptions(
    options,
    acceptedCommands = ['connect', 'bind', 'associate']
  ) {
    // Check SOCKs command option.
    if (!constants_1.SocksCommand[options.command]) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksCommand,
        options
      )
    }
    // Check SocksCommand for acceptable command.
    if (acceptedCommands.indexOf(options.command) === -1) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksCommandForOperation,
        options
      )
    }
    // Check destination
    if (!isValidSocksRemoteHost(options.destination)) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksClientOptionsDestination,
        options
      )
    }
    // Check SOCKS proxy to use
    if (!isValidSocksProxy(options.proxy)) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksClientOptionsProxy,
        options
      )
    }
    // Validate custom auth (if set)
    validateCustomProxyAuth(options.proxy, options)
    // Check timeout
    if (options.timeout && !isValidTimeoutValue(options.timeout)) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksClientOptionsTimeout,
        options
      )
    }
    // Check existing_socket (if provided)
    if (
      options.existing_socket &&
      !(options.existing_socket instanceof stream.Duplex)
    ) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksClientOptionsExistingSocket,
        options
      )
    }
  }
  helpers$1.validateSocksClientOptions = validateSocksClientOptions
  /**
   * Validates the SocksClientChainOptions
   * @param options { SocksClientChainOptions }
   */
  function validateSocksClientChainOptions(options) {
    // Only connect is supported when chaining.
    if (options.command !== 'connect') {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksCommandChain,
        options
      )
    }
    // Check destination
    if (!isValidSocksRemoteHost(options.destination)) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksClientOptionsDestination,
        options
      )
    }
    // Validate proxies (length)
    if (
      !(
        options.proxies &&
        Array.isArray(options.proxies) &&
        options.proxies.length >= 2
      )
    ) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksClientOptionsProxiesLength,
        options
      )
    }
    // Validate proxies
    options.proxies.forEach(proxy => {
      if (!isValidSocksProxy(proxy)) {
        throw new util_1.SocksClientError(
          constants_1.ERRORS.InvalidSocksClientOptionsProxy,
          options
        )
      }
      // Validate custom auth (if set)
      validateCustomProxyAuth(proxy, options)
    })
    // Check timeout
    if (options.timeout && !isValidTimeoutValue(options.timeout)) {
      throw new util_1.SocksClientError(
        constants_1.ERRORS.InvalidSocksClientOptionsTimeout,
        options
      )
    }
  }
  helpers$1.validateSocksClientChainOptions = validateSocksClientChainOptions
  function validateCustomProxyAuth(proxy, options) {
    if (proxy.custom_auth_method !== undefined) {
      // Invalid auth method range
      if (
        proxy.custom_auth_method < constants_1.SOCKS5_CUSTOM_AUTH_START ||
        proxy.custom_auth_method > constants_1.SOCKS5_CUSTOM_AUTH_END
      ) {
        throw new util_1.SocksClientError(
          constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthRange,
          options
        )
      }
      // Missing custom_auth_request_handler
      if (
        proxy.custom_auth_request_handler === undefined ||
        typeof proxy.custom_auth_request_handler !== 'function'
      ) {
        throw new util_1.SocksClientError(
          constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,
          options
        )
      }
      // Missing custom_auth_response_size
      if (proxy.custom_auth_response_size === undefined) {
        throw new util_1.SocksClientError(
          constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,
          options
        )
      }
      // Missing/invalid custom_auth_response_handler
      if (
        proxy.custom_auth_response_handler === undefined ||
        typeof proxy.custom_auth_response_handler !== 'function'
      ) {
        throw new util_1.SocksClientError(
          constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,
          options
        )
      }
    }
  }
  /**
   * Validates a SocksRemoteHost
   * @param remoteHost { SocksRemoteHost }
   */
  function isValidSocksRemoteHost(remoteHost) {
    return (
      remoteHost &&
      typeof remoteHost.host === 'string' &&
      Buffer.byteLength(remoteHost.host) < 256 &&
      typeof remoteHost.port === 'number' &&
      remoteHost.port >= 0 &&
      remoteHost.port <= 65535
    )
  }
  /**
   * Validates a SocksProxy
   * @param proxy { SocksProxy }
   */
  function isValidSocksProxy(proxy) {
    return (
      proxy &&
      (typeof proxy.host === 'string' || typeof proxy.ipaddress === 'string') &&
      typeof proxy.port === 'number' &&
      proxy.port >= 0 &&
      proxy.port <= 65535 &&
      (proxy.type === 4 || proxy.type === 5)
    )
  }
  /**
   * Validates a timeout value.
   * @param value { Number }
   */
  function isValidTimeoutValue(value) {
    return typeof value === 'number' && value > 0
  }
  function ipv4ToInt32(ip) {
    const address = new ip_address_1.Address4(ip)
    // Convert the IPv4 address parts to an integer
    return address.toArray().reduce((acc, part) => (acc << 8) + part, 0) >>> 0
  }
  helpers$1.ipv4ToInt32 = ipv4ToInt32
  function int32ToIpv4(int32) {
    // Extract each byte (octet) from the 32-bit integer
    const octet1 = (int32 >>> 24) & 0xff
    const octet2 = (int32 >>> 16) & 0xff
    const octet3 = (int32 >>> 8) & 0xff
    const octet4 = int32 & 0xff
    // Combine the octets into a string in IPv4 format
    return [octet1, octet2, octet3, octet4].join('.')
  }
  helpers$1.int32ToIpv4 = int32ToIpv4
  function ipToBuffer(ip) {
    if (net.isIPv4(ip)) {
      // Handle IPv4 addresses
      const address = new ip_address_1.Address4(ip)
      return Buffer.from(address.toArray())
    } else if (net.isIPv6(ip)) {
      // Handle IPv6 addresses
      const address = new ip_address_1.Address6(ip)
      return Buffer.from(
        address
          .canonicalForm()
          .split(':')
          .map(segment => segment.padStart(4, '0'))
          .join(''),
        'hex'
      )
    } else {
      throw new Error('Invalid IP address format')
    }
  }
  helpers$1.ipToBuffer = ipToBuffer
  return helpers$1
}

const receivebuffer = {}

let hasRequiredReceivebuffer
function requireReceivebuffer() {
  if (hasRequiredReceivebuffer) {
    return receivebuffer
  }
  hasRequiredReceivebuffer = 1
  Object.defineProperty(receivebuffer, '__esModule', {
    value: true
  })
  receivebuffer.ReceiveBuffer = void 0
  class ReceiveBuffer {
    constructor(size = 4096) {
      this.buffer = Buffer.allocUnsafe(size)
      this.offset = 0
      this.originalSize = size
    }
    get length() {
      return this.offset
    }
    append(data) {
      if (!Buffer.isBuffer(data)) {
        throw new Error(
          'Attempted to append a non-buffer instance to ReceiveBuffer.'
        )
      }
      if (this.offset + data.length >= this.buffer.length) {
        const tmp = this.buffer
        this.buffer = Buffer.allocUnsafe(
          Math.max(
            this.buffer.length + this.originalSize,
            this.buffer.length + data.length
          )
        )
        tmp.copy(this.buffer)
      }
      data.copy(this.buffer, this.offset)
      return (this.offset += data.length)
    }
    peek(length) {
      if (length > this.offset) {
        throw new Error(
          'Attempted to read beyond the bounds of the managed internal data.'
        )
      }
      return this.buffer.slice(0, length)
    }
    get(length) {
      if (length > this.offset) {
        throw new Error(
          'Attempted to read beyond the bounds of the managed internal data.'
        )
      }
      const value = Buffer.allocUnsafe(length)
      this.buffer.slice(0, length).copy(value)
      this.buffer.copyWithin(0, length, length + this.offset - length)
      this.offset -= length
      return value
    }
  }
  receivebuffer.ReceiveBuffer = ReceiveBuffer
  return receivebuffer
}

let hasRequiredSocksclient
function requireSocksclient() {
  if (hasRequiredSocksclient) {
    return socksclient
  }
  hasRequiredSocksclient = 1
  ;(function (exports) {
    const __awaiter =
      (this && this.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value)
              })
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value))
            } catch (e) {
              reject(e)
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value))
            } catch (e) {
              reject(e)
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected)
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next())
        })
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.SocksClientError = exports.SocksClient = void 0
    const events_1 = require$$0$c
    const net = require$$0$k
    const smart_buffer_1 = requireSmartbuffer()
    const constants_1 = requireConstants$2()
    const helpers_1 = requireHelpers()
    const receivebuffer_1 = requireReceivebuffer()
    const util_1 = requireUtil$1()
    Object.defineProperty(exports, 'SocksClientError', {
      enumerable: true,
      get: function () {
        return util_1.SocksClientError
      }
    })
    const ip_address_1 = requireIpAddress()
    class SocksClient extends events_1.EventEmitter {
      constructor(options) {
        super()
        this.options = Object.assign({}, options)
        // Validate SocksClientOptions
        ;(0, helpers_1.validateSocksClientOptions)(options)
        // Default state
        this.setState(constants_1.SocksClientState.Created)
      }
      /**
       * Creates a new SOCKS connection.
       *
       * Note: Supports callbacks and promises. Only supports the connect command.
       * @param options { SocksClientOptions } Options.
       * @param callback { Function } An optional callback function.
       * @returns { Promise }
       */
      static createConnection(options, callback) {
        return new Promise((resolve, reject) => {
          // Validate SocksClientOptions
          try {
            ;(0, helpers_1.validateSocksClientOptions)(options, ['connect'])
          } catch (err) {
            if (typeof callback === 'function') {
              callback(err)
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              return resolve(err) // Resolves pending promise (prevents memory leaks).
            } else {
              return reject(err)
            }
          }
          const client = new SocksClient(options)
          client.connect(options.existing_socket)
          client.once('established', info => {
            client.removeAllListeners()
            if (typeof callback === 'function') {
              callback(null, info)
              resolve(info) // Resolves pending promise (prevents memory leaks).
            } else {
              resolve(info)
            }
          })
          // Error occurred, failed to establish connection.
          client.once('error', err => {
            client.removeAllListeners()
            if (typeof callback === 'function') {
              callback(err)
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              resolve(err) // Resolves pending promise (prevents memory leaks).
            } else {
              reject(err)
            }
          })
        })
      }
      /**
       * Creates a new SOCKS connection chain to a destination host through 2 or more SOCKS proxies.
       *
       * Note: Supports callbacks and promises. Only supports the connect method.
       * Note: Implemented via createConnection() factory function.
       * @param options { SocksClientChainOptions } Options
       * @param callback { Function } An optional callback function.
       * @returns { Promise }
       */
      static createConnectionChain(options, callback) {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) =>
          __awaiter(this, void 0, void 0, function* () {
            // Validate SocksClientChainOptions
            try {
              ;(0, helpers_1.validateSocksClientChainOptions)(options)
            } catch (err) {
              if (typeof callback === 'function') {
                callback(err)
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return resolve(err) // Resolves pending promise (prevents memory leaks).
              } else {
                return reject(err)
              }
            }
            // Shuffle proxies
            if (options.randomizeChain) {
              ;(0, util_1.shuffleArray)(options.proxies)
            }
            try {
              let sock
              for (let i = 0; i < options.proxies.length; i++) {
                const nextProxy = options.proxies[i]
                // If we've reached the last proxy in the chain, the destination is the actual destination, otherwise it's the next proxy.
                const nextDestination =
                  i === options.proxies.length - 1
                    ? options.destination
                    : {
                        host:
                          options.proxies[i + 1].host ||
                          options.proxies[i + 1].ipaddress,
                        port: options.proxies[i + 1].port
                      }
                // Creates the next connection in the chain.
                const result = yield SocksClient.createConnection({
                  command: 'connect',
                  proxy: nextProxy,
                  destination: nextDestination,
                  existing_socket: sock
                })
                // If sock is undefined, assign it here.
                sock = sock || result.socket
              }
              if (typeof callback === 'function') {
                callback(null, {
                  socket: sock
                })
                resolve({
                  socket: sock
                }) // Resolves pending promise (prevents memory leaks).
              } else {
                resolve({
                  socket: sock
                })
              }
            } catch (err) {
              if (typeof callback === 'function') {
                callback(err)
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                resolve(err) // Resolves pending promise (prevents memory leaks).
              } else {
                reject(err)
              }
            }
          })
        )
      }
      /**
       * Creates a SOCKS UDP Frame.
       * @param options
       */
      static createUDPFrame(options) {
        const buff = new smart_buffer_1.SmartBuffer()
        buff.writeUInt16BE(0)
        buff.writeUInt8(options.frameNumber || 0)
        // IPv4/IPv6/Hostname
        if (net.isIPv4(options.remoteHost.host)) {
          buff.writeUInt8(constants_1.Socks5HostType.IPv4)
          buff.writeUInt32BE(
            (0, helpers_1.ipv4ToInt32)(options.remoteHost.host)
          )
        } else if (net.isIPv6(options.remoteHost.host)) {
          buff.writeUInt8(constants_1.Socks5HostType.IPv6)
          buff.writeBuffer((0, helpers_1.ipToBuffer)(options.remoteHost.host))
        } else {
          buff.writeUInt8(constants_1.Socks5HostType.Hostname)
          buff.writeUInt8(Buffer.byteLength(options.remoteHost.host))
          buff.writeString(options.remoteHost.host)
        }
        // Port
        buff.writeUInt16BE(options.remoteHost.port)
        // Data
        buff.writeBuffer(options.data)
        return buff.toBuffer()
      }
      /**
       * Parses a SOCKS UDP frame.
       * @param data
       */
      static parseUDPFrame(data) {
        const buff = smart_buffer_1.SmartBuffer.fromBuffer(data)
        buff.readOffset = 2
        const frameNumber = buff.readUInt8()
        const hostType = buff.readUInt8()
        let remoteHost
        if (hostType === constants_1.Socks5HostType.IPv4) {
          remoteHost = (0, helpers_1.int32ToIpv4)(buff.readUInt32BE())
        } else if (hostType === constants_1.Socks5HostType.IPv6) {
          remoteHost = ip_address_1.Address6.fromByteArray(
            Array.from(buff.readBuffer(16))
          ).canonicalForm()
        } else {
          remoteHost = buff.readString(buff.readUInt8())
        }
        const remotePort = buff.readUInt16BE()
        return {
          frameNumber,
          remoteHost: {
            host: remoteHost,
            port: remotePort
          },
          data: buff.readBuffer()
        }
      }
      /**
       * Internal state setter. If the SocksClient is in an error state, it cannot be changed to a non error state.
       */
      setState(newState) {
        if (this.state !== constants_1.SocksClientState.Error) {
          this.state = newState
        }
      }
      /**
       * Starts the connection establishment to the proxy and destination.
       * @param existingSocket Connected socket to use instead of creating a new one (internal use).
       */
      connect(existingSocket) {
        this.onDataReceived = data => this.onDataReceivedHandler(data)
        this.onClose = () => this.onCloseHandler()
        this.onError = err => this.onErrorHandler(err)
        this.onConnect = () => this.onConnectHandler()
        // Start timeout timer (defaults to 30 seconds)
        const timer = setTimeout(
          () => this.onEstablishedTimeout(),
          this.options.timeout || constants_1.DEFAULT_TIMEOUT
        )
        // check whether unref is available as it differs from browser to NodeJS (#33)
        if (timer.unref && typeof timer.unref === 'function') {
          timer.unref()
        }
        // If an existing socket is provided, use it to negotiate SOCKS handshake. Otherwise create a new Socket.
        if (existingSocket) {
          this.socket = existingSocket
        } else {
          this.socket = new net.Socket()
        }
        // Attach Socket error handlers.
        this.socket.once('close', this.onClose)
        this.socket.once('error', this.onError)
        this.socket.once('connect', this.onConnect)
        this.socket.on('data', this.onDataReceived)
        this.setState(constants_1.SocksClientState.Connecting)
        this.receiveBuffer = new receivebuffer_1.ReceiveBuffer()
        if (existingSocket) {
          this.socket.emit('connect')
        } else {
          this.socket.connect(this.getSocketOptions())
          if (
            this.options.set_tcp_nodelay !== undefined &&
            this.options.set_tcp_nodelay !== null
          ) {
            this.socket.setNoDelay(!!this.options.set_tcp_nodelay)
          }
        }
        // Listen for established event so we can re-emit any excess data received during handshakes.
        this.prependOnceListener('established', info => {
          setImmediate(() => {
            if (this.receiveBuffer.length > 0) {
              const excessData = this.receiveBuffer.get(
                this.receiveBuffer.length
              )
              info.socket.emit('data', excessData)
            }
            info.socket.resume()
          })
        })
      }
      // Socket options (defaults host/port to options.proxy.host/options.proxy.port)
      getSocketOptions() {
        return Object.assign(Object.assign({}, this.options.socket_options), {
          host: this.options.proxy.host || this.options.proxy.ipaddress,
          port: this.options.proxy.port
        })
      }
      /**
       * Handles internal Socks timeout callback.
       * Note: If the Socks client is not BoundWaitingForConnection or Established, the connection will be closed.
       */
      onEstablishedTimeout() {
        if (
          this.state !== constants_1.SocksClientState.Established &&
          this.state !== constants_1.SocksClientState.BoundWaitingForConnection
        ) {
          this.closeSocket(constants_1.ERRORS.ProxyConnectionTimedOut)
        }
      }
      /**
       * Handles Socket connect event.
       */
      onConnectHandler() {
        this.setState(constants_1.SocksClientState.Connected)
        // Send initial handshake.
        if (this.options.proxy.type === 4) {
          this.sendSocks4InitialHandshake()
        } else {
          this.sendSocks5InitialHandshake()
        }
        this.setState(constants_1.SocksClientState.SentInitialHandshake)
      }
      /**
       * Handles Socket data event.
       * @param data
       */
      onDataReceivedHandler(data) {
        /*
          All received data is appended to a ReceiveBuffer.
          This makes sure that all the data we need is received before we attempt to process it.
        */
        this.receiveBuffer.append(data)
        // Process data that we have.
        this.processData()
      }
      /**
       * Handles processing of the data we have received.
       */
      processData() {
        // If we have enough data to process the next step in the SOCKS handshake, proceed.
        while (
          this.state !== constants_1.SocksClientState.Established &&
          this.state !== constants_1.SocksClientState.Error &&
          this.receiveBuffer.length >= this.nextRequiredPacketBufferSize
        ) {
          // Sent initial handshake, waiting for response.
          if (
            this.state === constants_1.SocksClientState.SentInitialHandshake
          ) {
            if (this.options.proxy.type === 4) {
              // Socks v4 only has one handshake response.
              this.handleSocks4FinalHandshakeResponse()
            } else {
              // Socks v5 has two handshakes, handle initial one here.
              this.handleInitialSocks5HandshakeResponse()
            }
            // Sent auth request for Socks v5, waiting for response.
          } else if (
            this.state === constants_1.SocksClientState.SentAuthentication
          ) {
            this.handleInitialSocks5AuthenticationHandshakeResponse()
            // Sent final Socks v5 handshake, waiting for final response.
          } else if (
            this.state === constants_1.SocksClientState.SentFinalHandshake
          ) {
            this.handleSocks5FinalHandshakeResponse()
            // Socks BIND established. Waiting for remote connection via proxy.
          } else if (
            this.state ===
            constants_1.SocksClientState.BoundWaitingForConnection
          ) {
            if (this.options.proxy.type === 4) {
              this.handleSocks4IncomingConnectionResponse()
            } else {
              this.handleSocks5IncomingConnectionResponse()
            }
          } else {
            this.closeSocket(constants_1.ERRORS.InternalError)
            break
          }
        }
      }
      /**
       * Handles Socket close event.
       * @param had_error
       */
      onCloseHandler() {
        this.closeSocket(constants_1.ERRORS.SocketClosed)
      }
      /**
       * Handles Socket error event.
       * @param err
       */
      onErrorHandler(err) {
        this.closeSocket(err.message)
      }
      /**
       * Removes internal event listeners on the underlying Socket.
       */
      removeInternalSocketHandlers() {
        // Pauses data flow of the socket (this is internally resumed after 'established' is emitted)
        this.socket.pause()
        this.socket.removeListener('data', this.onDataReceived)
        this.socket.removeListener('close', this.onClose)
        this.socket.removeListener('error', this.onError)
        this.socket.removeListener('connect', this.onConnect)
      }
      /**
       * Closes and destroys the underlying Socket. Emits an error event.
       * @param err { String } An error string to include in error event.
       */
      closeSocket(err) {
        // Make sure only one 'error' event is fired for the lifetime of this SocksClient instance.
        if (this.state !== constants_1.SocksClientState.Error) {
          // Set internal state to Error.
          this.setState(constants_1.SocksClientState.Error)
          // Destroy Socket
          this.socket.destroy()
          // Remove internal listeners
          this.removeInternalSocketHandlers()
          // Fire 'error' event.
          this.emit('error', new util_1.SocksClientError(err, this.options))
        }
      }
      /**
       * Sends initial Socks v4 handshake request.
       */
      sendSocks4InitialHandshake() {
        const userId = this.options.proxy.userId || ''
        const buff = new smart_buffer_1.SmartBuffer()
        buff.writeUInt8(0x04)
        buff.writeUInt8(constants_1.SocksCommand[this.options.command])
        buff.writeUInt16BE(this.options.destination.port)
        // Socks 4 (IPv4)
        if (net.isIPv4(this.options.destination.host)) {
          buff.writeBuffer(
            (0, helpers_1.ipToBuffer)(this.options.destination.host)
          )
          buff.writeStringNT(userId)
          // Socks 4a (hostname)
        } else {
          buff.writeUInt8(0x00)
          buff.writeUInt8(0x00)
          buff.writeUInt8(0x00)
          buff.writeUInt8(0x01)
          buff.writeStringNT(userId)
          buff.writeStringNT(this.options.destination.host)
        }
        this.nextRequiredPacketBufferSize =
          constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks4Response
        this.socket.write(buff.toBuffer())
      }
      /**
       * Handles Socks v4 handshake response.
       * @param data
       */
      handleSocks4FinalHandshakeResponse() {
        const data = this.receiveBuffer.get(8)
        if (data[1] !== constants_1.Socks4Response.Granted) {
          this.closeSocket(
            `${constants_1.ERRORS.Socks4ProxyRejectedConnection} - (${constants_1.Socks4Response[data[1]]})`
          )
        } else {
          // Bind response
          if (
            constants_1.SocksCommand[this.options.command] ===
            constants_1.SocksCommand.bind
          ) {
            const buff = smart_buffer_1.SmartBuffer.fromBuffer(data)
            buff.readOffset = 2
            const remoteHost = {
              port: buff.readUInt16BE(),
              host: (0, helpers_1.int32ToIpv4)(buff.readUInt32BE())
            }
            // If host is 0.0.0.0, set to proxy host.
            if (remoteHost.host === '0.0.0.0') {
              remoteHost.host = this.options.proxy.ipaddress
            }
            this.setState(
              constants_1.SocksClientState.BoundWaitingForConnection
            )
            this.emit('bound', {
              remoteHost,
              socket: this.socket
            })
            // Connect response
          } else {
            this.setState(constants_1.SocksClientState.Established)
            this.removeInternalSocketHandlers()
            this.emit('established', {
              socket: this.socket
            })
          }
        }
      }
      /**
       * Handles Socks v4 incoming connection request (BIND)
       * @param data
       */
      handleSocks4IncomingConnectionResponse() {
        const data = this.receiveBuffer.get(8)
        if (data[1] !== constants_1.Socks4Response.Granted) {
          this.closeSocket(
            `${constants_1.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${constants_1.Socks4Response[data[1]]})`
          )
        } else {
          const buff = smart_buffer_1.SmartBuffer.fromBuffer(data)
          buff.readOffset = 2
          const remoteHost = {
            port: buff.readUInt16BE(),
            host: (0, helpers_1.int32ToIpv4)(buff.readUInt32BE())
          }
          this.setState(constants_1.SocksClientState.Established)
          this.removeInternalSocketHandlers()
          this.emit('established', {
            remoteHost,
            socket: this.socket
          })
        }
      }
      /**
       * Sends initial Socks v5 handshake request.
       */
      sendSocks5InitialHandshake() {
        const buff = new smart_buffer_1.SmartBuffer()
        // By default we always support no auth.
        const supportedAuthMethods = [constants_1.Socks5Auth.NoAuth]
        // We should only tell the proxy we support user/pass auth if auth info is actually provided.
        // Note: As of Tor v0.3.5.7+, if user/pass auth is an option from the client, by default it will always take priority.
        if (this.options.proxy.userId || this.options.proxy.password) {
          supportedAuthMethods.push(constants_1.Socks5Auth.UserPass)
        }
        // Custom auth method?
        if (this.options.proxy.custom_auth_method !== undefined) {
          supportedAuthMethods.push(this.options.proxy.custom_auth_method)
        }
        // Build handshake packet
        buff.writeUInt8(0x05)
        buff.writeUInt8(supportedAuthMethods.length)
        for (const authMethod of supportedAuthMethods) {
          buff.writeUInt8(authMethod)
        }
        this.nextRequiredPacketBufferSize =
          constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse
        this.socket.write(buff.toBuffer())
        this.setState(constants_1.SocksClientState.SentInitialHandshake)
      }
      /**
       * Handles initial Socks v5 handshake response.
       * @param data
       */
      handleInitialSocks5HandshakeResponse() {
        const data = this.receiveBuffer.get(2)
        if (data[0] !== 0x05) {
          this.closeSocket(
            constants_1.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion
          )
        } else if (data[1] === constants_1.SOCKS5_NO_ACCEPTABLE_AUTH) {
          this.closeSocket(
            constants_1.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType
          )
        } else {
          // If selected Socks v5 auth method is no auth, send final handshake request.
          if (data[1] === constants_1.Socks5Auth.NoAuth) {
            this.socks5ChosenAuthType = constants_1.Socks5Auth.NoAuth
            this.sendSocks5CommandRequest()
            // If selected Socks v5 auth method is user/password, send auth handshake.
          } else if (data[1] === constants_1.Socks5Auth.UserPass) {
            this.socks5ChosenAuthType = constants_1.Socks5Auth.UserPass
            this.sendSocks5UserPassAuthentication()
            // If selected Socks v5 auth method is the custom_auth_method, send custom handshake.
          } else if (data[1] === this.options.proxy.custom_auth_method) {
            this.socks5ChosenAuthType = this.options.proxy.custom_auth_method
            this.sendSocks5CustomAuthentication()
          } else {
            this.closeSocket(
              constants_1.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType
            )
          }
        }
      }
      /**
       * Sends Socks v5 user & password auth handshake.
       *
       * Note: No auth and user/pass are currently supported.
       */
      sendSocks5UserPassAuthentication() {
        const userId = this.options.proxy.userId || ''
        const password = this.options.proxy.password || ''
        const buff = new smart_buffer_1.SmartBuffer()
        buff.writeUInt8(0x01)
        buff.writeUInt8(Buffer.byteLength(userId))
        buff.writeString(userId)
        buff.writeUInt8(Buffer.byteLength(password))
        buff.writeString(password)
        this.nextRequiredPacketBufferSize =
          constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse
        this.socket.write(buff.toBuffer())
        this.setState(constants_1.SocksClientState.SentAuthentication)
      }
      sendSocks5CustomAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          this.nextRequiredPacketBufferSize =
            this.options.proxy.custom_auth_response_size
          this.socket.write(
            yield this.options.proxy.custom_auth_request_handler()
          )
          this.setState(constants_1.SocksClientState.SentAuthentication)
        })
      }
      handleSocks5CustomAuthHandshakeResponse(data) {
        return __awaiter(this, void 0, void 0, function* () {
          return yield this.options.proxy.custom_auth_response_handler(data)
        })
      }
      handleSocks5AuthenticationNoAuthHandshakeResponse(data) {
        return __awaiter(this, void 0, void 0, function* () {
          return data[1] === 0x00
        })
      }
      handleSocks5AuthenticationUserPassHandshakeResponse(data) {
        return __awaiter(this, void 0, void 0, function* () {
          return data[1] === 0x00
        })
      }
      /**
       * Handles Socks v5 auth handshake response.
       * @param data
       */
      handleInitialSocks5AuthenticationHandshakeResponse() {
        return __awaiter(this, void 0, void 0, function* () {
          this.setState(
            constants_1.SocksClientState.ReceivedAuthenticationResponse
          )
          let authResult = false
          if (this.socks5ChosenAuthType === constants_1.Socks5Auth.NoAuth) {
            authResult =
              yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(
                this.receiveBuffer.get(2)
              )
          } else if (
            this.socks5ChosenAuthType === constants_1.Socks5Auth.UserPass
          ) {
            authResult =
              yield this.handleSocks5AuthenticationUserPassHandshakeResponse(
                this.receiveBuffer.get(2)
              )
          } else if (
            this.socks5ChosenAuthType === this.options.proxy.custom_auth_method
          ) {
            authResult = yield this.handleSocks5CustomAuthHandshakeResponse(
              this.receiveBuffer.get(
                this.options.proxy.custom_auth_response_size
              )
            )
          }
          if (!authResult) {
            this.closeSocket(constants_1.ERRORS.Socks5AuthenticationFailed)
          } else {
            this.sendSocks5CommandRequest()
          }
        })
      }
      /**
       * Sends Socks v5 final handshake request.
       */
      sendSocks5CommandRequest() {
        const buff = new smart_buffer_1.SmartBuffer()
        buff.writeUInt8(0x05)
        buff.writeUInt8(constants_1.SocksCommand[this.options.command])
        buff.writeUInt8(0x00)
        // ipv4, ipv6, domain?
        if (net.isIPv4(this.options.destination.host)) {
          buff.writeUInt8(constants_1.Socks5HostType.IPv4)
          buff.writeBuffer(
            (0, helpers_1.ipToBuffer)(this.options.destination.host)
          )
        } else if (net.isIPv6(this.options.destination.host)) {
          buff.writeUInt8(constants_1.Socks5HostType.IPv6)
          buff.writeBuffer(
            (0, helpers_1.ipToBuffer)(this.options.destination.host)
          )
        } else {
          buff.writeUInt8(constants_1.Socks5HostType.Hostname)
          buff.writeUInt8(this.options.destination.host.length)
          buff.writeString(this.options.destination.host)
        }
        buff.writeUInt16BE(this.options.destination.port)
        this.nextRequiredPacketBufferSize =
          constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader
        this.socket.write(buff.toBuffer())
        this.setState(constants_1.SocksClientState.SentFinalHandshake)
      }
      /**
       * Handles Socks v5 final handshake response.
       * @param data
       */
      handleSocks5FinalHandshakeResponse() {
        // Peek at available data (we need at least 5 bytes to get the hostname length)
        const header = this.receiveBuffer.peek(5)
        if (
          header[0] !== 0x05 ||
          header[1] !== constants_1.Socks5Response.Granted
        ) {
          this.closeSocket(
            `${constants_1.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${constants_1.Socks5Response[header[1]]}`
          )
        } else {
          // Read address type
          const addressType = header[3]
          let remoteHost
          let buff
          // IPv4
          if (addressType === constants_1.Socks5HostType.IPv4) {
            // Check if data is available.
            const dataNeeded =
              constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4
            if (this.receiveBuffer.length < dataNeeded) {
              this.nextRequiredPacketBufferSize = dataNeeded
              return
            }
            buff = smart_buffer_1.SmartBuffer.fromBuffer(
              this.receiveBuffer.get(dataNeeded).slice(4)
            )
            remoteHost = {
              host: (0, helpers_1.int32ToIpv4)(buff.readUInt32BE()),
              port: buff.readUInt16BE()
            }
            // If given host is 0.0.0.0, assume remote proxy ip instead.
            if (remoteHost.host === '0.0.0.0') {
              remoteHost.host = this.options.proxy.ipaddress
            }
            // Hostname
          } else if (addressType === constants_1.Socks5HostType.Hostname) {
            const hostLength = header[4]
            const dataNeeded =
              constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(
                hostLength
              ) // header + host length + host + port
            // Check if data is available.
            if (this.receiveBuffer.length < dataNeeded) {
              this.nextRequiredPacketBufferSize = dataNeeded
              return
            }
            buff = smart_buffer_1.SmartBuffer.fromBuffer(
              this.receiveBuffer.get(dataNeeded).slice(5)
            )
            remoteHost = {
              host: buff.readString(hostLength),
              port: buff.readUInt16BE()
            }
            // IPv6
          } else if (addressType === constants_1.Socks5HostType.IPv6) {
            // Check if data is available.
            const dataNeeded =
              constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6
            if (this.receiveBuffer.length < dataNeeded) {
              this.nextRequiredPacketBufferSize = dataNeeded
              return
            }
            buff = smart_buffer_1.SmartBuffer.fromBuffer(
              this.receiveBuffer.get(dataNeeded).slice(4)
            )
            remoteHost = {
              host: ip_address_1.Address6.fromByteArray(
                Array.from(buff.readBuffer(16))
              ).canonicalForm(),
              port: buff.readUInt16BE()
            }
          }
          // We have everything we need
          this.setState(constants_1.SocksClientState.ReceivedFinalResponse)
          // If using CONNECT, the client is now in the established state.
          if (
            constants_1.SocksCommand[this.options.command] ===
            constants_1.SocksCommand.connect
          ) {
            this.setState(constants_1.SocksClientState.Established)
            this.removeInternalSocketHandlers()
            this.emit('established', {
              remoteHost,
              socket: this.socket
            })
          } else if (
            constants_1.SocksCommand[this.options.command] ===
            constants_1.SocksCommand.bind
          ) {
            /* If using BIND, the Socks client is now in BoundWaitingForConnection state.
               This means that the remote proxy server is waiting for a remote connection to the bound port. */
            this.setState(
              constants_1.SocksClientState.BoundWaitingForConnection
            )
            this.nextRequiredPacketBufferSize =
              constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader
            this.emit('bound', {
              remoteHost,
              socket: this.socket
            })
            /*
              If using Associate, the Socks client is now Established. And the proxy server is now accepting UDP packets at the
              given bound port. This initial Socks TCP connection must remain open for the UDP relay to continue to work.
            */
          } else if (
            constants_1.SocksCommand[this.options.command] ===
            constants_1.SocksCommand.associate
          ) {
            this.setState(constants_1.SocksClientState.Established)
            this.removeInternalSocketHandlers()
            this.emit('established', {
              remoteHost,
              socket: this.socket
            })
          }
        }
      }
      /**
       * Handles Socks v5 incoming connection request (BIND).
       */
      handleSocks5IncomingConnectionResponse() {
        // Peek at available data (we need at least 5 bytes to get the hostname length)
        const header = this.receiveBuffer.peek(5)
        if (
          header[0] !== 0x05 ||
          header[1] !== constants_1.Socks5Response.Granted
        ) {
          this.closeSocket(
            `${constants_1.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${constants_1.Socks5Response[header[1]]}`
          )
        } else {
          // Read address type
          const addressType = header[3]
          let remoteHost
          let buff
          // IPv4
          if (addressType === constants_1.Socks5HostType.IPv4) {
            // Check if data is available.
            const dataNeeded =
              constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4
            if (this.receiveBuffer.length < dataNeeded) {
              this.nextRequiredPacketBufferSize = dataNeeded
              return
            }
            buff = smart_buffer_1.SmartBuffer.fromBuffer(
              this.receiveBuffer.get(dataNeeded).slice(4)
            )
            remoteHost = {
              host: (0, helpers_1.int32ToIpv4)(buff.readUInt32BE()),
              port: buff.readUInt16BE()
            }
            // If given host is 0.0.0.0, assume remote proxy ip instead.
            if (remoteHost.host === '0.0.0.0') {
              remoteHost.host = this.options.proxy.ipaddress
            }
            // Hostname
          } else if (addressType === constants_1.Socks5HostType.Hostname) {
            const hostLength = header[4]
            const dataNeeded =
              constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(
                hostLength
              ) // header + host length + port
            // Check if data is available.
            if (this.receiveBuffer.length < dataNeeded) {
              this.nextRequiredPacketBufferSize = dataNeeded
              return
            }
            buff = smart_buffer_1.SmartBuffer.fromBuffer(
              this.receiveBuffer.get(dataNeeded).slice(5)
            )
            remoteHost = {
              host: buff.readString(hostLength),
              port: buff.readUInt16BE()
            }
            // IPv6
          } else if (addressType === constants_1.Socks5HostType.IPv6) {
            // Check if data is available.
            const dataNeeded =
              constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6
            if (this.receiveBuffer.length < dataNeeded) {
              this.nextRequiredPacketBufferSize = dataNeeded
              return
            }
            buff = smart_buffer_1.SmartBuffer.fromBuffer(
              this.receiveBuffer.get(dataNeeded).slice(4)
            )
            remoteHost = {
              host: ip_address_1.Address6.fromByteArray(
                Array.from(buff.readBuffer(16))
              ).canonicalForm(),
              port: buff.readUInt16BE()
            }
          }
          this.setState(constants_1.SocksClientState.Established)
          this.removeInternalSocketHandlers()
          this.emit('established', {
            remoteHost,
            socket: this.socket
          })
        }
      }
      get socksClientOptions() {
        return Object.assign({}, this.options)
      }
    }
    exports.SocksClient = SocksClient
  })(socksclient)
  return socksclient
}

let hasRequiredBuild$1
function requireBuild$1() {
  if (hasRequiredBuild$1) {
    return build$1
  }
  hasRequiredBuild$1 = 1
  ;(function (exports) {
    const __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            let desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) {
              k2 = k
            }
            o[k2] = m[k]
          })
    const __exportStar =
      (this && this.__exportStar) ||
      function (m, exports) {
        for (const p in m) {
          if (
            p !== 'default' &&
            !Object.prototype.hasOwnProperty.call(exports, p)
          )
            __createBinding(exports, m, p)
        }
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    __exportStar(requireSocksclient(), exports)
  })(build$1)
  return build$1
}

let hasRequiredDist$9
function requireDist$9() {
  if (hasRequiredDist$9) {
    return dist$9
  }
  hasRequiredDist$9 = 1
  const __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          let desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) {
            k2 = k
          }
          o[k2] = m[k]
        })
  const __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  const __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) {
        return mod
      }
      const result = {}
      if (mod != null) {
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      }
      __setModuleDefault(result, mod)
      return result
    }
  const __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(dist$9, '__esModule', {
    value: true
  })
  dist$9.SocksProxyAgent = void 0
  const socks_1 = requireBuild$1()
  const agent_base_1 = requireDist$c()
  const debug_1 = __importDefault(requireSrc())
  const dns = __importStar(require$$0$j)
  const net = __importStar(require$$0$k)
  const tls = __importStar(require$$1$a)
  const url_1 = require$$0$2
  const debug = (0, debug_1.default)('socks-proxy-agent')
  const setServernameFromNonIpHost = options => {
    if (
      options.servername === undefined &&
      options.host &&
      !net.isIP(options.host)
    ) {
      return {
        ...options,
        servername: options.host
      }
    }
    return options
  }
  function parseSocksURL(url) {
    let lookup = false
    let type = 5
    const host = url.hostname
    // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3
    // "The SOCKS service is conventionally located on TCP port 1080"
    const port = parseInt(url.port, 10) || 1080
    // figure out if we want socks v4 or v5, based on the "protocol" used.
    // Defaults to 5.
    switch (url.protocol.replace(':', '')) {
      case 'socks4':
        lookup = true
        type = 4
        break
      // pass through
      case 'socks4a':
        type = 4
        break
      case 'socks5':
        lookup = true
        type = 5
        break
      // pass through
      case 'socks':
        // no version specified, default to 5h
        type = 5
        break
      case 'socks5h':
        type = 5
        break
      default:
        throw new TypeError(
          `A "socks" protocol must be specified! Got: ${String(url.protocol)}`
        )
    }
    const proxy = {
      host,
      port,
      type
    }
    if (url.username) {
      Object.defineProperty(proxy, 'userId', {
        value: decodeURIComponent(url.username),
        enumerable: false
      })
    }
    if (url.password != null) {
      Object.defineProperty(proxy, 'password', {
        value: decodeURIComponent(url.password),
        enumerable: false
      })
    }
    return {
      lookup,
      proxy
    }
  }
  class SocksProxyAgent extends agent_base_1.Agent {
    constructor(uri, opts) {
      super(opts)
      const url = typeof uri === 'string' ? new url_1.URL(uri) : uri
      const { proxy, lookup } = parseSocksURL(url)
      this.shouldLookup = lookup
      this.proxy = proxy
      this.timeout = opts?.timeout ?? null
      this.socketOptions = opts?.socketOptions ?? null
    }
    /**
     * Initiates a SOCKS connection to the specified SOCKS proxy server,
     * which in turn connects to the specified remote host and port.
     */
    async connect(req, opts) {
      const { shouldLookup, proxy, timeout } = this
      if (!opts.host) {
        throw new Error('No `host` defined!')
      }
      let { host } = opts
      const { port, lookup: lookupFn = dns.lookup } = opts
      if (shouldLookup) {
        // Client-side DNS resolution for "4" and "5" socks proxy versions.
        host = await new Promise((resolve, reject) => {
          // Use the request's custom lookup, if one was configured:
          lookupFn(host, {}, (err, res) => {
            if (err) {
              reject(err)
            } else {
              resolve(res)
            }
          })
        })
      }
      const socksOpts = {
        proxy,
        destination: {
          host,
          port: typeof port === 'number' ? port : parseInt(port, 10)
        },
        command: 'connect',
        timeout: timeout ?? undefined,
        // @ts-expect-error the type supplied by socks for socket_options is wider
        // than necessary since socks will always override the host and port
        socket_options: this.socketOptions ?? undefined
      }
      const cleanup = tlsSocket => {
        req.destroy()
        socket.destroy()
        if (tlsSocket) {
          tlsSocket.destroy()
        }
      }
      debug('Creating socks proxy connection: %o', socksOpts)
      const { socket } = await socks_1.SocksClient.createConnection(socksOpts)
      debug('Successfully created socks proxy connection')
      if (timeout !== null) {
        socket.setTimeout(timeout)
        socket.on('timeout', () => cleanup())
      }
      if (opts.secureEndpoint) {
        // The proxy is connecting to a TLS server, so upgrade
        // this socket connection to a TLS connection.
        debug('Upgrading socket connection to TLS')
        const tlsSocket = tls.connect({
          ...omit(setServernameFromNonIpHost(opts), 'host', 'path', 'port'),
          socket
        })
        tlsSocket.once('error', error => {
          debug('Socket TLS error', error.message)
          cleanup(tlsSocket)
        })
        return tlsSocket
      }
      return socket
    }
  }
  SocksProxyAgent.protocols = [
    'socks',
    'socks4',
    'socks4a',
    'socks5',
    'socks5h'
  ]
  dist$9.SocksProxyAgent = SocksProxyAgent
  function omit(obj, ...keys) {
    const ret = {}
    let key
    for (key in obj) {
      if (!keys.includes(key)) {
        ret[key] = obj[key]
      }
    }
    return ret
  }
  return dist$9
}

let errors
let hasRequiredErrors
function requireErrors() {
  if (hasRequiredErrors) {
    return errors
  }
  hasRequiredErrors = 1
  class InvalidProxyProtocolError extends Error {
    constructor(url) {
      super(
        `Invalid protocol \`${url.protocol}\` connecting to proxy \`${url.host}\``
      )
      this.code = 'EINVALIDPROXY'
      this.proxy = url
    }
  }
  class ConnectionTimeoutError extends Error {
    constructor(host) {
      super(`Timeout connecting to host \`${host}\``)
      this.code = 'ECONNECTIONTIMEOUT'
      this.host = host
    }
  }
  class IdleTimeoutError extends Error {
    constructor(host) {
      super(`Idle timeout reached for host \`${host}\``)
      this.code = 'EIDLETIMEOUT'
      this.host = host
    }
  }
  class ResponseTimeoutError extends Error {
    constructor(request, proxy) {
      let msg = 'Response timeout '
      if (proxy) {
        msg += `from proxy \`${proxy.host}\` `
      }
      msg += `connecting to host \`${request.host}\``
      super(msg)
      this.code = 'ERESPONSETIMEOUT'
      this.proxy = proxy
      this.request = request
    }
  }
  class TransferTimeoutError extends Error {
    constructor(request, proxy) {
      let msg = 'Transfer timeout '
      if (proxy) {
        msg += `from proxy \`${proxy.host}\` `
      }
      msg += `for \`${request.host}\``
      super(msg)
      this.code = 'ETRANSFERTIMEOUT'
      this.proxy = proxy
      this.request = request
    }
  }
  errors = {
    InvalidProxyProtocolError,
    ConnectionTimeoutError,
    IdleTimeoutError,
    ResponseTimeoutError,
    TransferTimeoutError
  }
  return errors
}

let proxy
let hasRequiredProxy
function requireProxy() {
  if (hasRequiredProxy) {
    return proxy
  }
  hasRequiredProxy = 1
  const { HttpProxyAgent } = requireDist$b()
  const { HttpsProxyAgent } = requireDist$a()
  const { SocksProxyAgent } = requireDist$9()
  const { LRUCache } = /*@__PURE__*/ requireCommonjs$9()
  const { InvalidProxyProtocolError } = requireErrors()
  const PROXY_CACHE = new LRUCache({
    max: 20
  })
  const SOCKS_PROTOCOLS = new Set(SocksProxyAgent.protocols)
  const PROXY_ENV_KEYS = new Set([
    'https_proxy',
    'http_proxy',
    'proxy',
    'no_proxy'
  ])
  const PROXY_ENV = Object.entries(process.env).reduce((acc, [key, value]) => {
    key = key.toLowerCase()
    if (PROXY_ENV_KEYS.has(key)) {
      acc[key] = value
    }
    return acc
  }, {})
  const getProxyAgent = url => {
    url = new URL(url)
    const protocol = url.protocol.slice(0, -1)
    if (SOCKS_PROTOCOLS.has(protocol)) {
      return SocksProxyAgent
    }
    if (protocol === 'https' || protocol === 'http') {
      return [HttpProxyAgent, HttpsProxyAgent]
    }
    throw new InvalidProxyProtocolError(url)
  }
  const isNoProxy = (url, noProxy) => {
    if (typeof noProxy === 'string') {
      noProxy = noProxy
        .split(',')
        .map(p => p.trim())
        .filter(Boolean)
    }
    if (!noProxy || !noProxy.length) {
      return false
    }
    const hostSegments = url.hostname.split('.').reverse()
    return noProxy.some(no => {
      const noSegments = no.split('.').filter(Boolean).reverse()
      if (!noSegments.length) {
        return false
      }
      for (let i = 0; i < noSegments.length; i++) {
        if (hostSegments[i] !== noSegments[i]) {
          return false
        }
      }
      return true
    })
  }
  const getProxy = (url, { proxy, noProxy }) => {
    url = new URL(url)
    if (!proxy) {
      proxy =
        url.protocol === 'https:'
          ? PROXY_ENV.https_proxy
          : PROXY_ENV.https_proxy || PROXY_ENV.http_proxy || PROXY_ENV.proxy
    }
    if (!noProxy) {
      noProxy = PROXY_ENV.no_proxy
    }
    if (!proxy || isNoProxy(url, noProxy)) {
      return null
    }
    return new URL(proxy)
  }
  proxy = {
    getProxyAgent,
    getProxy,
    proxyCache: PROXY_CACHE
  }
  return proxy
}

let agents
let hasRequiredAgents
function requireAgents() {
  if (hasRequiredAgents) {
    return agents
  }
  hasRequiredAgents = 1
  const net = require$$0$k
  const tls = require$$1$a
  const { once } = require$$0$c
  const timers = require$$3$1
  const { normalizeOptions, cacheOptions } = requireOptions()
  const { getProxy, getProxyAgent, proxyCache } = requireProxy()
  const Errors = requireErrors()
  const { Agent: AgentBase } = requireDist$c()
  agents = class Agent extends AgentBase {
    #options
    #timeouts
    #proxy
    #noProxy
    #ProxyAgent
    constructor(options = {}) {
      const { timeouts, proxy, noProxy, ...normalizedOptions } =
        normalizeOptions(options)
      super(normalizedOptions)
      this.#options = normalizedOptions
      this.#timeouts = timeouts
      if (proxy) {
        this.#proxy = new URL(proxy)
        this.#noProxy = noProxy
        this.#ProxyAgent = getProxyAgent(proxy)
      }
    }
    get proxy() {
      return this.#proxy
        ? {
            url: this.#proxy
          }
        : {}
    }
    #getProxy(options) {
      if (!this.#proxy) {
        return
      }
      const proxy = getProxy(
        `${options.protocol}//${options.host}:${options.port}`,
        {
          proxy: this.#proxy,
          noProxy: this.#noProxy
        }
      )
      if (!proxy) {
        return
      }
      const cacheKey = cacheOptions({
        ...options,
        ...this.#options,
        timeouts: this.#timeouts,
        proxy
      })
      if (proxyCache.has(cacheKey)) {
        return proxyCache.get(cacheKey)
      }
      let ProxyAgent = this.#ProxyAgent
      if (Array.isArray(ProxyAgent)) {
        ProxyAgent = this.isSecureEndpoint(options)
          ? ProxyAgent[1]
          : ProxyAgent[0]
      }
      const proxyAgent = new ProxyAgent(proxy, {
        ...this.#options,
        socketOptions: {
          family: this.#options.family
        }
      })
      proxyCache.set(cacheKey, proxyAgent)
      return proxyAgent
    }

    // takes an array of promises and races them against the connection timeout
    // which will throw the necessary error if it is hit. This will return the
    // result of the promise race.
    async #timeoutConnection(
      { promises, options, timeout },
      ac = new AbortController()
    ) {
      if (timeout) {
        const connectionTimeout = timers
          .setTimeout(timeout, null, {
            signal: ac.signal
          })
          .then(() => {
            throw new Errors.ConnectionTimeoutError(
              `${options.host}:${options.port}`
            )
          })
          .catch(err => {
            if (err.name === 'AbortError') {
              return
            }
            throw err
          })
        promises.push(connectionTimeout)
      }
      let result
      try {
        result = await Promise.race(promises)
        ac.abort()
      } catch (err) {
        ac.abort()
        throw err
      }
      return result
    }
    async connect(request, options) {
      // if the connection does not have its own lookup function
      // set, then use the one from our options
      options.lookup ??= this.#options.lookup
      let socket
      let timeout = this.#timeouts.connection
      const isSecureEndpoint = this.isSecureEndpoint(options)
      const proxy = this.#getProxy(options)
      if (proxy) {
        // some of the proxies will wait for the socket to fully connect before
        // returning so we have to await this while also racing it against the
        // connection timeout.
        const start = Date.now()
        socket = await this.#timeoutConnection({
          options,
          timeout,
          promises: [proxy.connect(request, options)]
        })
        // see how much time proxy.connect took and subtract it from
        // the timeout
        if (timeout) {
          timeout = timeout - (Date.now() - start)
        }
      } else {
        socket = (isSecureEndpoint ? tls : net).connect(options)
      }
      socket.setKeepAlive(this.keepAlive, this.keepAliveMsecs)
      socket.setNoDelay(this.keepAlive)
      const abortController = new AbortController()
      const { signal } = abortController
      const connectPromise = socket[
        isSecureEndpoint ? 'secureConnecting' : 'connecting'
      ]
        ? once(socket, isSecureEndpoint ? 'secureConnect' : 'connect', {
            signal
          })
        : Promise.resolve()
      await this.#timeoutConnection(
        {
          options,
          timeout,
          promises: [
            connectPromise,
            once(socket, 'error', {
              signal
            }).then(err => {
              throw err[0]
            })
          ]
        },
        abortController
      )
      if (this.#timeouts.idle) {
        socket.setTimeout(this.#timeouts.idle, () => {
          socket.destroy(
            new Errors.IdleTimeoutError(`${options.host}:${options.port}`)
          )
        })
      }
      return socket
    }
    addRequest(request, options) {
      const proxy = this.#getProxy(options)
      // it would be better to call proxy.addRequest here but this causes the
      // http-proxy-agent to call its super.addRequest which causes the request
      // to be added to the agent twice. since we only support 3 agents
      // currently (see the required agents in proxy.js) we have manually
      // checked that the only public methods we need to call are called in the
      // next block. this could change in the future and presumably we would get
      // failing tests until we have properly called the necessary methods on
      // each of our proxy agents
      if (proxy?.setRequestProps) {
        proxy.setRequestProps(request, options)
      }
      request.setHeader('connection', this.keepAlive ? 'keep-alive' : 'close')
      if (this.#timeouts.response) {
        let responseTimeout
        request.once('finish', () => {
          setTimeout(() => {
            request.destroy(
              new Errors.ResponseTimeoutError(request, this.#proxy)
            )
          }, this.#timeouts.response)
        })
        request.once('response', () => {
          clearTimeout(responseTimeout)
        })
      }
      if (this.#timeouts.transfer) {
        let transferTimeout
        request.once('response', res => {
          setTimeout(() => {
            res.destroy(new Errors.TransferTimeoutError(request, this.#proxy))
          }, this.#timeouts.transfer)
          res.once('close', () => {
            clearTimeout(transferTimeout)
          })
        })
      }
      return super.addRequest(request, options)
    }
  }
  return agents
}

let lib$2
let hasRequiredLib$4
function requireLib$4() {
  if (hasRequiredLib$4) {
    return lib$2
  }
  hasRequiredLib$4 = 1
  const { LRUCache } = /*@__PURE__*/ requireCommonjs$9()
  const { normalizeOptions, cacheOptions } = requireOptions()
  const { getProxy, proxyCache } = requireProxy()
  const dns = requireDns()
  const Agent = requireAgents()
  const agentCache = new LRUCache({
    max: 20
  })
  const getAgent = (url, { agent, proxy, noProxy, ...options } = {}) => {
    // false has meaning so this can't be a simple truthiness check
    if (agent != null) {
      return agent
    }
    url = new URL(url)
    const proxyForUrl = getProxy(url, {
      proxy,
      noProxy
    })
    const normalizedOptions = {
      ...normalizeOptions(options),
      proxy: proxyForUrl
    }
    const cacheKey = cacheOptions({
      ...normalizedOptions,
      secureEndpoint: url.protocol === 'https:'
    })
    if (agentCache.has(cacheKey)) {
      return agentCache.get(cacheKey)
    }
    const newAgent = new Agent(normalizedOptions)
    agentCache.set(cacheKey, newAgent)
    return newAgent
  }
  lib$2 = {
    getAgent,
    Agent,
    // these are exported for backwards compatability
    HttpAgent: Agent,
    HttpsAgent: Agent,
    cache: {
      proxy: proxyCache,
      agent: agentCache,
      dns: dns.cache,
      clear: () => {
        proxyCache.clear()
        agentCache.clear()
        dns.cache.clear()
      }
    }
  }
  return lib$2
}

const name = 'make-fetch-happen'
const version$2 = '14.0.3'
const require$$7 = {
  name: name,
  version: version$2
}

let remote$1
let hasRequiredRemote$1
function requireRemote$1() {
  if (hasRequiredRemote$1) {
    return remote$1
  }
  hasRequiredRemote$1 = 1
  const { Minipass } = requireCommonjs$7()
  const fetch = requireLib$7()
  const promiseRetry = requirePromiseRetry()
  const ssri = requireLib$j()
  const { log } = requireLib$t()
  const CachingMinipassPipeline = requirePipeline()
  const { getAgent } = requireLib$4()
  const pkg = require$$7
  const USER_AGENT = `${pkg.name}/${pkg.version} (+https://npm.im/${pkg.name})`
  const RETRY_ERRORS = new Set([
    'ECONNRESET',
    // remote socket closed on us
    'ECONNREFUSED',
    // remote host refused to open connection
    'EADDRINUSE',
    // failed to bind to a local port (proxy?)
    'ETIMEDOUT',
    // someone in the transaction is WAY TOO SLOW
    // from @npmcli/agent
    'ECONNECTIONTIMEOUT',
    'EIDLETIMEOUT',
    'ERESPONSETIMEOUT',
    'ETRANSFERTIMEOUT'
    // Known codes we do NOT retry on:
    // ENOTFOUND (getaddrinfo failure. Either bad hostname, or offline)
    // EINVALIDPROXY // invalid protocol from @npmcli/agent
    // EINVALIDRESPONSE // invalid status code from @npmcli/agent
  ])
  const RETRY_TYPES = ['request-timeout']

  // make a request directly to the remote source,
  // retrying certain classes of errors as well as
  // following redirects (through the cache if necessary)
  // and verifying response integrity
  const remoteFetch = (request, options) => {
    // options.signal is intended for the fetch itself, not the agent.  Attaching it to the agent will re-use that signal across multiple requests, which prevents any connections beyond the first one.
    const agent = getAgent(request.url, {
      ...options,
      signal: undefined
    })
    if (!request.headers.has('connection')) {
      request.headers.set('connection', agent ? 'keep-alive' : 'close')
    }
    if (!request.headers.has('user-agent')) {
      request.headers.set('user-agent', USER_AGENT)
    }

    // keep our own options since we're overriding the agent
    // and the redirect mode
    const _opts = {
      ...options,
      agent,
      redirect: 'manual'
    }
    return promiseRetry(async (retryHandler, attemptNum) => {
      const req = new fetch.Request(request, _opts)
      try {
        let res = await fetch(req, _opts)
        if (_opts.integrity && res.status === 200) {
          // we got a 200 response and the user has specified an expected
          // integrity value, so wrap the response in an ssri stream to verify it
          const integrityStream = ssri.integrityStream({
            algorithms: _opts.algorithms,
            integrity: _opts.integrity,
            size: _opts.size
          })
          const pipeline = new CachingMinipassPipeline(
            {
              events: ['integrity', 'size']
            },
            res.body,
            integrityStream
          )
          // we also propagate the integrity and size events out to the pipeline so we can use
          // this new response body as an integrityEmitter for cacache
          integrityStream.on('integrity', i => pipeline.emit('integrity', i))
          integrityStream.on('size', s => pipeline.emit('size', s))
          res = new fetch.Response(pipeline, res)
          // set an explicit flag so we know if our response body will emit integrity and size
          res.body.hasIntegrityEmitter = true
        }
        res.headers.set('x-fetch-attempts', attemptNum)

        // do not retry POST requests, or requests with a streaming body
        // do retry requests with a 408, 420, 429 or 500+ status in the response
        const isStream = Minipass.isStream(req.body)
        const isRetriable =
          req.method !== 'POST' &&
          !isStream &&
          ([408, 420, 429].includes(res.status) || res.status >= 500)
        if (isRetriable) {
          if (typeof options.onRetry === 'function') {
            options.onRetry(res)
          }

          /* eslint-disable-next-line max-len */
          log.http(
            'fetch',
            `${req.method} ${req.url} attempt ${attemptNum} failed with ${res.status}`
          )
          return retryHandler(res)
        }
        return res
      } catch (err) {
        const code = err.code === 'EPROMISERETRY' ? err.retried.code : err.code

        // err.retried will be the thing that was thrown from above
        // if it's a response, we just got a bad status code and we
        // can re-throw to allow the retry
        const isRetryError =
          err.retried instanceof fetch.Response ||
          (RETRY_ERRORS.has(code) && RETRY_TYPES.includes(err.type))
        if (req.method === 'POST' || isRetryError) {
          throw err
        }
        if (typeof options.onRetry === 'function') {
          options.onRetry(err)
        }
        log.http(
          'fetch',
          `${req.method} ${req.url} attempt ${attemptNum} failed with ${err.code}`
        )
        return retryHandler(err)
      }
    }, options.retry).catch(err => {
      // don't reject for http errors, just return them
      if (err.status >= 400 && err.type !== 'system') {
        return err
      }
      throw err
    })
  }
  remote$1 = remoteFetch
  return remote$1
}

let entry$1
let hasRequiredEntry$1
function requireEntry$1() {
  if (hasRequiredEntry$1) {
    return entry$1
  }
  hasRequiredEntry$1 = 1
  const { Request, Response } = requireLib$7()
  const { Minipass } = requireCommonjs$7()
  const MinipassFlush = requireMinipassFlush()
  const cacache = requireLib$5()
  const url = require$$0$2
  const CachingMinipassPipeline = requirePipeline()
  const CachePolicy = requirePolicy$1()
  const cacheKey = requireKey$3()
  const remote = requireRemote$1()
  const hasOwnProperty = (obj, prop) =>
    Object.prototype.hasOwnProperty.call(obj, prop)

  // allow list for request headers that will be written to the cache index
  // note: we will also store any request headers
  // that are named in a response's vary header
  const KEEP_REQUEST_HEADERS = [
    'accept-charset',
    'accept-encoding',
    'accept-language',
    'accept',
    'cache-control'
  ]

  // allow list for response headers that will be written to the cache index
  // note: we must not store the real response's age header, or when we load
  // a cache policy based on the metadata it will think the cached response
  // is always stale
  const KEEP_RESPONSE_HEADERS = [
    'cache-control',
    'content-encoding',
    'content-language',
    'content-type',
    'date',
    'etag',
    'expires',
    'last-modified',
    'link',
    'location',
    'pragma',
    'vary'
  ]

  // return an object containing all metadata to be written to the index
  const getMetadata = (request, response, options) => {
    const metadata = {
      time: Date.now(),
      url: request.url,
      reqHeaders: {},
      resHeaders: {},
      // options on which we must match the request and vary the response
      options: {
        compress: options.compress != null ? options.compress : request.compress
      }
    }

    // only save the status if it's not a 200 or 304
    if (response.status !== 200 && response.status !== 304) {
      metadata.status = response.status
    }
    for (const name of KEEP_REQUEST_HEADERS) {
      if (request.headers.has(name)) {
        metadata.reqHeaders[name] = request.headers.get(name)
      }
    }

    // if the request's host header differs from the host in the url
    // we need to keep it, otherwise it's just noise and we ignore it
    const host = request.headers.get('host')
    const parsedUrl = new url.URL(request.url)
    if (host && parsedUrl.host !== host) {
      metadata.reqHeaders.host = host
    }

    // if the response has a vary header, make sure
    // we store the relevant request headers too
    if (response.headers.has('vary')) {
      const vary = response.headers.get('vary')
      // a vary of "*" means every header causes a different response.
      // in that scenario, we do not include any additional headers
      // as the freshness check will always fail anyway and we don't
      // want to bloat the cache indexes
      if (vary !== '*') {
        // copy any other request headers that will vary the response
        const varyHeaders = vary
          .trim()
          .toLowerCase()
          .split(/\s*,\s*/)
        for (const name of varyHeaders) {
          if (request.headers.has(name)) {
            metadata.reqHeaders[name] = request.headers.get(name)
          }
        }
      }
    }
    for (const name of KEEP_RESPONSE_HEADERS) {
      if (response.headers.has(name)) {
        metadata.resHeaders[name] = response.headers.get(name)
      }
    }
    for (const name of options.cacheAdditionalHeaders) {
      if (response.headers.has(name)) {
        metadata.resHeaders[name] = response.headers.get(name)
      }
    }
    return metadata
  }

  // symbols used to hide objects that may be lazily evaluated in a getter
  const _request = Symbol('request')
  const _response = Symbol('response')
  const _policy = Symbol('policy')
  class CacheEntry {
    constructor({ entry, request, response, options }) {
      if (entry) {
        this.key = entry.key
        this.entry = entry
        // previous versions of this module didn't write an explicit timestamp in
        // the metadata, so fall back to the entry's timestamp. we can't use the
        // entry timestamp to determine staleness because cacache will update it
        // when it verifies its data
        this.entry.metadata.time = this.entry.metadata.time || this.entry.time
      } else {
        this.key = cacheKey(request)
      }
      this.options = options

      // these properties are behind getters that lazily evaluate
      this[_request] = request
      this[_response] = response
      this[_policy] = null
    }

    // returns a CacheEntry instance that satisfies the given request
    // or undefined if no existing entry satisfies
    static async find(request, options) {
      try {
        // compacts the index and returns an array of unique entries
        var matches = await cacache.index.compact(
          options.cachePath,
          cacheKey(request),
          (A, B) => {
            const entryA = new CacheEntry({
              entry: A,
              options
            })
            const entryB = new CacheEntry({
              entry: B,
              options
            })
            return entryA.policy.satisfies(entryB.request)
          },
          {
            validateEntry: entry => {
              // clean out entries with a buggy content-encoding value
              if (
                entry.metadata &&
                entry.metadata.resHeaders &&
                entry.metadata.resHeaders['content-encoding'] === null
              ) {
                return false
              }

              // if an integrity is null, it needs to have a status specified
              if (entry.integrity === null) {
                return !!(entry.metadata && entry.metadata.status)
              }
              return true
            }
          }
        )
      } catch (err) {
        // if the compact request fails, ignore the error and return
        return
      }

      // a cache mode of 'reload' means to behave as though we have no cache
      // on the way to the network. return undefined to allow cacheFetch to
      // create a brand new request no matter what.
      if (options.cache === 'reload') {
        return
      }

      // find the specific entry that satisfies the request
      let match
      for (const entry of matches) {
        const _entry = new CacheEntry({
          entry,
          options
        })
        if (_entry.policy.satisfies(request)) {
          match = _entry
          break
        }
      }
      return match
    }

    // if the user made a PUT/POST/PATCH then we invalidate our
    // cache for the same url by deleting the index entirely
    static async invalidate(request, options) {
      const key = cacheKey(request)
      try {
        await cacache.rm.entry(options.cachePath, key, {
          removeFully: true
        })
      } catch (err) {
        // ignore errors
      }
    }
    get request() {
      if (!this[_request]) {
        this[_request] = new Request(this.entry.metadata.url, {
          method: 'GET',
          headers: this.entry.metadata.reqHeaders,
          ...this.entry.metadata.options
        })
      }
      return this[_request]
    }
    get response() {
      if (!this[_response]) {
        this[_response] = new Response(null, {
          url: this.entry.metadata.url,
          counter: this.options.counter,
          status: this.entry.metadata.status || 200,
          headers: {
            ...this.entry.metadata.resHeaders,
            'content-length': this.entry.size
          }
        })
      }
      return this[_response]
    }
    get policy() {
      if (!this[_policy]) {
        this[_policy] = new CachePolicy({
          entry: this.entry,
          request: this.request,
          response: this.response,
          options: this.options
        })
      }
      return this[_policy]
    }

    // wraps the response in a pipeline that stores the data
    // in the cache while the user consumes it
    async store(status) {
      // if we got a status other than 200, 301, or 308,
      // or the CachePolicy forbid storage, append the
      // cache status header and return it untouched
      if (
        this.request.method !== 'GET' ||
        ![200, 301, 308].includes(this.response.status) ||
        !this.policy.storable()
      ) {
        this.response.headers.set('x-local-cache-status', 'skip')
        return this.response
      }
      const size = this.response.headers.get('content-length')
      const cacheOpts = {
        algorithms: this.options.algorithms,
        metadata: getMetadata(this.request, this.response, this.options),
        size,
        integrity: this.options.integrity,
        integrityEmitter:
          this.response.body.hasIntegrityEmitter && this.response.body
      }
      let body = null
      // we only set a body if the status is a 200, redirects are
      // stored as metadata only
      if (this.response.status === 200) {
        let cacheWriteResolve, cacheWriteReject
        const cacheWritePromise = new Promise((resolve, reject) => {
          cacheWriteResolve = resolve
          cacheWriteReject = reject
        }).catch(err => {
          body.emit('error', err)
        })
        body = new CachingMinipassPipeline(
          {
            events: ['integrity', 'size']
          },
          new MinipassFlush({
            flush() {
              return cacheWritePromise
            }
          })
        )
        // this is always true since if we aren't reusing the one from the remote fetch, we
        // are using the one from cacache
        body.hasIntegrityEmitter = true
        const onResume = () => {
          const tee = new Minipass()
          const cacheStream = cacache.put.stream(
            this.options.cachePath,
            this.key,
            cacheOpts
          )
          // re-emit the integrity and size events on our new response body so they can be reused
          cacheStream.on('integrity', i => body.emit('integrity', i))
          cacheStream.on('size', s => body.emit('size', s))
          // stick a flag on here so downstream users will know if they can expect integrity events
          tee.pipe(cacheStream)
          // TODO if the cache write fails, log a warning but return the response anyway
          // eslint-disable-next-line promise/catch-or-return
          cacheStream.promise().then(cacheWriteResolve, cacheWriteReject)
          body.unshift(tee)
          body.unshift(this.response.body)
        }
        body.once('resume', onResume)
        body.once('end', () => body.removeListener('resume', onResume))
      } else {
        await cacache.index.insert(
          this.options.cachePath,
          this.key,
          null,
          cacheOpts
        )
      }

      // note: we do not set the x-local-cache-hash header because we do not know
      // the hash value until after the write to the cache completes, which doesn't
      // happen until after the response has been sent and it's too late to write
      // the header anyway
      this.response.headers.set(
        'x-local-cache',
        encodeURIComponent(this.options.cachePath)
      )
      this.response.headers.set(
        'x-local-cache-key',
        encodeURIComponent(this.key)
      )
      this.response.headers.set('x-local-cache-mode', 'stream')
      this.response.headers.set('x-local-cache-status', status)
      this.response.headers.set('x-local-cache-time', new Date().toISOString())
      const newResponse = new Response(body, {
        url: this.response.url,
        status: this.response.status,
        headers: this.response.headers,
        counter: this.options.counter
      })
      return newResponse
    }

    // use the cached data to create a response and return it
    async respond(method, options, status) {
      let response
      if (method === 'HEAD' || [301, 308].includes(this.response.status)) {
        // if the request is a HEAD, or the response is a redirect,
        // then the metadata in the entry already includes everything
        // we need to build a response
        response = this.response
      } else {
        // we're responding with a full cached response, so create a body
        // that reads from cacache and attach it to a new Response
        const body = new Minipass()
        const headers = {
          ...this.policy.responseHeaders()
        }
        const onResume = () => {
          const cacheStream = cacache.get.stream.byDigest(
            this.options.cachePath,
            this.entry.integrity,
            {
              memoize: this.options.memoize
            }
          )
          cacheStream.on('error', async err => {
            cacheStream.pause()
            if (err.code === 'EINTEGRITY') {
              await cacache.rm.content(
                this.options.cachePath,
                this.entry.integrity,
                {
                  memoize: this.options.memoize
                }
              )
            }
            if (err.code === 'ENOENT' || err.code === 'EINTEGRITY') {
              await CacheEntry.invalidate(this.request, this.options)
            }
            body.emit('error', err)
            cacheStream.resume()
          })
          // emit the integrity and size events based on our metadata so we're consistent
          body.emit('integrity', this.entry.integrity)
          body.emit('size', Number(headers['content-length']))
          cacheStream.pipe(body)
        }
        body.once('resume', onResume)
        body.once('end', () => body.removeListener('resume', onResume))
        response = new Response(body, {
          url: this.entry.metadata.url,
          counter: options.counter,
          status: 200,
          headers
        })
      }
      response.headers.set(
        'x-local-cache',
        encodeURIComponent(this.options.cachePath)
      )
      response.headers.set(
        'x-local-cache-hash',
        encodeURIComponent(this.entry.integrity)
      )
      response.headers.set('x-local-cache-key', encodeURIComponent(this.key))
      response.headers.set('x-local-cache-mode', 'stream')
      response.headers.set('x-local-cache-status', status)
      response.headers.set(
        'x-local-cache-time',
        new Date(this.entry.metadata.time).toUTCString()
      )
      return response
    }

    // use the provided request along with this cache entry to
    // revalidate the stored response. returns a response, either
    // from the cache or from the update
    async revalidate(request, options) {
      const revalidateRequest = new Request(request, {
        headers: this.policy.revalidationHeaders(request)
      })
      try {
        // NOTE: be sure to remove the headers property from the
        // user supplied options, since we have already defined
        // them on the new request object. if they're still in the
        // options then those will overwrite the ones from the policy
        var response = await remote(revalidateRequest, {
          ...options,
          headers: undefined
        })
      } catch (err) {
        // if the network fetch fails, return the stale
        // cached response unless it has a cache-control
        // of 'must-revalidate'
        if (!this.policy.mustRevalidate) {
          return this.respond(request.method, options, 'stale')
        }
        throw err
      }
      if (this.policy.revalidated(revalidateRequest, response)) {
        // we got a 304, write a new index to the cache and respond from cache
        const metadata = getMetadata(request, response, options)
        // 304 responses do not include headers that are specific to the response data
        // since they do not include a body, so we copy values for headers that were
        // in the old cache entry to the new one, if the new metadata does not already
        // include that header
        for (const name of KEEP_RESPONSE_HEADERS) {
          if (
            !hasOwnProperty(metadata.resHeaders, name) &&
            hasOwnProperty(this.entry.metadata.resHeaders, name)
          ) {
            metadata.resHeaders[name] = this.entry.metadata.resHeaders[name]
          }
        }
        for (const name of options.cacheAdditionalHeaders) {
          const inMeta = hasOwnProperty(metadata.resHeaders, name)
          const inEntry = hasOwnProperty(this.entry.metadata.resHeaders, name)
          const inPolicy = hasOwnProperty(this.policy.response.headers, name)

          // if the header is in the existing entry, but it is not in the metadata
          // then we need to write it to the metadata as this will refresh the on-disk cache
          if (!inMeta && inEntry) {
            metadata.resHeaders[name] = this.entry.metadata.resHeaders[name]
          }
          // if the header is in the metadata, but not in the policy, then we need to set
          // it in the policy so that it's included in the immediate response. future
          // responses will load a new cache entry, so we don't need to change that
          if (!inPolicy && inMeta) {
            this.policy.response.headers[name] = metadata.resHeaders[name]
          }
        }
        try {
          await cacache.index.insert(
            options.cachePath,
            this.key,
            this.entry.integrity,
            {
              size: this.entry.size,
              metadata
            }
          )
        } catch (err) {
          // if updating the cache index fails, we ignore it and
          // respond anyway
        }
        return this.respond(request.method, options, 'revalidated')
      }

      // if we got a modified response, create a new entry based on it
      const newEntry = new CacheEntry({
        request,
        response,
        options
      })

      // respond with the new entry while writing it to the cache
      return newEntry.store('updated')
    }
  }
  entry$1 = CacheEntry
  return entry$1
}

let cache
let hasRequiredCache
function requireCache() {
  if (hasRequiredCache) {
    return cache
  }
  hasRequiredCache = 1
  const { NotCachedError } = requireErrors$1()
  const CacheEntry = requireEntry$1()
  const remote = requireRemote$1()

  // do whatever is necessary to get a Response and return it
  const cacheFetch = async (request, options) => {
    // try to find a cached entry that satisfies this request
    const entry = await CacheEntry.find(request, options)
    if (!entry) {
      // no cached result, if the cache mode is 'only-if-cached' that's a failure
      if (options.cache === 'only-if-cached') {
        throw new NotCachedError(request.url)
      }

      // otherwise, we make a request, store it and return it
      const response = await remote(request, options)
      const newEntry = new CacheEntry({
        request,
        response,
        options
      })
      return newEntry.store('miss')
    }

    // we have a cached response that satisfies this request, however if the cache
    // mode is 'no-cache' then we send the revalidation request no matter what
    if (options.cache === 'no-cache') {
      return entry.revalidate(request, options)
    }

    // if the cached entry is not stale, or if the cache mode is 'force-cache' or
    // 'only-if-cached' we can respond with the cached entry. set the status
    // based on the result of needsRevalidation and respond
    const _needsRevalidation = entry.policy.needsRevalidation(request)
    if (
      options.cache === 'force-cache' ||
      options.cache === 'only-if-cached' ||
      !_needsRevalidation
    ) {
      return entry.respond(
        request.method,
        options,
        _needsRevalidation ? 'stale' : 'hit'
      )
    }

    // if we got here, the cache entry is stale so revalidate it
    return entry.revalidate(request, options)
  }
  cacheFetch.invalidate = async (request, options) => {
    if (!options.cachePath) {
      return
    }
    return CacheEntry.invalidate(request, options)
  }
  cache = cacheFetch
  return cache
}

let fetch_1
let hasRequiredFetch$1
function requireFetch$1() {
  if (hasRequiredFetch$1) {
    return fetch_1
  }
  hasRequiredFetch$1 = 1
  const { FetchError, Request, isRedirect } = requireLib$7()
  const url = require$$0$2
  const CachePolicy = requirePolicy$1()
  const cache = requireCache()
  const remote = requireRemote$1()

  // given a Request, a Response and user options
  // return true if the response is a redirect that
  // can be followed. we throw errors that will result
  // in the fetch being rejected if the redirect is
  // possible but invalid for some reason
  const canFollowRedirect = (request, response, options) => {
    if (!isRedirect(response.status)) {
      return false
    }
    if (options.redirect === 'manual') {
      return false
    }
    if (options.redirect === 'error') {
      throw new FetchError(
        `redirect mode is set to error: ${request.url}`,
        'no-redirect',
        {
          code: 'ENOREDIRECT'
        }
      )
    }
    if (!response.headers.has('location')) {
      throw new FetchError(
        `redirect location header missing for: ${request.url}`,
        'no-location',
        {
          code: 'EINVALIDREDIRECT'
        }
      )
    }
    if (request.counter >= request.follow) {
      throw new FetchError(
        `maximum redirect reached at: ${request.url}`,
        'max-redirect',
        {
          code: 'EMAXREDIRECT'
        }
      )
    }
    return true
  }

  // given a Request, a Response, and the user's options return an object
  // with a new Request and a new options object that will be used for
  // following the redirect
  const getRedirect = (request, response, options) => {
    const _opts = {
      ...options
    }
    const location = response.headers.get('location')
    const redirectUrl = new url.URL(
      location,
      /^https?:/.test(location) ? undefined : request.url
    )
    // Comment below is used under the following license:
    /**
     * @license
     * Copyright (c) 2010-2012 Mikeal Rogers
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     * http://www.apache.org/licenses/LICENSE-2.0
     * Unless required by applicable law or agreed to in writing,
     * software distributed under the License is distributed on an "AS
     * IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
     * express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */

    // Remove authorization if changing hostnames (but not if just
    // changing ports or protocols).  This matches the behavior of request:
    // https://github.com/request/request/blob/b12a6245/lib/redirect.js#L134-L138
    if (new url.URL(request.url).hostname !== redirectUrl.hostname) {
      request.headers.delete('authorization')
      request.headers.delete('cookie')
    }

    // for POST request with 301/302 response, or any request with 303 response,
    // use GET when following redirect
    if (
      response.status === 303 ||
      (request.method === 'POST' && [301, 302].includes(response.status))
    ) {
      _opts.method = 'GET'
      _opts.body = null
      request.headers.delete('content-length')
    }
    _opts.headers = {}
    request.headers.forEach((value, key) => {
      _opts.headers[key] = value
    })
    _opts.counter = ++request.counter
    const redirectReq = new Request(url.format(redirectUrl), _opts)
    return {
      request: redirectReq,
      options: _opts
    }
  }
  const fetch = async (request, options) => {
    const response = CachePolicy.storable(request, options)
      ? await cache(request, options)
      : await remote(request, options)

    // if the request wasn't a GET or HEAD, and the response
    // status is between 200 and 399 inclusive, invalidate the
    // request url
    if (
      !['GET', 'HEAD'].includes(request.method) &&
      response.status >= 200 &&
      response.status <= 399
    ) {
      await cache.invalidate(request, options)
    }
    if (!canFollowRedirect(request, response, options)) {
      return response
    }
    const redirect = getRedirect(request, response, options)
    return fetch(redirect.request, redirect.options)
  }
  fetch_1 = fetch
  return fetch_1
}

let hasRequiredLib$3
function requireLib$3() {
  if (hasRequiredLib$3) {
    return lib$4.exports
  }
  hasRequiredLib$3 = 1
  const { FetchError, Headers, Request, Response } = requireLib$7()
  const configureOptions = requireOptions$1()
  const fetch = requireFetch$1()
  const makeFetchHappen = (url, opts) => {
    const options = configureOptions(opts)
    const request = new Request(url, options)
    return fetch(request, options)
  }
  makeFetchHappen.defaults = (
    defaultUrl,
    defaultOptions = {},
    wrappedFetch = makeFetchHappen
  ) => {
    if (typeof defaultUrl === 'object') {
      defaultOptions = defaultUrl
      defaultUrl = null
    }
    const defaultedFetch = (url, options = {}) => {
      const finalUrl = url || defaultUrl
      const finalOptions = {
        ...defaultOptions,
        ...options,
        headers: {
          ...defaultOptions.headers,
          ...options.headers
        }
      }
      return wrappedFetch(finalUrl, finalOptions)
    }
    defaultedFetch.defaults = (defaultUrl1, defaultOptions1 = {}) =>
      makeFetchHappen.defaults(defaultUrl1, defaultOptions1, defaultedFetch)
    return defaultedFetch
  }
  lib$4.exports = makeFetchHappen
  lib$4.exports.FetchError = FetchError
  lib$4.exports.Headers = Headers
  lib$4.exports.Request = Request
  lib$4.exports.Response = Response
  return lib$4.exports
}

/*global Buffer*/
let jsonparse
let hasRequiredJsonparse
function requireJsonparse() {
  if (hasRequiredJsonparse) {
    return jsonparse
  }
  hasRequiredJsonparse = 1
  // Named constants with unique integer values
  const C = {}
  // Tokens
  const LEFT_BRACE = (C.LEFT_BRACE = 0x1)
  const RIGHT_BRACE = (C.RIGHT_BRACE = 0x2)
  const LEFT_BRACKET = (C.LEFT_BRACKET = 0x3)
  const RIGHT_BRACKET = (C.RIGHT_BRACKET = 0x4)
  const COLON = (C.COLON = 0x5)
  const COMMA = (C.COMMA = 0x6)
  const TRUE = (C.TRUE = 0x7)
  const FALSE = (C.FALSE = 0x8)
  const NULL = (C.NULL = 0x9)
  const STRING = (C.STRING = 0xa)
  const NUMBER = (C.NUMBER = 0xb)
  // Tokenizer States
  const START = (C.START = 0x11)
  const STOP = (C.STOP = 0x12)
  const TRUE1 = (C.TRUE1 = 0x21)
  const TRUE2 = (C.TRUE2 = 0x22)
  const TRUE3 = (C.TRUE3 = 0x23)
  const FALSE1 = (C.FALSE1 = 0x31)
  const FALSE2 = (C.FALSE2 = 0x32)
  const FALSE3 = (C.FALSE3 = 0x33)
  const FALSE4 = (C.FALSE4 = 0x34)
  const NULL1 = (C.NULL1 = 0x41)
  const NULL2 = (C.NULL2 = 0x42)
  const NULL3 = (C.NULL3 = 0x43)
  const NUMBER1 = (C.NUMBER1 = 0x51)
  const NUMBER3 = (C.NUMBER3 = 0x53)
  const STRING1 = (C.STRING1 = 0x61)
  const STRING2 = (C.STRING2 = 0x62)
  const STRING3 = (C.STRING3 = 0x63)
  const STRING4 = (C.STRING4 = 0x64)
  const STRING5 = (C.STRING5 = 0x65)
  const STRING6 = (C.STRING6 = 0x66)
  // Parser States
  const VALUE = (C.VALUE = 0x71)
  const KEY = (C.KEY = 0x72)
  // Parser Modes
  const OBJECT = (C.OBJECT = 0x81)
  const ARRAY = (C.ARRAY = 0x82)
  // Character constants
  const BACK_SLASH = '\\'.charCodeAt(0)
  const FORWARD_SLASH = '/'.charCodeAt(0)
  const BACKSPACE = '\b'.charCodeAt(0)
  const FORM_FEED = '\f'.charCodeAt(0)
  const NEWLINE = '\n'.charCodeAt(0)
  const CARRIAGE_RETURN = '\r'.charCodeAt(0)
  const TAB = '\t'.charCodeAt(0)
  const STRING_BUFFER_SIZE = 64 * 1024
  function Parser() {
    this.tState = START
    this.value = undefined
    this.string = undefined // string data
    this.stringBuffer = Buffer.alloc
      ? Buffer.alloc(STRING_BUFFER_SIZE)
      : new Buffer(STRING_BUFFER_SIZE)
    this.stringBufferOffset = 0
    this.unicode = undefined // unicode escapes
    this.highSurrogate = undefined
    this.key = undefined
    this.mode = undefined
    this.stack = []
    this.state = VALUE
    this.bytes_remaining = 0 // number of bytes remaining in multi byte utf8 char to read after split boundary
    this.bytes_in_sequence = 0 // bytes in multi byte utf8 char to read
    this.temp_buffs = {
      2: new Buffer(2),
      3: new Buffer(3),
      4: new Buffer(4)
    } // for rebuilding chars split before boundary is reached

    // Stream offset
    this.offset = -1
  }

  // Slow code to string converter (only used when throwing syntax errors)
  Parser.toknam = function (code) {
    const keys = Object.keys(C)
    for (let i = 0, l = keys.length; i < l; i++) {
      const key = keys[i]
      if (C[key] === code) {
        return key
      }
    }
    return code && '0x' + code.toString(16)
  }
  const proto = Parser.prototype
  proto.onError = function (err) {
    throw err
  }
  proto.charError = function (buffer, i) {
    this.tState = STOP
    this.onError(
      new Error(
        'Unexpected ' +
          JSON.stringify(String.fromCharCode(buffer[i])) +
          ' at position ' +
          i +
          ' in state ' +
          Parser.toknam(this.tState)
      )
    )
  }
  proto.appendStringChar = function (char) {
    if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {
      this.string += this.stringBuffer.toString('utf8')
      this.stringBufferOffset = 0
    }
    this.stringBuffer[this.stringBufferOffset++] = char
  }
  proto.appendStringBuf = function (buf, start, end) {
    let size = buf.length
    if (typeof start === 'number') {
      if (typeof end === 'number') {
        if (end < 0) {
          // adding a negative end decreeses the size
          size = buf.length - start + end
        } else {
          size = end - start
        }
      } else {
        size = buf.length - start
      }
    }
    if (size < 0) {
      size = 0
    }
    if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {
      this.string += this.stringBuffer.toString(
        'utf8',
        0,
        this.stringBufferOffset
      )
      this.stringBufferOffset = 0
    }
    buf.copy(this.stringBuffer, this.stringBufferOffset, start, end)
    this.stringBufferOffset += size
  }
  proto.write = function (buffer) {
    if (typeof buffer === 'string') {
      buffer = new Buffer(buffer)
    }
    let n
    for (let i = 0, l = buffer.length; i < l; i++) {
      if (this.tState === START) {
        n = buffer[i]
        this.offset++
        if (n === 0x7b) {
          this.onToken(LEFT_BRACE, '{') // {
        } else if (n === 0x7d) {
          this.onToken(RIGHT_BRACE, '}') // }
        } else if (n === 0x5b) {
          this.onToken(LEFT_BRACKET, '[') // [
        } else if (n === 0x5d) {
          this.onToken(RIGHT_BRACKET, ']') // ]
        } else if (n === 0x3a) {
          this.onToken(COLON, ':') // :
        } else if (n === 0x2c) {
          this.onToken(COMMA, ',') // ,
        } else if (n === 0x74) {
          this.tState = TRUE1 // t
        } else if (n === 0x66) {
          this.tState = FALSE1 // f
        } else if (n === 0x6e) {
          this.tState = NULL1 // n
        } else if (n === 0x22) {
          // "
          this.string = ''
          this.stringBufferOffset = 0
          this.tState = STRING1
        } else if (n === 0x2d) {
          this.string = '-'
          this.tState = NUMBER1 // -
        } else {
          if (n >= 0x30 && n < 0x40) {
            // 1-9
            this.string = String.fromCharCode(n)
            this.tState = NUMBER3
          } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {
          } else {
            return this.charError(buffer, i)
          }
        }
      } else if (this.tState === STRING1) {
        // After open quote
        n = buffer[i] // get current byte from buffer
        // check for carry over of a multi byte char split between data chunks
        // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration
        if (this.bytes_remaining > 0) {
          for (var j = 0; j < this.bytes_remaining; j++) {
            this.temp_buffs[this.bytes_in_sequence][
              this.bytes_in_sequence - this.bytes_remaining + j
            ] = buffer[j]
          }
          this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence])
          this.bytes_in_sequence = this.bytes_remaining = 0
          i = i + j - 1
        } else if (this.bytes_remaining === 0 && n >= 128) {
          // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time
          if (n <= 193 || n > 244) {
            return this.onError(
              new Error(
                'Invalid UTF-8 character at position ' +
                  i +
                  ' in state ' +
                  Parser.toknam(this.tState)
              )
            )
          }
          if (n >= 194 && n <= 223) {
            this.bytes_in_sequence = 2
          }
          if (n >= 224 && n <= 239) {
            this.bytes_in_sequence = 3
          }
          if (n >= 240 && n <= 244) {
            this.bytes_in_sequence = 4
          }
          if (this.bytes_in_sequence + i > buffer.length) {
            // if bytes needed to complete char fall outside buffer length, we have a boundary split
            for (let k = 0; k <= buffer.length - 1 - i; k++) {
              this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k] // fill temp buffer of correct size with bytes available in this chunk
            }
            this.bytes_remaining = i + this.bytes_in_sequence - buffer.length
            i = buffer.length - 1
          } else {
            this.appendStringBuf(buffer, i, i + this.bytes_in_sequence)
            i = i + this.bytes_in_sequence - 1
          }
        } else if (n === 0x22) {
          this.tState = START
          this.string += this.stringBuffer.toString(
            'utf8',
            0,
            this.stringBufferOffset
          )
          this.stringBufferOffset = 0
          this.onToken(STRING, this.string)
          this.offset += Buffer.byteLength(this.string, 'utf8') + 1
          this.string = undefined
        } else if (n === 0x5c) {
          this.tState = STRING2
        } else if (n >= 0x20) {
          this.appendStringChar(n)
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === STRING2) {
        // After backslash
        n = buffer[i]
        if (n === 0x22) {
          this.appendStringChar(n)
          this.tState = STRING1
        } else if (n === 0x5c) {
          this.appendStringChar(BACK_SLASH)
          this.tState = STRING1
        } else if (n === 0x2f) {
          this.appendStringChar(FORWARD_SLASH)
          this.tState = STRING1
        } else if (n === 0x62) {
          this.appendStringChar(BACKSPACE)
          this.tState = STRING1
        } else if (n === 0x66) {
          this.appendStringChar(FORM_FEED)
          this.tState = STRING1
        } else if (n === 0x6e) {
          this.appendStringChar(NEWLINE)
          this.tState = STRING1
        } else if (n === 0x72) {
          this.appendStringChar(CARRIAGE_RETURN)
          this.tState = STRING1
        } else if (n === 0x74) {
          this.appendStringChar(TAB)
          this.tState = STRING1
        } else if (n === 0x75) {
          this.unicode = ''
          this.tState = STRING3
        } else {
          return this.charError(buffer, i)
        }
      } else if (
        this.tState === STRING3 ||
        this.tState === STRING4 ||
        this.tState === STRING5 ||
        this.tState === STRING6
      ) {
        // unicode hex codes
        n = buffer[i]
        // 0-9 A-F a-f
        if (
          (n >= 0x30 && n < 0x40) ||
          (n > 0x40 && n <= 0x46) ||
          (n > 0x60 && n <= 0x66)
        ) {
          this.unicode += String.fromCharCode(n)
          if (this.tState++ === STRING6) {
            const intVal = parseInt(this.unicode, 16)
            this.unicode = undefined
            if (
              this.highSurrogate !== undefined &&
              intVal >= 0xdc00 &&
              intVal < 0xdfff + 1
            ) {
              //<56320,57343> - lowSurrogate
              this.appendStringBuf(
                new Buffer(String.fromCharCode(this.highSurrogate, intVal))
              )
              this.highSurrogate = undefined
            } else if (
              this.highSurrogate === undefined &&
              intVal >= 0xd800 &&
              intVal < 0xdbff + 1
            ) {
              //<55296,56319> - highSurrogate
              this.highSurrogate = intVal
            } else {
              if (this.highSurrogate !== undefined) {
                this.appendStringBuf(
                  new Buffer(String.fromCharCode(this.highSurrogate))
                )
                this.highSurrogate = undefined
              }
              this.appendStringBuf(new Buffer(String.fromCharCode(intVal)))
            }
            this.tState = STRING1
          }
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {
        n = buffer[i]
        switch (n) {
          case 0x30: // 0
          case 0x31: // 1
          case 0x32: // 2
          case 0x33: // 3
          case 0x34: // 4
          case 0x35: // 5
          case 0x36: // 6
          case 0x37: // 7
          case 0x38: // 8
          case 0x39: // 9
          case 0x2e: // .
          case 0x65: // e
          case 0x45: // E
          case 0x2b: // +
          case 0x2d:
            // -
            this.string += String.fromCharCode(n)
            this.tState = NUMBER3
            break
          default:
            this.tState = START
            const result = Number(this.string)
            if (isNaN(result)) {
              return this.charError(buffer, i)
            }
            if (
              this.string.match(/[0-9]+/) == this.string &&
              result.toString() != this.string
            ) {
              // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number
              this.onToken(STRING, this.string)
            } else {
              this.onToken(NUMBER, result)
            }
            this.offset += this.string.length - 1
            this.string = undefined
            i--
            break
        }
      } else if (this.tState === TRUE1) {
        // r
        if (buffer[i] === 0x72) {
          this.tState = TRUE2
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === TRUE2) {
        // u
        if (buffer[i] === 0x75) {
          this.tState = TRUE3
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === TRUE3) {
        // e
        if (buffer[i] === 0x65) {
          this.tState = START
          this.onToken(TRUE, true)
          this.offset += 3
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === FALSE1) {
        // a
        if (buffer[i] === 0x61) {
          this.tState = FALSE2
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === FALSE2) {
        // l
        if (buffer[i] === 0x6c) {
          this.tState = FALSE3
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === FALSE3) {
        // s
        if (buffer[i] === 0x73) {
          this.tState = FALSE4
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === FALSE4) {
        // e
        if (buffer[i] === 0x65) {
          this.tState = START
          this.onToken(FALSE, false)
          this.offset += 4
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === NULL1) {
        // u
        if (buffer[i] === 0x75) {
          this.tState = NULL2
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === NULL2) {
        // l
        if (buffer[i] === 0x6c) {
          this.tState = NULL3
        } else {
          return this.charError(buffer, i)
        }
      } else if (this.tState === NULL3) {
        // l
        if (buffer[i] === 0x6c) {
          this.tState = START
          this.onToken(NULL, null)
          this.offset += 3
        } else {
          return this.charError(buffer, i)
        }
      }
    }
  }
  proto.onToken = function (token, value) {
    // Override this to get events
  }
  proto.parseError = function (token, value) {
    this.tState = STOP
    this.onError(
      new Error(
        'Unexpected ' +
          Parser.toknam(token) +
          (value ? '(' + JSON.stringify(value) + ')' : '') +
          ' in state ' +
          Parser.toknam(this.state)
      )
    )
  }
  proto.push = function () {
    this.stack.push({
      value: this.value,
      key: this.key,
      mode: this.mode
    })
  }
  proto.pop = function () {
    const value = this.value
    const parent = this.stack.pop()
    this.value = parent.value
    this.key = parent.key
    this.mode = parent.mode
    this.emit(value)
    if (!this.mode) {
      this.state = VALUE
    }
  }
  proto.emit = function (value) {
    if (this.mode) {
      this.state = COMMA
    }
    this.onValue(value)
  }
  proto.onValue = function (value) {
    // Override me
  }
  proto.onToken = function (token, value) {
    if (this.state === VALUE) {
      if (
        token === STRING ||
        token === NUMBER ||
        token === TRUE ||
        token === FALSE ||
        token === NULL
      ) {
        if (this.value) {
          this.value[this.key] = value
        }
        this.emit(value)
      } else if (token === LEFT_BRACE) {
        this.push()
        if (this.value) {
          this.value = this.value[this.key] = {}
        } else {
          this.value = {}
        }
        this.key = undefined
        this.state = KEY
        this.mode = OBJECT
      } else if (token === LEFT_BRACKET) {
        this.push()
        if (this.value) {
          this.value = this.value[this.key] = []
        } else {
          this.value = []
        }
        this.key = 0
        this.mode = ARRAY
        this.state = VALUE
      } else if (token === RIGHT_BRACE) {
        if (this.mode === OBJECT) {
          this.pop()
        } else {
          return this.parseError(token, value)
        }
      } else if (token === RIGHT_BRACKET) {
        if (this.mode === ARRAY) {
          this.pop()
        } else {
          return this.parseError(token, value)
        }
      } else {
        return this.parseError(token, value)
      }
    } else if (this.state === KEY) {
      if (token === STRING) {
        this.key = value
        this.state = COLON
      } else if (token === RIGHT_BRACE) {
        this.pop()
      } else {
        return this.parseError(token, value)
      }
    } else if (this.state === COLON) {
      if (token === COLON) {
        this.state = VALUE
      } else {
        return this.parseError(token, value)
      }
    } else if (this.state === COMMA) {
      if (token === COMMA) {
        if (this.mode === ARRAY) {
          this.key++
          this.state = VALUE
        } else if (this.mode === OBJECT) {
          this.state = KEY
        }
      } else if (
        (token === RIGHT_BRACKET && this.mode === ARRAY) ||
        (token === RIGHT_BRACE && this.mode === OBJECT)
      ) {
        this.pop()
      } else {
        return this.parseError(token, value)
      }
    } else {
      return this.parseError(token, value)
    }
  }
  Parser.C = C
  jsonparse = Parser
  return jsonparse
}

let jsonStream
let hasRequiredJsonStream
function requireJsonStream() {
  if (hasRequiredJsonStream) {
    return jsonStream
  }
  hasRequiredJsonStream = 1
  const Parser = requireJsonparse()
  const { Minipass } = requireCommonjs$7()
  class JSONStreamError extends Error {
    constructor(err, caller) {
      super(err.message)
      Error.captureStackTrace(this, caller || this.constructor)
    }
    get name() {
      return 'JSONStreamError'
    }
  }
  const check = (x, y) =>
    typeof x === 'string'
      ? String(y) === x
      : x && typeof x.test === 'function'
        ? x.test(y)
        : typeof x === 'boolean' || typeof x === 'object'
          ? x
          : typeof x === 'function'
            ? x(y)
            : false
  class JSONStream extends Minipass {
    #count = 0
    #ending = false
    #footer = null
    #header = null
    #map = null
    #onTokenOriginal
    #parser
    #path = null
    #root = null
    constructor(opts) {
      super({
        ...opts,
        objectMode: true
      })
      const parser = (this.#parser = new Parser())
      parser.onValue = value => this.#onValue(value)
      this.#onTokenOriginal = parser.onToken
      parser.onToken = (token, value) => this.#onToken(token, value)
      parser.onError = er => this.#onError(er)
      this.#path =
        typeof opts.path === 'string'
          ? opts.path.split('.').map(e =>
              e === '$*'
                ? {
                    emitKey: true
                  }
                : e === '*'
                  ? true
                  : e === ''
                    ? {
                        recurse: true
                      }
                    : e
            )
          : Array.isArray(opts.path) && opts.path.length
            ? opts.path
            : null
      if (typeof opts.map === 'function') {
        this.#map = opts.map
      }
    }
    #setHeaderFooter(key, value) {
      // header has not been emitted yet
      if (this.#header !== false) {
        this.#header = this.#header || {}
        this.#header[key] = value
      }

      // footer has not been emitted yet but header has
      if (this.#footer !== false && this.#header === false) {
        this.#footer = this.#footer || {}
        this.#footer[key] = value
      }
    }
    #onError(er) {
      // error will always happen during a write() call.
      const caller = this.#ending ? this.end : this.write
      this.#ending = false
      return this.emit('error', new JSONStreamError(er, caller))
    }
    #onToken(token, value) {
      const parser = this.#parser
      this.#onTokenOriginal.call(this.#parser, token, value)
      if (parser.stack.length === 0) {
        if (this.#root) {
          const root = this.#root
          if (!this.#path) {
            super.write(root)
          }
          this.#root = null
          this.#count = 0
        }
      }
    }
    #onValue(value) {
      const parser = this.#parser
      // the LAST onValue encountered is the root object.
      // just overwrite it each time.
      this.#root = value
      if (!this.#path) {
        return
      }
      let i = 0 // iterates on path
      let j = 0 // iterates on stack
      let emitKey = false
      while (i < this.#path.length) {
        const key = this.#path[i]
        j++
        if (key && !key.recurse) {
          const c = j === parser.stack.length ? parser : parser.stack[j]
          if (!c) {
            return
          }
          if (!check(key, c.key)) {
            this.#setHeaderFooter(c.key, value)
            return
          }
          emitKey = !!key.emitKey
          i++
        } else {
          i++
          if (i >= this.#path.length) {
            return
          }
          const nextKey = this.#path[i]
          if (!nextKey) {
            return
          }
          while (true) {
            const c = j === parser.stack.length ? parser : parser.stack[j]
            if (!c) {
              return
            }
            if (check(nextKey, c.key)) {
              i++
              if (!Object.isFrozen(parser.stack[j])) {
                parser.stack[j].value = null
              }
              break
            } else {
              this.#setHeaderFooter(c.key, value)
            }
            j++
          }
        }
      }

      // emit header
      if (this.#header) {
        const header = this.#header
        this.#header = false
        this.emit('header', header)
      }
      if (j !== parser.stack.length) {
        return
      }
      this.#count++
      const actualPath = parser.stack
        .slice(1)
        .map(e => e.key)
        .concat([parser.key])
      if (value !== null && value !== undefined) {
        const data = this.#map ? this.#map(value, actualPath) : value
        if (data !== null && data !== undefined) {
          const emit = emitKey
            ? {
                value: data
              }
            : data
          if (emitKey) {
            emit.key = parser.key
          }
          super.write(emit)
        }
      }
      if (parser.value) {
        delete parser.value[parser.key]
      }
      for (const k of parser.stack) {
        k.value = null
      }
    }
    write(chunk, encoding) {
      if (typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding)
      } else if (!Buffer.isBuffer(chunk)) {
        return this.emit(
          'error',
          new TypeError('Can only parse JSON from string or buffer input')
        )
      }
      this.#parser.write(chunk)
      return this.flowing
    }
    end(chunk, encoding) {
      this.#ending = true
      if (chunk) {
        this.write(chunk, encoding)
      }
      const h = this.#header
      this.#header = null
      const f = this.#footer
      this.#footer = null
      if (h) {
        this.emit('header', h)
      }
      if (f) {
        this.emit('footer', f)
      }
      return super.end()
    }
    static get JSONStreamError() {
      return JSONStreamError
    }
    static parse(path, map) {
      return new JSONStream({
        path,
        map
      })
    }
  }
  jsonStream = JSONStream
  return jsonStream
}

let hasRequiredLib$2
function requireLib$2() {
  if (hasRequiredLib$2) {
    return lib$8.exports
  }
  hasRequiredLib$2 = 1
  ;(function (module) {
    const { HttpErrorAuthOTP } = requireErrors$2()
    const checkResponse = requireCheckResponse()
    const getAuth = requireAuth()
    const fetch = requireLib$3()
    const JSONStream = requireJsonStream()
    const npa = requireNpa()
    const qs = require$$6$1
    const url = require$$0$2
    const zlib = requireCommonjs$1()
    const { Minipass } = requireCommonjs$7()
    const defaultOpts = requireDefaultOpts()

    // WhatWG URL throws if it's not fully resolved
    const urlIsValid = u => {
      try {
        return !!new url.URL(u)
      } catch (_) {
        return false
      }
    }
    module.exports = regFetch
    function regFetch(uri, /* istanbul ignore next */ opts_ = {}) {
      const opts = {
        ...defaultOpts,
        ...opts_
      }

      // if we did not get a fully qualified URI, then we look at the registry
      // config or relevant scope to resolve it.
      const uriValid = urlIsValid(uri)
      let registry = opts.registry || defaultOpts.registry
      if (!uriValid) {
        registry = opts.registry =
          (opts.spec && pickRegistry(opts.spec, opts)) ||
          opts.registry ||
          registry
        uri = `${registry.trim().replace(/\/?$/g, '')}/${uri.trim().replace(/^\//, '')}`
        // asserts that this is now valid
        new url.URL(uri)
      }
      const method = opts.method || 'GET'

      // through that takes into account the scope, the prefix of `uri`, etc
      const startTime = Date.now()
      const auth = getAuth(uri, opts)
      const headers = getHeaders(uri, auth, opts)
      let body = opts.body
      const bodyIsStream = Minipass.isStream(body)
      const bodyIsPromise =
        body && typeof body === 'object' && typeof body.then === 'function'
      if (
        body &&
        !bodyIsStream &&
        !bodyIsPromise &&
        typeof body !== 'string' &&
        !Buffer.isBuffer(body)
      ) {
        headers['content-type'] = headers['content-type'] || 'application/json'
        body = JSON.stringify(body)
      } else if (body && !headers['content-type']) {
        headers['content-type'] = 'application/octet-stream'
      }
      if (opts.gzip) {
        headers['content-encoding'] = 'gzip'
        if (bodyIsStream) {
          const gz = new zlib.Gzip()
          body.on(
            'error' /* istanbul ignore next: unlikely and hard to test */,
            err => gz.emit('error', err)
          )
          body = body.pipe(gz)
        } else if (!bodyIsPromise) {
          body = new zlib.Gzip().end(body).concat()
        }
      }
      const parsed = new url.URL(uri)
      if (opts.query) {
        const q =
          typeof opts.query === 'string' ? qs.parse(opts.query) : opts.query
        Object.keys(q).forEach(key => {
          if (q[key] !== undefined) {
            parsed.searchParams.set(key, q[key])
          }
        })
        uri = url.format(parsed)
      }
      if (parsed.searchParams.get('write') === 'true' && method === 'GET') {
        // do not cache, because this GET is fetching a rev that will be
        // used for a subsequent PUT or DELETE, so we need to conditionally
        // update cache.
        opts.offline = false
        opts.preferOffline = false
        opts.preferOnline = true
      }
      const doFetch = async fetchBody => {
        const p = fetch(uri, {
          agent: opts.agent,
          algorithms: opts.algorithms,
          body: fetchBody,
          cache: getCacheMode(opts),
          cachePath: opts.cache,
          ca: opts.ca,
          cert: auth.cert || opts.cert,
          headers,
          integrity: opts.integrity,
          key: auth.key || opts.key,
          localAddress: opts.localAddress,
          maxSockets: opts.maxSockets,
          memoize: opts.memoize,
          method: method,
          noProxy: opts.noProxy,
          proxy: opts.httpsProxy || opts.proxy,
          retry: opts.retry
            ? opts.retry
            : {
                retries: opts.fetchRetries,
                factor: opts.fetchRetryFactor,
                minTimeout: opts.fetchRetryMintimeout,
                maxTimeout: opts.fetchRetryMaxtimeout
              },
          strictSSL: opts.strictSSL,
          timeout: opts.timeout || 30 * 1000
        }).then(res =>
          checkResponse({
            method,
            uri,
            res,
            registry,
            startTime,
            auth,
            opts
          })
        )
        if (typeof opts.otpPrompt === 'function') {
          return p.catch(async er => {
            if (er instanceof HttpErrorAuthOTP) {
              let otp
              // if otp fails to complete, we fail with that failure
              try {
                otp = await opts.otpPrompt()
              } catch (_) {
                // ignore this error
              }
              // if no otp provided, or otpPrompt errored, throw the original HTTP error
              if (!otp) {
                throw er
              }
              return regFetch(uri, {
                ...opts,
                otp
              })
            }
            throw er
          })
        } else {
          return p
        }
      }
      return Promise.resolve(body).then(doFetch)
    }
    module.exports.getAuth = getAuth
    module.exports.json = fetchJSON
    function fetchJSON(uri, opts) {
      return regFetch(uri, opts).then(res => res.json())
    }
    module.exports.json.stream = fetchJSONStream
    function fetchJSONStream(
      uri,
      jsonPath,
      /* istanbul ignore next */ opts_ = {}
    ) {
      const opts = {
        ...defaultOpts,
        ...opts_
      }
      const parser = JSONStream.parse(jsonPath, opts.mapJSON)
      regFetch(uri, opts)
        .then(res =>
          res.body
            .on(
              'error' /* istanbul ignore next: unlikely and difficult to test */,
              er => parser.emit('error', er)
            )
            .pipe(parser)
        )
        .catch(er => parser.emit('error', er))
      return parser
    }
    module.exports.pickRegistry = pickRegistry
    function pickRegistry(spec, opts = {}) {
      spec = npa(spec)
      let registry =
        spec.scope && opts[spec.scope.replace(/^@?/, '@') + ':registry']
      if (!registry && opts.scope) {
        registry = opts[opts.scope.replace(/^@?/, '@') + ':registry']
      }
      if (!registry) {
        registry = opts.registry || defaultOpts.registry
      }
      return registry
    }
    function getCacheMode(opts) {
      return opts.offline
        ? 'only-if-cached'
        : opts.preferOffline
          ? 'force-cache'
          : opts.preferOnline
            ? 'no-cache'
            : 'default'
    }
    function getHeaders(uri, auth, opts) {
      const headers = Object.assign(
        {
          'user-agent': opts.userAgent
        },
        opts.headers || {}
      )
      if (opts.authType) {
        headers['npm-auth-type'] = opts.authType
      }
      if (opts.scope) {
        headers['npm-scope'] = opts.scope
      }
      if (opts.npmSession) {
        headers['npm-session'] = opts.npmSession
      }
      if (opts.npmCommand) {
        headers['npm-command'] = opts.npmCommand
      }

      // If a tarball is hosted on a different place than the manifest, only send
      // credentials on `alwaysAuth`
      if (auth.token) {
        headers.authorization = `Bearer ${auth.token}`
      } else if (auth.auth) {
        headers.authorization = `Basic ${auth.auth}`
      }
      if (opts.otp) {
        headers['npm-otp'] = opts.otp
      }
      return headers
    }
  })(lib$8)
  return lib$8.exports
}

const version$1 = '21.0.0'
const require$$9 = {
  version: version$1
}

let remote
let hasRequiredRemote
function requireRemote() {
  if (hasRequiredRemote) {
    return remote
  }
  hasRequiredRemote = 1
  const fetch = requireLib$2()
  const { Minipass } = requireCommonjs$7()
  const Fetcher = requireFetcher()
  const FileFetcher = requireFile$1()
  const _ = require_protected()
  const pacoteVersion = require$$9.version
  class RemoteFetcher extends Fetcher {
    constructor(spec, opts) {
      super(spec, opts)
      this.resolved = this.spec.fetchSpec
      const resolvedURL = new URL(this.resolved)
      if (
        this.replaceRegistryHost !== 'never' &&
        (this.replaceRegistryHost === 'always' ||
          this.replaceRegistryHost === resolvedURL.host)
      ) {
        this.resolved = new URL(resolvedURL.pathname, this.registry).href
      }

      // nam is a fermented pork sausage that is good to eat
      const nameat = this.spec.name ? `${this.spec.name}@` : ''
      this.pkgid = opts.pkgid ? opts.pkgid : `remote:${nameat}${this.resolved}`
    }

    // Don't need to cache tarball fetches in pacote, because make-fetch-happen
    // will write into cacache anyway.
    get [_.cacheFetches]() {
      return false
    }
    [_.tarballFromResolved]() {
      const stream = new Minipass()
      stream.hasIntegrityEmitter = true
      const fetchOpts = {
        ...this.opts,
        headers: this.#headers(),
        spec: this.spec,
        integrity: this.integrity,
        algorithms: [this.pickIntegrityAlgorithm()]
      }

      // eslint-disable-next-line promise/always-return
      fetch(this.resolved, fetchOpts)
        .then(res => {
          res.body.on(
            'error' /* istanbul ignore next - exceedingly rare and hard to simulate */,
            er => stream.emit('error', er)
          )
          res.body.on('integrity', i => {
            this.integrity = i
            stream.emit('integrity', i)
          })
          res.body.pipe(stream)
        })
        .catch(er => stream.emit('error', er))
      return stream
    }
    #headers() {
      return {
        // npm will override this, but ensure that we always send *something*
        'user-agent':
          this.opts.userAgent ||
          `pacote/${pacoteVersion} node/${process.version}`,
        ...this.opts.headers,
        'pacote-version': pacoteVersion,
        'pacote-req-type': 'tarball',
        'pacote-pkg-id': this.pkgid,
        ...(this.integrity
          ? {
              'pacote-integrity': String(this.integrity)
            }
          : {}),
        ...this.opts.headers
      }
    }
    get types() {
      return ['remote']
    }

    // getting a packument and/or manifest is the same as with a file: spec.
    // unpack the tarball stream, and then read from the package.json file.
    packument() {
      return FileFetcher.prototype.packument.apply(this)
    }
    manifest() {
      return FileFetcher.prototype.manifest.apply(this)
    }
  }
  remote = RemoteFetcher
  return remote
}

let addGitSha_1
let hasRequiredAddGitSha
function requireAddGitSha() {
  if (hasRequiredAddGitSha) {
    return addGitSha_1
  }
  hasRequiredAddGitSha = 1
  // add a sha to a git remote url spec
  const addGitSha = (spec, sha) => {
    if (spec.hosted) {
      const h = spec.hosted
      const opt = {
        noCommittish: true
      }
      const base = h.https && h.auth ? h.https(opt) : h.shortcut(opt)
      return `${base}#${sha}`
    } else {
      // don't use new URL for this, because it doesn't handle scp urls
      return spec.rawSpec.replace(/#.*$/, '') + `#${sha}`
    }
  }
  addGitSha_1 = addGitSha
  return addGitSha_1
}

let npm
let hasRequiredNpm
function requireNpm() {
  if (hasRequiredNpm) {
    return npm
  }
  hasRequiredNpm = 1
  // run an npm command
  const spawn = requireLib$q()
  npm = (npmBin, npmCommand, cwd, env, extra) => {
    const isJS = npmBin.endsWith('.js')
    const cmd = isJS ? process.execPath : npmBin
    const args = (isJS ? [npmBin] : []).concat(npmCommand)
    // when installing to run the `prepare` script for a git dep, we need
    // to ensure that we don't run into a cycle of checking out packages
    // in temp directories.  this lets us link previously-seen repos that
    // are also being prepared.

    return spawn(
      cmd,
      args,
      {
        cwd,
        env
      },
      extra
    )
  }
  return npm
}

let git_1
let hasRequiredGit
function requireGit() {
  if (hasRequiredGit) {
    return git_1
  }
  hasRequiredGit = 1
  const cacache = requireLib$e()
  const git = requireLib$l()
  const npa = requireNpa$1()
  const pickManifest = requireLib$m()
  const { Minipass } = requireCommonjs$7()
  const { log } = requireLib$t()
  const DirFetcher = requireDir()
  const Fetcher = requireFetcher()
  const FileFetcher = requireFile$1()
  const RemoteFetcher = requireRemote()
  const _ = require_protected()
  const addGitSha = requireAddGitSha()
  const npm = requireNpm()
  const hashre = /^[a-f0-9]{40}$/

  // get the repository url.
  // prefer https if there's auth, since ssh will drop that.
  // otherwise, prefer ssh if available (more secure).
  // We have to add the git+ back because npa suppresses it.
  const repoUrl = (h, opts) =>
    (h.sshurl && !(h.https && h.auth) && addGitPlus(h.sshurl(opts))) ||
    (h.https && addGitPlus(h.https(opts)))

  // add git+ to the url, but only one time.
  const addGitPlus = url => url && `git+${url}`.replace(/^(git\+)+/, 'git+')
  class GitFetcher extends Fetcher {
    constructor(spec, opts) {
      super(spec, opts)

      // we never want to compare integrity for git dependencies: npm/rfcs#525
      if (this.opts.integrity) {
        delete this.opts.integrity
        log.warn(
          `skipping integrity check for git dependency ${this.spec.fetchSpec}`
        )
      }
      this.resolvedRef = null
      if (this.spec.hosted) {
        this.from = this.spec.hosted.shortcut({
          noCommittish: false
        })
      }

      // shortcut: avoid full clone when we can go straight to the tgz
      // if we have the full sha and it's a hosted git platform
      if (this.spec.gitCommittish && hashre.test(this.spec.gitCommittish)) {
        this.resolvedSha = this.spec.gitCommittish
        // use hosted.tarball() when we shell to RemoteFetcher later
        this.resolved = this.spec.hosted
          ? repoUrl(this.spec.hosted, {
              noCommittish: false
            })
          : this.spec.rawSpec
      } else {
        this.resolvedSha = ''
      }
      this.Arborist = opts.Arborist || null
    }

    // just exposed to make it easier to test all the combinations
    static repoUrl(hosted, opts) {
      return repoUrl(hosted, opts)
    }
    get types() {
      return ['git']
    }
    resolve() {
      // likely a hosted git repo with a sha, so get the tarball url
      // but in general, no reason to resolve() more than necessary!
      if (this.resolved) {
        return super.resolve()
      }

      // fetch the git repo and then look at the current hash
      const h = this.spec.hosted
      // try to use ssh, fall back to git.
      return h
        ? this.#resolvedFromHosted(h)
        : this.#resolvedFromRepo(this.spec.fetchSpec)
    }

    // first try https, since that's faster and passphrase-less for
    // public repos, and supports private repos when auth is provided.
    // Fall back to SSH to support private repos
    // NB: we always store the https url in resolved field if auth
    // is present, otherwise ssh if the hosted type provides it
    #resolvedFromHosted(hosted) {
      return this.#resolvedFromRepo(hosted.https && hosted.https()).catch(
        er => {
          // Throw early since we know pathspec errors will fail again if retried
          if (er instanceof git.errors.GitPathspecError) {
            throw er
          }
          const ssh = hosted.sshurl && hosted.sshurl()
          // no fallthrough if we can't fall through or have https auth
          if (!ssh || hosted.auth) {
            throw er
          }
          return this.#resolvedFromRepo(ssh)
        }
      )
    }
    #resolvedFromRepo(gitRemote) {
      // XXX make this a custom error class
      if (!gitRemote) {
        return Promise.reject(new Error(`No git url for ${this.spec}`))
      }
      const gitRange = this.spec.gitRange
      const name = this.spec.name
      return git
        .revs(gitRemote, this.opts)
        .then(remoteRefs => {
          return gitRange
            ? pickManifest(
                {
                  versions: remoteRefs.versions,
                  'dist-tags': remoteRefs['dist-tags'],
                  name
                },
                gitRange,
                this.opts
              )
            : this.spec.gitCommittish
              ? remoteRefs.refs[this.spec.gitCommittish] ||
                remoteRefs.refs[remoteRefs.shas[this.spec.gitCommittish]]
              : remoteRefs.refs.HEAD // no git committish, get default head
        })
        .then(revDoc => {
          // the committish provided isn't in the rev list
          // things like HEAD~3 or @yesterday can land here.
          if (!revDoc || !revDoc.sha) {
            return this.#resolvedFromClone()
          }
          this.resolvedRef = revDoc
          this.resolvedSha = revDoc.sha
          this.#addGitSha(revDoc.sha)
          return this.resolved
        })
    }
    #setResolvedWithSha(withSha) {
      // we haven't cloned, so a tgz download is still faster
      // of course, if it's not a known host, we can't do that.
      this.resolved = !this.spec.hosted
        ? withSha
        : repoUrl(npa(withSha).hosted, {
            noCommittish: false
          })
    }

    // when we get the git sha, we affix it to our spec to build up
    // either a git url with a hash, or a tarball download URL
    #addGitSha(sha) {
      this.#setResolvedWithSha(addGitSha(this.spec, sha))
    }
    #resolvedFromClone() {
      // do a full or shallow clone, then look at the HEAD
      // kind of wasteful, but no other option, really
      return this.#clone(() => this.resolved)
    }
    #prepareDir(dir) {
      return this[_.readPackageJson](dir).then(mani => {
        // no need if we aren't going to do any preparation.
        const scripts = mani.scripts
        if (
          !mani.workspaces &&
          (!scripts ||
            !(
              scripts.postinstall ||
              scripts.build ||
              scripts.preinstall ||
              scripts.install ||
              scripts.prepack ||
              scripts.prepare
            ))
        ) {
          return
        }

        // to avoid cases where we have an cycle of git deps that depend
        // on one another, we only ever do preparation for one instance
        // of a given git dep along the chain of installations.
        // Note that this does mean that a dependency MAY in theory end up
        // trying to run its prepare script using a dependency that has not
        // been properly prepared itself, but that edge case is smaller
        // and less hazardous than a fork bomb of npm and git commands.
        const noPrepare = !process.env._PACOTE_NO_PREPARE_
          ? []
          : process.env._PACOTE_NO_PREPARE_.split('\n')
        if (noPrepare.includes(this.resolved)) {
          log.info('prepare', 'skip prepare, already seen', this.resolved)
          return
        }
        noPrepare.push(this.resolved)

        // the DirFetcher will do its own preparation to run the prepare scripts
        // All we have to do is put the deps in place so that it can succeed.
        return npm(
          this.npmBin,
          [].concat(this.npmInstallCmd).concat(this.npmCliConfig),
          dir,
          {
            ...process.env,
            _PACOTE_NO_PREPARE_: noPrepare.join('\n')
          },
          {
            message: 'git dep preparation failed'
          }
        )
      })
    }
    [_.tarballFromResolved]() {
      const stream = new Minipass()
      stream.resolved = this.resolved
      stream.from = this.from

      // check it out and then shell out to the DirFetcher tarball packer
      this.#clone(dir =>
        this.#prepareDir(dir).then(
          () =>
            new Promise((res, rej) => {
              if (!this.Arborist) {
                throw new Error(
                  'GitFetcher requires an Arborist constructor to pack a tarball'
                )
              }
              const df = new DirFetcher(`file:${dir}`, {
                ...this.opts,
                Arborist: this.Arborist,
                resolved: null,
                integrity: null
              })
              const dirStream = df[_.tarballFromResolved]()
              dirStream.on('error', rej)
              dirStream.on('end', res)
              dirStream.pipe(stream)
            })
        )
      ).catch(
        /* istanbul ignore next: very unlikely and hard to test */
        er => stream.emit('error', er)
      )
      return stream
    }

    // clone a git repo into a temp folder (or fetch and unpack if possible)
    // handler accepts a directory, and returns a promise that resolves
    // when we're done with it, at which point, cacache deletes it
    //
    // TODO: after cloning, create a tarball of the folder, and add to the cache
    // with cacache.put.stream(), using a key that's deterministic based on the
    // spec and repo, so that we don't ever clone the same thing multiple times.
    #clone(handler, tarballOk = true) {
      const o = {
        tmpPrefix: 'git-clone'
      }
      const ref = this.resolvedSha || this.spec.gitCommittish
      const h = this.spec.hosted
      const resolved = this.resolved

      // can be set manually to false to fall back to actual git clone
      tarballOk =
        tarballOk &&
        h &&
        resolved ===
          repoUrl(h, {
            noCommittish: false
          }) &&
        h.tarball
      return cacache.tmp.withTmp(this.cache, o, async tmp => {
        // if we're resolved, and have a tarball url, shell out to RemoteFetcher
        if (tarballOk) {
          const nameat = this.spec.name ? `${this.spec.name}@` : ''
          return new RemoteFetcher(
            h.tarball({
              noCommittish: false
            }),
            {
              ...this.opts,
              allowGitIgnore: true,
              pkgid: `git:${nameat}${this.resolved}`,
              resolved: this.resolved,
              integrity: null // it'll always be different, if we have one
            }
          )
            .extract(tmp)
            .then(
              () => handler(tmp),
              er => {
                // fall back to ssh download if tarball fails
                if (er.constructor.name.match(/^Http/)) {
                  return this.#clone(handler, false)
                } else {
                  throw er
                }
              }
            )
        }
        const sha = await (h
          ? this.#cloneHosted(ref, tmp)
          : this.#cloneRepo(this.spec.fetchSpec, ref, tmp))
        this.resolvedSha = sha
        if (!this.resolved) {
          await this.#addGitSha(sha)
        }
        return handler(tmp)
      })
    }

    // first try https, since that's faster and passphrase-less for
    // public repos, and supports private repos when auth is provided.
    // Fall back to SSH to support private repos
    // NB: we always store the https url in resolved field if auth
    // is present, otherwise ssh if the hosted type provides it
    #cloneHosted(ref, tmp) {
      const hosted = this.spec.hosted
      return this.#cloneRepo(
        hosted.https({
          noCommittish: true
        }),
        ref,
        tmp
      ).catch(er => {
        // Throw early since we know pathspec errors will fail again if retried
        if (er instanceof git.errors.GitPathspecError) {
          throw er
        }
        const ssh =
          hosted.sshurl &&
          hosted.sshurl({
            noCommittish: true
          })
        // no fallthrough if we can't fall through or have https auth
        if (!ssh || hosted.auth) {
          throw er
        }
        return this.#cloneRepo(ssh, ref, tmp)
      })
    }
    #cloneRepo(repo, ref, tmp) {
      const { opts, spec } = this
      return git.clone(repo, ref, tmp, {
        ...opts,
        spec
      })
    }
    manifest() {
      if (this.package) {
        return Promise.resolve(this.package)
      }
      return this.spec.hosted && this.resolved
        ? FileFetcher.prototype.manifest.apply(this)
        : this.#clone(dir =>
            this[_.readPackageJson](dir).then(
              mani =>
                (this.package = {
                  ...mani,
                  _resolved: this.resolved,
                  _from: this.from
                })
            )
          )
    }
    packument() {
      return FileFetcher.prototype.packument.apply(this)
    }
  }
  git_1 = GitFetcher
  return git_1
}

const dist$8 = {}

const dist$7 = {}

const build = {}

const dist$6 = {}

const envelope = {}

let hasRequiredEnvelope
function requireEnvelope() {
  if (hasRequiredEnvelope) {
    return envelope
  }
  hasRequiredEnvelope = 1
  ;(function (exports) {
    // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
    // versions:
    //   protoc-gen-ts_proto  v2.7.0
    //   protoc               v6.30.2
    // source: envelope.proto
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Signature = exports.Envelope = void 0
    exports.Envelope = {
      fromJSON(object) {
        return {
          payload: isSet(object.payload)
            ? Buffer.from(bytesFromBase64(object.payload))
            : Buffer.alloc(0),
          payloadType: isSet(object.payloadType)
            ? globalThis.String(object.payloadType)
            : '',
          signatures: globalThis.Array.isArray(object?.signatures)
            ? object.signatures.map(e => exports.Signature.fromJSON(e))
            : []
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.payload.length !== 0) {
          obj.payload = base64FromBytes(message.payload)
        }
        if (message.payloadType !== '') {
          obj.payloadType = message.payloadType
        }
        if (message.signatures?.length) {
          obj.signatures = message.signatures.map(e =>
            exports.Signature.toJSON(e)
          )
        }
        return obj
      }
    }
    exports.Signature = {
      fromJSON(object) {
        return {
          sig: isSet(object.sig)
            ? Buffer.from(bytesFromBase64(object.sig))
            : Buffer.alloc(0),
          keyid: isSet(object.keyid) ? globalThis.String(object.keyid) : ''
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.sig.length !== 0) {
          obj.sig = base64FromBytes(message.sig)
        }
        if (message.keyid !== '') {
          obj.keyid = message.keyid
        }
        return obj
      }
    }
    function bytesFromBase64(b64) {
      return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'))
    }
    function base64FromBytes(arr) {
      return globalThis.Buffer.from(arr).toString('base64')
    }
    function isSet(value) {
      return value !== null && value !== undefined
    }
  })(envelope)
  return envelope
}

const sigstore_bundle = {}

const sigstore_common = {}

const timestamp$3 = {}

let hasRequiredTimestamp$3
function requireTimestamp$3() {
  if (hasRequiredTimestamp$3) {
    return timestamp$3
  }
  hasRequiredTimestamp$3 = 1
  // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
  // versions:
  //   protoc-gen-ts_proto  v2.7.0
  //   protoc               v6.30.2
  // source: google/protobuf/timestamp.proto
  Object.defineProperty(timestamp$3, '__esModule', {
    value: true
  })
  timestamp$3.Timestamp = void 0
  timestamp$3.Timestamp = {
    fromJSON(object) {
      return {
        seconds: isSet(object.seconds)
          ? globalThis.String(object.seconds)
          : '0',
        nanos: isSet(object.nanos) ? globalThis.Number(object.nanos) : 0
      }
    },
    toJSON(message) {
      const obj = {}
      if (message.seconds !== '0') {
        obj.seconds = message.seconds
      }
      if (message.nanos !== 0) {
        obj.nanos = Math.round(message.nanos)
      }
      return obj
    }
  }
  function isSet(value) {
    return value !== null && value !== undefined
  }
  return timestamp$3
}

let hasRequiredSigstore_common
function requireSigstore_common() {
  if (hasRequiredSigstore_common) {
    return sigstore_common
  }
  hasRequiredSigstore_common = 1
  ;(function (exports) {
    // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
    // versions:
    //   protoc-gen-ts_proto  v2.7.0
    //   protoc               v6.30.2
    // source: sigstore_common.proto
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.TimeRange =
      exports.X509CertificateChain =
      exports.SubjectAlternativeName =
      exports.X509Certificate =
      exports.DistinguishedName =
      exports.ObjectIdentifierValuePair =
      exports.ObjectIdentifier =
      exports.PublicKeyIdentifier =
      exports.PublicKey =
      exports.RFC3161SignedTimestamp =
      exports.LogId =
      exports.MessageSignature =
      exports.HashOutput =
      exports.SubjectAlternativeNameType =
      exports.PublicKeyDetails =
      exports.HashAlgorithm =
        void 0
    exports.hashAlgorithmFromJSON = hashAlgorithmFromJSON
    exports.hashAlgorithmToJSON = hashAlgorithmToJSON
    exports.publicKeyDetailsFromJSON = publicKeyDetailsFromJSON
    exports.publicKeyDetailsToJSON = publicKeyDetailsToJSON
    exports.subjectAlternativeNameTypeFromJSON =
      subjectAlternativeNameTypeFromJSON
    exports.subjectAlternativeNameTypeToJSON = subjectAlternativeNameTypeToJSON
    /* eslint-disable */
    const timestamp_1 = requireTimestamp$3()
    /**
     * Only a subset of the secure hash standard algorithms are supported.
     * See <https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf> for more
     * details.
     * UNSPECIFIED SHOULD not be used, primary reason for inclusion is to force
     * any proto JSON serialization to emit the used hash algorithm, as default
     * option is to *omit* the default value of an enum (which is the first
     * value, represented by '0'.
     */
    var HashAlgorithm
    ;(function (HashAlgorithm) {
      HashAlgorithm[(HashAlgorithm['HASH_ALGORITHM_UNSPECIFIED'] = 0)] =
        'HASH_ALGORITHM_UNSPECIFIED'
      HashAlgorithm[(HashAlgorithm['SHA2_256'] = 1)] = 'SHA2_256'
      HashAlgorithm[(HashAlgorithm['SHA2_384'] = 2)] = 'SHA2_384'
      HashAlgorithm[(HashAlgorithm['SHA2_512'] = 3)] = 'SHA2_512'
      HashAlgorithm[(HashAlgorithm['SHA3_256'] = 4)] = 'SHA3_256'
      HashAlgorithm[(HashAlgorithm['SHA3_384'] = 5)] = 'SHA3_384'
    })(HashAlgorithm || (exports.HashAlgorithm = HashAlgorithm = {}))
    function hashAlgorithmFromJSON(object) {
      switch (object) {
        case 0:
        case 'HASH_ALGORITHM_UNSPECIFIED':
          return HashAlgorithm.HASH_ALGORITHM_UNSPECIFIED
        case 1:
        case 'SHA2_256':
          return HashAlgorithm.SHA2_256
        case 2:
        case 'SHA2_384':
          return HashAlgorithm.SHA2_384
        case 3:
        case 'SHA2_512':
          return HashAlgorithm.SHA2_512
        case 4:
        case 'SHA3_256':
          return HashAlgorithm.SHA3_256
        case 5:
        case 'SHA3_384':
          return HashAlgorithm.SHA3_384
        default:
          throw new globalThis.Error(
            'Unrecognized enum value ' + object + ' for enum HashAlgorithm'
          )
      }
    }
    function hashAlgorithmToJSON(object) {
      switch (object) {
        case HashAlgorithm.HASH_ALGORITHM_UNSPECIFIED:
          return 'HASH_ALGORITHM_UNSPECIFIED'
        case HashAlgorithm.SHA2_256:
          return 'SHA2_256'
        case HashAlgorithm.SHA2_384:
          return 'SHA2_384'
        case HashAlgorithm.SHA2_512:
          return 'SHA2_512'
        case HashAlgorithm.SHA3_256:
          return 'SHA3_256'
        case HashAlgorithm.SHA3_384:
          return 'SHA3_384'
        default:
          throw new globalThis.Error(
            'Unrecognized enum value ' + object + ' for enum HashAlgorithm'
          )
      }
    }
    /**
     * Details of a specific public key, capturing the the key encoding method,
     * and signature algorithm.
     *
     * PublicKeyDetails captures the public key/hash algorithm combinations
     * recommended in the Sigstore ecosystem.
     *
     * This is modelled as a linear set as we want to provide a small number of
     * opinionated options instead of allowing every possible permutation.
     *
     * Any changes to this enum MUST be reflected in the algorithm registry.
     *
     * See: <https://github.com/sigstore/architecture-docs/blob/main/algorithm-registry.md>
     *
     * To avoid the possibility of contradicting formats such as PKCS1 with
     * ED25519 the valid permutations are listed as a linear set instead of a
     * cartesian set (i.e one combined variable instead of two, one for encoding
     * and one for the signature algorithm).
     */
    var PublicKeyDetails
    ;(function (PublicKeyDetails) {
      PublicKeyDetails[
        (PublicKeyDetails['PUBLIC_KEY_DETAILS_UNSPECIFIED'] = 0)
      ] = 'PUBLIC_KEY_DETAILS_UNSPECIFIED'
      /**
       * PKCS1_RSA_PKCS1V5 - RSA
       *
       * @deprecated
       */
      PublicKeyDetails[(PublicKeyDetails['PKCS1_RSA_PKCS1V5'] = 1)] =
        'PKCS1_RSA_PKCS1V5'
      /**
       * PKCS1_RSA_PSS - See RFC8017
       *
       * @deprecated
       */
      PublicKeyDetails[(PublicKeyDetails['PKCS1_RSA_PSS'] = 2)] =
        'PKCS1_RSA_PSS'
      /** @deprecated */
      PublicKeyDetails[(PublicKeyDetails['PKIX_RSA_PKCS1V5'] = 3)] =
        'PKIX_RSA_PKCS1V5'
      /** @deprecated */
      PublicKeyDetails[(PublicKeyDetails['PKIX_RSA_PSS'] = 4)] = 'PKIX_RSA_PSS'
      /** PKIX_RSA_PKCS1V15_2048_SHA256 - RSA public key in PKIX format, PKCS#1v1.5 signature */
      PublicKeyDetails[
        (PublicKeyDetails['PKIX_RSA_PKCS1V15_2048_SHA256'] = 9)
      ] = 'PKIX_RSA_PKCS1V15_2048_SHA256'
      PublicKeyDetails[
        (PublicKeyDetails['PKIX_RSA_PKCS1V15_3072_SHA256'] = 10)
      ] = 'PKIX_RSA_PKCS1V15_3072_SHA256'
      PublicKeyDetails[
        (PublicKeyDetails['PKIX_RSA_PKCS1V15_4096_SHA256'] = 11)
      ] = 'PKIX_RSA_PKCS1V15_4096_SHA256'
      /** PKIX_RSA_PSS_2048_SHA256 - RSA public key in PKIX format, RSASSA-PSS signature */
      PublicKeyDetails[(PublicKeyDetails['PKIX_RSA_PSS_2048_SHA256'] = 16)] =
        'PKIX_RSA_PSS_2048_SHA256'
      PublicKeyDetails[(PublicKeyDetails['PKIX_RSA_PSS_3072_SHA256'] = 17)] =
        'PKIX_RSA_PSS_3072_SHA256'
      PublicKeyDetails[(PublicKeyDetails['PKIX_RSA_PSS_4096_SHA256'] = 18)] =
        'PKIX_RSA_PSS_4096_SHA256'
      /**
       * PKIX_ECDSA_P256_HMAC_SHA_256 - ECDSA
       *
       * @deprecated
       */
      PublicKeyDetails[(PublicKeyDetails['PKIX_ECDSA_P256_HMAC_SHA_256'] = 6)] =
        'PKIX_ECDSA_P256_HMAC_SHA_256'
      /** PKIX_ECDSA_P256_SHA_256 - See NIST FIPS 186-4 */
      PublicKeyDetails[(PublicKeyDetails['PKIX_ECDSA_P256_SHA_256'] = 5)] =
        'PKIX_ECDSA_P256_SHA_256'
      PublicKeyDetails[(PublicKeyDetails['PKIX_ECDSA_P384_SHA_384'] = 12)] =
        'PKIX_ECDSA_P384_SHA_384'
      PublicKeyDetails[(PublicKeyDetails['PKIX_ECDSA_P521_SHA_512'] = 13)] =
        'PKIX_ECDSA_P521_SHA_512'
      /** PKIX_ED25519 - Ed 25519 */
      PublicKeyDetails[(PublicKeyDetails['PKIX_ED25519'] = 7)] = 'PKIX_ED25519'
      PublicKeyDetails[(PublicKeyDetails['PKIX_ED25519_PH'] = 8)] =
        'PKIX_ED25519_PH'
      /**
       * PKIX_ECDSA_P384_SHA_256 - These algorithms are deprecated and should not be used, but they
       * were/are being used by most Sigstore clients implementations.
       *
       * @deprecated
       */
      PublicKeyDetails[(PublicKeyDetails['PKIX_ECDSA_P384_SHA_256'] = 19)] =
        'PKIX_ECDSA_P384_SHA_256'
      /** @deprecated */
      PublicKeyDetails[(PublicKeyDetails['PKIX_ECDSA_P521_SHA_256'] = 20)] =
        'PKIX_ECDSA_P521_SHA_256'
      /**
       * LMS_SHA256 - LMS and LM-OTS
       *
       * These algorithms are deprecated and should not be used.
       * Keys and signatures MAY be used by private Sigstore
       * deployments, but will not be supported by the public
       * good instance.
       *
       * USER WARNING: LMS and LM-OTS are both stateful signature schemes.
       * Using them correctly requires discretion and careful consideration
       * to ensure that individual secret keys are not used more than once.
       * In addition, LM-OTS is a single-use scheme, meaning that it
       * MUST NOT be used for more than one signature per LM-OTS key.
       * If you cannot maintain these invariants, you MUST NOT use these
       * schemes.
       *
       * @deprecated
       */
      PublicKeyDetails[(PublicKeyDetails['LMS_SHA256'] = 14)] = 'LMS_SHA256'
      /** @deprecated */
      PublicKeyDetails[(PublicKeyDetails['LMOTS_SHA256'] = 15)] = 'LMOTS_SHA256'
      /**
       * ML_DSA_65 - ML-DSA
       *
       * These ML_DSA_65 and ML-DSA_87 algorithms are the pure variants that
       * take data to sign rather than the prehash variants (HashML-DSA), which
       * take digests.  While considered quantum-resistant, their usage
       * involves tradeoffs in that signatures and keys are much larger, and
       * this makes deployments more costly.
       *
       * USER WARNING: ML_DSA_65 and ML_DSA_87 are experimental algorithms.
       * In the future they MAY be used by private Sigstore deployments, but
       * they are not yet fully functional.  This warning will be removed when
       * these algorithms are widely supported by Sigstore clients and servers,
       * but care should still be taken for production environments.
       */
      PublicKeyDetails[(PublicKeyDetails['ML_DSA_65'] = 21)] = 'ML_DSA_65'
      PublicKeyDetails[(PublicKeyDetails['ML_DSA_87'] = 22)] = 'ML_DSA_87'
    })(PublicKeyDetails || (exports.PublicKeyDetails = PublicKeyDetails = {}))
    function publicKeyDetailsFromJSON(object) {
      switch (object) {
        case 0:
        case 'PUBLIC_KEY_DETAILS_UNSPECIFIED':
          return PublicKeyDetails.PUBLIC_KEY_DETAILS_UNSPECIFIED
        case 1:
        case 'PKCS1_RSA_PKCS1V5':
          return PublicKeyDetails.PKCS1_RSA_PKCS1V5
        case 2:
        case 'PKCS1_RSA_PSS':
          return PublicKeyDetails.PKCS1_RSA_PSS
        case 3:
        case 'PKIX_RSA_PKCS1V5':
          return PublicKeyDetails.PKIX_RSA_PKCS1V5
        case 4:
        case 'PKIX_RSA_PSS':
          return PublicKeyDetails.PKIX_RSA_PSS
        case 9:
        case 'PKIX_RSA_PKCS1V15_2048_SHA256':
          return PublicKeyDetails.PKIX_RSA_PKCS1V15_2048_SHA256
        case 10:
        case 'PKIX_RSA_PKCS1V15_3072_SHA256':
          return PublicKeyDetails.PKIX_RSA_PKCS1V15_3072_SHA256
        case 11:
        case 'PKIX_RSA_PKCS1V15_4096_SHA256':
          return PublicKeyDetails.PKIX_RSA_PKCS1V15_4096_SHA256
        case 16:
        case 'PKIX_RSA_PSS_2048_SHA256':
          return PublicKeyDetails.PKIX_RSA_PSS_2048_SHA256
        case 17:
        case 'PKIX_RSA_PSS_3072_SHA256':
          return PublicKeyDetails.PKIX_RSA_PSS_3072_SHA256
        case 18:
        case 'PKIX_RSA_PSS_4096_SHA256':
          return PublicKeyDetails.PKIX_RSA_PSS_4096_SHA256
        case 6:
        case 'PKIX_ECDSA_P256_HMAC_SHA_256':
          return PublicKeyDetails.PKIX_ECDSA_P256_HMAC_SHA_256
        case 5:
        case 'PKIX_ECDSA_P256_SHA_256':
          return PublicKeyDetails.PKIX_ECDSA_P256_SHA_256
        case 12:
        case 'PKIX_ECDSA_P384_SHA_384':
          return PublicKeyDetails.PKIX_ECDSA_P384_SHA_384
        case 13:
        case 'PKIX_ECDSA_P521_SHA_512':
          return PublicKeyDetails.PKIX_ECDSA_P521_SHA_512
        case 7:
        case 'PKIX_ED25519':
          return PublicKeyDetails.PKIX_ED25519
        case 8:
        case 'PKIX_ED25519_PH':
          return PublicKeyDetails.PKIX_ED25519_PH
        case 19:
        case 'PKIX_ECDSA_P384_SHA_256':
          return PublicKeyDetails.PKIX_ECDSA_P384_SHA_256
        case 20:
        case 'PKIX_ECDSA_P521_SHA_256':
          return PublicKeyDetails.PKIX_ECDSA_P521_SHA_256
        case 14:
        case 'LMS_SHA256':
          return PublicKeyDetails.LMS_SHA256
        case 15:
        case 'LMOTS_SHA256':
          return PublicKeyDetails.LMOTS_SHA256
        case 21:
        case 'ML_DSA_65':
          return PublicKeyDetails.ML_DSA_65
        case 22:
        case 'ML_DSA_87':
          return PublicKeyDetails.ML_DSA_87
        default:
          throw new globalThis.Error(
            'Unrecognized enum value ' + object + ' for enum PublicKeyDetails'
          )
      }
    }
    function publicKeyDetailsToJSON(object) {
      switch (object) {
        case PublicKeyDetails.PUBLIC_KEY_DETAILS_UNSPECIFIED:
          return 'PUBLIC_KEY_DETAILS_UNSPECIFIED'
        case PublicKeyDetails.PKCS1_RSA_PKCS1V5:
          return 'PKCS1_RSA_PKCS1V5'
        case PublicKeyDetails.PKCS1_RSA_PSS:
          return 'PKCS1_RSA_PSS'
        case PublicKeyDetails.PKIX_RSA_PKCS1V5:
          return 'PKIX_RSA_PKCS1V5'
        case PublicKeyDetails.PKIX_RSA_PSS:
          return 'PKIX_RSA_PSS'
        case PublicKeyDetails.PKIX_RSA_PKCS1V15_2048_SHA256:
          return 'PKIX_RSA_PKCS1V15_2048_SHA256'
        case PublicKeyDetails.PKIX_RSA_PKCS1V15_3072_SHA256:
          return 'PKIX_RSA_PKCS1V15_3072_SHA256'
        case PublicKeyDetails.PKIX_RSA_PKCS1V15_4096_SHA256:
          return 'PKIX_RSA_PKCS1V15_4096_SHA256'
        case PublicKeyDetails.PKIX_RSA_PSS_2048_SHA256:
          return 'PKIX_RSA_PSS_2048_SHA256'
        case PublicKeyDetails.PKIX_RSA_PSS_3072_SHA256:
          return 'PKIX_RSA_PSS_3072_SHA256'
        case PublicKeyDetails.PKIX_RSA_PSS_4096_SHA256:
          return 'PKIX_RSA_PSS_4096_SHA256'
        case PublicKeyDetails.PKIX_ECDSA_P256_HMAC_SHA_256:
          return 'PKIX_ECDSA_P256_HMAC_SHA_256'
        case PublicKeyDetails.PKIX_ECDSA_P256_SHA_256:
          return 'PKIX_ECDSA_P256_SHA_256'
        case PublicKeyDetails.PKIX_ECDSA_P384_SHA_384:
          return 'PKIX_ECDSA_P384_SHA_384'
        case PublicKeyDetails.PKIX_ECDSA_P521_SHA_512:
          return 'PKIX_ECDSA_P521_SHA_512'
        case PublicKeyDetails.PKIX_ED25519:
          return 'PKIX_ED25519'
        case PublicKeyDetails.PKIX_ED25519_PH:
          return 'PKIX_ED25519_PH'
        case PublicKeyDetails.PKIX_ECDSA_P384_SHA_256:
          return 'PKIX_ECDSA_P384_SHA_256'
        case PublicKeyDetails.PKIX_ECDSA_P521_SHA_256:
          return 'PKIX_ECDSA_P521_SHA_256'
        case PublicKeyDetails.LMS_SHA256:
          return 'LMS_SHA256'
        case PublicKeyDetails.LMOTS_SHA256:
          return 'LMOTS_SHA256'
        case PublicKeyDetails.ML_DSA_65:
          return 'ML_DSA_65'
        case PublicKeyDetails.ML_DSA_87:
          return 'ML_DSA_87'
        default:
          throw new globalThis.Error(
            'Unrecognized enum value ' + object + ' for enum PublicKeyDetails'
          )
      }
    }
    var SubjectAlternativeNameType
    ;(function (SubjectAlternativeNameType) {
      SubjectAlternativeNameType[
        (SubjectAlternativeNameType[
          'SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED'
        ] = 0)
      ] = 'SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED'
      SubjectAlternativeNameType[(SubjectAlternativeNameType['EMAIL'] = 1)] =
        'EMAIL'
      SubjectAlternativeNameType[(SubjectAlternativeNameType['URI'] = 2)] =
        'URI'
      /**
       * OTHER_NAME - OID 1.3.6.1.4.1.57264.1.7
       * See https://github.com/sigstore/fulcio/blob/main/docs/oid-info.md#1361415726417--othername-san
       * for more details.
       */
      SubjectAlternativeNameType[
        (SubjectAlternativeNameType['OTHER_NAME'] = 3)
      ] = 'OTHER_NAME'
    })(
      SubjectAlternativeNameType ||
        (exports.SubjectAlternativeNameType = SubjectAlternativeNameType = {})
    )
    function subjectAlternativeNameTypeFromJSON(object) {
      switch (object) {
        case 0:
        case 'SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED':
          return SubjectAlternativeNameType.SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED
        case 1:
        case 'EMAIL':
          return SubjectAlternativeNameType.EMAIL
        case 2:
        case 'URI':
          return SubjectAlternativeNameType.URI
        case 3:
        case 'OTHER_NAME':
          return SubjectAlternativeNameType.OTHER_NAME
        default:
          throw new globalThis.Error(
            'Unrecognized enum value ' +
              object +
              ' for enum SubjectAlternativeNameType'
          )
      }
    }
    function subjectAlternativeNameTypeToJSON(object) {
      switch (object) {
        case SubjectAlternativeNameType.SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED:
          return 'SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED'
        case SubjectAlternativeNameType.EMAIL:
          return 'EMAIL'
        case SubjectAlternativeNameType.URI:
          return 'URI'
        case SubjectAlternativeNameType.OTHER_NAME:
          return 'OTHER_NAME'
        default:
          throw new globalThis.Error(
            'Unrecognized enum value ' +
              object +
              ' for enum SubjectAlternativeNameType'
          )
      }
    }
    exports.HashOutput = {
      fromJSON(object) {
        return {
          algorithm: isSet(object.algorithm)
            ? hashAlgorithmFromJSON(object.algorithm)
            : 0,
          digest: isSet(object.digest)
            ? Buffer.from(bytesFromBase64(object.digest))
            : Buffer.alloc(0)
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.algorithm !== 0) {
          obj.algorithm = hashAlgorithmToJSON(message.algorithm)
        }
        if (message.digest.length !== 0) {
          obj.digest = base64FromBytes(message.digest)
        }
        return obj
      }
    }
    exports.MessageSignature = {
      fromJSON(object) {
        return {
          messageDigest: isSet(object.messageDigest)
            ? exports.HashOutput.fromJSON(object.messageDigest)
            : undefined,
          signature: isSet(object.signature)
            ? Buffer.from(bytesFromBase64(object.signature))
            : Buffer.alloc(0)
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.messageDigest !== undefined) {
          obj.messageDigest = exports.HashOutput.toJSON(message.messageDigest)
        }
        if (message.signature.length !== 0) {
          obj.signature = base64FromBytes(message.signature)
        }
        return obj
      }
    }
    exports.LogId = {
      fromJSON(object) {
        return {
          keyId: isSet(object.keyId)
            ? Buffer.from(bytesFromBase64(object.keyId))
            : Buffer.alloc(0)
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.keyId.length !== 0) {
          obj.keyId = base64FromBytes(message.keyId)
        }
        return obj
      }
    }
    exports.RFC3161SignedTimestamp = {
      fromJSON(object) {
        return {
          signedTimestamp: isSet(object.signedTimestamp)
            ? Buffer.from(bytesFromBase64(object.signedTimestamp))
            : Buffer.alloc(0)
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.signedTimestamp.length !== 0) {
          obj.signedTimestamp = base64FromBytes(message.signedTimestamp)
        }
        return obj
      }
    }
    exports.PublicKey = {
      fromJSON(object) {
        return {
          rawBytes: isSet(object.rawBytes)
            ? Buffer.from(bytesFromBase64(object.rawBytes))
            : undefined,
          keyDetails: isSet(object.keyDetails)
            ? publicKeyDetailsFromJSON(object.keyDetails)
            : 0,
          validFor: isSet(object.validFor)
            ? exports.TimeRange.fromJSON(object.validFor)
            : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.rawBytes !== undefined) {
          obj.rawBytes = base64FromBytes(message.rawBytes)
        }
        if (message.keyDetails !== 0) {
          obj.keyDetails = publicKeyDetailsToJSON(message.keyDetails)
        }
        if (message.validFor !== undefined) {
          obj.validFor = exports.TimeRange.toJSON(message.validFor)
        }
        return obj
      }
    }
    exports.PublicKeyIdentifier = {
      fromJSON(object) {
        return {
          hint: isSet(object.hint) ? globalThis.String(object.hint) : ''
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.hint !== '') {
          obj.hint = message.hint
        }
        return obj
      }
    }
    exports.ObjectIdentifier = {
      fromJSON(object) {
        return {
          id: globalThis.Array.isArray(object?.id)
            ? object.id.map(e => globalThis.Number(e))
            : []
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.id?.length) {
          obj.id = message.id.map(e => Math.round(e))
        }
        return obj
      }
    }
    exports.ObjectIdentifierValuePair = {
      fromJSON(object) {
        return {
          oid: isSet(object.oid)
            ? exports.ObjectIdentifier.fromJSON(object.oid)
            : undefined,
          value: isSet(object.value)
            ? Buffer.from(bytesFromBase64(object.value))
            : Buffer.alloc(0)
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.oid !== undefined) {
          obj.oid = exports.ObjectIdentifier.toJSON(message.oid)
        }
        if (message.value.length !== 0) {
          obj.value = base64FromBytes(message.value)
        }
        return obj
      }
    }
    exports.DistinguishedName = {
      fromJSON(object) {
        return {
          organization: isSet(object.organization)
            ? globalThis.String(object.organization)
            : '',
          commonName: isSet(object.commonName)
            ? globalThis.String(object.commonName)
            : ''
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.organization !== '') {
          obj.organization = message.organization
        }
        if (message.commonName !== '') {
          obj.commonName = message.commonName
        }
        return obj
      }
    }
    exports.X509Certificate = {
      fromJSON(object) {
        return {
          rawBytes: isSet(object.rawBytes)
            ? Buffer.from(bytesFromBase64(object.rawBytes))
            : Buffer.alloc(0)
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.rawBytes.length !== 0) {
          obj.rawBytes = base64FromBytes(message.rawBytes)
        }
        return obj
      }
    }
    exports.SubjectAlternativeName = {
      fromJSON(object) {
        return {
          type: isSet(object.type)
            ? subjectAlternativeNameTypeFromJSON(object.type)
            : 0,
          identity: isSet(object.regexp)
            ? {
                $case: 'regexp',
                regexp: globalThis.String(object.regexp)
              }
            : isSet(object.value)
              ? {
                  $case: 'value',
                  value: globalThis.String(object.value)
                }
              : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.type !== 0) {
          obj.type = subjectAlternativeNameTypeToJSON(message.type)
        }
        if (message.identity?.$case === 'regexp') {
          obj.regexp = message.identity.regexp
        } else if (message.identity?.$case === 'value') {
          obj.value = message.identity.value
        }
        return obj
      }
    }
    exports.X509CertificateChain = {
      fromJSON(object) {
        return {
          certificates: globalThis.Array.isArray(object?.certificates)
            ? object.certificates.map(e => exports.X509Certificate.fromJSON(e))
            : []
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.certificates?.length) {
          obj.certificates = message.certificates.map(e =>
            exports.X509Certificate.toJSON(e)
          )
        }
        return obj
      }
    }
    exports.TimeRange = {
      fromJSON(object) {
        return {
          start: isSet(object.start)
            ? fromJsonTimestamp(object.start)
            : undefined,
          end: isSet(object.end) ? fromJsonTimestamp(object.end) : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.start !== undefined) {
          obj.start = message.start.toISOString()
        }
        if (message.end !== undefined) {
          obj.end = message.end.toISOString()
        }
        return obj
      }
    }
    function bytesFromBase64(b64) {
      return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'))
    }
    function base64FromBytes(arr) {
      return globalThis.Buffer.from(arr).toString('base64')
    }
    function fromTimestamp(t) {
      let millis = (globalThis.Number(t.seconds) || 0) * 1_000
      millis += (t.nanos || 0) / 1_000_000
      return new globalThis.Date(millis)
    }
    function fromJsonTimestamp(o) {
      if (o instanceof globalThis.Date) {
        return o
      } else if (typeof o === 'string') {
        return new globalThis.Date(o)
      } else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o))
      }
    }
    function isSet(value) {
      return value !== null && value !== undefined
    }
  })(sigstore_common)
  return sigstore_common
}

var sigstore_rekor = {}

var hasRequiredSigstore_rekor
function requireSigstore_rekor() {
  if (hasRequiredSigstore_rekor) return sigstore_rekor
  hasRequiredSigstore_rekor = 1
  ;(function (exports) {
    // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
    // versions:
    //   protoc-gen-ts_proto  v2.7.0
    //   protoc               v6.30.2
    // source: sigstore_rekor.proto
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.TransparencyLogEntry =
      exports.InclusionPromise =
      exports.InclusionProof =
      exports.Checkpoint =
      exports.KindVersion =
        void 0
    /* eslint-disable */
    const sigstore_common_1 = requireSigstore_common()
    exports.KindVersion = {
      fromJSON(object) {
        return {
          kind: isSet(object.kind) ? globalThis.String(object.kind) : '',
          version: isSet(object.version)
            ? globalThis.String(object.version)
            : ''
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.kind !== '') {
          obj.kind = message.kind
        }
        if (message.version !== '') {
          obj.version = message.version
        }
        return obj
      }
    }
    exports.Checkpoint = {
      fromJSON(object) {
        return {
          envelope: isSet(object.envelope)
            ? globalThis.String(object.envelope)
            : ''
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.envelope !== '') {
          obj.envelope = message.envelope
        }
        return obj
      }
    }
    exports.InclusionProof = {
      fromJSON(object) {
        return {
          logIndex: isSet(object.logIndex)
            ? globalThis.String(object.logIndex)
            : '0',
          rootHash: isSet(object.rootHash)
            ? Buffer.from(bytesFromBase64(object.rootHash))
            : Buffer.alloc(0),
          treeSize: isSet(object.treeSize)
            ? globalThis.String(object.treeSize)
            : '0',
          hashes: globalThis.Array.isArray(object?.hashes)
            ? object.hashes.map(e => Buffer.from(bytesFromBase64(e)))
            : [],
          checkpoint: isSet(object.checkpoint)
            ? exports.Checkpoint.fromJSON(object.checkpoint)
            : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.logIndex !== '0') {
          obj.logIndex = message.logIndex
        }
        if (message.rootHash.length !== 0) {
          obj.rootHash = base64FromBytes(message.rootHash)
        }
        if (message.treeSize !== '0') {
          obj.treeSize = message.treeSize
        }
        if (message.hashes?.length) {
          obj.hashes = message.hashes.map(e => base64FromBytes(e))
        }
        if (message.checkpoint !== undefined) {
          obj.checkpoint = exports.Checkpoint.toJSON(message.checkpoint)
        }
        return obj
      }
    }
    exports.InclusionPromise = {
      fromJSON(object) {
        return {
          signedEntryTimestamp: isSet(object.signedEntryTimestamp)
            ? Buffer.from(bytesFromBase64(object.signedEntryTimestamp))
            : Buffer.alloc(0)
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.signedEntryTimestamp.length !== 0) {
          obj.signedEntryTimestamp = base64FromBytes(
            message.signedEntryTimestamp
          )
        }
        return obj
      }
    }
    exports.TransparencyLogEntry = {
      fromJSON(object) {
        return {
          logIndex: isSet(object.logIndex)
            ? globalThis.String(object.logIndex)
            : '0',
          logId: isSet(object.logId)
            ? sigstore_common_1.LogId.fromJSON(object.logId)
            : undefined,
          kindVersion: isSet(object.kindVersion)
            ? exports.KindVersion.fromJSON(object.kindVersion)
            : undefined,
          integratedTime: isSet(object.integratedTime)
            ? globalThis.String(object.integratedTime)
            : '0',
          inclusionPromise: isSet(object.inclusionPromise)
            ? exports.InclusionPromise.fromJSON(object.inclusionPromise)
            : undefined,
          inclusionProof: isSet(object.inclusionProof)
            ? exports.InclusionProof.fromJSON(object.inclusionProof)
            : undefined,
          canonicalizedBody: isSet(object.canonicalizedBody)
            ? Buffer.from(bytesFromBase64(object.canonicalizedBody))
            : Buffer.alloc(0)
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.logIndex !== '0') {
          obj.logIndex = message.logIndex
        }
        if (message.logId !== undefined) {
          obj.logId = sigstore_common_1.LogId.toJSON(message.logId)
        }
        if (message.kindVersion !== undefined) {
          obj.kindVersion = exports.KindVersion.toJSON(message.kindVersion)
        }
        if (message.integratedTime !== '0') {
          obj.integratedTime = message.integratedTime
        }
        if (message.inclusionPromise !== undefined) {
          obj.inclusionPromise = exports.InclusionPromise.toJSON(
            message.inclusionPromise
          )
        }
        if (message.inclusionProof !== undefined) {
          obj.inclusionProof = exports.InclusionProof.toJSON(
            message.inclusionProof
          )
        }
        if (message.canonicalizedBody.length !== 0) {
          obj.canonicalizedBody = base64FromBytes(message.canonicalizedBody)
        }
        return obj
      }
    }
    function bytesFromBase64(b64) {
      return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'))
    }
    function base64FromBytes(arr) {
      return globalThis.Buffer.from(arr).toString('base64')
    }
    function isSet(value) {
      return value !== null && value !== undefined
    }
  })(sigstore_rekor)
  return sigstore_rekor
}

var hasRequiredSigstore_bundle
function requireSigstore_bundle() {
  if (hasRequiredSigstore_bundle) return sigstore_bundle
  hasRequiredSigstore_bundle = 1
  ;(function (exports) {
    // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
    // versions:
    //   protoc-gen-ts_proto  v2.7.0
    //   protoc               v6.30.2
    // source: sigstore_bundle.proto
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Bundle =
      exports.VerificationMaterial =
      exports.TimestampVerificationData =
        void 0
    /* eslint-disable */
    const envelope_1 = requireEnvelope()
    const sigstore_common_1 = requireSigstore_common()
    const sigstore_rekor_1 = requireSigstore_rekor()
    exports.TimestampVerificationData = {
      fromJSON(object) {
        return {
          rfc3161Timestamps: globalThis.Array.isArray(object?.rfc3161Timestamps)
            ? object.rfc3161Timestamps.map(e =>
                sigstore_common_1.RFC3161SignedTimestamp.fromJSON(e)
              )
            : []
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.rfc3161Timestamps?.length) {
          obj.rfc3161Timestamps = message.rfc3161Timestamps.map(e =>
            sigstore_common_1.RFC3161SignedTimestamp.toJSON(e)
          )
        }
        return obj
      }
    }
    exports.VerificationMaterial = {
      fromJSON(object) {
        return {
          content: isSet(object.publicKey)
            ? {
                $case: 'publicKey',
                publicKey: sigstore_common_1.PublicKeyIdentifier.fromJSON(
                  object.publicKey
                )
              }
            : isSet(object.x509CertificateChain)
              ? {
                  $case: 'x509CertificateChain',
                  x509CertificateChain:
                    sigstore_common_1.X509CertificateChain.fromJSON(
                      object.x509CertificateChain
                    )
                }
              : isSet(object.certificate)
                ? {
                    $case: 'certificate',
                    certificate: sigstore_common_1.X509Certificate.fromJSON(
                      object.certificate
                    )
                  }
                : undefined,
          tlogEntries: globalThis.Array.isArray(object?.tlogEntries)
            ? object.tlogEntries.map(e =>
                sigstore_rekor_1.TransparencyLogEntry.fromJSON(e)
              )
            : [],
          timestampVerificationData: isSet(object.timestampVerificationData)
            ? exports.TimestampVerificationData.fromJSON(
                object.timestampVerificationData
              )
            : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.content?.$case === 'publicKey') {
          obj.publicKey = sigstore_common_1.PublicKeyIdentifier.toJSON(
            message.content.publicKey
          )
        } else if (message.content?.$case === 'x509CertificateChain') {
          obj.x509CertificateChain =
            sigstore_common_1.X509CertificateChain.toJSON(
              message.content.x509CertificateChain
            )
        } else if (message.content?.$case === 'certificate') {
          obj.certificate = sigstore_common_1.X509Certificate.toJSON(
            message.content.certificate
          )
        }
        if (message.tlogEntries?.length) {
          obj.tlogEntries = message.tlogEntries.map(e =>
            sigstore_rekor_1.TransparencyLogEntry.toJSON(e)
          )
        }
        if (message.timestampVerificationData !== undefined) {
          obj.timestampVerificationData =
            exports.TimestampVerificationData.toJSON(
              message.timestampVerificationData
            )
        }
        return obj
      }
    }
    exports.Bundle = {
      fromJSON(object) {
        return {
          mediaType: isSet(object.mediaType)
            ? globalThis.String(object.mediaType)
            : '',
          verificationMaterial: isSet(object.verificationMaterial)
            ? exports.VerificationMaterial.fromJSON(object.verificationMaterial)
            : undefined,
          content: isSet(object.messageSignature)
            ? {
                $case: 'messageSignature',
                messageSignature: sigstore_common_1.MessageSignature.fromJSON(
                  object.messageSignature
                )
              }
            : isSet(object.dsseEnvelope)
              ? {
                  $case: 'dsseEnvelope',
                  dsseEnvelope: envelope_1.Envelope.fromJSON(
                    object.dsseEnvelope
                  )
                }
              : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.mediaType !== '') {
          obj.mediaType = message.mediaType
        }
        if (message.verificationMaterial !== undefined) {
          obj.verificationMaterial = exports.VerificationMaterial.toJSON(
            message.verificationMaterial
          )
        }
        if (message.content?.$case === 'messageSignature') {
          obj.messageSignature = sigstore_common_1.MessageSignature.toJSON(
            message.content.messageSignature
          )
        } else if (message.content?.$case === 'dsseEnvelope') {
          obj.dsseEnvelope = envelope_1.Envelope.toJSON(
            message.content.dsseEnvelope
          )
        }
        return obj
      }
    }
    function isSet(value) {
      return value !== null && value !== undefined
    }
  })(sigstore_bundle)
  return sigstore_bundle
}

var sigstore_trustroot = {}

var hasRequiredSigstore_trustroot
function requireSigstore_trustroot() {
  if (hasRequiredSigstore_trustroot) return sigstore_trustroot
  hasRequiredSigstore_trustroot = 1
  ;(function (exports) {
    // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
    // versions:
    //   protoc-gen-ts_proto  v2.7.0
    //   protoc               v6.30.2
    // source: sigstore_trustroot.proto
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.ClientTrustConfig =
      exports.ServiceConfiguration =
      exports.Service =
      exports.SigningConfig =
      exports.TrustedRoot =
      exports.CertificateAuthority =
      exports.TransparencyLogInstance =
      exports.ServiceSelector =
        void 0
    exports.serviceSelectorFromJSON = serviceSelectorFromJSON
    exports.serviceSelectorToJSON = serviceSelectorToJSON
    /* eslint-disable */
    const sigstore_common_1 = requireSigstore_common()
    /**
     * ServiceSelector specifies how a client SHOULD select a set of
     * Services to connect to. A client SHOULD throw an error if
     * the value is SERVICE_SELECTOR_UNDEFINED.
     */
    var ServiceSelector
    ;(function (ServiceSelector) {
      ServiceSelector[(ServiceSelector['SERVICE_SELECTOR_UNDEFINED'] = 0)] =
        'SERVICE_SELECTOR_UNDEFINED'
      /**
       * ALL - Clients SHOULD select all Services based on supported API version
       * and validity window.
       */
      ServiceSelector[(ServiceSelector['ALL'] = 1)] = 'ALL'
      /**
       * ANY - Clients SHOULD select one Service based on supported API version
       * and validity window. It is up to the client implementation to
       * decide how to select the Service, e.g. random or round-robin.
       */
      ServiceSelector[(ServiceSelector['ANY'] = 2)] = 'ANY'
      /**
       * EXACT - Clients SHOULD select a specific number of Services based on
       * supported API version and validity window, using the provided
       * `count`. It is up to the client implementation to decide how to
       * select the Service, e.g. random or round-robin.
       */
      ServiceSelector[(ServiceSelector['EXACT'] = 3)] = 'EXACT'
    })(ServiceSelector || (exports.ServiceSelector = ServiceSelector = {}))
    function serviceSelectorFromJSON(object) {
      switch (object) {
        case 0:
        case 'SERVICE_SELECTOR_UNDEFINED':
          return ServiceSelector.SERVICE_SELECTOR_UNDEFINED
        case 1:
        case 'ALL':
          return ServiceSelector.ALL
        case 2:
        case 'ANY':
          return ServiceSelector.ANY
        case 3:
        case 'EXACT':
          return ServiceSelector.EXACT
        default:
          throw new globalThis.Error(
            'Unrecognized enum value ' + object + ' for enum ServiceSelector'
          )
      }
    }
    function serviceSelectorToJSON(object) {
      switch (object) {
        case ServiceSelector.SERVICE_SELECTOR_UNDEFINED:
          return 'SERVICE_SELECTOR_UNDEFINED'
        case ServiceSelector.ALL:
          return 'ALL'
        case ServiceSelector.ANY:
          return 'ANY'
        case ServiceSelector.EXACT:
          return 'EXACT'
        default:
          throw new globalThis.Error(
            'Unrecognized enum value ' + object + ' for enum ServiceSelector'
          )
      }
    }
    exports.TransparencyLogInstance = {
      fromJSON(object) {
        return {
          baseUrl: isSet(object.baseUrl)
            ? globalThis.String(object.baseUrl)
            : '',
          hashAlgorithm: isSet(object.hashAlgorithm)
            ? (0, sigstore_common_1.hashAlgorithmFromJSON)(object.hashAlgorithm)
            : 0,
          publicKey: isSet(object.publicKey)
            ? sigstore_common_1.PublicKey.fromJSON(object.publicKey)
            : undefined,
          logId: isSet(object.logId)
            ? sigstore_common_1.LogId.fromJSON(object.logId)
            : undefined,
          checkpointKeyId: isSet(object.checkpointKeyId)
            ? sigstore_common_1.LogId.fromJSON(object.checkpointKeyId)
            : undefined,
          operator: isSet(object.operator)
            ? globalThis.String(object.operator)
            : ''
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.baseUrl !== '') {
          obj.baseUrl = message.baseUrl
        }
        if (message.hashAlgorithm !== 0) {
          obj.hashAlgorithm = (0, sigstore_common_1.hashAlgorithmToJSON)(
            message.hashAlgorithm
          )
        }
        if (message.publicKey !== undefined) {
          obj.publicKey = sigstore_common_1.PublicKey.toJSON(message.publicKey)
        }
        if (message.logId !== undefined) {
          obj.logId = sigstore_common_1.LogId.toJSON(message.logId)
        }
        if (message.checkpointKeyId !== undefined) {
          obj.checkpointKeyId = sigstore_common_1.LogId.toJSON(
            message.checkpointKeyId
          )
        }
        if (message.operator !== '') {
          obj.operator = message.operator
        }
        return obj
      }
    }
    exports.CertificateAuthority = {
      fromJSON(object) {
        return {
          subject: isSet(object.subject)
            ? sigstore_common_1.DistinguishedName.fromJSON(object.subject)
            : undefined,
          uri: isSet(object.uri) ? globalThis.String(object.uri) : '',
          certChain: isSet(object.certChain)
            ? sigstore_common_1.X509CertificateChain.fromJSON(object.certChain)
            : undefined,
          validFor: isSet(object.validFor)
            ? sigstore_common_1.TimeRange.fromJSON(object.validFor)
            : undefined,
          operator: isSet(object.operator)
            ? globalThis.String(object.operator)
            : ''
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.subject !== undefined) {
          obj.subject = sigstore_common_1.DistinguishedName.toJSON(
            message.subject
          )
        }
        if (message.uri !== '') {
          obj.uri = message.uri
        }
        if (message.certChain !== undefined) {
          obj.certChain = sigstore_common_1.X509CertificateChain.toJSON(
            message.certChain
          )
        }
        if (message.validFor !== undefined) {
          obj.validFor = sigstore_common_1.TimeRange.toJSON(message.validFor)
        }
        if (message.operator !== '') {
          obj.operator = message.operator
        }
        return obj
      }
    }
    exports.TrustedRoot = {
      fromJSON(object) {
        return {
          mediaType: isSet(object.mediaType)
            ? globalThis.String(object.mediaType)
            : '',
          tlogs: globalThis.Array.isArray(object?.tlogs)
            ? object.tlogs.map(e => exports.TransparencyLogInstance.fromJSON(e))
            : [],
          certificateAuthorities: globalThis.Array.isArray(
            object?.certificateAuthorities
          )
            ? object.certificateAuthorities.map(e =>
                exports.CertificateAuthority.fromJSON(e)
              )
            : [],
          ctlogs: globalThis.Array.isArray(object?.ctlogs)
            ? object.ctlogs.map(e =>
                exports.TransparencyLogInstance.fromJSON(e)
              )
            : [],
          timestampAuthorities: globalThis.Array.isArray(
            object?.timestampAuthorities
          )
            ? object.timestampAuthorities.map(e =>
                exports.CertificateAuthority.fromJSON(e)
              )
            : []
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.mediaType !== '') {
          obj.mediaType = message.mediaType
        }
        if (message.tlogs?.length) {
          obj.tlogs = message.tlogs.map(e =>
            exports.TransparencyLogInstance.toJSON(e)
          )
        }
        if (message.certificateAuthorities?.length) {
          obj.certificateAuthorities = message.certificateAuthorities.map(e =>
            exports.CertificateAuthority.toJSON(e)
          )
        }
        if (message.ctlogs?.length) {
          obj.ctlogs = message.ctlogs.map(e =>
            exports.TransparencyLogInstance.toJSON(e)
          )
        }
        if (message.timestampAuthorities?.length) {
          obj.timestampAuthorities = message.timestampAuthorities.map(e =>
            exports.CertificateAuthority.toJSON(e)
          )
        }
        return obj
      }
    }
    exports.SigningConfig = {
      fromJSON(object) {
        return {
          mediaType: isSet(object.mediaType)
            ? globalThis.String(object.mediaType)
            : '',
          caUrls: globalThis.Array.isArray(object?.caUrls)
            ? object.caUrls.map(e => exports.Service.fromJSON(e))
            : [],
          oidcUrls: globalThis.Array.isArray(object?.oidcUrls)
            ? object.oidcUrls.map(e => exports.Service.fromJSON(e))
            : [],
          rekorTlogUrls: globalThis.Array.isArray(object?.rekorTlogUrls)
            ? object.rekorTlogUrls.map(e => exports.Service.fromJSON(e))
            : [],
          rekorTlogConfig: isSet(object.rekorTlogConfig)
            ? exports.ServiceConfiguration.fromJSON(object.rekorTlogConfig)
            : undefined,
          tsaUrls: globalThis.Array.isArray(object?.tsaUrls)
            ? object.tsaUrls.map(e => exports.Service.fromJSON(e))
            : [],
          tsaConfig: isSet(object.tsaConfig)
            ? exports.ServiceConfiguration.fromJSON(object.tsaConfig)
            : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.mediaType !== '') {
          obj.mediaType = message.mediaType
        }
        if (message.caUrls?.length) {
          obj.caUrls = message.caUrls.map(e => exports.Service.toJSON(e))
        }
        if (message.oidcUrls?.length) {
          obj.oidcUrls = message.oidcUrls.map(e => exports.Service.toJSON(e))
        }
        if (message.rekorTlogUrls?.length) {
          obj.rekorTlogUrls = message.rekorTlogUrls.map(e =>
            exports.Service.toJSON(e)
          )
        }
        if (message.rekorTlogConfig !== undefined) {
          obj.rekorTlogConfig = exports.ServiceConfiguration.toJSON(
            message.rekorTlogConfig
          )
        }
        if (message.tsaUrls?.length) {
          obj.tsaUrls = message.tsaUrls.map(e => exports.Service.toJSON(e))
        }
        if (message.tsaConfig !== undefined) {
          obj.tsaConfig = exports.ServiceConfiguration.toJSON(message.tsaConfig)
        }
        return obj
      }
    }
    exports.Service = {
      fromJSON(object) {
        return {
          url: isSet(object.url) ? globalThis.String(object.url) : '',
          majorApiVersion: isSet(object.majorApiVersion)
            ? globalThis.Number(object.majorApiVersion)
            : 0,
          validFor: isSet(object.validFor)
            ? sigstore_common_1.TimeRange.fromJSON(object.validFor)
            : undefined,
          operator: isSet(object.operator)
            ? globalThis.String(object.operator)
            : ''
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.url !== '') {
          obj.url = message.url
        }
        if (message.majorApiVersion !== 0) {
          obj.majorApiVersion = Math.round(message.majorApiVersion)
        }
        if (message.validFor !== undefined) {
          obj.validFor = sigstore_common_1.TimeRange.toJSON(message.validFor)
        }
        if (message.operator !== '') {
          obj.operator = message.operator
        }
        return obj
      }
    }
    exports.ServiceConfiguration = {
      fromJSON(object) {
        return {
          selector: isSet(object.selector)
            ? serviceSelectorFromJSON(object.selector)
            : 0,
          count: isSet(object.count) ? globalThis.Number(object.count) : 0
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.selector !== 0) {
          obj.selector = serviceSelectorToJSON(message.selector)
        }
        if (message.count !== 0) {
          obj.count = Math.round(message.count)
        }
        return obj
      }
    }
    exports.ClientTrustConfig = {
      fromJSON(object) {
        return {
          mediaType: isSet(object.mediaType)
            ? globalThis.String(object.mediaType)
            : '',
          trustedRoot: isSet(object.trustedRoot)
            ? exports.TrustedRoot.fromJSON(object.trustedRoot)
            : undefined,
          signingConfig: isSet(object.signingConfig)
            ? exports.SigningConfig.fromJSON(object.signingConfig)
            : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.mediaType !== '') {
          obj.mediaType = message.mediaType
        }
        if (message.trustedRoot !== undefined) {
          obj.trustedRoot = exports.TrustedRoot.toJSON(message.trustedRoot)
        }
        if (message.signingConfig !== undefined) {
          obj.signingConfig = exports.SigningConfig.toJSON(
            message.signingConfig
          )
        }
        return obj
      }
    }
    function isSet(value) {
      return value !== null && value !== undefined
    }
  })(sigstore_trustroot)
  return sigstore_trustroot
}

var sigstore_verification = {}

var hasRequiredSigstore_verification
function requireSigstore_verification() {
  if (hasRequiredSigstore_verification) return sigstore_verification
  hasRequiredSigstore_verification = 1
  ;(function (exports) {
    // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
    // versions:
    //   protoc-gen-ts_proto  v2.7.0
    //   protoc               v6.30.2
    // source: sigstore_verification.proto
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Input =
      exports.Artifact =
      exports.ArtifactVerificationOptions_ObserverTimestampOptions =
      exports.ArtifactVerificationOptions_TlogIntegratedTimestampOptions =
      exports.ArtifactVerificationOptions_TimestampAuthorityOptions =
      exports.ArtifactVerificationOptions_CtlogOptions =
      exports.ArtifactVerificationOptions_TlogOptions =
      exports.ArtifactVerificationOptions =
      exports.PublicKeyIdentities =
      exports.CertificateIdentities =
      exports.CertificateIdentity =
        void 0
    /* eslint-disable */
    const sigstore_bundle_1 = requireSigstore_bundle()
    const sigstore_common_1 = requireSigstore_common()
    const sigstore_trustroot_1 = requireSigstore_trustroot()
    exports.CertificateIdentity = {
      fromJSON(object) {
        return {
          issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : '',
          san: isSet(object.san)
            ? sigstore_common_1.SubjectAlternativeName.fromJSON(object.san)
            : undefined,
          oids: globalThis.Array.isArray(object?.oids)
            ? object.oids.map(e =>
                sigstore_common_1.ObjectIdentifierValuePair.fromJSON(e)
              )
            : []
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.issuer !== '') {
          obj.issuer = message.issuer
        }
        if (message.san !== undefined) {
          obj.san = sigstore_common_1.SubjectAlternativeName.toJSON(message.san)
        }
        if (message.oids?.length) {
          obj.oids = message.oids.map(e =>
            sigstore_common_1.ObjectIdentifierValuePair.toJSON(e)
          )
        }
        return obj
      }
    }
    exports.CertificateIdentities = {
      fromJSON(object) {
        return {
          identities: globalThis.Array.isArray(object?.identities)
            ? object.identities.map(e =>
                exports.CertificateIdentity.fromJSON(e)
              )
            : []
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.identities?.length) {
          obj.identities = message.identities.map(e =>
            exports.CertificateIdentity.toJSON(e)
          )
        }
        return obj
      }
    }
    exports.PublicKeyIdentities = {
      fromJSON(object) {
        return {
          publicKeys: globalThis.Array.isArray(object?.publicKeys)
            ? object.publicKeys.map(e =>
                sigstore_common_1.PublicKey.fromJSON(e)
              )
            : []
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.publicKeys?.length) {
          obj.publicKeys = message.publicKeys.map(e =>
            sigstore_common_1.PublicKey.toJSON(e)
          )
        }
        return obj
      }
    }
    exports.ArtifactVerificationOptions = {
      fromJSON(object) {
        return {
          signers: isSet(object.certificateIdentities)
            ? {
                $case: 'certificateIdentities',
                certificateIdentities: exports.CertificateIdentities.fromJSON(
                  object.certificateIdentities
                )
              }
            : isSet(object.publicKeys)
              ? {
                  $case: 'publicKeys',
                  publicKeys: exports.PublicKeyIdentities.fromJSON(
                    object.publicKeys
                  )
                }
              : undefined,
          tlogOptions: isSet(object.tlogOptions)
            ? exports.ArtifactVerificationOptions_TlogOptions.fromJSON(
                object.tlogOptions
              )
            : undefined,
          ctlogOptions: isSet(object.ctlogOptions)
            ? exports.ArtifactVerificationOptions_CtlogOptions.fromJSON(
                object.ctlogOptions
              )
            : undefined,
          tsaOptions: isSet(object.tsaOptions)
            ? exports.ArtifactVerificationOptions_TimestampAuthorityOptions.fromJSON(
                object.tsaOptions
              )
            : undefined,
          integratedTsOptions: isSet(object.integratedTsOptions)
            ? exports.ArtifactVerificationOptions_TlogIntegratedTimestampOptions.fromJSON(
                object.integratedTsOptions
              )
            : undefined,
          observerOptions: isSet(object.observerOptions)
            ? exports.ArtifactVerificationOptions_ObserverTimestampOptions.fromJSON(
                object.observerOptions
              )
            : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.signers?.$case === 'certificateIdentities') {
          obj.certificateIdentities = exports.CertificateIdentities.toJSON(
            message.signers.certificateIdentities
          )
        } else if (message.signers?.$case === 'publicKeys') {
          obj.publicKeys = exports.PublicKeyIdentities.toJSON(
            message.signers.publicKeys
          )
        }
        if (message.tlogOptions !== undefined) {
          obj.tlogOptions =
            exports.ArtifactVerificationOptions_TlogOptions.toJSON(
              message.tlogOptions
            )
        }
        if (message.ctlogOptions !== undefined) {
          obj.ctlogOptions =
            exports.ArtifactVerificationOptions_CtlogOptions.toJSON(
              message.ctlogOptions
            )
        }
        if (message.tsaOptions !== undefined) {
          obj.tsaOptions =
            exports.ArtifactVerificationOptions_TimestampAuthorityOptions.toJSON(
              message.tsaOptions
            )
        }
        if (message.integratedTsOptions !== undefined) {
          obj.integratedTsOptions =
            exports.ArtifactVerificationOptions_TlogIntegratedTimestampOptions.toJSON(
              message.integratedTsOptions
            )
        }
        if (message.observerOptions !== undefined) {
          obj.observerOptions =
            exports.ArtifactVerificationOptions_ObserverTimestampOptions.toJSON(
              message.observerOptions
            )
        }
        return obj
      }
    }
    exports.ArtifactVerificationOptions_TlogOptions = {
      fromJSON(object) {
        return {
          threshold: isSet(object.threshold)
            ? globalThis.Number(object.threshold)
            : 0,
          performOnlineVerification: isSet(object.performOnlineVerification)
            ? globalThis.Boolean(object.performOnlineVerification)
            : false,
          disable: isSet(object.disable)
            ? globalThis.Boolean(object.disable)
            : false
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.threshold !== 0) {
          obj.threshold = Math.round(message.threshold)
        }
        if (message.performOnlineVerification !== false) {
          obj.performOnlineVerification = message.performOnlineVerification
        }
        if (message.disable !== false) {
          obj.disable = message.disable
        }
        return obj
      }
    }
    exports.ArtifactVerificationOptions_CtlogOptions = {
      fromJSON(object) {
        return {
          threshold: isSet(object.threshold)
            ? globalThis.Number(object.threshold)
            : 0,
          disable: isSet(object.disable)
            ? globalThis.Boolean(object.disable)
            : false
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.threshold !== 0) {
          obj.threshold = Math.round(message.threshold)
        }
        if (message.disable !== false) {
          obj.disable = message.disable
        }
        return obj
      }
    }
    exports.ArtifactVerificationOptions_TimestampAuthorityOptions = {
      fromJSON(object) {
        return {
          threshold: isSet(object.threshold)
            ? globalThis.Number(object.threshold)
            : 0,
          disable: isSet(object.disable)
            ? globalThis.Boolean(object.disable)
            : false
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.threshold !== 0) {
          obj.threshold = Math.round(message.threshold)
        }
        if (message.disable !== false) {
          obj.disable = message.disable
        }
        return obj
      }
    }
    exports.ArtifactVerificationOptions_TlogIntegratedTimestampOptions = {
      fromJSON(object) {
        return {
          threshold: isSet(object.threshold)
            ? globalThis.Number(object.threshold)
            : 0,
          disable: isSet(object.disable)
            ? globalThis.Boolean(object.disable)
            : false
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.threshold !== 0) {
          obj.threshold = Math.round(message.threshold)
        }
        if (message.disable !== false) {
          obj.disable = message.disable
        }
        return obj
      }
    }
    exports.ArtifactVerificationOptions_ObserverTimestampOptions = {
      fromJSON(object) {
        return {
          threshold: isSet(object.threshold)
            ? globalThis.Number(object.threshold)
            : 0,
          disable: isSet(object.disable)
            ? globalThis.Boolean(object.disable)
            : false
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.threshold !== 0) {
          obj.threshold = Math.round(message.threshold)
        }
        if (message.disable !== false) {
          obj.disable = message.disable
        }
        return obj
      }
    }
    exports.Artifact = {
      fromJSON(object) {
        return {
          data: isSet(object.artifactUri)
            ? {
                $case: 'artifactUri',
                artifactUri: globalThis.String(object.artifactUri)
              }
            : isSet(object.artifact)
              ? {
                  $case: 'artifact',
                  artifact: Buffer.from(bytesFromBase64(object.artifact))
                }
              : isSet(object.artifactDigest)
                ? {
                    $case: 'artifactDigest',
                    artifactDigest: sigstore_common_1.HashOutput.fromJSON(
                      object.artifactDigest
                    )
                  }
                : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.data?.$case === 'artifactUri') {
          obj.artifactUri = message.data.artifactUri
        } else if (message.data?.$case === 'artifact') {
          obj.artifact = base64FromBytes(message.data.artifact)
        } else if (message.data?.$case === 'artifactDigest') {
          obj.artifactDigest = sigstore_common_1.HashOutput.toJSON(
            message.data.artifactDigest
          )
        }
        return obj
      }
    }
    exports.Input = {
      fromJSON(object) {
        return {
          artifactTrustRoot: isSet(object.artifactTrustRoot)
            ? sigstore_trustroot_1.TrustedRoot.fromJSON(
                object.artifactTrustRoot
              )
            : undefined,
          artifactVerificationOptions: isSet(object.artifactVerificationOptions)
            ? exports.ArtifactVerificationOptions.fromJSON(
                object.artifactVerificationOptions
              )
            : undefined,
          bundle: isSet(object.bundle)
            ? sigstore_bundle_1.Bundle.fromJSON(object.bundle)
            : undefined,
          artifact: isSet(object.artifact)
            ? exports.Artifact.fromJSON(object.artifact)
            : undefined
        }
      },
      toJSON(message) {
        const obj = {}
        if (message.artifactTrustRoot !== undefined) {
          obj.artifactTrustRoot = sigstore_trustroot_1.TrustedRoot.toJSON(
            message.artifactTrustRoot
          )
        }
        if (message.artifactVerificationOptions !== undefined) {
          obj.artifactVerificationOptions =
            exports.ArtifactVerificationOptions.toJSON(
              message.artifactVerificationOptions
            )
        }
        if (message.bundle !== undefined) {
          obj.bundle = sigstore_bundle_1.Bundle.toJSON(message.bundle)
        }
        if (message.artifact !== undefined) {
          obj.artifact = exports.Artifact.toJSON(message.artifact)
        }
        return obj
      }
    }
    function bytesFromBase64(b64) {
      return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'))
    }
    function base64FromBytes(arr) {
      return globalThis.Buffer.from(arr).toString('base64')
    }
    function isSet(value) {
      return value !== null && value !== undefined
    }
  })(sigstore_verification)
  return sigstore_verification
}

var hasRequiredDist$8
function requireDist$8() {
  if (hasRequiredDist$8) return dist$6
  hasRequiredDist$8 = 1
  ;(function (exports) {
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            var desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __exportStar =
      (this && this.__exportStar) ||
      function (m, exports) {
        for (var p in m)
          if (
            p !== 'default' &&
            !Object.prototype.hasOwnProperty.call(exports, p)
          )
            __createBinding(exports, m, p)
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    __exportStar(requireEnvelope(), exports)
    __exportStar(requireSigstore_bundle(), exports)
    __exportStar(requireSigstore_common(), exports)
    __exportStar(requireSigstore_rekor(), exports)
    __exportStar(requireSigstore_trustroot(), exports)
    __exportStar(requireSigstore_verification(), exports)
  })(dist$6)
  return dist$6
}

var bundle$2 = {}

var hasRequiredBundle$2
function requireBundle$2() {
  if (hasRequiredBundle$2) return bundle$2
  hasRequiredBundle$2 = 1
  Object.defineProperty(bundle$2, '__esModule', {
    value: true
  })
  bundle$2.BUNDLE_V03_MEDIA_TYPE =
    bundle$2.BUNDLE_V03_LEGACY_MEDIA_TYPE =
    bundle$2.BUNDLE_V02_MEDIA_TYPE =
    bundle$2.BUNDLE_V01_MEDIA_TYPE =
      void 0
  bundle$2.isBundleWithCertificateChain = isBundleWithCertificateChain
  bundle$2.isBundleWithPublicKey = isBundleWithPublicKey
  bundle$2.isBundleWithMessageSignature = isBundleWithMessageSignature
  bundle$2.isBundleWithDsseEnvelope = isBundleWithDsseEnvelope
  bundle$2.BUNDLE_V01_MEDIA_TYPE =
    'application/vnd.dev.sigstore.bundle+json;version=0.1'
  bundle$2.BUNDLE_V02_MEDIA_TYPE =
    'application/vnd.dev.sigstore.bundle+json;version=0.2'
  bundle$2.BUNDLE_V03_LEGACY_MEDIA_TYPE =
    'application/vnd.dev.sigstore.bundle+json;version=0.3'
  bundle$2.BUNDLE_V03_MEDIA_TYPE =
    'application/vnd.dev.sigstore.bundle.v0.3+json'
  // Type guards for bundle variants.
  function isBundleWithCertificateChain(b) {
    return b.verificationMaterial.content.$case === 'x509CertificateChain'
  }
  function isBundleWithPublicKey(b) {
    return b.verificationMaterial.content.$case === 'publicKey'
  }
  function isBundleWithMessageSignature(b) {
    return b.content.$case === 'messageSignature'
  }
  function isBundleWithDsseEnvelope(b) {
    return b.content.$case === 'dsseEnvelope'
  }
  return bundle$2
}

var hasRequiredBuild
function requireBuild() {
  if (hasRequiredBuild) return build
  hasRequiredBuild = 1
  Object.defineProperty(build, '__esModule', {
    value: true
  })
  build.toMessageSignatureBundle = toMessageSignatureBundle
  build.toDSSEBundle = toDSSEBundle
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const protobuf_specs_1 = requireDist$8()
  const bundle_1 = requireBundle$2()
  // Message signature bundle - $case: 'messageSignature'
  function toMessageSignatureBundle(options) {
    return {
      mediaType: options.certificateChain
        ? bundle_1.BUNDLE_V02_MEDIA_TYPE
        : bundle_1.BUNDLE_V03_MEDIA_TYPE,
      content: {
        $case: 'messageSignature',
        messageSignature: {
          messageDigest: {
            algorithm: protobuf_specs_1.HashAlgorithm.SHA2_256,
            digest: options.digest
          },
          signature: options.signature
        }
      },
      verificationMaterial: toVerificationMaterial(options)
    }
  }
  // DSSE envelope bundle - $case: 'dsseEnvelope'
  function toDSSEBundle(options) {
    return {
      mediaType: options.certificateChain
        ? bundle_1.BUNDLE_V02_MEDIA_TYPE
        : bundle_1.BUNDLE_V03_MEDIA_TYPE,
      content: {
        $case: 'dsseEnvelope',
        dsseEnvelope: toEnvelope(options)
      },
      verificationMaterial: toVerificationMaterial(options)
    }
  }
  function toEnvelope(options) {
    return {
      payloadType: options.artifactType,
      payload: options.artifact,
      signatures: [toSignature(options)]
    }
  }
  function toSignature(options) {
    return {
      keyid: options.keyHint || '',
      sig: options.signature
    }
  }
  // Verification material
  function toVerificationMaterial(options) {
    return {
      content: toKeyContent(options),
      tlogEntries: [],
      timestampVerificationData: {
        rfc3161Timestamps: []
      }
    }
  }
  function toKeyContent(options) {
    if (options.certificate) {
      if (options.certificateChain) {
        return {
          $case: 'x509CertificateChain',
          x509CertificateChain: {
            certificates: [
              {
                rawBytes: options.certificate
              }
            ]
          }
        }
      } else {
        return {
          $case: 'certificate',
          certificate: {
            rawBytes: options.certificate
          }
        }
      }
    } else {
      return {
        $case: 'publicKey',
        publicKey: {
          hint: options.keyHint || ''
        }
      }
    }
  }
  return build
}

var error$8 = {}

var hasRequiredError$8
function requireError$8() {
  if (hasRequiredError$8) return error$8
  hasRequiredError$8 = 1
  Object.defineProperty(error$8, '__esModule', {
    value: true
  })
  error$8.ValidationError = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  class ValidationError extends Error {
    constructor(message, fields) {
      super(message)
      this.fields = fields
    }
  }
  error$8.ValidationError = ValidationError
  return error$8
}

var serialized = {}

var validate = {}

var hasRequiredValidate
function requireValidate() {
  if (hasRequiredValidate) return validate
  hasRequiredValidate = 1
  Object.defineProperty(validate, '__esModule', {
    value: true
  })
  validate.assertBundle = assertBundle
  validate.assertBundleV01 = assertBundleV01
  validate.isBundleV01 = isBundleV01
  validate.assertBundleV02 = assertBundleV02
  validate.assertBundleLatest = assertBundleLatest
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError$8()
  // Performs basic validation of a Sigstore bundle to ensure that all required
  // fields are populated. This is not a complete validation of the bundle, but
  // rather a check that the bundle is in a valid state to be processed by the
  // rest of the code.
  function assertBundle(b) {
    const invalidValues = validateBundleBase(b)
    if (invalidValues.length > 0) {
      throw new error_1.ValidationError('invalid bundle', invalidValues)
    }
  }
  // Asserts that the given bundle conforms to the v0.1 bundle format.
  function assertBundleV01(b) {
    const invalidValues = []
    invalidValues.push(...validateBundleBase(b))
    invalidValues.push(...validateInclusionPromise(b))
    if (invalidValues.length > 0) {
      throw new error_1.ValidationError('invalid v0.1 bundle', invalidValues)
    }
  }
  // Type guard to determine if Bundle is a v0.1 bundle.
  function isBundleV01(b) {
    try {
      assertBundleV01(b)
      return true
    } catch (e) {
      return false
    }
  }
  // Asserts that the given bundle conforms to the v0.2 bundle format.
  function assertBundleV02(b) {
    const invalidValues = []
    invalidValues.push(...validateBundleBase(b))
    invalidValues.push(...validateInclusionProof(b))
    if (invalidValues.length > 0) {
      throw new error_1.ValidationError('invalid v0.2 bundle', invalidValues)
    }
  }
  // Asserts that the given bundle conforms to the newest (0.3) bundle format.
  function assertBundleLatest(b) {
    const invalidValues = []
    invalidValues.push(...validateBundleBase(b))
    invalidValues.push(...validateInclusionProof(b))
    invalidValues.push(...validateNoCertificateChain(b))
    if (invalidValues.length > 0) {
      throw new error_1.ValidationError('invalid bundle', invalidValues)
    }
  }
  function validateBundleBase(b) {
    const invalidValues = []
    // Media type validation
    if (
      b.mediaType === undefined ||
      (!b.mediaType.match(
        /^application\/vnd\.dev\.sigstore\.bundle\+json;version=\d\.\d/
      ) &&
        !b.mediaType.match(
          /^application\/vnd\.dev\.sigstore\.bundle\.v\d\.\d\+json/
        ))
    ) {
      invalidValues.push('mediaType')
    }
    // Content-related validation
    if (b.content === undefined) {
      invalidValues.push('content')
    } else {
      switch (b.content.$case) {
        case 'messageSignature':
          if (b.content.messageSignature.messageDigest === undefined) {
            invalidValues.push('content.messageSignature.messageDigest')
          } else {
            if (b.content.messageSignature.messageDigest.digest.length === 0) {
              invalidValues.push(
                'content.messageSignature.messageDigest.digest'
              )
            }
          }
          if (b.content.messageSignature.signature.length === 0) {
            invalidValues.push('content.messageSignature.signature')
          }
          break
        case 'dsseEnvelope':
          if (b.content.dsseEnvelope.payload.length === 0) {
            invalidValues.push('content.dsseEnvelope.payload')
          }
          if (b.content.dsseEnvelope.signatures.length !== 1) {
            invalidValues.push('content.dsseEnvelope.signatures')
          } else {
            if (b.content.dsseEnvelope.signatures[0].sig.length === 0) {
              invalidValues.push('content.dsseEnvelope.signatures[0].sig')
            }
          }
          break
      }
    }
    // Verification material-related validation
    if (b.verificationMaterial === undefined) {
      invalidValues.push('verificationMaterial')
    } else {
      if (b.verificationMaterial.content === undefined) {
        invalidValues.push('verificationMaterial.content')
      } else {
        switch (b.verificationMaterial.content.$case) {
          case 'x509CertificateChain':
            if (
              b.verificationMaterial.content.x509CertificateChain.certificates
                .length === 0
            ) {
              invalidValues.push(
                'verificationMaterial.content.x509CertificateChain.certificates'
              )
            }
            b.verificationMaterial.content.x509CertificateChain.certificates.forEach(
              (cert, i) => {
                if (cert.rawBytes.length === 0) {
                  invalidValues.push(
                    `verificationMaterial.content.x509CertificateChain.certificates[${i}].rawBytes`
                  )
                }
              }
            )
            break
          case 'certificate':
            if (
              b.verificationMaterial.content.certificate.rawBytes.length === 0
            ) {
              invalidValues.push(
                'verificationMaterial.content.certificate.rawBytes'
              )
            }
            break
        }
      }
      if (b.verificationMaterial.tlogEntries === undefined) {
        invalidValues.push('verificationMaterial.tlogEntries')
      } else {
        if (b.verificationMaterial.tlogEntries.length > 0) {
          b.verificationMaterial.tlogEntries.forEach((entry, i) => {
            if (entry.logId === undefined) {
              invalidValues.push(`verificationMaterial.tlogEntries[${i}].logId`)
            }
            if (entry.kindVersion === undefined) {
              invalidValues.push(
                `verificationMaterial.tlogEntries[${i}].kindVersion`
              )
            }
          })
        }
      }
    }
    return invalidValues
  }
  // Necessary for V01 bundles
  function validateInclusionPromise(b) {
    const invalidValues = []
    if (
      b.verificationMaterial &&
      b.verificationMaterial.tlogEntries?.length > 0
    ) {
      b.verificationMaterial.tlogEntries.forEach((entry, i) => {
        if (entry.inclusionPromise === undefined) {
          invalidValues.push(
            `verificationMaterial.tlogEntries[${i}].inclusionPromise`
          )
        }
      })
    }
    return invalidValues
  }
  // Necessary for V02 and later bundles
  function validateInclusionProof(b) {
    const invalidValues = []
    if (
      b.verificationMaterial &&
      b.verificationMaterial.tlogEntries?.length > 0
    ) {
      b.verificationMaterial.tlogEntries.forEach((entry, i) => {
        if (entry.inclusionProof === undefined) {
          invalidValues.push(
            `verificationMaterial.tlogEntries[${i}].inclusionProof`
          )
        } else {
          if (entry.inclusionProof.checkpoint === undefined) {
            invalidValues.push(
              `verificationMaterial.tlogEntries[${i}].inclusionProof.checkpoint`
            )
          }
        }
      })
    }
    return invalidValues
  }
  // Necessary for V03 and later bundles
  function validateNoCertificateChain(b) {
    const invalidValues = []
    /* istanbul ignore next */
    if (b.verificationMaterial?.content?.$case === 'x509CertificateChain') {
      invalidValues.push('verificationMaterial.content.$case')
    }
    return invalidValues
  }
  return validate
}

var hasRequiredSerialized
function requireSerialized() {
  if (hasRequiredSerialized) return serialized
  hasRequiredSerialized = 1
  Object.defineProperty(serialized, '__esModule', {
    value: true
  })
  serialized.envelopeToJSON =
    serialized.envelopeFromJSON =
    serialized.bundleToJSON =
    serialized.bundleFromJSON =
      void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const protobuf_specs_1 = requireDist$8()
  const bundle_1 = requireBundle$2()
  const validate_1 = requireValidate()
  const bundleFromJSON = obj => {
    const bundle = protobuf_specs_1.Bundle.fromJSON(obj)
    switch (bundle.mediaType) {
      case bundle_1.BUNDLE_V01_MEDIA_TYPE:
        ;(0, validate_1.assertBundleV01)(bundle)
        break
      case bundle_1.BUNDLE_V02_MEDIA_TYPE:
        ;(0, validate_1.assertBundleV02)(bundle)
        break
      default:
        ;(0, validate_1.assertBundleLatest)(bundle)
        break
    }
    return bundle
  }
  serialized.bundleFromJSON = bundleFromJSON
  const bundleToJSON = bundle => {
    return protobuf_specs_1.Bundle.toJSON(bundle)
  }
  serialized.bundleToJSON = bundleToJSON
  const envelopeFromJSON = obj => {
    return protobuf_specs_1.Envelope.fromJSON(obj)
  }
  serialized.envelopeFromJSON = envelopeFromJSON
  const envelopeToJSON = envelope => {
    return protobuf_specs_1.Envelope.toJSON(envelope)
  }
  serialized.envelopeToJSON = envelopeToJSON
  return serialized
}

var hasRequiredDist$7
function requireDist$7() {
  if (hasRequiredDist$7) return dist$7
  hasRequiredDist$7 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.isBundleV01 =
      exports.assertBundleV02 =
      exports.assertBundleV01 =
      exports.assertBundleLatest =
      exports.assertBundle =
      exports.envelopeToJSON =
      exports.envelopeFromJSON =
      exports.bundleToJSON =
      exports.bundleFromJSON =
      exports.ValidationError =
      exports.isBundleWithPublicKey =
      exports.isBundleWithMessageSignature =
      exports.isBundleWithDsseEnvelope =
      exports.isBundleWithCertificateChain =
      exports.BUNDLE_V03_MEDIA_TYPE =
      exports.BUNDLE_V03_LEGACY_MEDIA_TYPE =
      exports.BUNDLE_V02_MEDIA_TYPE =
      exports.BUNDLE_V01_MEDIA_TYPE =
      exports.toMessageSignatureBundle =
      exports.toDSSEBundle =
        void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var build_1 = requireBuild()
    Object.defineProperty(exports, 'toDSSEBundle', {
      enumerable: true,
      get: function () {
        return build_1.toDSSEBundle
      }
    })
    Object.defineProperty(exports, 'toMessageSignatureBundle', {
      enumerable: true,
      get: function () {
        return build_1.toMessageSignatureBundle
      }
    })
    var bundle_1 = requireBundle$2()
    Object.defineProperty(exports, 'BUNDLE_V01_MEDIA_TYPE', {
      enumerable: true,
      get: function () {
        return bundle_1.BUNDLE_V01_MEDIA_TYPE
      }
    })
    Object.defineProperty(exports, 'BUNDLE_V02_MEDIA_TYPE', {
      enumerable: true,
      get: function () {
        return bundle_1.BUNDLE_V02_MEDIA_TYPE
      }
    })
    Object.defineProperty(exports, 'BUNDLE_V03_LEGACY_MEDIA_TYPE', {
      enumerable: true,
      get: function () {
        return bundle_1.BUNDLE_V03_LEGACY_MEDIA_TYPE
      }
    })
    Object.defineProperty(exports, 'BUNDLE_V03_MEDIA_TYPE', {
      enumerable: true,
      get: function () {
        return bundle_1.BUNDLE_V03_MEDIA_TYPE
      }
    })
    Object.defineProperty(exports, 'isBundleWithCertificateChain', {
      enumerable: true,
      get: function () {
        return bundle_1.isBundleWithCertificateChain
      }
    })
    Object.defineProperty(exports, 'isBundleWithDsseEnvelope', {
      enumerable: true,
      get: function () {
        return bundle_1.isBundleWithDsseEnvelope
      }
    })
    Object.defineProperty(exports, 'isBundleWithMessageSignature', {
      enumerable: true,
      get: function () {
        return bundle_1.isBundleWithMessageSignature
      }
    })
    Object.defineProperty(exports, 'isBundleWithPublicKey', {
      enumerable: true,
      get: function () {
        return bundle_1.isBundleWithPublicKey
      }
    })
    var error_1 = requireError$8()
    Object.defineProperty(exports, 'ValidationError', {
      enumerable: true,
      get: function () {
        return error_1.ValidationError
      }
    })
    var serialized_1 = requireSerialized()
    Object.defineProperty(exports, 'bundleFromJSON', {
      enumerable: true,
      get: function () {
        return serialized_1.bundleFromJSON
      }
    })
    Object.defineProperty(exports, 'bundleToJSON', {
      enumerable: true,
      get: function () {
        return serialized_1.bundleToJSON
      }
    })
    Object.defineProperty(exports, 'envelopeFromJSON', {
      enumerable: true,
      get: function () {
        return serialized_1.envelopeFromJSON
      }
    })
    Object.defineProperty(exports, 'envelopeToJSON', {
      enumerable: true,
      get: function () {
        return serialized_1.envelopeToJSON
      }
    })
    var validate_1 = requireValidate()
    Object.defineProperty(exports, 'assertBundle', {
      enumerable: true,
      get: function () {
        return validate_1.assertBundle
      }
    })
    Object.defineProperty(exports, 'assertBundleLatest', {
      enumerable: true,
      get: function () {
        return validate_1.assertBundleLatest
      }
    })
    Object.defineProperty(exports, 'assertBundleV01', {
      enumerable: true,
      get: function () {
        return validate_1.assertBundleV01
      }
    })
    Object.defineProperty(exports, 'assertBundleV02', {
      enumerable: true,
      get: function () {
        return validate_1.assertBundleV02
      }
    })
    Object.defineProperty(exports, 'isBundleV01', {
      enumerable: true,
      get: function () {
        return validate_1.isBundleV01
      }
    })
  })(dist$7)
  return dist$7
}

var dist$5 = {}

var bundler = {}

var dsse$3 = {}

var util = {}

var dist$4 = {}

var asn1 = {}

var obj = {}

var stream = {}

var hasRequiredStream
function requireStream() {
  if (hasRequiredStream) return stream
  hasRequiredStream = 1
  Object.defineProperty(stream, '__esModule', {
    value: true
  })
  stream.ByteStream = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  class StreamError extends Error {}
  class ByteStream {
    constructor(buffer) {
      this.start = 0
      if (buffer) {
        this.buf = buffer
        this.view = Buffer.from(buffer)
      } else {
        this.buf = new ArrayBuffer(0)
        this.view = Buffer.from(this.buf)
      }
    }
    get buffer() {
      return this.view.subarray(0, this.start)
    }
    get length() {
      return this.view.byteLength
    }
    get position() {
      return this.start
    }
    seek(position) {
      this.start = position
    }
    // Returns a Buffer containing the specified number of bytes starting at the
    // given start position.
    slice(start, len) {
      const end = start + len
      if (end > this.length) {
        throw new StreamError('request past end of buffer')
      }
      return this.view.subarray(start, end)
    }
    appendChar(char) {
      this.ensureCapacity(1)
      this.view[this.start] = char
      this.start += 1
    }
    appendUint16(num) {
      this.ensureCapacity(2)
      const value = new Uint16Array([num])
      const view = new Uint8Array(value.buffer)
      this.view[this.start] = view[1]
      this.view[this.start + 1] = view[0]
      this.start += 2
    }
    appendUint24(num) {
      this.ensureCapacity(3)
      const value = new Uint32Array([num])
      const view = new Uint8Array(value.buffer)
      this.view[this.start] = view[2]
      this.view[this.start + 1] = view[1]
      this.view[this.start + 2] = view[0]
      this.start += 3
    }
    appendView(view) {
      this.ensureCapacity(view.length)
      this.view.set(view, this.start)
      this.start += view.length
    }
    getBlock(size) {
      if (size <= 0) {
        return Buffer.alloc(0)
      }
      if (this.start + size > this.view.length) {
        throw new Error('request past end of buffer')
      }
      const result = this.view.subarray(this.start, this.start + size)
      this.start += size
      return result
    }
    getUint8() {
      return this.getBlock(1)[0]
    }
    getUint16() {
      const block = this.getBlock(2)
      return (block[0] << 8) | block[1]
    }
    ensureCapacity(size) {
      if (this.start + size > this.view.byteLength) {
        const blockSize =
          ByteStream.BLOCK_SIZE + (size > ByteStream.BLOCK_SIZE ? size : 0)
        this.realloc(this.view.byteLength + blockSize)
      }
    }
    realloc(size) {
      const newArray = new ArrayBuffer(size)
      const newView = Buffer.from(newArray)
      // Copy the old buffer into the new one
      newView.set(this.view)
      this.buf = newArray
      this.view = newView
    }
  }
  stream.ByteStream = ByteStream
  ByteStream.BLOCK_SIZE = 1024
  return stream
}

var error$7 = {}

var hasRequiredError$7
function requireError$7() {
  if (hasRequiredError$7) return error$7
  hasRequiredError$7 = 1
  Object.defineProperty(error$7, '__esModule', {
    value: true
  })
  error$7.ASN1TypeError = error$7.ASN1ParseError = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  class ASN1ParseError extends Error {}
  error$7.ASN1ParseError = ASN1ParseError
  class ASN1TypeError extends Error {}
  error$7.ASN1TypeError = ASN1TypeError
  return error$7
}

var length = {}

var hasRequiredLength
function requireLength() {
  if (hasRequiredLength) return length
  hasRequiredLength = 1
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  Object.defineProperty(length, '__esModule', {
    value: true
  })
  length.decodeLength = decodeLength
  length.encodeLength = encodeLength
  const error_1 = requireError$7()
  // Decodes the length of a DER-encoded ANS.1 element from the supplied stream.
  // https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-encoded-length-and-value-bytes
  function decodeLength(stream) {
    const buf = stream.getUint8()
    // If the most significant bit is UNSET the length is just the value of the
    // byte.
    if ((buf & 0x80) === 0x00) {
      return buf
    }
    // Otherwise, the lower 7 bits of the first byte indicate the number of bytes
    // that follow to encode the length.
    const byteCount = buf & 0x7f
    // Ensure the encoded length can safely fit in a JS number.
    if (byteCount > 6) {
      throw new error_1.ASN1ParseError('length exceeds 6 byte limit')
    }
    // Iterate over the bytes that encode the length.
    let len = 0
    for (let i = 0; i < byteCount; i++) {
      len = len * 256 + stream.getUint8()
    }
    // This is a valid ASN.1 length encoding, but we don't support it.
    if (len === 0) {
      throw new error_1.ASN1ParseError(
        'indefinite length encoding not supported'
      )
    }
    return len
  }
  // Translates the supplied value to a DER-encoded length.
  function encodeLength(len) {
    if (len < 128) {
      return Buffer.from([len])
    }
    // Bitwise operations on large numbers are not supported in JS, so we need to
    // use BigInts.
    let val = BigInt(len)
    const bytes = []
    while (val > 0n) {
      bytes.unshift(Number(val & 255n))
      val = val >> 8n
    }
    return Buffer.from([0x80 | bytes.length, ...bytes])
  }
  return length
}

var parse = {}

var hasRequiredParse
function requireParse() {
  if (hasRequiredParse) return parse
  hasRequiredParse = 1
  Object.defineProperty(parse, '__esModule', {
    value: true
  })
  parse.parseInteger = parseInteger
  parse.parseStringASCII = parseStringASCII
  parse.parseTime = parseTime
  parse.parseOID = parseOID
  parse.parseBoolean = parseBoolean
  parse.parseBitString = parseBitString
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const RE_TIME_SHORT_YEAR =
    /^(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\.\d{3})?Z$/
  const RE_TIME_LONG_YEAR =
    /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\.\d{3})?Z$/
  // Parse a BigInt from the DER-encoded buffer
  // https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-integer
  function parseInteger(buf) {
    let pos = 0
    const end = buf.length
    let val = buf[pos]
    const neg = val > 0x7f
    // Consume any padding bytes
    const pad = neg ? 0xff : 0x00
    while (val == pad && ++pos < end) {
      val = buf[pos]
    }
    // Calculate remaining bytes to read
    const len = end - pos
    if (len === 0) return BigInt(neg ? -1 : 0)
    // Handle two's complement for negative numbers
    val = neg ? val - 256 : val
    // Parse remaining bytes
    let n = BigInt(val)
    for (let i = pos + 1; i < end; ++i) {
      n = n * BigInt(256) + BigInt(buf[i])
    }
    return n
  }
  // Parse an ASCII string from the DER-encoded buffer
  // https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-basic-types#boolean
  function parseStringASCII(buf) {
    return buf.toString('ascii')
  }
  // Parse a Date from the DER-encoded buffer
  // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.5.1
  function parseTime(buf, shortYear) {
    const timeStr = parseStringASCII(buf)
    // Parse the time string into matches - captured groups start at index 1
    const m = shortYear
      ? RE_TIME_SHORT_YEAR.exec(timeStr)
      : RE_TIME_LONG_YEAR.exec(timeStr)
    if (!m) {
      throw new Error('invalid time')
    }
    // Translate dates with a 2-digit year to 4 digits per the spec
    if (shortYear) {
      let year = Number(m[1])
      year += year >= 50 ? 1900 : 2000
      m[1] = year.toString()
    }
    // Translate to ISO8601 format and parse
    return new Date(`${m[1]}-${m[2]}-${m[3]}T${m[4]}:${m[5]}:${m[6]}Z`)
  }
  // Parse an OID from the DER-encoded buffer
  // https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-object-identifier
  function parseOID(buf) {
    let pos = 0
    const end = buf.length
    // Consume first byte which encodes the first two OID components
    let n = buf[pos++]
    const first = Math.floor(n / 40)
    const second = n % 40
    let oid = `${first}.${second}`
    // Consume remaining bytes
    let val = 0
    for (; pos < end; ++pos) {
      n = buf[pos]
      val = (val << 7) + (n & 0x7f)
      // If the left-most bit is NOT set, then this is the last byte in the
      // sequence and we can add the value to the OID and reset the accumulator
      if ((n & 0x80) === 0) {
        oid += `.${val}`
        val = 0
      }
    }
    return oid
  }
  // Parse a boolean from the DER-encoded buffer
  // https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-basic-types#boolean
  function parseBoolean(buf) {
    return buf[0] !== 0
  }
  // Parse a bit string from the DER-encoded buffer
  // https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-bit-string
  function parseBitString(buf) {
    // First byte tell us how many unused bits are in the last byte
    const unused = buf[0]
    const start = 1
    const end = buf.length
    const bits = []
    for (let i = start; i < end; ++i) {
      const byte = buf[i]
      // The skip value is only used for the last byte
      const skip = i === end - 1 ? unused : 0
      // Iterate over each bit in the byte (most significant first)
      for (let j = 7; j >= skip; --j) {
        // Read the bit and add it to the bit string
        bits.push((byte >> j) & 0x01)
      }
    }
    return bits
  }
  return parse
}

var tag = {}

var hasRequiredTag
function requireTag() {
  if (hasRequiredTag) return tag
  hasRequiredTag = 1
  Object.defineProperty(tag, '__esModule', {
    value: true
  })
  tag.ASN1Tag = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError$7()
  const UNIVERSAL_TAG = {
    BOOLEAN: 0x01,
    INTEGER: 0x02,
    BIT_STRING: 0x03,
    OCTET_STRING: 0x04,
    OBJECT_IDENTIFIER: 0x06,
    UTC_TIME: 0x17,
    GENERALIZED_TIME: 0x18
  }
  const TAG_CLASS = {
    UNIVERSAL: 0x00,
    CONTEXT_SPECIFIC: 0x02
  }
  // https://learn.microsoft.com/en-us/windows/win32/seccertenroll/about-encoded-tag-bytes
  class ASN1Tag {
    constructor(enc) {
      // Bits 0 through 4 are the tag number
      this.number = enc & 0x1f
      // Bit 5 is the constructed bit
      this.constructed = (enc & 0x20) === 0x20
      // Bit 6 & 7 are the class
      this.class = enc >> 6
      if (this.number === 0x1f) {
        throw new error_1.ASN1ParseError('long form tags not supported')
      }
      if (this.class === TAG_CLASS.UNIVERSAL && this.number === 0x00) {
        throw new error_1.ASN1ParseError('unsupported tag 0x00')
      }
    }
    isUniversal() {
      return this.class === TAG_CLASS.UNIVERSAL
    }
    isContextSpecific(num) {
      const res = this.class === TAG_CLASS.CONTEXT_SPECIFIC
      return num !== undefined ? res && this.number === num : res
    }
    isBoolean() {
      return this.isUniversal() && this.number === UNIVERSAL_TAG.BOOLEAN
    }
    isInteger() {
      return this.isUniversal() && this.number === UNIVERSAL_TAG.INTEGER
    }
    isBitString() {
      return this.isUniversal() && this.number === UNIVERSAL_TAG.BIT_STRING
    }
    isOctetString() {
      return this.isUniversal() && this.number === UNIVERSAL_TAG.OCTET_STRING
    }
    isOID() {
      return (
        this.isUniversal() && this.number === UNIVERSAL_TAG.OBJECT_IDENTIFIER
      )
    }
    isUTCTime() {
      return this.isUniversal() && this.number === UNIVERSAL_TAG.UTC_TIME
    }
    isGeneralizedTime() {
      return (
        this.isUniversal() && this.number === UNIVERSAL_TAG.GENERALIZED_TIME
      )
    }
    toDER() {
      return this.number | (this.constructed ? 0x20 : 0x00) | (this.class << 6)
    }
  }
  tag.ASN1Tag = ASN1Tag
  return tag
}

var hasRequiredObj
function requireObj() {
  if (hasRequiredObj) return obj
  hasRequiredObj = 1
  Object.defineProperty(obj, '__esModule', {
    value: true
  })
  obj.ASN1Obj = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const stream_1 = requireStream()
  const error_1 = requireError$7()
  const length_1 = requireLength()
  const parse_1 = requireParse()
  const tag_1 = requireTag()
  class ASN1Obj {
    constructor(tag, value, subs) {
      this.tag = tag
      this.value = value
      this.subs = subs
    }
    // Constructs an ASN.1 object from a Buffer of DER-encoded bytes.
    static parseBuffer(buf) {
      return parseStream(new stream_1.ByteStream(buf))
    }
    toDER() {
      const valueStream = new stream_1.ByteStream()
      if (this.subs.length > 0) {
        for (const sub of this.subs) {
          valueStream.appendView(sub.toDER())
        }
      } else {
        valueStream.appendView(this.value)
      }
      const value = valueStream.buffer
      // Concat tag/length/value
      const obj = new stream_1.ByteStream()
      obj.appendChar(this.tag.toDER())
      obj.appendView((0, length_1.encodeLength)(value.length))
      obj.appendView(value)
      return obj.buffer
    }
    /////////////////////////////////////////////////////////////////////////////
    // Convenience methods for parsing ASN.1 primitives into JS types
    // Returns the ASN.1 object's value as a boolean. Throws an error if the
    // object is not a boolean.
    toBoolean() {
      if (!this.tag.isBoolean()) {
        throw new error_1.ASN1TypeError('not a boolean')
      }
      return (0, parse_1.parseBoolean)(this.value)
    }
    // Returns the ASN.1 object's value as a BigInt. Throws an error if the
    // object is not an integer.
    toInteger() {
      if (!this.tag.isInteger()) {
        throw new error_1.ASN1TypeError('not an integer')
      }
      return (0, parse_1.parseInteger)(this.value)
    }
    // Returns the ASN.1 object's value as an OID string. Throws an error if the
    // object is not an OID.
    toOID() {
      if (!this.tag.isOID()) {
        throw new error_1.ASN1TypeError('not an OID')
      }
      return (0, parse_1.parseOID)(this.value)
    }
    // Returns the ASN.1 object's value as a Date. Throws an error if the object
    // is not either a UTCTime or a GeneralizedTime.
    toDate() {
      switch (true) {
        case this.tag.isUTCTime():
          return (0, parse_1.parseTime)(this.value, true)
        case this.tag.isGeneralizedTime():
          return (0, parse_1.parseTime)(this.value, false)
        default:
          throw new error_1.ASN1TypeError('not a date')
      }
    }
    // Returns the ASN.1 object's value as a number[] where each number is the
    // value of a bit in the bit string. Throws an error if the object is not a
    // bit string.
    toBitString() {
      if (!this.tag.isBitString()) {
        throw new error_1.ASN1TypeError('not a bit string')
      }
      return (0, parse_1.parseBitString)(this.value)
    }
  }
  obj.ASN1Obj = ASN1Obj
  /////////////////////////////////////////////////////////////////////////////
  // Internal stream parsing functions
  function parseStream(stream) {
    // Parse tag, length, and value from stream
    const tag = new tag_1.ASN1Tag(stream.getUint8())
    const len = (0, length_1.decodeLength)(stream)
    const value = stream.slice(stream.position, len)
    const start = stream.position
    let subs = []
    // If the object is constructed, parse its children. Sometimes, children
    // are embedded in OCTESTRING objects, so we need to check those
    // for children as well.
    if (tag.constructed) {
      subs = collectSubs(stream, len)
    } else if (tag.isOctetString()) {
      // Attempt to parse children of OCTETSTRING objects. If anything fails,
      // assume the object is not constructed and treat as primitive.
      try {
        subs = collectSubs(stream, len)
      } catch (e) {
        // Fail silently and treat as primitive
      }
    }
    // If there are no children, move stream cursor to the end of the object
    if (subs.length === 0) {
      stream.seek(start + len)
    }
    return new ASN1Obj(tag, value, subs)
  }
  function collectSubs(stream, len) {
    // Calculate end of object content
    const end = stream.position + len
    // Make sure there are enough bytes left in the stream. This should never
    // happen, cause it'll get caught when the stream is sliced in parseStream.
    // Leaving as an extra check just in case.
    /* istanbul ignore if */
    if (end > stream.length) {
      throw new error_1.ASN1ParseError('invalid length')
    }
    // Parse all children
    const subs = []
    while (stream.position < end) {
      subs.push(parseStream(stream))
    }
    // When we're done parsing children, we should be at the end of the object
    if (stream.position !== end) {
      throw new error_1.ASN1ParseError('invalid length')
    }
    return subs
  }
  return obj
}

var hasRequiredAsn1
function requireAsn1() {
  if (hasRequiredAsn1) return asn1
  hasRequiredAsn1 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.ASN1Obj = void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var obj_1 = requireObj()
    Object.defineProperty(exports, 'ASN1Obj', {
      enumerable: true,
      get: function () {
        return obj_1.ASN1Obj
      }
    })
  })(asn1)
  return asn1
}

var crypto = {}

var hasRequiredCrypto
function requireCrypto() {
  if (hasRequiredCrypto) return crypto
  hasRequiredCrypto = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(crypto, '__esModule', {
    value: true
  })
  crypto.createPublicKey = createPublicKey
  crypto.digest = digest
  crypto.verify = verify
  crypto.bufferEqual = bufferEqual
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const crypto_1 = __importDefault(require$$0$d)
  function createPublicKey(key, type = 'spki') {
    if (typeof key === 'string') {
      return crypto_1.default.createPublicKey(key)
    } else {
      return crypto_1.default.createPublicKey({
        key,
        format: 'der',
        type: type
      })
    }
  }
  function digest(algorithm, ...data) {
    const hash = crypto_1.default.createHash(algorithm)
    for (const d of data) {
      hash.update(d)
    }
    return hash.digest()
  }
  function verify(data, key, signature, algorithm) {
    // The try/catch is to work around an issue in Node 14.x where verify throws
    // an error in some scenarios if the signature is invalid.
    try {
      return crypto_1.default.verify(algorithm, data, key, signature)
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  }
  function bufferEqual(a, b) {
    try {
      return crypto_1.default.timingSafeEqual(a, b)
    } catch {
      /* istanbul ignore next */
      return false
    }
  }
  return crypto
}

var dsse$2 = {}

var hasRequiredDsse$3
function requireDsse$3() {
  if (hasRequiredDsse$3) return dsse$2
  hasRequiredDsse$3 = 1
  Object.defineProperty(dsse$2, '__esModule', {
    value: true
  })
  dsse$2.preAuthEncoding = preAuthEncoding
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const PAE_PREFIX = 'DSSEv1'
  // DSSE Pre-Authentication Encoding
  function preAuthEncoding(payloadType, payload) {
    const prefix = [
      PAE_PREFIX,
      payloadType.length,
      payloadType,
      payload.length,
      ''
    ].join(' ')
    return Buffer.concat([Buffer.from(prefix, 'ascii'), payload])
  }
  return dsse$2
}

var encoding = {}

var hasRequiredEncoding
function requireEncoding() {
  if (hasRequiredEncoding) return encoding
  hasRequiredEncoding = 1
  Object.defineProperty(encoding, '__esModule', {
    value: true
  })
  encoding.base64Encode = base64Encode
  encoding.base64Decode = base64Decode
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const BASE64_ENCODING = 'base64'
  const UTF8_ENCODING = 'utf-8'
  function base64Encode(str) {
    return Buffer.from(str, UTF8_ENCODING).toString(BASE64_ENCODING)
  }
  function base64Decode(str) {
    return Buffer.from(str, BASE64_ENCODING).toString(UTF8_ENCODING)
  }
  return encoding
}

var json = {}

var hasRequiredJson
function requireJson() {
  if (hasRequiredJson) return json
  hasRequiredJson = 1
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  Object.defineProperty(json, '__esModule', {
    value: true
  })
  json.canonicalize = canonicalize
  // JSON canonicalization per https://github.com/cyberphone/json-canonicalization
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function canonicalize(object) {
    let buffer = ''
    if (
      object === null ||
      typeof object !== 'object' ||
      object.toJSON != null
    ) {
      // Primitives or toJSONable objects
      buffer += JSON.stringify(object)
    } else if (Array.isArray(object)) {
      // Array - maintain element order
      buffer += '['
      let first = true
      object.forEach(element => {
        if (!first) {
          buffer += ','
        }
        first = false
        // recursive call
        buffer += canonicalize(element)
      })
      buffer += ']'
    } else {
      // Object - Sort properties before serializing
      buffer += '{'
      let first = true
      Object.keys(object)
        .sort()
        .forEach(property => {
          if (!first) {
            buffer += ','
          }
          first = false
          buffer += JSON.stringify(property)
          buffer += ':'
          // recursive call
          buffer += canonicalize(object[property])
        })
      buffer += '}'
    }
    return buffer
  }
  return json
}

var pem = {}

var hasRequiredPem
function requirePem() {
  if (hasRequiredPem) return pem
  hasRequiredPem = 1
  Object.defineProperty(pem, '__esModule', {
    value: true
  })
  pem.toDER = toDER
  pem.fromDER = fromDER
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const PEM_HEADER = /-----BEGIN (.*)-----/
  const PEM_FOOTER = /-----END (.*)-----/
  function toDER(certificate) {
    let der = ''
    certificate.split('\n').forEach(line => {
      if (line.match(PEM_HEADER) || line.match(PEM_FOOTER)) {
        return
      }
      der += line
    })
    return Buffer.from(der, 'base64')
  }
  // Translates a DER-encoded buffer into a PEM-encoded string. Standard PEM
  // encoding dictates that each certificate should have a trailing newline after
  // the footer.
  function fromDER(certificate, type = 'CERTIFICATE') {
    // Base64-encode the certificate.
    const der = certificate.toString('base64')
    // Split the certificate into lines of 64 characters.
    const lines = der.match(/.{1,64}/g) || ''
    return [`-----BEGIN ${type}-----`, ...lines, `-----END ${type}-----`]
      .join('\n')
      .concat('\n')
  }
  return pem
}

var rfc3161 = {}

var timestamp$2 = {}

var oid$1 = {}

var hasRequiredOid$1
function requireOid$1() {
  if (hasRequiredOid$1) return oid$1
  hasRequiredOid$1 = 1
  Object.defineProperty(oid$1, '__esModule', {
    value: true
  })
  oid$1.SHA2_HASH_ALGOS = oid$1.ECDSA_SIGNATURE_ALGOS = void 0
  oid$1.ECDSA_SIGNATURE_ALGOS = {
    '1.2.840.10045.4.3.1': 'sha224',
    '1.2.840.10045.4.3.2': 'sha256',
    '1.2.840.10045.4.3.3': 'sha384',
    '1.2.840.10045.4.3.4': 'sha512'
  }
  oid$1.SHA2_HASH_ALGOS = {
    '2.16.840.1.101.3.4.2.1': 'sha256',
    '2.16.840.1.101.3.4.2.2': 'sha384',
    '2.16.840.1.101.3.4.2.3': 'sha512'
  }
  return oid$1
}

var error$6 = {}

var hasRequiredError$6
function requireError$6() {
  if (hasRequiredError$6) return error$6
  hasRequiredError$6 = 1
  Object.defineProperty(error$6, '__esModule', {
    value: true
  })
  error$6.RFC3161TimestampVerificationError = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  class RFC3161TimestampVerificationError extends Error {}
  error$6.RFC3161TimestampVerificationError = RFC3161TimestampVerificationError
  return error$6
}

var tstinfo = {}

var hasRequiredTstinfo
function requireTstinfo() {
  if (hasRequiredTstinfo) return tstinfo
  hasRequiredTstinfo = 1
  var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          var desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          o[k2] = m[k]
        })
  var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  var __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) return mod
      var result = {}
      if (mod != null)
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(tstinfo, '__esModule', {
    value: true
  })
  tstinfo.TSTInfo = void 0
  const crypto = __importStar(requireCrypto())
  const oid_1 = requireOid$1()
  const error_1 = requireError$6()
  class TSTInfo {
    constructor(asn1) {
      this.root = asn1
    }
    get version() {
      return this.root.subs[0].toInteger()
    }
    get genTime() {
      return this.root.subs[4].toDate()
    }
    get messageImprintHashAlgorithm() {
      const oid = this.messageImprintObj.subs[0].subs[0].toOID()
      return oid_1.SHA2_HASH_ALGOS[oid]
    }
    get messageImprintHashedMessage() {
      return this.messageImprintObj.subs[1].value
    }
    get raw() {
      return this.root.toDER()
    }
    verify(data) {
      const digest = crypto.digest(this.messageImprintHashAlgorithm, data)
      if (!crypto.bufferEqual(digest, this.messageImprintHashedMessage)) {
        throw new error_1.RFC3161TimestampVerificationError(
          'message imprint does not match artifact'
        )
      }
    }
    // https://www.rfc-editor.org/rfc/rfc3161#section-2.4.2
    get messageImprintObj() {
      return this.root.subs[2]
    }
  }
  tstinfo.TSTInfo = TSTInfo
  return tstinfo
}

var hasRequiredTimestamp$2
function requireTimestamp$2() {
  if (hasRequiredTimestamp$2) return timestamp$2
  hasRequiredTimestamp$2 = 1
  var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          var desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          o[k2] = m[k]
        })
  var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  var __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) return mod
      var result = {}
      if (mod != null)
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(timestamp$2, '__esModule', {
    value: true
  })
  timestamp$2.RFC3161Timestamp = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const asn1_1 = requireAsn1()
  const crypto = __importStar(requireCrypto())
  const oid_1 = requireOid$1()
  const error_1 = requireError$6()
  const tstinfo_1 = requireTstinfo()
  const OID_PKCS9_CONTENT_TYPE_SIGNED_DATA = '1.2.840.113549.1.7.2'
  const OID_PKCS9_CONTENT_TYPE_TSTINFO = '1.2.840.113549.1.9.16.1.4'
  const OID_PKCS9_MESSAGE_DIGEST_KEY = '1.2.840.113549.1.9.4'
  class RFC3161Timestamp {
    constructor(asn1) {
      this.root = asn1
    }
    static parse(der) {
      const asn1 = asn1_1.ASN1Obj.parseBuffer(der)
      return new RFC3161Timestamp(asn1)
    }
    get status() {
      return this.pkiStatusInfoObj.subs[0].toInteger()
    }
    get contentType() {
      return this.contentTypeObj.toOID()
    }
    get eContentType() {
      return this.eContentTypeObj.toOID()
    }
    get signingTime() {
      return this.tstInfo.genTime
    }
    get signerIssuer() {
      return this.signerSidObj.subs[0].value
    }
    get signerSerialNumber() {
      return this.signerSidObj.subs[1].value
    }
    get signerDigestAlgorithm() {
      const oid = this.signerDigestAlgorithmObj.subs[0].toOID()
      return oid_1.SHA2_HASH_ALGOS[oid]
    }
    get signatureAlgorithm() {
      const oid = this.signatureAlgorithmObj.subs[0].toOID()
      return oid_1.ECDSA_SIGNATURE_ALGOS[oid]
    }
    get signatureValue() {
      return this.signatureValueObj.value
    }
    get tstInfo() {
      // Need to unpack tstInfo from an OCTET STRING
      return new tstinfo_1.TSTInfo(this.eContentObj.subs[0].subs[0])
    }
    verify(data, publicKey) {
      if (!this.timeStampTokenObj) {
        throw new error_1.RFC3161TimestampVerificationError(
          'timeStampToken is missing'
        )
      }
      // Check for expected ContentInfo content type
      if (this.contentType !== OID_PKCS9_CONTENT_TYPE_SIGNED_DATA) {
        throw new error_1.RFC3161TimestampVerificationError(
          `incorrect content type: ${this.contentType}`
        )
      }
      // Check for expected encapsulated content type
      if (this.eContentType !== OID_PKCS9_CONTENT_TYPE_TSTINFO) {
        throw new error_1.RFC3161TimestampVerificationError(
          `incorrect encapsulated content type: ${this.eContentType}`
        )
      }
      // Check that the tstInfo references the correct artifact
      this.tstInfo.verify(data)
      // Check that the signed message digest matches the tstInfo
      this.verifyMessageDigest()
      // Check that the signature is valid for the signed attributes
      this.verifySignature(publicKey)
    }
    verifyMessageDigest() {
      // Check that the tstInfo matches the signed data
      const tstInfoDigest = crypto.digest(
        this.signerDigestAlgorithm,
        this.tstInfo.raw
      )
      const expectedDigest =
        this.messageDigestAttributeObj.subs[1].subs[0].value
      if (!crypto.bufferEqual(tstInfoDigest, expectedDigest)) {
        throw new error_1.RFC3161TimestampVerificationError(
          'signed data does not match tstInfo'
        )
      }
    }
    verifySignature(key) {
      // Encode the signed attributes for verification
      const signedAttrs = this.signedAttrsObj.toDER()
      signedAttrs[0] = 0x31 // Change context-specific tag to SET
      // Check that the signature is valid for the signed attributes
      const verified = crypto.verify(
        signedAttrs,
        key,
        this.signatureValue,
        this.signatureAlgorithm
      )
      if (!verified) {
        throw new error_1.RFC3161TimestampVerificationError(
          'signature verification failed'
        )
      }
    }
    // https://www.rfc-editor.org/rfc/rfc3161#section-2.4.2
    get pkiStatusInfoObj() {
      // pkiStatusInfo is the first element of the timestamp response sequence
      return this.root.subs[0]
    }
    // https://www.rfc-editor.org/rfc/rfc3161#section-2.4.2
    get timeStampTokenObj() {
      // timeStampToken is the first element of the timestamp response sequence
      return this.root.subs[1]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-3
    get contentTypeObj() {
      return this.timeStampTokenObj.subs[0]
    }
    // https://www.rfc-editor.org/rfc/rfc5652#section-3
    get signedDataObj() {
      const obj = this.timeStampTokenObj.subs.find(sub =>
        sub.tag.isContextSpecific(0x00)
      )
      return obj.subs[0]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.1
    get encapContentInfoObj() {
      return this.signedDataObj.subs[2]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.1
    get signerInfosObj() {
      // SignerInfos is the last element of the signed data sequence
      const sd = this.signedDataObj
      return sd.subs[sd.subs.length - 1]
    }
    // https://www.rfc-editor.org/rfc/rfc5652#section-5.1
    get signerInfoObj() {
      // Only supporting one signer
      return this.signerInfosObj.subs[0]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.2
    get eContentTypeObj() {
      return this.encapContentInfoObj.subs[0]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.2
    get eContentObj() {
      return this.encapContentInfoObj.subs[1]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.3
    get signedAttrsObj() {
      const signedAttrs = this.signerInfoObj.subs.find(sub =>
        sub.tag.isContextSpecific(0x00)
      )
      return signedAttrs
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.3
    get messageDigestAttributeObj() {
      const messageDigest = this.signedAttrsObj.subs.find(
        sub =>
          sub.subs[0].tag.isOID() &&
          sub.subs[0].toOID() === OID_PKCS9_MESSAGE_DIGEST_KEY
      )
      return messageDigest
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.3
    get signerSidObj() {
      return this.signerInfoObj.subs[1]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.3
    get signerDigestAlgorithmObj() {
      // Signature is the 2nd element of the signerInfoObj object
      return this.signerInfoObj.subs[2]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.3
    get signatureAlgorithmObj() {
      // Signature is the 4th element of the signerInfoObj object
      return this.signerInfoObj.subs[4]
    }
    // https://datatracker.ietf.org/doc/html/rfc5652#section-5.3
    get signatureValueObj() {
      // Signature is the 6th element of the signerInfoObj object
      return this.signerInfoObj.subs[5]
    }
  }
  timestamp$2.RFC3161Timestamp = RFC3161Timestamp
  return timestamp$2
}

var hasRequiredRfc3161
function requireRfc3161() {
  if (hasRequiredRfc3161) return rfc3161
  hasRequiredRfc3161 = 1
  ;(function (exports) {
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.RFC3161Timestamp = void 0
    var timestamp_1 = requireTimestamp$2()
    Object.defineProperty(exports, 'RFC3161Timestamp', {
      enumerable: true,
      get: function () {
        return timestamp_1.RFC3161Timestamp
      }
    })
  })(rfc3161)
  return rfc3161
}

var x509 = {}

var cert = {}

var ext = {}

var sct$1 = {}

var hasRequiredSct$1
function requireSct$1() {
  if (hasRequiredSct$1) return sct$1
  hasRequiredSct$1 = 1
  var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          var desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          o[k2] = m[k]
        })
  var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  var __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) return mod
      var result = {}
      if (mod != null)
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(sct$1, '__esModule', {
    value: true
  })
  sct$1.SignedCertificateTimestamp = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const crypto = __importStar(requireCrypto())
  const stream_1 = requireStream()
  class SignedCertificateTimestamp {
    constructor(options) {
      this.version = options.version
      this.logID = options.logID
      this.timestamp = options.timestamp
      this.extensions = options.extensions
      this.hashAlgorithm = options.hashAlgorithm
      this.signatureAlgorithm = options.signatureAlgorithm
      this.signature = options.signature
    }
    get datetime() {
      return new Date(Number(this.timestamp.readBigInt64BE()))
    }
    // Returns the hash algorithm used to generate the SCT's signature.
    // https://www.rfc-editor.org/rfc/rfc5246#section-7.4.1.4.1
    get algorithm() {
      switch (this.hashAlgorithm) {
        /* istanbul ignore next */
        case 0:
          return 'none'
        /* istanbul ignore next */
        case 1:
          return 'md5'
        /* istanbul ignore next */
        case 2:
          return 'sha1'
        /* istanbul ignore next */
        case 3:
          return 'sha224'
        case 4:
          return 'sha256'
        /* istanbul ignore next */
        case 5:
          return 'sha384'
        /* istanbul ignore next */
        case 6:
          return 'sha512'
        /* istanbul ignore next */
        default:
          return 'unknown'
      }
    }
    verify(preCert, key) {
      // Assemble the digitally-signed struct (the data over which the signature
      // was generated).
      // https://www.rfc-editor.org/rfc/rfc6962#section-3.2
      const stream = new stream_1.ByteStream()
      stream.appendChar(this.version)
      stream.appendChar(0x00) // SignatureType = certificate_timestamp(0)
      stream.appendView(this.timestamp)
      stream.appendUint16(0x01) // LogEntryType = precert_entry(1)
      stream.appendView(preCert)
      stream.appendUint16(this.extensions.byteLength)
      /* istanbul ignore next - extensions are very uncommon */
      if (this.extensions.byteLength > 0) {
        stream.appendView(this.extensions)
      }
      return crypto.verify(stream.buffer, key, this.signature, this.algorithm)
    }
    // Parses a SignedCertificateTimestamp from a buffer. SCTs are encoded using
    // TLS encoding which means the fields and lengths of most fields are
    // specified as part of the SCT and TLS specs.
    // https://www.rfc-editor.org/rfc/rfc6962#section-3.2
    // https://www.rfc-editor.org/rfc/rfc5246#section-7.4.1.4.1
    static parse(buf) {
      const stream = new stream_1.ByteStream(buf)
      // Version - enum { v1(0), (255) }
      const version = stream.getUint8()
      // Log ID  - struct { opaque key_id[32]; }
      const logID = stream.getBlock(32)
      // Timestamp - uint64
      const timestamp = stream.getBlock(8)
      // Extensions - opaque extensions<0..2^16-1>;
      const extenstionLength = stream.getUint16()
      const extensions = stream.getBlock(extenstionLength)
      // Hash algo - enum { sha256(4), . . . (255) }
      const hashAlgorithm = stream.getUint8()
      // Signature algo - enum { anonymous(0), rsa(1), dsa(2), ecdsa(3), (255) }
      const signatureAlgorithm = stream.getUint8()
      // Signature  - opaque signature<0..2^16-1>;
      const sigLength = stream.getUint16()
      const signature = stream.getBlock(sigLength)
      // Check that we read the entire buffer
      if (stream.position !== buf.length) {
        throw new Error('SCT buffer length mismatch')
      }
      return new SignedCertificateTimestamp({
        version,
        logID,
        timestamp,
        extensions,
        hashAlgorithm,
        signatureAlgorithm,
        signature
      })
    }
  }
  sct$1.SignedCertificateTimestamp = SignedCertificateTimestamp
  return sct$1
}

var hasRequiredExt
function requireExt() {
  if (hasRequiredExt) return ext
  hasRequiredExt = 1
  Object.defineProperty(ext, '__esModule', {
    value: true
  })
  ext.X509SCTExtension =
    ext.X509SubjectKeyIDExtension =
    ext.X509AuthorityKeyIDExtension =
    ext.X509SubjectAlternativeNameExtension =
    ext.X509KeyUsageExtension =
    ext.X509BasicConstraintsExtension =
    ext.X509Extension =
      void 0
  const stream_1 = requireStream()
  const sct_1 = requireSct$1()
  // https://www.rfc-editor.org/rfc/rfc5280#section-4.1
  class X509Extension {
    constructor(asn1) {
      this.root = asn1
    }
    get oid() {
      return this.root.subs[0].toOID()
    }
    get critical() {
      // The critical field is optional and will be the second element of the
      // extension sequence if present. Default to false if not present.
      return this.root.subs.length === 3 ? this.root.subs[1].toBoolean() : false
    }
    get value() {
      return this.extnValueObj.value
    }
    get valueObj() {
      return this.extnValueObj
    }
    get extnValueObj() {
      // The extnValue field will be the last element of the extension sequence
      return this.root.subs[this.root.subs.length - 1]
    }
  }
  ext.X509Extension = X509Extension
  // https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.9
  class X509BasicConstraintsExtension extends X509Extension {
    get isCA() {
      return this.sequence.subs[0]?.toBoolean() ?? false
    }
    get pathLenConstraint() {
      return this.sequence.subs.length > 1
        ? this.sequence.subs[1].toInteger()
        : undefined
    }
    // The extnValue field contains a single sequence wrapping the isCA and
    // pathLenConstraint.
    get sequence() {
      return this.extnValueObj.subs[0]
    }
  }
  ext.X509BasicConstraintsExtension = X509BasicConstraintsExtension
  // https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.3
  class X509KeyUsageExtension extends X509Extension {
    get digitalSignature() {
      return this.bitString[0] === 1
    }
    get keyCertSign() {
      return this.bitString[5] === 1
    }
    get crlSign() {
      return this.bitString[6] === 1
    }
    // The extnValue field contains a single bit string which is a bit mask
    // indicating which key usages are enabled.
    get bitString() {
      return this.extnValueObj.subs[0].toBitString()
    }
  }
  ext.X509KeyUsageExtension = X509KeyUsageExtension
  // https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.6
  class X509SubjectAlternativeNameExtension extends X509Extension {
    get rfc822Name() {
      return this.findGeneralName(0x01)?.value.toString('ascii')
    }
    get uri() {
      return this.findGeneralName(0x06)?.value.toString('ascii')
    }
    // Retrieve the value of an otherName with the given OID.
    otherName(oid) {
      const otherName = this.findGeneralName(0x00)
      if (otherName === undefined) {
        return undefined
      }
      // The otherName is a sequence containing an OID and a value.
      // Need to check that the OID matches the one we're looking for.
      const otherNameOID = otherName.subs[0].toOID()
      if (otherNameOID !== oid) {
        return undefined
      }
      // The otherNameValue is a sequence containing the actual value.
      const otherNameValue = otherName.subs[1]
      return otherNameValue.subs[0].value.toString('ascii')
    }
    findGeneralName(tag) {
      return this.generalNames.find(gn => gn.tag.isContextSpecific(tag))
    }
    // The extnValue field contains a sequence of GeneralNames.
    get generalNames() {
      return this.extnValueObj.subs[0].subs
    }
  }
  ext.X509SubjectAlternativeNameExtension = X509SubjectAlternativeNameExtension
  // https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.1
  class X509AuthorityKeyIDExtension extends X509Extension {
    get keyIdentifier() {
      return this.findSequenceMember(0x00)?.value
    }
    findSequenceMember(tag) {
      return this.sequence.subs.find(el => el.tag.isContextSpecific(tag))
    }
    // The extnValue field contains a single sequence wrapping the keyIdentifier
    get sequence() {
      return this.extnValueObj.subs[0]
    }
  }
  ext.X509AuthorityKeyIDExtension = X509AuthorityKeyIDExtension
  // https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.2
  class X509SubjectKeyIDExtension extends X509Extension {
    get keyIdentifier() {
      return this.extnValueObj.subs[0].value
    }
  }
  ext.X509SubjectKeyIDExtension = X509SubjectKeyIDExtension
  // https://www.rfc-editor.org/rfc/rfc6962#section-3.3
  class X509SCTExtension extends X509Extension {
    constructor(asn1) {
      super(asn1)
    }
    get signedCertificateTimestamps() {
      const buf = this.extnValueObj.subs[0].value
      const stream = new stream_1.ByteStream(buf)
      // The overall list length is encoded in the first two bytes -- note this
      // is the length of the list in bytes, NOT the number of SCTs in the list
      const end = stream.getUint16() + 2
      const sctList = []
      while (stream.position < end) {
        // Read the length of the next SCT
        const sctLength = stream.getUint16()
        // Slice out the bytes for the next SCT and parse it
        const sct = stream.getBlock(sctLength)
        sctList.push(sct_1.SignedCertificateTimestamp.parse(sct))
      }
      if (stream.position !== end) {
        throw new Error('SCT list length does not match actual length')
      }
      return sctList
    }
  }
  ext.X509SCTExtension = X509SCTExtension
  return ext
}

var hasRequiredCert
function requireCert() {
  if (hasRequiredCert) return cert
  hasRequiredCert = 1
  ;(function (exports) {
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            var desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', {
              enumerable: true,
              value: v
            })
          }
        : function (o, v) {
            o['default'] = v
          })
    var __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        __setModuleDefault(result, mod)
        return result
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.X509Certificate = exports.EXTENSION_OID_SCT = void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const asn1_1 = requireAsn1()
    const crypto = __importStar(requireCrypto())
    const oid_1 = requireOid$1()
    const pem = __importStar(requirePem())
    const ext_1 = requireExt()
    const EXTENSION_OID_SUBJECT_KEY_ID = '2.5.29.14'
    const EXTENSION_OID_KEY_USAGE = '2.5.29.15'
    const EXTENSION_OID_SUBJECT_ALT_NAME = '2.5.29.17'
    const EXTENSION_OID_BASIC_CONSTRAINTS = '2.5.29.19'
    const EXTENSION_OID_AUTHORITY_KEY_ID = '2.5.29.35'
    exports.EXTENSION_OID_SCT = '1.3.6.1.4.1.11129.2.4.2'
    class X509Certificate {
      constructor(asn1) {
        this.root = asn1
      }
      static parse(cert) {
        const der = typeof cert === 'string' ? pem.toDER(cert) : cert
        const asn1 = asn1_1.ASN1Obj.parseBuffer(der)
        return new X509Certificate(asn1)
      }
      get tbsCertificate() {
        return this.tbsCertificateObj
      }
      get version() {
        // version number is the first element of the version context specific tag
        const ver = this.versionObj.subs[0].toInteger()
        return `v${(ver + BigInt(1)).toString()}`
      }
      get serialNumber() {
        return this.serialNumberObj.value
      }
      get notBefore() {
        // notBefore is the first element of the validity sequence
        return this.validityObj.subs[0].toDate()
      }
      get notAfter() {
        // notAfter is the second element of the validity sequence
        return this.validityObj.subs[1].toDate()
      }
      get issuer() {
        return this.issuerObj.value
      }
      get subject() {
        return this.subjectObj.value
      }
      get publicKey() {
        return this.subjectPublicKeyInfoObj.toDER()
      }
      get signatureAlgorithm() {
        const oid = this.signatureAlgorithmObj.subs[0].toOID()
        return oid_1.ECDSA_SIGNATURE_ALGOS[oid]
      }
      get signatureValue() {
        // Signature value is a bit string, so we need to skip the first byte
        return this.signatureValueObj.value.subarray(1)
      }
      get subjectAltName() {
        const ext = this.extSubjectAltName
        return ext?.uri || /* istanbul ignore next */ ext?.rfc822Name
      }
      get extensions() {
        // The extension list is the first (and only) element of the extensions
        // context specific tag
        /* istanbul ignore next */
        const extSeq = this.extensionsObj?.subs[0]
        /* istanbul ignore next */
        return extSeq?.subs || []
      }
      get extKeyUsage() {
        const ext = this.findExtension(EXTENSION_OID_KEY_USAGE)
        return ext ? new ext_1.X509KeyUsageExtension(ext) : undefined
      }
      get extBasicConstraints() {
        const ext = this.findExtension(EXTENSION_OID_BASIC_CONSTRAINTS)
        return ext ? new ext_1.X509BasicConstraintsExtension(ext) : undefined
      }
      get extSubjectAltName() {
        const ext = this.findExtension(EXTENSION_OID_SUBJECT_ALT_NAME)
        return ext
          ? new ext_1.X509SubjectAlternativeNameExtension(ext)
          : undefined
      }
      get extAuthorityKeyID() {
        const ext = this.findExtension(EXTENSION_OID_AUTHORITY_KEY_ID)
        return ext ? new ext_1.X509AuthorityKeyIDExtension(ext) : undefined
      }
      get extSubjectKeyID() {
        const ext = this.findExtension(EXTENSION_OID_SUBJECT_KEY_ID)
        return ext
          ? new ext_1.X509SubjectKeyIDExtension(ext)
          : /* istanbul ignore next */ undefined
      }
      get extSCT() {
        const ext = this.findExtension(exports.EXTENSION_OID_SCT)
        return ext ? new ext_1.X509SCTExtension(ext) : undefined
      }
      get isCA() {
        const ca = this.extBasicConstraints?.isCA || false
        // If the KeyUsage extension is present, keyCertSign must be set
        if (this.extKeyUsage) {
          return ca && this.extKeyUsage.keyCertSign
        }
        // TODO: test coverage for this case
        /* istanbul ignore next */
        return ca
      }
      extension(oid) {
        const ext = this.findExtension(oid)
        return ext ? new ext_1.X509Extension(ext) : undefined
      }
      verify(issuerCertificate) {
        // Use the issuer's public key if provided, otherwise use the subject's
        const publicKey = issuerCertificate?.publicKey || this.publicKey
        const key = crypto.createPublicKey(publicKey)
        return crypto.verify(
          this.tbsCertificate.toDER(),
          key,
          this.signatureValue,
          this.signatureAlgorithm
        )
      }
      validForDate(date) {
        return this.notBefore <= date && date <= this.notAfter
      }
      equals(other) {
        return this.root.toDER().equals(other.root.toDER())
      }
      // Creates a copy of the certificate with a new buffer
      clone() {
        const der = this.root.toDER()
        const clone = Buffer.alloc(der.length)
        der.copy(clone)
        return X509Certificate.parse(clone)
      }
      findExtension(oid) {
        // Find the extension with the given OID. The OID will always be the first
        // element of the extension sequence
        return this.extensions.find(ext => ext.subs[0].toOID() === oid)
      }
      /////////////////////////////////////////////////////////////////////////////
      // The following properties use the documented x509 structure to locate the
      // desired ASN.1 object
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.1.1
      get tbsCertificateObj() {
        // tbsCertificate is the first element of the certificate sequence
        return this.root.subs[0]
      }
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.1.2
      get signatureAlgorithmObj() {
        // signatureAlgorithm is the second element of the certificate sequence
        return this.root.subs[1]
      }
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.1.3
      get signatureValueObj() {
        // signatureValue is the third element of the certificate sequence
        return this.root.subs[2]
      }
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.1
      get versionObj() {
        // version is the first element of the tbsCertificate sequence
        return this.tbsCertificateObj.subs[0]
      }
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.2
      get serialNumberObj() {
        // serialNumber is the second element of the tbsCertificate sequence
        return this.tbsCertificateObj.subs[1]
      }
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.4
      get issuerObj() {
        // issuer is the fourth element of the tbsCertificate sequence
        return this.tbsCertificateObj.subs[3]
      }
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.5
      get validityObj() {
        // version is the fifth element of the tbsCertificate sequence
        return this.tbsCertificateObj.subs[4]
      }
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.6
      get subjectObj() {
        // subject is the sixth element of the tbsCertificate sequence
        return this.tbsCertificateObj.subs[5]
      }
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.7
      get subjectPublicKeyInfoObj() {
        // subjectPublicKeyInfo is the seventh element of the tbsCertificate sequence
        return this.tbsCertificateObj.subs[6]
      }
      // Extensions can't be located by index because their position varies. Instead,
      // we need to find the extensions context specific tag
      // https://www.rfc-editor.org/rfc/rfc5280#section-4.1.2.9
      get extensionsObj() {
        return this.tbsCertificateObj.subs.find(sub =>
          sub.tag.isContextSpecific(0x03)
        )
      }
    }
    exports.X509Certificate = X509Certificate
  })(cert)
  return cert
}

var hasRequiredX509
function requireX509() {
  if (hasRequiredX509) return x509
  hasRequiredX509 = 1
  ;(function (exports) {
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.X509SCTExtension =
      exports.X509Certificate =
      exports.EXTENSION_OID_SCT =
        void 0
    var cert_1 = requireCert()
    Object.defineProperty(exports, 'EXTENSION_OID_SCT', {
      enumerable: true,
      get: function () {
        return cert_1.EXTENSION_OID_SCT
      }
    })
    Object.defineProperty(exports, 'X509Certificate', {
      enumerable: true,
      get: function () {
        return cert_1.X509Certificate
      }
    })
    var ext_1 = requireExt()
    Object.defineProperty(exports, 'X509SCTExtension', {
      enumerable: true,
      get: function () {
        return ext_1.X509SCTExtension
      }
    })
  })(x509)
  return x509
}

var hasRequiredDist$6
function requireDist$6() {
  if (hasRequiredDist$6) return dist$4
  hasRequiredDist$6 = 1
  ;(function (exports) {
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            var desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', {
              enumerable: true,
              value: v
            })
          }
        : function (o, v) {
            o['default'] = v
          })
    var __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        __setModuleDefault(result, mod)
        return result
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.X509SCTExtension =
      exports.X509Certificate =
      exports.EXTENSION_OID_SCT =
      exports.ByteStream =
      exports.RFC3161Timestamp =
      exports.pem =
      exports.json =
      exports.encoding =
      exports.dsse =
      exports.crypto =
      exports.ASN1Obj =
        void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var asn1_1 = requireAsn1()
    Object.defineProperty(exports, 'ASN1Obj', {
      enumerable: true,
      get: function () {
        return asn1_1.ASN1Obj
      }
    })
    exports.crypto = __importStar(requireCrypto())
    exports.dsse = __importStar(requireDsse$3())
    exports.encoding = __importStar(requireEncoding())
    exports.json = __importStar(requireJson())
    exports.pem = __importStar(requirePem())
    var rfc3161_1 = requireRfc3161()
    Object.defineProperty(exports, 'RFC3161Timestamp', {
      enumerable: true,
      get: function () {
        return rfc3161_1.RFC3161Timestamp
      }
    })
    var stream_1 = requireStream()
    Object.defineProperty(exports, 'ByteStream', {
      enumerable: true,
      get: function () {
        return stream_1.ByteStream
      }
    })
    var x509_1 = requireX509()
    Object.defineProperty(exports, 'EXTENSION_OID_SCT', {
      enumerable: true,
      get: function () {
        return x509_1.EXTENSION_OID_SCT
      }
    })
    Object.defineProperty(exports, 'X509Certificate', {
      enumerable: true,
      get: function () {
        return x509_1.X509Certificate
      }
    })
    Object.defineProperty(exports, 'X509SCTExtension', {
      enumerable: true,
      get: function () {
        return x509_1.X509SCTExtension
      }
    })
  })(dist$4)
  return dist$4
}

var oidc = {}

var hasRequiredOidc
function requireOidc() {
  if (hasRequiredOidc) return oidc
  hasRequiredOidc = 1
  Object.defineProperty(oidc, '__esModule', {
    value: true
  })
  oidc.extractJWTSubject = extractJWTSubject
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const core_1 = requireDist$6()
  function extractJWTSubject(jwt) {
    const parts = jwt.split('.', 3)
    const payload = JSON.parse(core_1.encoding.base64Decode(parts[1]))
    switch (payload.iss) {
      case 'https://accounts.google.com':
      case 'https://oauth2.sigstore.dev/auth':
        return payload.email
      default:
        return payload.sub
    }
  }
  return oidc
}

var ua = {}

var version = '3.1.0'
var require$$1 = {
  version: version
}

var hasRequiredUa
function requireUa() {
  if (hasRequiredUa) return ua
  hasRequiredUa = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(ua, '__esModule', {
    value: true
  })
  ua.getUserAgent = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const os_1 = __importDefault(require$$0$9)
  // Format User-Agent: <product> / <product-version> (<platform>)
  // source: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent
  const getUserAgent = () => {
    const packageVersion = require$$1.version
    const nodeVersion = process.version
    const platformName = os_1.default.platform()
    const archName = os_1.default.arch()
    return `sigstore-js/${packageVersion} (Node ${nodeVersion}) (${platformName}/${archName})`
  }
  ua.getUserAgent = getUserAgent
  return ua
}

var hasRequiredUtil
function requireUtil() {
  if (hasRequiredUtil) return util
  hasRequiredUtil = 1
  ;(function (exports) {
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            var desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', {
              enumerable: true,
              value: v
            })
          }
        : function (o, v) {
            o['default'] = v
          })
    var __importStar =
      (this && this.__importStar) ||
      (function () {
        var ownKeys = function (o) {
          ownKeys =
            Object.getOwnPropertyNames ||
            function (o) {
              var ar = []
              for (var k in o)
                if (Object.prototype.hasOwnProperty.call(o, k))
                  ar[ar.length] = k
              return ar
            }
          return ownKeys(o)
        }
        return function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k = ownKeys(mod), i = 0; i < k.length; i++)
              if (k[i] !== 'default') __createBinding(result, mod, k[i])
          __setModuleDefault(result, mod)
          return result
        }
      })()
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.ua =
      exports.oidc =
      exports.pem =
      exports.json =
      exports.encoding =
      exports.dsse =
      exports.crypto =
        void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var core_1 = requireDist$6()
    Object.defineProperty(exports, 'crypto', {
      enumerable: true,
      get: function () {
        return core_1.crypto
      }
    })
    Object.defineProperty(exports, 'dsse', {
      enumerable: true,
      get: function () {
        return core_1.dsse
      }
    })
    Object.defineProperty(exports, 'encoding', {
      enumerable: true,
      get: function () {
        return core_1.encoding
      }
    })
    Object.defineProperty(exports, 'json', {
      enumerable: true,
      get: function () {
        return core_1.json
      }
    })
    Object.defineProperty(exports, 'pem', {
      enumerable: true,
      get: function () {
        return core_1.pem
      }
    })
    exports.oidc = __importStar(requireOidc())
    exports.ua = __importStar(requireUa())
  })(util)
  return util
}

var base$1 = {}

var hasRequiredBase$1
function requireBase$1() {
  if (hasRequiredBase$1) return base$1
  hasRequiredBase$1 = 1
  Object.defineProperty(base$1, '__esModule', {
    value: true
  })
  base$1.BaseBundleBuilder = void 0
  // BaseBundleBuilder is a base class for BundleBuilder implementations. It
  // provides a the basic wokflow for signing and witnessing an artifact.
  // Subclasses must implement the `package` method to assemble a valid bundle
  // with the generated signature and verification material.
  class BaseBundleBuilder {
    constructor(options) {
      this.signer = options.signer
      this.witnesses = options.witnesses
    }
    // Executes the signing/witnessing process for the given artifact.
    async create(artifact) {
      const signature = await this.prepare(artifact).then(blob =>
        this.signer.sign(blob)
      )
      const bundle = await this.package(artifact, signature)
      // Invoke all of the witnesses in parallel
      const verificationMaterials = await Promise.all(
        this.witnesses.map(witness =>
          witness.testify(bundle.content, publicKey(signature.key))
        )
      )
      // Collect the verification material from all of the witnesses
      const tlogEntryList = []
      const timestampList = []
      verificationMaterials.forEach(({ tlogEntries, rfc3161Timestamps }) => {
        tlogEntryList.push(...(tlogEntries ?? []))
        timestampList.push(...(rfc3161Timestamps ?? []))
      })
      // Merge the collected verification material into the bundle
      bundle.verificationMaterial.tlogEntries = tlogEntryList
      bundle.verificationMaterial.timestampVerificationData = {
        rfc3161Timestamps: timestampList
      }
      return bundle
    }
    // Override this function to apply any pre-signing transformations to the
    // artifact. The returned buffer will be signed by the signer. The default
    // implementation simply returns the artifact data.
    async prepare(artifact) {
      return artifact.data
    }
  }
  base$1.BaseBundleBuilder = BaseBundleBuilder
  // Extracts the public key from a KeyMaterial. Returns either the public key
  // or the certificate, depending on the type of key material.
  function publicKey(key) {
    switch (key.$case) {
      case 'publicKey':
        return key.publicKey
      case 'x509Certificate':
        return key.certificate
    }
  }
  return base$1
}

var bundle$1 = {}

var hasRequiredBundle$1
function requireBundle$1() {
  if (hasRequiredBundle$1) return bundle$1
  hasRequiredBundle$1 = 1
  var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          var desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          o[k2] = m[k]
        })
  var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  var __importStar =
    (this && this.__importStar) ||
    (function () {
      var ownKeys = function (o) {
        ownKeys =
          Object.getOwnPropertyNames ||
          function (o) {
            var ar = []
            for (var k in o)
              if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k
            return ar
          }
        return ownKeys(o)
      }
      return function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k = ownKeys(mod), i = 0; i < k.length; i++)
            if (k[i] !== 'default') __createBinding(result, mod, k[i])
        __setModuleDefault(result, mod)
        return result
      }
    })()
  Object.defineProperty(bundle$1, '__esModule', {
    value: true
  })
  bundle$1.toMessageSignatureBundle = toMessageSignatureBundle
  bundle$1.toDSSEBundle = toDSSEBundle
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const sigstore = __importStar(requireDist$7())
  const util_1 = requireUtil()
  // Helper functions for assembling the parts of a Sigstore bundle
  // Message signature bundle - $case: 'messageSignature'
  function toMessageSignatureBundle(artifact, signature) {
    const digest = util_1.crypto.digest('sha256', artifact.data)
    return sigstore.toMessageSignatureBundle({
      digest,
      signature: signature.signature,
      certificate:
        signature.key.$case === 'x509Certificate'
          ? util_1.pem.toDER(signature.key.certificate)
          : undefined,
      keyHint:
        signature.key.$case === 'publicKey' ? signature.key.hint : undefined,
      certificateChain: true
    })
  }
  // DSSE envelope bundle - $case: 'dsseEnvelope'
  function toDSSEBundle(artifact, signature, certificateChain) {
    return sigstore.toDSSEBundle({
      artifact: artifact.data,
      artifactType: artifact.type,
      signature: signature.signature,
      certificate:
        signature.key.$case === 'x509Certificate'
          ? util_1.pem.toDER(signature.key.certificate)
          : undefined,
      keyHint:
        signature.key.$case === 'publicKey' ? signature.key.hint : undefined,
      certificateChain
    })
  }
  return bundle$1
}

var hasRequiredDsse$2
function requireDsse$2() {
  if (hasRequiredDsse$2) return dsse$3
  hasRequiredDsse$2 = 1
  Object.defineProperty(dsse$3, '__esModule', {
    value: true
  })
  dsse$3.DSSEBundleBuilder = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const util_1 = requireUtil()
  const base_1 = requireBase$1()
  const bundle_1 = requireBundle$1()
  // BundleBuilder implementation for DSSE wrapped attestations
  class DSSEBundleBuilder extends base_1.BaseBundleBuilder {
    constructor(options) {
      super(options)
      this.certificateChain = options.certificateChain ?? false
    }
    // DSSE requires the artifact to be pre-encoded with the payload type
    // before the signature is generated.
    async prepare(artifact) {
      const a = artifactDefaults(artifact)
      return util_1.dsse.preAuthEncoding(a.type, a.data)
    }
    // Packages the artifact and signature into a DSSE bundle
    async package(artifact, signature) {
      return (0, bundle_1.toDSSEBundle)(
        artifactDefaults(artifact),
        signature,
        this.certificateChain
      )
    }
  }
  dsse$3.DSSEBundleBuilder = DSSEBundleBuilder
  // Defaults the artifact type to an empty string if not provided
  function artifactDefaults(artifact) {
    return {
      ...artifact,
      type: artifact.type ?? ''
    }
  }
  return dsse$3
}

var message$1 = {}

var hasRequiredMessage$1
function requireMessage$1() {
  if (hasRequiredMessage$1) return message$1
  hasRequiredMessage$1 = 1
  Object.defineProperty(message$1, '__esModule', {
    value: true
  })
  message$1.MessageSignatureBundleBuilder = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const base_1 = requireBase$1()
  const bundle_1 = requireBundle$1()
  // BundleBuilder implementation for raw message signatures
  class MessageSignatureBundleBuilder extends base_1.BaseBundleBuilder {
    constructor(options) {
      super(options)
    }
    async package(artifact, signature) {
      return (0, bundle_1.toMessageSignatureBundle)(artifact, signature)
    }
  }
  message$1.MessageSignatureBundleBuilder = MessageSignatureBundleBuilder
  return message$1
}

var hasRequiredBundler
function requireBundler() {
  if (hasRequiredBundler) return bundler
  hasRequiredBundler = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.MessageSignatureBundleBuilder = exports.DSSEBundleBuilder = void 0
    var dsse_1 = requireDsse$2()
    Object.defineProperty(exports, 'DSSEBundleBuilder', {
      enumerable: true,
      get: function () {
        return dsse_1.DSSEBundleBuilder
      }
    })
    var message_1 = requireMessage$1()
    Object.defineProperty(exports, 'MessageSignatureBundleBuilder', {
      enumerable: true,
      get: function () {
        return message_1.MessageSignatureBundleBuilder
      }
    })
  })(bundler)
  return bundler
}

var error$5 = {}

var error$4 = {}

var hasRequiredError$5
function requireError$5() {
  if (hasRequiredError$5) return error$4
  hasRequiredError$5 = 1
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  Object.defineProperty(error$4, '__esModule', {
    value: true
  })
  error$4.HTTPError = void 0
  class HTTPError extends Error {
    constructor({ status, message, location }) {
      super(`(${status}) ${message}`)
      this.statusCode = status
      this.location = location
    }
  }
  error$4.HTTPError = HTTPError
  return error$4
}

var hasRequiredError$4
function requireError$4() {
  if (hasRequiredError$4) return error$5
  hasRequiredError$4 = 1
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  Object.defineProperty(error$5, '__esModule', {
    value: true
  })
  error$5.InternalError = void 0
  error$5.internalError = internalError
  const error_1 = requireError$5()
  class InternalError extends Error {
    constructor({ code, message, cause }) {
      super(message)
      this.name = this.constructor.name
      this.cause = cause
      this.code = code
    }
  }
  error$5.InternalError = InternalError
  function internalError(err, code, message) {
    if (err instanceof error_1.HTTPError) {
      message += ` - ${err.message}`
    }
    throw new InternalError({
      code: code,
      message: message,
      cause: err
    })
  }
  return error$5
}

var identity = {}

var ci = {}

var hasRequiredCi
function requireCi() {
  if (hasRequiredCi) return ci
  hasRequiredCi = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(ci, '__esModule', {
    value: true
  })
  ci.CIContextProvider = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const make_fetch_happen_1 = __importDefault(requireLib$3())
  // Collection of all the CI-specific providers we have implemented
  const providers = [getGHAToken, getEnv]
  /**
   * CIContextProvider is a composite identity provider which will iterate
   * over all of the CI-specific providers and return the token from the first
   * one that resolves.
   */
  class CIContextProvider {
    /* istanbul ignore next */
    constructor(audience = 'sigstore') {
      this.audience = audience
    }
    // Invoke all registered ProviderFuncs and return the value of whichever one
    // resolves first.
    async getToken() {
      return Promise.any(
        providers.map(getToken => getToken(this.audience))
      ).catch(() => Promise.reject('CI: no tokens available'))
    }
  }
  ci.CIContextProvider = CIContextProvider
  /**
   * getGHAToken can retrieve an OIDC token when running in a GitHub Actions
   * workflow
   */
  async function getGHAToken(audience) {
    // Check to see if we're running in GitHub Actions
    if (
      !process.env.ACTIONS_ID_TOKEN_REQUEST_URL ||
      !process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN
    ) {
      return Promise.reject('no token available')
    }
    // Construct URL to request token w/ appropriate audience
    const url = new URL(process.env.ACTIONS_ID_TOKEN_REQUEST_URL)
    url.searchParams.append('audience', audience)
    const response = await (0, make_fetch_happen_1.default)(url.href, {
      retry: 2,
      headers: {
        Accept: 'application/json',
        Authorization: `Bearer ${process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN}`
      }
    })
    return response.json().then(data => data.value)
  }
  /**
   * getEnv can retrieve an OIDC token from an environment variable.
   * This matches the behavior of https://github.com/sigstore/cosign/tree/main/pkg/providers/envvar
   */
  async function getEnv() {
    if (!process.env.SIGSTORE_ID_TOKEN) {
      return Promise.reject('no token available')
    }
    return process.env.SIGSTORE_ID_TOKEN
  }
  return ci
}

var hasRequiredIdentity
function requireIdentity() {
  if (hasRequiredIdentity) return identity
  hasRequiredIdentity = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.CIContextProvider = void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var ci_1 = requireCi()
    Object.defineProperty(exports, 'CIContextProvider', {
      enumerable: true,
      get: function () {
        return ci_1.CIContextProvider
      }
    })
  })(identity)
  return identity
}

var signer = {}

var fulcio$1 = {}

var ca = {}

var fulcio = {}

var fetch = {}

var hasRequiredFetch
function requireFetch() {
  if (hasRequiredFetch) return fetch
  hasRequiredFetch = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(fetch, '__esModule', {
    value: true
  })
  fetch.fetchWithRetry = fetchWithRetry
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const http2_1 = require$$0$l
  const make_fetch_happen_1 = __importDefault(requireLib$3())
  const proc_log_1 = requireLib$t()
  const promise_retry_1 = __importDefault(requirePromiseRetry())
  const util_1 = requireUtil()
  const error_1 = requireError$5()
  const {
    HTTP2_HEADER_LOCATION,
    HTTP2_HEADER_CONTENT_TYPE,
    HTTP2_HEADER_USER_AGENT,
    HTTP_STATUS_INTERNAL_SERVER_ERROR,
    HTTP_STATUS_TOO_MANY_REQUESTS,
    HTTP_STATUS_REQUEST_TIMEOUT
  } = http2_1.constants
  async function fetchWithRetry(url, options) {
    return (0, promise_retry_1.default)(async (retry, attemptNum) => {
      const method = options.method || 'POST'
      const headers = {
        [HTTP2_HEADER_USER_AGENT]: util_1.ua.getUserAgent(),
        ...options.headers
      }
      const response = await (0, make_fetch_happen_1.default)(url, {
        method,
        headers,
        body: options.body,
        timeout: options.timeout,
        retry: false // We're handling retries ourselves
      }).catch(reason => {
        proc_log_1.log.http(
          'fetch',
          `${method} ${url} attempt ${attemptNum} failed with ${reason}`
        )
        return retry(reason)
      })
      if (response.ok) {
        return response
      } else {
        const error = await errorFromResponse(response)
        proc_log_1.log.http(
          'fetch',
          `${method} ${url} attempt ${attemptNum} failed with ${response.status}`
        )
        if (retryable(response.status)) {
          return retry(error)
        } else {
          throw error
        }
      }
    }, retryOpts(options.retry))
  }
  // Translate a Response into an HTTPError instance. This will attempt to parse
  // the response body for a message, but will default to the statusText if none
  // is found.
  const errorFromResponse = async response => {
    let message = response.statusText
    const location = response.headers.get(HTTP2_HEADER_LOCATION) || undefined
    const contentType = response.headers.get(HTTP2_HEADER_CONTENT_TYPE)
    // If response type is JSON, try to parse the body for a message
    if (contentType?.includes('application/json')) {
      try {
        const body = await response.json()
        message = body.message || message
      } catch (e) {
        // ignore
      }
    }
    return new error_1.HTTPError({
      status: response.status,
      message: message,
      location: location
    })
  }
  // Determine if a status code is retryable. This includes 5xx errors, 408, and
  // 429.
  const retryable = status =>
    [HTTP_STATUS_REQUEST_TIMEOUT, HTTP_STATUS_TOO_MANY_REQUESTS].includes(
      status
    ) || status >= HTTP_STATUS_INTERNAL_SERVER_ERROR
  // Normalize the retry options to the format expected by promise-retry
  const retryOpts = retry => {
    if (typeof retry === 'boolean') {
      return {
        retries: retry ? 1 : 0
      }
    } else if (typeof retry === 'number') {
      return {
        retries: retry
      }
    } else {
      return {
        retries: 0,
        ...retry
      }
    }
  }
  return fetch
}

var hasRequiredFulcio$1
function requireFulcio$1() {
  if (hasRequiredFulcio$1) return fulcio
  hasRequiredFulcio$1 = 1
  Object.defineProperty(fulcio, '__esModule', {
    value: true
  })
  fulcio.Fulcio = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const fetch_1 = requireFetch()
  /**
   * Fulcio API client.
   */
  class Fulcio {
    constructor(options) {
      this.options = options
    }
    async createSigningCertificate(request) {
      const { baseURL, retry, timeout } = this.options
      const url = `${baseURL}/api/v2/signingCert`
      const response = await (0, fetch_1.fetchWithRetry)(url, {
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(request),
        timeout,
        retry
      })
      return response.json()
    }
  }
  fulcio.Fulcio = Fulcio
  return fulcio
}

var hasRequiredCa
function requireCa() {
  if (hasRequiredCa) return ca
  hasRequiredCa = 1
  Object.defineProperty(ca, '__esModule', {
    value: true
  })
  ca.CAClient = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError$4()
  const fulcio_1 = requireFulcio$1()
  class CAClient {
    constructor(options) {
      this.fulcio = new fulcio_1.Fulcio({
        baseURL: options.fulcioBaseURL,
        retry: options.retry,
        timeout: options.timeout
      })
    }
    async createSigningCertificate(identityToken, publicKey, challenge) {
      const request = toCertificateRequest(identityToken, publicKey, challenge)
      try {
        const resp = await this.fulcio.createSigningCertificate(request)
        // Account for the fact that the response may contain either a
        // signedCertificateEmbeddedSct or a signedCertificateDetachedSct.
        const cert = resp.signedCertificateEmbeddedSct
          ? resp.signedCertificateEmbeddedSct
          : resp.signedCertificateDetachedSct
        return cert.chain.certificates
      } catch (err) {
        ;(0, error_1.internalError)(
          err,
          'CA_CREATE_SIGNING_CERTIFICATE_ERROR',
          'error creating signing certificate'
        )
      }
    }
  }
  ca.CAClient = CAClient
  function toCertificateRequest(identityToken, publicKey, challenge) {
    return {
      credentials: {
        oidcIdentityToken: identityToken
      },
      publicKeyRequest: {
        publicKey: {
          algorithm: 'ECDSA',
          content: publicKey
        },
        proofOfPossession: challenge.toString('base64')
      }
    }
  }
  return ca
}

var ephemeral = {}

var hasRequiredEphemeral
function requireEphemeral() {
  if (hasRequiredEphemeral) return ephemeral
  hasRequiredEphemeral = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(ephemeral, '__esModule', {
    value: true
  })
  ephemeral.EphemeralSigner = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const crypto_1 = __importDefault(require$$0$d)
  const EC_KEYPAIR_TYPE = 'ec'
  const P256_CURVE = 'P-256'
  // Signer implementation which uses an ephemeral keypair to sign artifacts.
  // The private key lives only in memory and is tied to the lifetime of the
  // EphemeralSigner instance.
  class EphemeralSigner {
    constructor() {
      this.keypair = crypto_1.default.generateKeyPairSync(EC_KEYPAIR_TYPE, {
        namedCurve: P256_CURVE
      })
    }
    async sign(data) {
      const signature = crypto_1.default.sign(
        null,
        data,
        this.keypair.privateKey
      )
      const publicKey = this.keypair.publicKey
        .export({
          format: 'pem',
          type: 'spki'
        })
        .toString('ascii')
      return {
        signature: signature,
        key: {
          $case: 'publicKey',
          publicKey
        }
      }
    }
  }
  ephemeral.EphemeralSigner = EphemeralSigner
  return ephemeral
}

var hasRequiredFulcio
function requireFulcio() {
  if (hasRequiredFulcio) return fulcio$1
  hasRequiredFulcio = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.FulcioSigner = exports.DEFAULT_FULCIO_URL = void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const error_1 = requireError$4()
    const util_1 = requireUtil()
    const ca_1 = requireCa()
    const ephemeral_1 = requireEphemeral()
    exports.DEFAULT_FULCIO_URL = 'https://fulcio.sigstore.dev'
    // Signer implementation which can be used to decorate another signer
    // with a Fulcio-issued signing certificate for the signer's public key.
    // Must be instantiated with an identity provider which can provide a JWT
    // which represents the identity to be bound to the signing certificate.
    class FulcioSigner {
      constructor(options) {
        this.ca = new ca_1.CAClient({
          ...options,
          fulcioBaseURL:
            options.fulcioBaseURL ||
            /* istanbul ignore next */ exports.DEFAULT_FULCIO_URL
        })
        this.identityProvider = options.identityProvider
        this.keyHolder = options.keyHolder || new ephemeral_1.EphemeralSigner()
      }
      async sign(data) {
        // Retrieve identity token from the supplied identity provider
        const identityToken = await this.getIdentityToken()
        // Extract challenge claim from OIDC token
        let subject
        try {
          subject = util_1.oidc.extractJWTSubject(identityToken)
        } catch (err) {
          throw new error_1.InternalError({
            code: 'IDENTITY_TOKEN_PARSE_ERROR',
            message: `invalid identity token: ${identityToken}`,
            cause: err
          })
        }
        // Construct challenge value by signing the subject claim
        const challenge = await this.keyHolder.sign(Buffer.from(subject))
        if (challenge.key.$case !== 'publicKey') {
          throw new error_1.InternalError({
            code: 'CA_CREATE_SIGNING_CERTIFICATE_ERROR',
            message: 'unexpected format for signing key'
          })
        }
        // Create signing certificate
        const certificates = await this.ca.createSigningCertificate(
          identityToken,
          challenge.key.publicKey,
          challenge.signature
        )
        // Generate artifact signature
        const signature = await this.keyHolder.sign(data)
        // Specifically returning only the first certificate in the chain
        // as the key.
        return {
          signature: signature.signature,
          key: {
            $case: 'x509Certificate',
            certificate: certificates[0]
          }
        }
      }
      async getIdentityToken() {
        try {
          return await this.identityProvider.getToken()
        } catch (err) {
          throw new error_1.InternalError({
            code: 'IDENTITY_TOKEN_READ_ERROR',
            message: 'error retrieving identity token',
            cause: err
          })
        }
      }
    }
    exports.FulcioSigner = FulcioSigner
  })(fulcio$1)
  return fulcio$1
}

var hasRequiredSigner
function requireSigner() {
  if (hasRequiredSigner) return signer
  hasRequiredSigner = 1
  ;(function (exports) {
    /* istanbul ignore file */
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.FulcioSigner = exports.DEFAULT_FULCIO_URL = void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var fulcio_1 = requireFulcio()
    Object.defineProperty(exports, 'DEFAULT_FULCIO_URL', {
      enumerable: true,
      get: function () {
        return fulcio_1.DEFAULT_FULCIO_URL
      }
    })
    Object.defineProperty(exports, 'FulcioSigner', {
      enumerable: true,
      get: function () {
        return fulcio_1.FulcioSigner
      }
    })
  })(signer)
  return signer
}

var witness = {}

var tlog$1 = {}

var client$2 = {}

var rekor = {}

var hasRequiredRekor
function requireRekor() {
  if (hasRequiredRekor) return rekor
  hasRequiredRekor = 1
  Object.defineProperty(rekor, '__esModule', {
    value: true
  })
  rekor.Rekor = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const fetch_1 = requireFetch()
  /**
   * Rekor API client.
   */
  class Rekor {
    constructor(options) {
      this.options = options
    }
    /**
     * Create a new entry in the Rekor log.
     * @param propsedEntry {ProposedEntry} Data to create a new entry
     * @returns {Promise<Entry>} The created entry
     */
    async createEntry(propsedEntry) {
      const { baseURL, timeout, retry } = this.options
      const url = `${baseURL}/api/v1/log/entries`
      const response = await (0, fetch_1.fetchWithRetry)(url, {
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json'
        },
        body: JSON.stringify(propsedEntry),
        timeout,
        retry
      })
      const data = await response.json()
      return entryFromResponse(data)
    }
    /**
     * Get an entry from the Rekor log.
     * @param uuid {string} The UUID of the entry to retrieve
     * @returns {Promise<Entry>} The retrieved entry
     */
    async getEntry(uuid) {
      const { baseURL, timeout, retry } = this.options
      const url = `${baseURL}/api/v1/log/entries/${uuid}`
      const response = await (0, fetch_1.fetchWithRetry)(url, {
        method: 'GET',
        headers: {
          Accept: 'application/json'
        },
        timeout,
        retry
      })
      const data = await response.json()
      return entryFromResponse(data)
    }
  }
  rekor.Rekor = Rekor
  // Unpack the response from the Rekor API into a more convenient format.
  function entryFromResponse(data) {
    const entries = Object.entries(data)
    if (entries.length != 1) {
      throw new Error('Received multiple entries in Rekor response')
    }
    // Grab UUID and entry data from the response
    const [uuid, entry] = entries[0]
    return {
      ...entry,
      uuid
    }
  }
  return rekor
}

var hasRequiredClient$2
function requireClient$2() {
  if (hasRequiredClient$2) return client$2
  hasRequiredClient$2 = 1
  Object.defineProperty(client$2, '__esModule', {
    value: true
  })
  client$2.TLogClient = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError$4()
  const error_2 = requireError$5()
  const rekor_1 = requireRekor()
  class TLogClient {
    constructor(options) {
      this.fetchOnConflict = options.fetchOnConflict ?? false
      this.rekor = new rekor_1.Rekor({
        baseURL: options.rekorBaseURL,
        retry: options.retry,
        timeout: options.timeout
      })
    }
    async createEntry(proposedEntry) {
      let entry
      try {
        entry = await this.rekor.createEntry(proposedEntry)
      } catch (err) {
        // If the entry already exists, fetch it (if enabled)
        if (entryExistsError(err) && this.fetchOnConflict) {
          // Grab the UUID of the existing entry from the location header
          /* istanbul ignore next */
          const uuid = err.location.split('/').pop() || ''
          try {
            entry = await this.rekor.getEntry(uuid)
          } catch (err) {
            ;(0, error_1.internalError)(
              err,
              'TLOG_FETCH_ENTRY_ERROR',
              'error fetching tlog entry'
            )
          }
        } else {
          ;(0, error_1.internalError)(
            err,
            'TLOG_CREATE_ENTRY_ERROR',
            'error creating tlog entry'
          )
        }
      }
      return entry
    }
  }
  client$2.TLogClient = TLogClient
  function entryExistsError(value) {
    return (
      value instanceof error_2.HTTPError &&
      value.statusCode === 409 &&
      value.location !== undefined
    )
  }
  return client$2
}

var entry = {}

var hasRequiredEntry
function requireEntry() {
  if (hasRequiredEntry) return entry
  hasRequiredEntry = 1
  Object.defineProperty(entry, '__esModule', {
    value: true
  })
  entry.toProposedEntry = toProposedEntry
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const bundle_1 = requireDist$7()
  const util_1 = requireUtil()
  const SHA256_ALGORITHM = 'sha256'
  function toProposedEntry(
    content,
    publicKey,
    // TODO: Remove this parameter once have completely switched to 'dsse' entries
    entryType = 'dsse'
  ) {
    switch (content.$case) {
      case 'dsseEnvelope':
        // TODO: Remove this conditional once have completely ditched "intoto" entries
        if (entryType === 'intoto') {
          return toProposedIntotoEntry(content.dsseEnvelope, publicKey)
        }
        return toProposedDSSEEntry(content.dsseEnvelope, publicKey)
      case 'messageSignature':
        return toProposedHashedRekordEntry(content.messageSignature, publicKey)
    }
  }
  // Returns a properly formatted Rekor "hashedrekord" entry for the given digest
  // and signature
  function toProposedHashedRekordEntry(messageSignature, publicKey) {
    const hexDigest = messageSignature.messageDigest.digest.toString('hex')
    const b64Signature = messageSignature.signature.toString('base64')
    const b64Key = util_1.encoding.base64Encode(publicKey)
    return {
      apiVersion: '0.0.1',
      kind: 'hashedrekord',
      spec: {
        data: {
          hash: {
            algorithm: SHA256_ALGORITHM,
            value: hexDigest
          }
        },
        signature: {
          content: b64Signature,
          publicKey: {
            content: b64Key
          }
        }
      }
    }
  }
  // Returns a properly formatted Rekor "dsse" entry for the given DSSE envelope
  // and signature
  function toProposedDSSEEntry(envelope, publicKey) {
    const envelopeJSON = JSON.stringify((0, bundle_1.envelopeToJSON)(envelope))
    const encodedKey = util_1.encoding.base64Encode(publicKey)
    return {
      apiVersion: '0.0.1',
      kind: 'dsse',
      spec: {
        proposedContent: {
          envelope: envelopeJSON,
          verifiers: [encodedKey]
        }
      }
    }
  }
  // Returns a properly formatted Rekor "intoto" entry for the given DSSE
  // envelope and signature
  function toProposedIntotoEntry(envelope, publicKey) {
    // Calculate the value for the payloadHash field in the Rekor entry
    const payloadHash = util_1.crypto
      .digest(SHA256_ALGORITHM, envelope.payload)
      .toString('hex')
    // Calculate the value for the hash field in the Rekor entry
    const envelopeHash = calculateDSSEHash(envelope, publicKey)
    // Collect values for re-creating the DSSE envelope.
    // Double-encode payload and signature cause that's what Rekor expects
    const payload = util_1.encoding.base64Encode(
      envelope.payload.toString('base64')
    )
    const sig = util_1.encoding.base64Encode(
      envelope.signatures[0].sig.toString('base64')
    )
    const keyid = envelope.signatures[0].keyid
    const encodedKey = util_1.encoding.base64Encode(publicKey)
    // Create the envelope portion of the entry. Note the inclusion of the
    // publicKey in the signature struct is not a standard part of a DSSE
    // envelope, but is required by Rekor.
    const dsse = {
      payloadType: envelope.payloadType,
      payload: payload,
      signatures: [
        {
          sig,
          publicKey: encodedKey
        }
      ]
    }
    // If the keyid is an empty string, Rekor seems to remove it altogether. We
    // need to do the same here so that we can properly recreate the entry for
    // verification.
    if (keyid.length > 0) {
      dsse.signatures[0].keyid = keyid
    }
    return {
      apiVersion: '0.0.2',
      kind: 'intoto',
      spec: {
        content: {
          envelope: dsse,
          hash: {
            algorithm: SHA256_ALGORITHM,
            value: envelopeHash
          },
          payloadHash: {
            algorithm: SHA256_ALGORITHM,
            value: payloadHash
          }
        }
      }
    }
  }
  // Calculates the hash of a DSSE envelope for inclusion in a Rekor entry.
  // There is no standard way to do this, so the scheme we're using as as
  // follows:
  //  * payload is base64 encoded
  //  * signature is base64 encoded (only the first signature is used)
  //  * keyid is included ONLY if it is NOT an empty string
  //  * The resulting JSON is canonicalized and hashed to a hex string
  function calculateDSSEHash(envelope, publicKey) {
    const dsse = {
      payloadType: envelope.payloadType,
      payload: envelope.payload.toString('base64'),
      signatures: [
        {
          sig: envelope.signatures[0].sig.toString('base64'),
          publicKey
        }
      ]
    }
    // If the keyid is an empty string, Rekor seems to remove it altogether.
    if (envelope.signatures[0].keyid.length > 0) {
      dsse.signatures[0].keyid = envelope.signatures[0].keyid
    }
    return util_1.crypto
      .digest(SHA256_ALGORITHM, util_1.json.canonicalize(dsse))
      .toString('hex')
  }
  return entry
}

var hasRequiredTlog$1
function requireTlog$1() {
  if (hasRequiredTlog$1) return tlog$1
  hasRequiredTlog$1 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.RekorWitness = exports.DEFAULT_REKOR_URL = void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const util_1 = requireUtil()
    const client_1 = requireClient$2()
    const entry_1 = requireEntry()
    exports.DEFAULT_REKOR_URL = 'https://rekor.sigstore.dev'
    class RekorWitness {
      constructor(options) {
        this.entryType = options.entryType
        this.tlog = new client_1.TLogClient({
          ...options,
          rekorBaseURL:
            options.rekorBaseURL ||
            /* istanbul ignore next */ exports.DEFAULT_REKOR_URL
        })
      }
      async testify(content, publicKey) {
        const proposedEntry = (0, entry_1.toProposedEntry)(
          content,
          publicKey,
          this.entryType
        )
        const entry = await this.tlog.createEntry(proposedEntry)
        return toTransparencyLogEntry(entry)
      }
    }
    exports.RekorWitness = RekorWitness
    function toTransparencyLogEntry(entry) {
      const logID = Buffer.from(entry.logID, 'hex')
      // Parse entry body so we can extract the kind and version.
      const bodyJSON = util_1.encoding.base64Decode(entry.body)
      const entryBody = JSON.parse(bodyJSON)
      const promise = entry?.verification?.signedEntryTimestamp
        ? inclusionPromise(entry.verification.signedEntryTimestamp)
        : undefined
      const proof = entry?.verification?.inclusionProof
        ? inclusionProof(entry.verification.inclusionProof)
        : undefined
      const tlogEntry = {
        logIndex: entry.logIndex.toString(),
        logId: {
          keyId: logID
        },
        integratedTime: entry.integratedTime.toString(),
        kindVersion: {
          kind: entryBody.kind,
          version: entryBody.apiVersion
        },
        inclusionPromise: promise,
        inclusionProof: proof,
        canonicalizedBody: Buffer.from(entry.body, 'base64')
      }
      return {
        tlogEntries: [tlogEntry]
      }
    }
    function inclusionPromise(promise) {
      return {
        signedEntryTimestamp: Buffer.from(promise, 'base64')
      }
    }
    function inclusionProof(proof) {
      return {
        logIndex: proof.logIndex.toString(),
        treeSize: proof.treeSize.toString(),
        rootHash: Buffer.from(proof.rootHash, 'hex'),
        hashes: proof.hashes.map(h => Buffer.from(h, 'hex')),
        checkpoint: {
          envelope: proof.checkpoint
        }
      }
    }
  })(tlog$1)
  return tlog$1
}

var tsa$2 = {}

var client$1 = {}

var tsa$1 = {}

var hasRequiredTsa$2
function requireTsa$2() {
  if (hasRequiredTsa$2) return tsa$1
  hasRequiredTsa$2 = 1
  Object.defineProperty(tsa$1, '__esModule', {
    value: true
  })
  tsa$1.TimestampAuthority = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const fetch_1 = requireFetch()
  class TimestampAuthority {
    constructor(options) {
      this.options = options
    }
    async createTimestamp(request) {
      const { baseURL, timeout, retry } = this.options
      const url = `${baseURL}/api/v1/timestamp`
      const response = await (0, fetch_1.fetchWithRetry)(url, {
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(request),
        timeout,
        retry
      })
      return response.buffer()
    }
  }
  tsa$1.TimestampAuthority = TimestampAuthority
  return tsa$1
}

var hasRequiredClient$1
function requireClient$1() {
  if (hasRequiredClient$1) return client$1
  hasRequiredClient$1 = 1
  Object.defineProperty(client$1, '__esModule', {
    value: true
  })
  client$1.TSAClient = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError$4()
  const tsa_1 = requireTsa$2()
  const util_1 = requireUtil()
  const SHA256_ALGORITHM = 'sha256'
  class TSAClient {
    constructor(options) {
      this.tsa = new tsa_1.TimestampAuthority({
        baseURL: options.tsaBaseURL,
        retry: options.retry,
        timeout: options.timeout
      })
    }
    async createTimestamp(signature) {
      const request = {
        artifactHash: util_1.crypto
          .digest(SHA256_ALGORITHM, signature)
          .toString('base64'),
        hashAlgorithm: SHA256_ALGORITHM
      }
      try {
        return await this.tsa.createTimestamp(request)
      } catch (err) {
        ;(0, error_1.internalError)(
          err,
          'TSA_CREATE_TIMESTAMP_ERROR',
          'error creating timestamp'
        )
      }
    }
  }
  client$1.TSAClient = TSAClient
  return client$1
}

var hasRequiredTsa$1
function requireTsa$1() {
  if (hasRequiredTsa$1) return tsa$2
  hasRequiredTsa$1 = 1
  Object.defineProperty(tsa$2, '__esModule', {
    value: true
  })
  tsa$2.TSAWitness = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const client_1 = requireClient$1()
  class TSAWitness {
    constructor(options) {
      this.tsa = new client_1.TSAClient({
        tsaBaseURL: options.tsaBaseURL,
        retry: options.retry,
        timeout: options.timeout
      })
    }
    async testify(content) {
      const signature = extractSignature(content)
      const timestamp = await this.tsa.createTimestamp(signature)
      return {
        rfc3161Timestamps: [
          {
            signedTimestamp: timestamp
          }
        ]
      }
    }
  }
  tsa$2.TSAWitness = TSAWitness
  function extractSignature(content) {
    switch (content.$case) {
      case 'dsseEnvelope':
        return content.dsseEnvelope.signatures[0].sig
      case 'messageSignature':
        return content.messageSignature.signature
    }
  }
  return tsa$2
}

var hasRequiredWitness
function requireWitness() {
  if (hasRequiredWitness) return witness
  hasRequiredWitness = 1
  ;(function (exports) {
    /* istanbul ignore file */
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.TSAWitness =
      exports.RekorWitness =
      exports.DEFAULT_REKOR_URL =
        void 0
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var tlog_1 = requireTlog$1()
    Object.defineProperty(exports, 'DEFAULT_REKOR_URL', {
      enumerable: true,
      get: function () {
        return tlog_1.DEFAULT_REKOR_URL
      }
    })
    Object.defineProperty(exports, 'RekorWitness', {
      enumerable: true,
      get: function () {
        return tlog_1.RekorWitness
      }
    })
    var tsa_1 = requireTsa$1()
    Object.defineProperty(exports, 'TSAWitness', {
      enumerable: true,
      get: function () {
        return tsa_1.TSAWitness
      }
    })
  })(witness)
  return witness
}

var hasRequiredDist$5
function requireDist$5() {
  if (hasRequiredDist$5) return dist$5
  hasRequiredDist$5 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.TSAWitness =
      exports.RekorWitness =
      exports.DEFAULT_REKOR_URL =
      exports.FulcioSigner =
      exports.DEFAULT_FULCIO_URL =
      exports.CIContextProvider =
      exports.InternalError =
      exports.MessageSignatureBundleBuilder =
      exports.DSSEBundleBuilder =
        void 0
    var bundler_1 = requireBundler()
    Object.defineProperty(exports, 'DSSEBundleBuilder', {
      enumerable: true,
      get: function () {
        return bundler_1.DSSEBundleBuilder
      }
    })
    Object.defineProperty(exports, 'MessageSignatureBundleBuilder', {
      enumerable: true,
      get: function () {
        return bundler_1.MessageSignatureBundleBuilder
      }
    })
    var error_1 = requireError$4()
    Object.defineProperty(exports, 'InternalError', {
      enumerable: true,
      get: function () {
        return error_1.InternalError
      }
    })
    var identity_1 = requireIdentity()
    Object.defineProperty(exports, 'CIContextProvider', {
      enumerable: true,
      get: function () {
        return identity_1.CIContextProvider
      }
    })
    var signer_1 = requireSigner()
    Object.defineProperty(exports, 'DEFAULT_FULCIO_URL', {
      enumerable: true,
      get: function () {
        return signer_1.DEFAULT_FULCIO_URL
      }
    })
    Object.defineProperty(exports, 'FulcioSigner', {
      enumerable: true,
      get: function () {
        return signer_1.FulcioSigner
      }
    })
    var witness_1 = requireWitness()
    Object.defineProperty(exports, 'DEFAULT_REKOR_URL', {
      enumerable: true,
      get: function () {
        return witness_1.DEFAULT_REKOR_URL
      }
    })
    Object.defineProperty(exports, 'RekorWitness', {
      enumerable: true,
      get: function () {
        return witness_1.RekorWitness
      }
    })
    Object.defineProperty(exports, 'TSAWitness', {
      enumerable: true,
      get: function () {
        return witness_1.TSAWitness
      }
    })
  })(dist$5)
  return dist$5
}

var dist$3 = {}

var appdata = {}

var hasRequiredAppdata
function requireAppdata() {
  if (hasRequiredAppdata) return appdata
  hasRequiredAppdata = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(appdata, '__esModule', {
    value: true
  })
  appdata.appDataPath = appDataPath
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const os_1 = __importDefault(require$$0$9)
  const path_1 = __importDefault(require$$1$5)
  function appDataPath(name) {
    const homedir = os_1.default.homedir()
    switch (process.platform) {
      /* istanbul ignore next */
      case 'darwin': {
        const appSupport = path_1.default.join(
          homedir,
          'Library',
          'Application Support'
        )
        return path_1.default.join(appSupport, name)
      }
      /* istanbul ignore next */
      case 'win32': {
        const localAppData =
          process.env.LOCALAPPDATA ||
          path_1.default.join(homedir, 'AppData', 'Local')
        return path_1.default.join(localAppData, name, 'Data')
      }
      /* istanbul ignore next */
      default: {
        const localData =
          process.env.XDG_DATA_HOME ||
          path_1.default.join(homedir, '.local', 'share')
        return path_1.default.join(localData, name)
      }
    }
  }
  return appdata
}

var client = {}

var dist$2 = {}

var dist$1 = {}

var base = {}

var error$3 = {}

var hasRequiredError$3
function requireError$3() {
  if (hasRequiredError$3) return error$3
  hasRequiredError$3 = 1
  Object.defineProperty(error$3, '__esModule', {
    value: true
  })
  error$3.UnsupportedAlgorithmError =
    error$3.CryptoError =
    error$3.LengthOrHashMismatchError =
    error$3.UnsignedMetadataError =
    error$3.RepositoryError =
    error$3.ValueError =
      void 0
  // An error about insufficient values
  class ValueError extends Error {}
  error$3.ValueError = ValueError
  // An error with a repository's state, such as a missing file.
  // It covers all exceptions that come from the repository side when
  // looking from the perspective of users of metadata API or ngclient.
  class RepositoryError extends Error {}
  error$3.RepositoryError = RepositoryError
  // An error about metadata object with insufficient threshold of signatures.
  class UnsignedMetadataError extends RepositoryError {}
  error$3.UnsignedMetadataError = UnsignedMetadataError
  // An error while checking the length and hash values of an object.
  class LengthOrHashMismatchError extends RepositoryError {}
  error$3.LengthOrHashMismatchError = LengthOrHashMismatchError
  class CryptoError extends Error {}
  error$3.CryptoError = CryptoError
  class UnsupportedAlgorithmError extends CryptoError {}
  error$3.UnsupportedAlgorithmError = UnsupportedAlgorithmError
  return error$3
}

var utils = {}

var guard = {}

var hasRequiredGuard
function requireGuard() {
  if (hasRequiredGuard) return guard
  hasRequiredGuard = 1
  Object.defineProperty(guard, '__esModule', {
    value: true
  })
  guard.isDefined = isDefined
  guard.isObject = isObject
  guard.isStringArray = isStringArray
  guard.isObjectArray = isObjectArray
  guard.isStringRecord = isStringRecord
  guard.isObjectRecord = isObjectRecord
  function isDefined(val) {
    return val !== undefined
  }
  function isObject(value) {
    return typeof value === 'object' && value !== null
  }
  function isStringArray(value) {
    return Array.isArray(value) && value.every(v => typeof v === 'string')
  }
  function isObjectArray(value) {
    return Array.isArray(value) && value.every(isObject)
  }
  function isStringRecord(value) {
    return (
      typeof value === 'object' &&
      value !== null &&
      Object.keys(value).every(k => typeof k === 'string') &&
      Object.values(value).every(v => typeof v === 'string')
    )
  }
  function isObjectRecord(value) {
    return (
      typeof value === 'object' &&
      value !== null &&
      Object.keys(value).every(k => typeof k === 'string') &&
      Object.values(value).every(v => typeof v === 'object' && v !== null)
    )
  }
  return guard
}

var verify = {}

var lib$1
var hasRequiredLib$1
function requireLib$1() {
  if (hasRequiredLib$1) return lib$1
  hasRequiredLib$1 = 1
  const COMMA = ','
  const COLON = ':'
  const LEFT_SQUARE_BRACKET = '['
  const RIGHT_SQUARE_BRACKET = ']'
  const LEFT_CURLY_BRACKET = '{'
  const RIGHT_CURLY_BRACKET = '}'

  // Recursively encodes the supplied object according to the canonical JSON form
  // as specified at http://wiki.laptop.org/go/Canonical_JSON. It's a restricted
  // dialect of JSON in which keys are lexically sorted, floats are not allowed,
  // and only double quotes and backslashes are escaped.
  function canonicalize(object) {
    const buffer = []
    if (typeof object === 'string') {
      buffer.push(canonicalizeString(object))
    } else if (typeof object === 'boolean') {
      buffer.push(JSON.stringify(object))
    } else if (Number.isInteger(object)) {
      buffer.push(JSON.stringify(object))
    } else if (object === null) {
      buffer.push(JSON.stringify(object))
    } else if (Array.isArray(object)) {
      buffer.push(LEFT_SQUARE_BRACKET)
      let first = true
      object.forEach(element => {
        if (!first) {
          buffer.push(COMMA)
        }
        first = false
        buffer.push(canonicalize(element))
      })
      buffer.push(RIGHT_SQUARE_BRACKET)
    } else if (typeof object === 'object') {
      buffer.push(LEFT_CURLY_BRACKET)
      let first = true
      Object.keys(object)
        .sort()
        .forEach(property => {
          if (!first) {
            buffer.push(COMMA)
          }
          first = false
          buffer.push(canonicalizeString(property))
          buffer.push(COLON)
          buffer.push(canonicalize(object[property]))
        })
      buffer.push(RIGHT_CURLY_BRACKET)
    } else {
      throw new TypeError('cannot encode ' + object.toString())
    }
    return buffer.join('')
  }

  // String canonicalization consists of escaping backslash (\) and double
  // quote (") characters and wrapping the resulting string in double quotes.
  function canonicalizeString(string) {
    const escapedString = string.replace(/\\/g, '\\\\').replace(/"/g, '\\"')
    return '"' + escapedString + '"'
  }
  lib$1 = {
    canonicalize
  }
  return lib$1
}

var hasRequiredVerify
function requireVerify() {
  if (hasRequiredVerify) return verify
  hasRequiredVerify = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(verify, '__esModule', {
    value: true
  })
  verify.verifySignature = void 0
  const canonical_json_1 = requireLib$1()
  const crypto_1 = __importDefault(require$$0$d)
  const verifySignature = (metaDataSignedData, key, signature) => {
    const canonicalData = Buffer.from(
      (0, canonical_json_1.canonicalize)(metaDataSignedData)
    )
    return crypto_1.default.verify(
      undefined,
      canonicalData,
      key,
      Buffer.from(signature, 'hex')
    )
  }
  verify.verifySignature = verifySignature
  return verify
}

var hasRequiredUtils
function requireUtils() {
  if (hasRequiredUtils) return utils
  hasRequiredUtils = 1
  var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          var desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          o[k2] = m[k]
        })
  var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  var __importStar =
    (this && this.__importStar) ||
    function (mod) {
      if (mod && mod.__esModule) return mod
      var result = {}
      if (mod != null)
        for (var k in mod)
          if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k)
      __setModuleDefault(result, mod)
      return result
    }
  Object.defineProperty(utils, '__esModule', {
    value: true
  })
  utils.crypto = utils.guard = void 0
  utils.guard = __importStar(requireGuard())
  utils.crypto = __importStar(requireVerify())
  return utils
}

var hasRequiredBase
function requireBase() {
  if (hasRequiredBase) return base
  hasRequiredBase = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(base, '__esModule', {
    value: true
  })
  base.Signed = base.MetadataKind = void 0
  base.isMetadataKind = isMetadataKind
  const util_1 = __importDefault(require$$0$e)
  const error_1 = requireError$3()
  const utils_1 = requireUtils()
  const SPECIFICATION_VERSION = ['1', '0', '31']
  var MetadataKind
  ;(function (MetadataKind) {
    MetadataKind['Root'] = 'root'
    MetadataKind['Timestamp'] = 'timestamp'
    MetadataKind['Snapshot'] = 'snapshot'
    MetadataKind['Targets'] = 'targets'
  })(MetadataKind || (base.MetadataKind = MetadataKind = {}))
  function isMetadataKind(value) {
    return (
      typeof value === 'string' && Object.values(MetadataKind).includes(value)
    )
  }
  /***
   * A base class for the signed part of TUF metadata.
   *
   * Objects with base class Signed are usually included in a ``Metadata`` object
   * on the signed attribute. This class provides attributes and methods that
   * are common for all TUF metadata types (roles).
   */
  class Signed {
    constructor(options) {
      this.specVersion = options.specVersion || SPECIFICATION_VERSION.join('.')
      const specList = this.specVersion.split('.')
      if (
        !(specList.length === 2 || specList.length === 3) ||
        !specList.every(item => isNumeric(item))
      ) {
        throw new error_1.ValueError('Failed to parse specVersion')
      }
      // major version must match
      if (specList[0] != SPECIFICATION_VERSION[0]) {
        throw new error_1.ValueError('Unsupported specVersion')
      }
      this.expires = options.expires
      this.version = options.version
      this.unrecognizedFields = options.unrecognizedFields || {}
    }
    equals(other) {
      if (!(other instanceof Signed)) {
        return false
      }
      return (
        this.specVersion === other.specVersion &&
        this.expires === other.expires &&
        this.version === other.version &&
        util_1.default.isDeepStrictEqual(
          this.unrecognizedFields,
          other.unrecognizedFields
        )
      )
    }
    isExpired(referenceTime) {
      if (!referenceTime) {
        referenceTime = new Date()
      }
      return referenceTime >= new Date(this.expires)
    }
    static commonFieldsFromJSON(data) {
      const { spec_version, expires, version, ...rest } = data
      if (!utils_1.guard.isDefined(spec_version)) {
        throw new error_1.ValueError('spec_version is not defined')
      } else if (typeof spec_version !== 'string') {
        throw new TypeError('spec_version must be a string')
      }
      if (!utils_1.guard.isDefined(expires)) {
        throw new error_1.ValueError('expires is not defined')
      } else if (!(typeof expires === 'string')) {
        throw new TypeError('expires must be a string')
      }
      if (!utils_1.guard.isDefined(version)) {
        throw new error_1.ValueError('version is not defined')
      } else if (!(typeof version === 'number')) {
        throw new TypeError('version must be a number')
      }
      return {
        specVersion: spec_version,
        expires,
        version,
        unrecognizedFields: rest
      }
    }
  }
  base.Signed = Signed
  function isNumeric(str) {
    return !isNaN(Number(str))
  }
  return base
}

var file = {}

var hasRequiredFile
function requireFile() {
  if (hasRequiredFile) return file
  hasRequiredFile = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(file, '__esModule', {
    value: true
  })
  file.TargetFile = file.MetaFile = void 0
  const crypto_1 = __importDefault(require$$0$d)
  const util_1 = __importDefault(require$$0$e)
  const error_1 = requireError$3()
  const utils_1 = requireUtils()
  // A container with information about a particular metadata file.
  //
  // This class is used for Timestamp and Snapshot metadata.
  class MetaFile {
    constructor(opts) {
      if (opts.version <= 0) {
        throw new error_1.ValueError('Metafile version must be at least 1')
      }
      if (opts.length !== undefined) {
        validateLength(opts.length)
      }
      this.version = opts.version
      this.length = opts.length
      this.hashes = opts.hashes
      this.unrecognizedFields = opts.unrecognizedFields || {}
    }
    equals(other) {
      if (!(other instanceof MetaFile)) {
        return false
      }
      return (
        this.version === other.version &&
        this.length === other.length &&
        util_1.default.isDeepStrictEqual(this.hashes, other.hashes) &&
        util_1.default.isDeepStrictEqual(
          this.unrecognizedFields,
          other.unrecognizedFields
        )
      )
    }
    verify(data) {
      // Verifies that the given data matches the expected length.
      if (this.length !== undefined) {
        if (data.length !== this.length) {
          throw new error_1.LengthOrHashMismatchError(
            `Expected length ${this.length} but got ${data.length}`
          )
        }
      }
      // Verifies that the given data matches the supplied hashes.
      if (this.hashes) {
        Object.entries(this.hashes).forEach(([key, value]) => {
          let hash
          try {
            hash = crypto_1.default.createHash(key)
          } catch (e) {
            throw new error_1.LengthOrHashMismatchError(
              `Hash algorithm ${key} not supported`
            )
          }
          const observedHash = hash.update(data).digest('hex')
          if (observedHash !== value) {
            throw new error_1.LengthOrHashMismatchError(
              `Expected hash ${value} but got ${observedHash}`
            )
          }
        })
      }
    }
    toJSON() {
      const json = {
        version: this.version,
        ...this.unrecognizedFields
      }
      if (this.length !== undefined) {
        json.length = this.length
      }
      if (this.hashes) {
        json.hashes = this.hashes
      }
      return json
    }
    static fromJSON(data) {
      const { version, length, hashes, ...rest } = data
      if (typeof version !== 'number') {
        throw new TypeError('version must be a number')
      }
      if (utils_1.guard.isDefined(length) && typeof length !== 'number') {
        throw new TypeError('length must be a number')
      }
      if (
        utils_1.guard.isDefined(hashes) &&
        !utils_1.guard.isStringRecord(hashes)
      ) {
        throw new TypeError('hashes must be string keys and values')
      }
      return new MetaFile({
        version,
        length,
        hashes,
        unrecognizedFields: rest
      })
    }
  }
  file.MetaFile = MetaFile
  // Container for info about a particular target file.
  //
  // This class is used for Target metadata.
  class TargetFile {
    constructor(opts) {
      validateLength(opts.length)
      this.length = opts.length
      this.path = opts.path
      this.hashes = opts.hashes
      this.unrecognizedFields = opts.unrecognizedFields || {}
    }
    get custom() {
      const custom = this.unrecognizedFields['custom']
      if (!custom || Array.isArray(custom) || !(typeof custom === 'object')) {
        return {}
      }
      return custom
    }
    equals(other) {
      if (!(other instanceof TargetFile)) {
        return false
      }
      return (
        this.length === other.length &&
        this.path === other.path &&
        util_1.default.isDeepStrictEqual(this.hashes, other.hashes) &&
        util_1.default.isDeepStrictEqual(
          this.unrecognizedFields,
          other.unrecognizedFields
        )
      )
    }
    async verify(stream) {
      let observedLength = 0
      // Create a digest for each hash algorithm
      const digests = Object.keys(this.hashes).reduce((acc, key) => {
        try {
          acc[key] = crypto_1.default.createHash(key)
        } catch (e) {
          throw new error_1.LengthOrHashMismatchError(
            `Hash algorithm ${key} not supported`
          )
        }
        return acc
      }, {})
      // Read stream chunk by chunk
      for await (const chunk of stream) {
        // Keep running tally of stream length
        observedLength += chunk.length
        // Append chunk to each digest
        Object.values(digests).forEach(digest => {
          digest.update(chunk)
        })
      }
      // Verify length matches expected value
      if (observedLength !== this.length) {
        throw new error_1.LengthOrHashMismatchError(
          `Expected length ${this.length} but got ${observedLength}`
        )
      }
      // Verify each digest matches expected value
      Object.entries(digests).forEach(([key, value]) => {
        const expected = this.hashes[key]
        const actual = value.digest('hex')
        if (actual !== expected) {
          throw new error_1.LengthOrHashMismatchError(
            `Expected hash ${expected} but got ${actual}`
          )
        }
      })
    }
    toJSON() {
      return {
        length: this.length,
        hashes: this.hashes,
        ...this.unrecognizedFields
      }
    }
    static fromJSON(path, data) {
      const { length, hashes, ...rest } = data
      if (typeof length !== 'number') {
        throw new TypeError('length must be a number')
      }
      if (!utils_1.guard.isStringRecord(hashes)) {
        throw new TypeError('hashes must have string keys and values')
      }
      return new TargetFile({
        length,
        path,
        hashes,
        unrecognizedFields: rest
      })
    }
  }
  file.TargetFile = TargetFile
  // Check that supplied length if valid
  function validateLength(length) {
    if (length < 0) {
      throw new error_1.ValueError('Length must be at least 0')
    }
  }
  return file
}

var key$2 = {}

var key$1 = {}

var oid = {}

var hasRequiredOid
function requireOid() {
  if (hasRequiredOid) return oid
  hasRequiredOid = 1
  Object.defineProperty(oid, '__esModule', {
    value: true
  })
  oid.encodeOIDString = encodeOIDString
  const ANS1_TAG_OID = 0x06
  function encodeOIDString(oid) {
    const parts = oid.split('.')
    // The first two subidentifiers are encoded into the first byte
    const first = parseInt(parts[0], 10) * 40 + parseInt(parts[1], 10)
    const rest = []
    parts.slice(2).forEach(part => {
      const bytes = encodeVariableLengthInteger(parseInt(part, 10))
      rest.push(...bytes)
    })
    const der = Buffer.from([first, ...rest])
    return Buffer.from([ANS1_TAG_OID, der.length, ...der])
  }
  function encodeVariableLengthInteger(value) {
    const bytes = []
    let mask = 0x00
    while (value > 0) {
      bytes.unshift((value & 0x7f) | mask)
      value >>= 7
      mask = 0x80
    }
    return bytes
  }
  return oid
}

var hasRequiredKey$2
function requireKey$2() {
  if (hasRequiredKey$2) return key$1
  hasRequiredKey$2 = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(key$1, '__esModule', {
    value: true
  })
  key$1.getPublicKey = getPublicKey
  const crypto_1 = __importDefault(require$$0$d)
  const error_1 = requireError$3()
  const oid_1 = requireOid()
  const ASN1_TAG_SEQUENCE = 0x30
  const ANS1_TAG_BIT_STRING = 0x03
  const NULL_BYTE = 0x00
  const OID_EDDSA = '1.3.101.112'
  const OID_EC_PUBLIC_KEY = '1.2.840.10045.2.1'
  const OID_EC_CURVE_P256V1 = '1.2.840.10045.3.1.7'
  const PEM_HEADER = '-----BEGIN PUBLIC KEY-----'
  function getPublicKey(keyInfo) {
    switch (keyInfo.keyType) {
      case 'rsa':
        return getRSAPublicKey(keyInfo)
      case 'ed25519':
        return getED25519PublicKey(keyInfo)
      case 'ecdsa':
      case 'ecdsa-sha2-nistp256':
      case 'ecdsa-sha2-nistp384':
        return getECDCSAPublicKey(keyInfo)
      default:
        throw new error_1.UnsupportedAlgorithmError(
          `Unsupported key type: ${keyInfo.keyType}`
        )
    }
  }
  function getRSAPublicKey(keyInfo) {
    // Only support PEM-encoded RSA keys
    if (!keyInfo.keyVal.startsWith(PEM_HEADER)) {
      throw new error_1.CryptoError('Invalid key format')
    }
    const key = crypto_1.default.createPublicKey(keyInfo.keyVal)
    switch (keyInfo.scheme) {
      case 'rsassa-pss-sha256':
        return {
          key: key,
          padding: crypto_1.default.constants.RSA_PKCS1_PSS_PADDING
        }
      default:
        throw new error_1.UnsupportedAlgorithmError(
          `Unsupported RSA scheme: ${keyInfo.scheme}`
        )
    }
  }
  function getED25519PublicKey(keyInfo) {
    let key
    // If key is already PEM-encoded we can just parse it
    if (keyInfo.keyVal.startsWith(PEM_HEADER)) {
      key = crypto_1.default.createPublicKey(keyInfo.keyVal)
    } else {
      // If key is not PEM-encoded it had better be hex
      if (!isHex(keyInfo.keyVal)) {
        throw new error_1.CryptoError('Invalid key format')
      }
      key = crypto_1.default.createPublicKey({
        key: ed25519.hexToDER(keyInfo.keyVal),
        format: 'der',
        type: 'spki'
      })
    }
    return {
      key
    }
  }
  function getECDCSAPublicKey(keyInfo) {
    let key
    // If key is already PEM-encoded we can just parse it
    if (keyInfo.keyVal.startsWith(PEM_HEADER)) {
      key = crypto_1.default.createPublicKey(keyInfo.keyVal)
    } else {
      // If key is not PEM-encoded it had better be hex
      if (!isHex(keyInfo.keyVal)) {
        throw new error_1.CryptoError('Invalid key format')
      }
      key = crypto_1.default.createPublicKey({
        key: ecdsa.hexToDER(keyInfo.keyVal),
        format: 'der',
        type: 'spki'
      })
    }
    return {
      key
    }
  }
  const ed25519 = {
    // Translates a hex key into a crypto KeyObject
    // https://keygen.sh/blog/how-to-use-hexadecimal-ed25519-keys-in-node/
    hexToDER: hex => {
      const key = Buffer.from(hex, 'hex')
      const oid = (0, oid_1.encodeOIDString)(OID_EDDSA)
      // Create a byte sequence containing the OID and key
      const elements = Buffer.concat([
        Buffer.concat([
          Buffer.from([ASN1_TAG_SEQUENCE]),
          Buffer.from([oid.length]),
          oid
        ]),
        Buffer.concat([
          Buffer.from([ANS1_TAG_BIT_STRING]),
          Buffer.from([key.length + 1]),
          Buffer.from([NULL_BYTE]),
          key
        ])
      ])
      // Wrap up by creating a sequence of elements
      const der = Buffer.concat([
        Buffer.from([ASN1_TAG_SEQUENCE]),
        Buffer.from([elements.length]),
        elements
      ])
      return der
    }
  }
  const ecdsa = {
    hexToDER: hex => {
      const key = Buffer.from(hex, 'hex')
      const bitString = Buffer.concat([
        Buffer.from([ANS1_TAG_BIT_STRING]),
        Buffer.from([key.length + 1]),
        Buffer.from([NULL_BYTE]),
        key
      ])
      const oids = Buffer.concat([
        (0, oid_1.encodeOIDString)(OID_EC_PUBLIC_KEY),
        (0, oid_1.encodeOIDString)(OID_EC_CURVE_P256V1)
      ])
      const oidSequence = Buffer.concat([
        Buffer.from([ASN1_TAG_SEQUENCE]),
        Buffer.from([oids.length]),
        oids
      ])
      // Wrap up by creating a sequence of elements
      const der = Buffer.concat([
        Buffer.from([ASN1_TAG_SEQUENCE]),
        Buffer.from([oidSequence.length + bitString.length]),
        oidSequence,
        bitString
      ])
      return der
    }
  }
  const isHex = key => /^[0-9a-fA-F]+$/.test(key)
  return key$1
}

var hasRequiredKey$1
function requireKey$1() {
  if (hasRequiredKey$1) return key$2
  hasRequiredKey$1 = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(key$2, '__esModule', {
    value: true
  })
  key$2.Key = void 0
  const util_1 = __importDefault(require$$0$e)
  const error_1 = requireError$3()
  const utils_1 = requireUtils()
  const key_1 = requireKey$2()
  // A container class representing the public portion of a Key.
  class Key {
    constructor(options) {
      const { keyID, keyType, scheme, keyVal, unrecognizedFields } = options
      this.keyID = keyID
      this.keyType = keyType
      this.scheme = scheme
      this.keyVal = keyVal
      this.unrecognizedFields = unrecognizedFields || {}
    }
    // Verifies the that the metadata.signatures contains a signature made with
    // this key and is correctly signed.
    verifySignature(metadata) {
      const signature = metadata.signatures[this.keyID]
      if (!signature)
        throw new error_1.UnsignedMetadataError(
          'no signature for key found in metadata'
        )
      if (!this.keyVal.public)
        throw new error_1.UnsignedMetadataError('no public key found')
      const publicKey = (0, key_1.getPublicKey)({
        keyType: this.keyType,
        scheme: this.scheme,
        keyVal: this.keyVal.public
      })
      const signedData = metadata.signed.toJSON()
      try {
        if (
          !utils_1.crypto.verifySignature(signedData, publicKey, signature.sig)
        ) {
          throw new error_1.UnsignedMetadataError(
            `failed to verify ${this.keyID} signature`
          )
        }
      } catch (error) {
        if (error instanceof error_1.UnsignedMetadataError) {
          throw error
        }
        throw new error_1.UnsignedMetadataError(
          `failed to verify ${this.keyID} signature`
        )
      }
    }
    equals(other) {
      if (!(other instanceof Key)) {
        return false
      }
      return (
        this.keyID === other.keyID &&
        this.keyType === other.keyType &&
        this.scheme === other.scheme &&
        util_1.default.isDeepStrictEqual(this.keyVal, other.keyVal) &&
        util_1.default.isDeepStrictEqual(
          this.unrecognizedFields,
          other.unrecognizedFields
        )
      )
    }
    toJSON() {
      return {
        keytype: this.keyType,
        scheme: this.scheme,
        keyval: this.keyVal,
        ...this.unrecognizedFields
      }
    }
    static fromJSON(keyID, data) {
      const { keytype, scheme, keyval, ...rest } = data
      if (typeof keytype !== 'string') {
        throw new TypeError('keytype must be a string')
      }
      if (typeof scheme !== 'string') {
        throw new TypeError('scheme must be a string')
      }
      if (!utils_1.guard.isStringRecord(keyval)) {
        throw new TypeError('keyval must be a string record')
      }
      return new Key({
        keyID,
        keyType: keytype,
        scheme,
        keyVal: keyval,
        unrecognizedFields: rest
      })
    }
  }
  key$2.Key = Key
  return key$2
}

var metadata = {}

var root = {}

var role = {}

var commonjs = {}

var assertValidPattern = {}

var hasRequiredAssertValidPattern
function requireAssertValidPattern() {
  if (hasRequiredAssertValidPattern) return assertValidPattern
  hasRequiredAssertValidPattern = 1
  Object.defineProperty(assertValidPattern, '__esModule', {
    value: true
  })
  assertValidPattern.assertValidPattern = void 0
  const MAX_PATTERN_LENGTH = 1024 * 64
  const assertValidPattern$1 = pattern => {
    if (typeof pattern !== 'string') {
      throw new TypeError('invalid pattern')
    }
    if (pattern.length > MAX_PATTERN_LENGTH) {
      throw new TypeError('pattern is too long')
    }
  }
  assertValidPattern.assertValidPattern = assertValidPattern$1
  return assertValidPattern
}

var ast = {}

var braceExpressions = {}

var hasRequiredBraceExpressions
function requireBraceExpressions() {
  if (hasRequiredBraceExpressions) return braceExpressions
  hasRequiredBraceExpressions = 1
  // translate the various posix character classes into unicode properties
  // this works across all unicode locales
  Object.defineProperty(braceExpressions, '__esModule', {
    value: true
  })
  braceExpressions.parseClass = void 0
  // { <posix class>: [<translation>, /u flag required, negated]
  const posixClasses = {
    '[:alnum:]': ['\\p{L}\\p{Nl}\\p{Nd}', true],
    '[:alpha:]': ['\\p{L}\\p{Nl}', true],
    '[:ascii:]': ['\\x' + '00-\\x' + '7f', false],
    '[:blank:]': ['\\p{Zs}\\t', true],
    '[:cntrl:]': ['\\p{Cc}', true],
    '[:digit:]': ['\\p{Nd}', true],
    '[:graph:]': ['\\p{Z}\\p{C}', true, true],
    '[:lower:]': ['\\p{Ll}', true],
    '[:print:]': ['\\p{C}', true],
    '[:punct:]': ['\\p{P}', true],
    '[:space:]': ['\\p{Z}\\t\\r\\n\\v\\f', true],
    '[:upper:]': ['\\p{Lu}', true],
    '[:word:]': ['\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}', true],
    '[:xdigit:]': ['A-Fa-f0-9', false]
  }
  // only need to escape a few things inside of brace expressions
  // escapes: [ \ ] -
  const braceEscape = s => s.replace(/[[\]\\-]/g, '\\$&')
  // escape all regexp magic characters
  const regexpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  // everything has already been escaped, we just have to join
  const rangesToString = ranges => ranges.join('')
  // takes a glob string at a posix brace expression, and returns
  // an equivalent regular expression source, and boolean indicating
  // whether the /u flag needs to be applied, and the number of chars
  // consumed to parse the character class.
  // This also removes out of order ranges, and returns ($.) if the
  // entire class just no good.
  const parseClass = (glob, position) => {
    const pos = position
    /* c8 ignore start */
    if (glob.charAt(pos) !== '[') {
      throw new Error('not in a brace expression')
    }
    /* c8 ignore stop */
    const ranges = []
    const negs = []
    let i = pos + 1
    let sawStart = false
    let uflag = false
    let escaping = false
    let negate = false
    let endPos = pos
    let rangeStart = ''
    WHILE: while (i < glob.length) {
      const c = glob.charAt(i)
      if ((c === '!' || c === '^') && i === pos + 1) {
        negate = true
        i++
        continue
      }
      if (c === ']' && sawStart && !escaping) {
        endPos = i + 1
        break
      }
      sawStart = true
      if (c === '\\') {
        if (!escaping) {
          escaping = true
          i++
          continue
        }
        // escaped \ char, fall through and treat like normal char
      }
      if (c === '[' && !escaping) {
        // either a posix class, a collation equivalent, or just a [
        for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
          if (glob.startsWith(cls, i)) {
            // invalid, [a-[] is fine, but not [a-[:alpha]]
            if (rangeStart) {
              return ['$.', false, glob.length - pos, true]
            }
            i += cls.length
            if (neg) negs.push(unip)
            else ranges.push(unip)
            uflag = uflag || u
            continue WHILE
          }
        }
      }
      // now it's just a normal character, effectively
      escaping = false
      if (rangeStart) {
        // throw this range away if it's not valid, but others
        // can still match.
        if (c > rangeStart) {
          ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c))
        } else if (c === rangeStart) {
          ranges.push(braceEscape(c))
        }
        rangeStart = ''
        i++
        continue
      }
      // now might be the start of a range.
      // can be either c-d or c-] or c<more...>] or c] at this point
      if (glob.startsWith('-]', i + 1)) {
        ranges.push(braceEscape(c + '-'))
        i += 2
        continue
      }
      if (glob.startsWith('-', i + 1)) {
        rangeStart = c
        i += 2
        continue
      }
      // not the start of a range, just a single character
      ranges.push(braceEscape(c))
      i++
    }
    if (endPos < i) {
      // didn't see the end of the class, not a valid class,
      // but might still be valid as a literal match.
      return ['', false, 0, false]
    }
    // if we got no ranges and no negates, then we have a range that
    // cannot possibly match anything, and that poisons the whole glob
    if (!ranges.length && !negs.length) {
      return ['$.', false, glob.length - pos, true]
    }
    // if we got one positive range, and it's a single character, then that's
    // not actually a magic pattern, it's just that one literal character.
    // we should not treat that as "magic", we should just return the literal
    // character. [_] is a perfectly valid way to escape glob magic chars.
    if (
      negs.length === 0 &&
      ranges.length === 1 &&
      /^\\?.$/.test(ranges[0]) &&
      !negate
    ) {
      const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0]
      return [regexpEscape(r), false, endPos - pos, false]
    }
    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']'
    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']'
    const comb =
      ranges.length && negs.length
        ? '(' + sranges + '|' + snegs + ')'
        : ranges.length
          ? sranges
          : snegs
    return [comb, uflag, endPos - pos, true]
  }
  braceExpressions.parseClass = parseClass
  return braceExpressions
}

var _unescape = {}

var hasRequired_unescape
function require_unescape() {
  if (hasRequired_unescape) return _unescape
  hasRequired_unescape = 1
  Object.defineProperty(_unescape, '__esModule', {
    value: true
  })
  _unescape.unescape = void 0
  /**
   * Un-escape a string that has been escaped with {@link escape}.
   *
   * If the {@link windowsPathsNoEscape} option is used, then square-brace
   * escapes are removed, but not backslash escapes.  For example, it will turn
   * the string `'[*]'` into `*`, but it will not turn `'\\*'` into `'*'`,
   * becuase `\` is a path separator in `windowsPathsNoEscape` mode.
   *
   * When `windowsPathsNoEscape` is not set, then both brace escapes and
   * backslash escapes are removed.
   *
   * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped
   * or unescaped.
   */
  const unescape = (s, { windowsPathsNoEscape = false } = {}) => {
    return windowsPathsNoEscape
      ? s.replace(/\[([^\/\\])\]/g, '$1')
      : s
          .replace(/((?!\\).|^)\[([^\/\\])\]/g, '$1$2')
          .replace(/\\([^\/])/g, '$1')
  }
  _unescape.unescape = unescape
  return _unescape
}

var hasRequiredAst
function requireAst() {
  if (hasRequiredAst) return ast
  hasRequiredAst = 1
  // parse a single path portion
  Object.defineProperty(ast, '__esModule', {
    value: true
  })
  ast.AST = void 0
  const brace_expressions_js_1 = requireBraceExpressions()
  const unescape_js_1 = require_unescape()
  const types = new Set(['!', '?', '+', '*', '@'])
  const isExtglobType = c => types.has(c)
  // Patterns that get prepended to bind to the start of either the
  // entire string, or just a single path portion, to prevent dots
  // and/or traversal patterns, when needed.
  // Exts don't need the ^ or / bit, because the root binds that already.
  const startNoTraversal = '(?!(?:^|/)\\.\\.?(?:$|/))'
  const startNoDot = '(?!\\.)'
  // characters that indicate a start of pattern needs the "no dots" bit,
  // because a dot *might* be matched. ( is not in the list, because in
  // the case of a child extglob, it will handle the prevention itself.
  const addPatternStart = new Set(['[', '.'])
  // cases where traversal is A-OK, no dot prevention needed
  const justDots = new Set(['..', '.'])
  const reSpecials = new Set('().*{}+?[]^$\\!')
  const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  // any single thing other than /
  const qmark = '[^/]'
  // * => any number of characters
  const star = qmark + '*?'
  // use + when we need to ensure that *something* matches, because the * is
  // the only thing in the path portion.
  const starNoEmpty = qmark + '+?'
  // remove the \ chars that we added if we end up doing a nonmagic compare
  // const deslash = (s: string) => s.replace(/\\(.)/g, '$1')
  class AST {
    type
    #root
    #hasMagic
    #uflag = false
    #parts = []
    #parent
    #parentIndex
    #negs
    #filledNegs = false
    #options
    #toString
    // set to true if it's an extglob with no children
    // (which really means one child of '')
    #emptyExt = false
    constructor(type, parent, options = {}) {
      this.type = type
      // extglobs are inherently magical
      if (type) this.#hasMagic = true
      this.#parent = parent
      this.#root = this.#parent ? this.#parent.#root : this
      this.#options = this.#root === this ? options : this.#root.#options
      this.#negs = this.#root === this ? [] : this.#root.#negs
      if (type === '!' && !this.#root.#filledNegs) this.#negs.push(this)
      this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0
    }
    get hasMagic() {
      /* c8 ignore start */
      if (this.#hasMagic !== undefined) return this.#hasMagic
      /* c8 ignore stop */
      for (const p of this.#parts) {
        if (typeof p === 'string') continue
        if (p.type || p.hasMagic) return (this.#hasMagic = true)
      }
      // note: will be undefined until we generate the regexp src and find out
      return this.#hasMagic
    }
    // reconstructs the pattern
    toString() {
      if (this.#toString !== undefined) return this.#toString
      if (!this.type) {
        return (this.#toString = this.#parts.map(p => String(p)).join(''))
      } else {
        return (this.#toString =
          this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')')
      }
    }
    #fillNegs() {
      /* c8 ignore start */
      if (this !== this.#root) throw new Error('should only call on root')
      if (this.#filledNegs) return this
      /* c8 ignore stop */
      // call toString() once to fill this out
      this.toString()
      this.#filledNegs = true
      let n
      while ((n = this.#negs.pop())) {
        if (n.type !== '!') continue
        // walk up the tree, appending everthing that comes AFTER parentIndex
        let p = n
        let pp = p.#parent
        while (pp) {
          for (
            let i = p.#parentIndex + 1;
            !pp.type && i < pp.#parts.length;
            i++
          ) {
            for (const part of n.#parts) {
              /* c8 ignore start */
              if (typeof part === 'string') {
                throw new Error('string part in extglob AST??')
              }
              /* c8 ignore stop */
              part.copyIn(pp.#parts[i])
            }
          }
          p = pp
          pp = p.#parent
        }
      }
      return this
    }
    push(...parts) {
      for (const p of parts) {
        if (p === '') continue
        /* c8 ignore start */
        if (
          typeof p !== 'string' &&
          !(p instanceof AST && p.#parent === this)
        ) {
          throw new Error('invalid part: ' + p)
        }
        /* c8 ignore stop */
        this.#parts.push(p)
      }
    }
    toJSON() {
      const ret =
        this.type === null
          ? this.#parts
              .slice()
              .map(p => (typeof p === 'string' ? p : p.toJSON()))
          : [this.type, ...this.#parts.map(p => p.toJSON())]
      if (this.isStart() && !this.type) ret.unshift([])
      if (
        this.isEnd() &&
        (this === this.#root ||
          (this.#root.#filledNegs && this.#parent?.type === '!'))
      ) {
        ret.push({})
      }
      return ret
    }
    isStart() {
      if (this.#root === this) return true
      // if (this.type) return !!this.#parent?.isStart()
      if (!this.#parent?.isStart()) return false
      if (this.#parentIndex === 0) return true
      // if everything AHEAD of this is a negation, then it's still the "start"
      const p = this.#parent
      for (let i = 0; i < this.#parentIndex; i++) {
        const pp = p.#parts[i]
        if (!(pp instanceof AST && pp.type === '!')) {
          return false
        }
      }
      return true
    }
    isEnd() {
      if (this.#root === this) return true
      if (this.#parent?.type === '!') return true
      if (!this.#parent?.isEnd()) return false
      if (!this.type) return this.#parent?.isEnd()
      // if not root, it'll always have a parent
      /* c8 ignore start */
      const pl = this.#parent ? this.#parent.#parts.length : 0
      /* c8 ignore stop */
      return this.#parentIndex === pl - 1
    }
    copyIn(part) {
      if (typeof part === 'string') this.push(part)
      else this.push(part.clone(this))
    }
    clone(parent) {
      const c = new AST(this.type, parent)
      for (const p of this.#parts) {
        c.copyIn(p)
      }
      return c
    }
    static #parseAST(str, ast, pos, opt) {
      let escaping = false
      let inBrace = false
      let braceStart = -1
      let braceNeg = false
      if (ast.type === null) {
        // outside of a extglob, append until we find a start
        let i = pos
        let acc = ''
        while (i < str.length) {
          const c = str.charAt(i++)
          // still accumulate escapes at this point, but we do ignore
          // starts that are escaped
          if (escaping || c === '\\') {
            escaping = !escaping
            acc += c
            continue
          }
          if (inBrace) {
            if (i === braceStart + 1) {
              if (c === '^' || c === '!') {
                braceNeg = true
              }
            } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
              inBrace = false
            }
            acc += c
            continue
          } else if (c === '[') {
            inBrace = true
            braceStart = i
            braceNeg = false
            acc += c
            continue
          }
          if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {
            ast.push(acc)
            acc = ''
            const ext = new AST(c, ast)
            i = AST.#parseAST(str, ext, i, opt)
            ast.push(ext)
            continue
          }
          acc += c
        }
        ast.push(acc)
        return i
      }
      // some kind of extglob, pos is at the (
      // find the next | or )
      let i = pos + 1
      let part = new AST(null, ast)
      const parts = []
      let acc = ''
      while (i < str.length) {
        const c = str.charAt(i++)
        // still accumulate escapes at this point, but we do ignore
        // starts that are escaped
        if (escaping || c === '\\') {
          escaping = !escaping
          acc += c
          continue
        }
        if (inBrace) {
          if (i === braceStart + 1) {
            if (c === '^' || c === '!') {
              braceNeg = true
            }
          } else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
            inBrace = false
          }
          acc += c
          continue
        } else if (c === '[') {
          inBrace = true
          braceStart = i
          braceNeg = false
          acc += c
          continue
        }
        if (isExtglobType(c) && str.charAt(i) === '(') {
          part.push(acc)
          acc = ''
          const ext = new AST(c, part)
          part.push(ext)
          i = AST.#parseAST(str, ext, i, opt)
          continue
        }
        if (c === '|') {
          part.push(acc)
          acc = ''
          parts.push(part)
          part = new AST(null, ast)
          continue
        }
        if (c === ')') {
          if (acc === '' && ast.#parts.length === 0) {
            ast.#emptyExt = true
          }
          part.push(acc)
          acc = ''
          ast.push(...parts, part)
          return i
        }
        acc += c
      }
      // unfinished extglob
      // if we got here, it was a malformed extglob! not an extglob, but
      // maybe something else in there.
      ast.type = null
      ast.#hasMagic = undefined
      ast.#parts = [str.substring(pos - 1)]
      return i
    }
    static fromGlob(pattern, options = {}) {
      const ast = new AST(null, undefined, options)
      AST.#parseAST(pattern, ast, 0, options)
      return ast
    }
    // returns the regular expression if there's magic, or the unescaped
    // string if not.
    toMMPattern() {
      // should only be called on root
      /* c8 ignore start */
      if (this !== this.#root) return this.#root.toMMPattern()
      /* c8 ignore stop */
      const glob = this.toString()
      const [re, body, hasMagic, uflag] = this.toRegExpSource()
      // if we're in nocase mode, and not nocaseMagicOnly, then we do
      // still need a regular expression if we have to case-insensitively
      // match capital/lowercase characters.
      const anyMagic =
        hasMagic ||
        this.#hasMagic ||
        (this.#options.nocase &&
          !this.#options.nocaseMagicOnly &&
          glob.toUpperCase() !== glob.toLowerCase())
      if (!anyMagic) {
        return body
      }
      const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '')
      return Object.assign(new RegExp(`^${re}$`, flags), {
        _src: re,
        _glob: glob
      })
    }
    get options() {
      return this.#options
    }
    // returns the string match, the regexp source, whether there's magic
    // in the regexp (so a regular expression is required) and whether or
    // not the uflag is needed for the regular expression (for posix classes)
    // TODO: instead of injecting the start/end at this point, just return
    // the BODY of the regexp, along with the start/end portions suitable
    // for binding the start/end in either a joined full-path makeRe context
    // (where we bind to (^|/), or a standalone matchPart context (where
    // we bind to ^, and not /).  Otherwise slashes get duped!
    //
    // In part-matching mode, the start is:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: ^(?!\.\.?$)
    // - if dots allowed or not possible: ^
    // - if dots possible and not allowed: ^(?!\.)
    // end is:
    // - if not isEnd(): nothing
    // - else: $
    //
    // In full-path matching mode, we put the slash at the START of the
    // pattern, so start is:
    // - if first pattern: same as part-matching mode
    // - if not isStart(): nothing
    // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
    // - if dots allowed or not possible: /
    // - if dots possible and not allowed: /(?!\.)
    // end is:
    // - if last pattern, same as part-matching mode
    // - else nothing
    //
    // Always put the (?:$|/) on negated tails, though, because that has to be
    // there to bind the end of the negated pattern portion, and it's easier to
    // just stick it in now rather than try to inject it later in the middle of
    // the pattern.
    //
    // We can just always return the same end, and leave it up to the caller
    // to know whether it's going to be used joined or in parts.
    // And, if the start is adjusted slightly, can do the same there:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
    // - if dots allowed or not possible: (?:/|^)
    // - if dots possible and not allowed: (?:/|^)(?!\.)
    //
    // But it's better to have a simpler binding without a conditional, for
    // performance, so probably better to return both start options.
    //
    // Then the caller just ignores the end if it's not the first pattern,
    // and the start always gets applied.
    //
    // But that's always going to be $ if it's the ending pattern, or nothing,
    // so the caller can just attach $ at the end of the pattern when building.
    //
    // So the todo is:
    // - better detect what kind of start is needed
    // - return both flavors of starting pattern
    // - attach $ at the end of the pattern when creating the actual RegExp
    //
    // Ah, but wait, no, that all only applies to the root when the first pattern
    // is not an extglob. If the first pattern IS an extglob, then we need all
    // that dot prevention biz to live in the extglob portions, because eg
    // +(*|.x*) can match .xy but not .yx.
    //
    // So, return the two flavors if it's #root and the first child is not an
    // AST, otherwise leave it to the child AST to handle it, and there,
    // use the (?:^|/) style of start binding.
    //
    // Even simplified further:
    // - Since the start for a join is eg /(?!\.) and the start for a part
    // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
    // or start or whatever) and prepend ^ or / at the Regexp construction.
    toRegExpSource(allowDot) {
      const dot = allowDot ?? !!this.#options.dot
      if (this.#root === this) this.#fillNegs()
      if (!this.type) {
        const noEmpty = this.isStart() && this.isEnd()
        const src = this.#parts
          .map(p => {
            const [re, _, hasMagic, uflag] =
              typeof p === 'string'
                ? AST.#parseGlob(p, this.#hasMagic, noEmpty)
                : p.toRegExpSource(allowDot)
            this.#hasMagic = this.#hasMagic || hasMagic
            this.#uflag = this.#uflag || uflag
            return re
          })
          .join('')
        let start = ''
        if (this.isStart()) {
          if (typeof this.#parts[0] === 'string') {
            // this is the string that will match the start of the pattern,
            // so we need to protect against dots and such.
            // '.' and '..' cannot match unless the pattern is that exactly,
            // even if it starts with . or dot:true is set.
            const dotTravAllowed =
              this.#parts.length === 1 && justDots.has(this.#parts[0])
            if (!dotTravAllowed) {
              const aps = addPatternStart
              // check if we have a possibility of matching . or ..,
              // and prevent that.
              const needNoTrav =
                // dots are allowed, and the pattern starts with [ or .
                (dot && aps.has(src.charAt(0))) ||
                // the pattern starts with \., and then [ or .
                (src.startsWith('\\.') && aps.has(src.charAt(2))) ||
                // the pattern starts with \.\., and then [ or .
                (src.startsWith('\\.\\.') && aps.has(src.charAt(4)))
              // no need to prevent dots if it can't match a dot, or if a
              // sub-pattern will be preventing it anyway.
              const needNoDot = !dot && !allowDot && aps.has(src.charAt(0))
              start = needNoTrav
                ? startNoTraversal
                : needNoDot
                  ? startNoDot
                  : ''
            }
          }
        }
        // append the "end of path portion" pattern to negation tails
        let end = ''
        if (
          this.isEnd() &&
          this.#root.#filledNegs &&
          this.#parent?.type === '!'
        ) {
          end = '(?:$|\\/)'
        }
        const final = start + src + end
        return [
          final,
          (0, unescape_js_1.unescape)(src),
          (this.#hasMagic = !!this.#hasMagic),
          this.#uflag
        ]
      }
      // We need to calculate the body *twice* if it's a repeat pattern
      // at the start, once in nodot mode, then again in dot mode, so a
      // pattern like *(?) can match 'x.y'
      const repeated = this.type === '*' || this.type === '+'
      // some kind of extglob
      const start = this.type === '!' ? '(?:(?!(?:' : '(?:'
      let body = this.#partsToRegExp(dot)
      if (this.isStart() && this.isEnd() && !body && this.type !== '!') {
        // invalid extglob, has to at least be *something* present, if it's
        // the entire path portion.
        const s = this.toString()
        this.#parts = [s]
        this.type = null
        this.#hasMagic = undefined
        return [s, (0, unescape_js_1.unescape)(this.toString()), false, false]
      }
      // XXX abstract out this map method
      let bodyDotAllowed =
        !repeated || allowDot || dot || !startNoDot
          ? ''
          : this.#partsToRegExp(true)
      if (bodyDotAllowed === body) {
        bodyDotAllowed = ''
      }
      if (bodyDotAllowed) {
        body = `(?:${body})(?:${bodyDotAllowed})*?`
      }
      // an empty !() is exactly equivalent to a starNoEmpty
      let final = ''
      if (this.type === '!' && this.#emptyExt) {
        final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty
      } else {
        const close =
          this.type === '!'
            ? // !() must match something,but !(x) can match ''
              '))' +
              (this.isStart() && !dot && !allowDot ? startNoDot : '') +
              star +
              ')'
            : this.type === '@'
              ? ')'
              : this.type === '?'
                ? ')?'
                : this.type === '+' && bodyDotAllowed
                  ? ')'
                  : this.type === '*' && bodyDotAllowed
                    ? `)?`
                    : `)${this.type}`
        final = start + body + close
      }
      return [
        final,
        (0, unescape_js_1.unescape)(body),
        (this.#hasMagic = !!this.#hasMagic),
        this.#uflag
      ]
    }
    #partsToRegExp(dot) {
      return this.#parts
        .map(p => {
          // extglob ASTs should only contain parent ASTs
          /* c8 ignore start */
          if (typeof p === 'string') {
            throw new Error('string type in extglob ast??')
          }
          /* c8 ignore stop */
          // can ignore hasMagic, because extglobs are already always magic
          const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot)
          this.#uflag = this.#uflag || uflag
          return re
        })
        .filter(p => !(this.isStart() && this.isEnd()) || !!p)
        .join('|')
    }
    static #parseGlob(glob, hasMagic, noEmpty = false) {
      let escaping = false
      let re = ''
      let uflag = false
      for (let i = 0; i < glob.length; i++) {
        const c = glob.charAt(i)
        if (escaping) {
          escaping = false
          re += (reSpecials.has(c) ? '\\' : '') + c
          continue
        }
        if (c === '\\') {
          if (i === glob.length - 1) {
            re += '\\\\'
          } else {
            escaping = true
          }
          continue
        }
        if (c === '[') {
          const [src, needUflag, consumed, magic] = (0,
          brace_expressions_js_1.parseClass)(glob, i)
          if (consumed) {
            re += src
            uflag = uflag || needUflag
            i += consumed - 1
            hasMagic = hasMagic || magic
            continue
          }
        }
        if (c === '*') {
          if (noEmpty && glob === '*') re += starNoEmpty
          else re += star
          hasMagic = true
          continue
        }
        if (c === '?') {
          re += qmark
          hasMagic = true
          continue
        }
        re += regExpEscape(c)
      }
      return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag]
    }
  }
  ast.AST = AST
  return ast
}

var _escape = {}

var hasRequired_escape
function require_escape() {
  if (hasRequired_escape) return _escape
  hasRequired_escape = 1
  Object.defineProperty(_escape, '__esModule', {
    value: true
  })
  _escape.escape = void 0
  /**
   * Escape all magic characters in a glob pattern.
   *
   * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}
   * option is used, then characters are escaped by wrapping in `[]`, because
   * a magic character wrapped in a character class can only be satisfied by
   * that exact character.  In this mode, `\` is _not_ escaped, because it is
   * not interpreted as a magic character, but instead as a path separator.
   */
  const escape = (s, { windowsPathsNoEscape = false } = {}) => {
    // don't need to escape +@! because we escape the parens
    // that make those magic, and escaping ! as [!] isn't valid,
    // because [!]] is a valid glob class meaning not ']'.
    return windowsPathsNoEscape
      ? s.replace(/[?*()[\]]/g, '[$&]')
      : s.replace(/[?*()[\]\\]/g, '\\$&')
  }
  _escape.escape = escape
  return _escape
}

var hasRequiredCommonjs
function requireCommonjs() {
  if (hasRequiredCommonjs) return commonjs
  hasRequiredCommonjs = 1
  ;(function (exports) {
    var __importDefault =
      (this && this.__importDefault) ||
      function (mod) {
        return mod && mod.__esModule
          ? mod
          : {
              default: mod
            }
      }
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.unescape =
      exports.escape =
      exports.AST =
      exports.Minimatch =
      exports.match =
      exports.makeRe =
      exports.braceExpand =
      exports.defaults =
      exports.filter =
      exports.GLOBSTAR =
      exports.sep =
      exports.minimatch =
        void 0
    const brace_expansion_1 = __importDefault(requireBraceExpansion())
    const assert_valid_pattern_js_1 = requireAssertValidPattern()
    const ast_js_1 = requireAst()
    const escape_js_1 = require_escape()
    const unescape_js_1 = require_unescape()
    const minimatch = (p, pattern, options = {}) => {
      ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
      // shortcut: comments match nothing.
      if (!options.nocomment && pattern.charAt(0) === '#') {
        return false
      }
      return new Minimatch(pattern, options).match(p)
    }
    exports.minimatch = minimatch
    // Optimized checking for the most common glob patterns.
    const starDotExtRE = /^\*+([^+@!?\*\[\(]*)$/
    const starDotExtTest = ext => f => !f.startsWith('.') && f.endsWith(ext)
    const starDotExtTestDot = ext => f => f.endsWith(ext)
    const starDotExtTestNocase = ext => {
      ext = ext.toLowerCase()
      return f => !f.startsWith('.') && f.toLowerCase().endsWith(ext)
    }
    const starDotExtTestNocaseDot = ext => {
      ext = ext.toLowerCase()
      return f => f.toLowerCase().endsWith(ext)
    }
    const starDotStarRE = /^\*+\.\*+$/
    const starDotStarTest = f => !f.startsWith('.') && f.includes('.')
    const starDotStarTestDot = f => f !== '.' && f !== '..' && f.includes('.')
    const dotStarRE = /^\.\*+$/
    const dotStarTest = f => f !== '.' && f !== '..' && f.startsWith('.')
    const starRE = /^\*+$/
    const starTest = f => f.length !== 0 && !f.startsWith('.')
    const starTestDot = f => f.length !== 0 && f !== '.' && f !== '..'
    const qmarksRE = /^\?+([^+@!?\*\[\(]*)?$/
    const qmarksTestNocase = ([$0, ext = '']) => {
      const noext = qmarksTestNoExt([$0])
      if (!ext) return noext
      ext = ext.toLowerCase()
      return f => noext(f) && f.toLowerCase().endsWith(ext)
    }
    const qmarksTestNocaseDot = ([$0, ext = '']) => {
      const noext = qmarksTestNoExtDot([$0])
      if (!ext) return noext
      ext = ext.toLowerCase()
      return f => noext(f) && f.toLowerCase().endsWith(ext)
    }
    const qmarksTestDot = ([$0, ext = '']) => {
      const noext = qmarksTestNoExtDot([$0])
      return !ext ? noext : f => noext(f) && f.endsWith(ext)
    }
    const qmarksTest = ([$0, ext = '']) => {
      const noext = qmarksTestNoExt([$0])
      return !ext ? noext : f => noext(f) && f.endsWith(ext)
    }
    const qmarksTestNoExt = ([$0]) => {
      const len = $0.length
      return f => f.length === len && !f.startsWith('.')
    }
    const qmarksTestNoExtDot = ([$0]) => {
      const len = $0.length
      return f => f.length === len && f !== '.' && f !== '..'
    }
    /* c8 ignore start */
    const defaultPlatform =
      typeof process === 'object' && process
        ? (typeof process.env === 'object' &&
            process.env &&
            process.env.__MINIMATCH_TESTING_PLATFORM__) ||
          process.platform
        : 'posix'
    const path = {
      win32: {
        sep: '\\'
      },
      posix: {
        sep: '/'
      }
    }
    /* c8 ignore stop */
    exports.sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep
    exports.minimatch.sep = exports.sep
    exports.GLOBSTAR = Symbol('globstar **')
    exports.minimatch.GLOBSTAR = exports.GLOBSTAR
    // any single thing other than /
    // don't need to escape / when using new RegExp()
    const qmark = '[^/]'
    // * => any number of characters
    const star = qmark + '*?'
    // ** when dots are allowed.  Anything goes, except .. and .
    // not (^ or / followed by one or two dots followed by $ or /),
    // followed by anything, any number of times.
    const twoStarDot = '(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?'
    // not a ^ or / followed by a dot,
    // followed by anything, any number of times.
    const twoStarNoDot = '(?:(?!(?:\\/|^)\\.).)*?'
    const filter =
      (pattern, options = {}) =>
      p =>
        (0, exports.minimatch)(p, pattern, options)
    exports.filter = filter
    exports.minimatch.filter = exports.filter
    const ext = (a, b = {}) => Object.assign({}, a, b)
    const defaults = def => {
      if (!def || typeof def !== 'object' || !Object.keys(def).length) {
        return exports.minimatch
      }
      const orig = exports.minimatch
      const m = (p, pattern, options = {}) =>
        orig(p, pattern, ext(def, options))
      return Object.assign(m, {
        Minimatch: class Minimatch extends orig.Minimatch {
          constructor(pattern, options = {}) {
            super(pattern, ext(def, options))
          }
          static defaults(options) {
            return orig.defaults(ext(def, options)).Minimatch
          }
        },
        AST: class AST extends orig.AST {
          /* c8 ignore start */
          constructor(type, parent, options = {}) {
            super(type, parent, ext(def, options))
          }
          /* c8 ignore stop */
          static fromGlob(pattern, options = {}) {
            return orig.AST.fromGlob(pattern, ext(def, options))
          }
        },
        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),
        escape: (s, options = {}) => orig.escape(s, ext(def, options)),
        filter: (pattern, options = {}) =>
          orig.filter(pattern, ext(def, options)),
        defaults: options => orig.defaults(ext(def, options)),
        makeRe: (pattern, options = {}) =>
          orig.makeRe(pattern, ext(def, options)),
        braceExpand: (pattern, options = {}) =>
          orig.braceExpand(pattern, ext(def, options)),
        match: (list, pattern, options = {}) =>
          orig.match(list, pattern, ext(def, options)),
        sep: orig.sep,
        GLOBSTAR: exports.GLOBSTAR
      })
    }
    exports.defaults = defaults
    exports.minimatch.defaults = exports.defaults
    // Brace expansion:
    // a{b,c}d -> abd acd
    // a{b,}c -> abc ac
    // a{0..3}d -> a0d a1d a2d a3d
    // a{b,c{d,e}f}g -> abg acdfg acefg
    // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
    //
    // Invalid sets are not expanded.
    // a{2..}b -> a{2..}b
    // a{b}c -> a{b}c
    const braceExpand = (pattern, options = {}) => {
      ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
      // Thanks to Yeting Li <https://github.com/yetingli> for
      // improving this regexp to avoid a ReDOS vulnerability.
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        // shortcut. no need to expand.
        return [pattern]
      }
      return (0, brace_expansion_1.default)(pattern)
    }
    exports.braceExpand = braceExpand
    exports.minimatch.braceExpand = exports.braceExpand
    // parse a component of the expanded set.
    // At this point, no pattern may contain "/" in it
    // so we're going to return a 2d array, where each entry is the full
    // pattern, split on '/', and then turned into a regular expression.
    // A regexp is made at the end which joins each array with an
    // escaped /, and another full one which joins each regexp with |.
    //
    // Following the lead of Bash 4.1, note that "**" only has special meaning
    // when it is the *only* thing in a path portion.  Otherwise, any series
    // of * is equivalent to a single *.  Globstar behavior is enabled by
    // default, and can be disabled by setting options.noglobstar.
    const makeRe = (pattern, options = {}) =>
      new Minimatch(pattern, options).makeRe()
    exports.makeRe = makeRe
    exports.minimatch.makeRe = exports.makeRe
    const match = (list, pattern, options = {}) => {
      const mm = new Minimatch(pattern, options)
      list = list.filter(f => mm.match(f))
      if (mm.options.nonull && !list.length) {
        list.push(pattern)
      }
      return list
    }
    exports.match = match
    exports.minimatch.match = exports.match
    // replace stuff like \* with *
    const globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/
    const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
    class Minimatch {
      options
      set;
      pattern
      windowsPathsNoEscape
      nonegate
      negate
      comment
      empty
      preserveMultipleSlashes
      partial
      globSet
      globParts
      nocase
      isWindows
      platform
      windowsNoMagicRoot
      regexp
      constructor(pattern, options = {}) {
        ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
        options = options || {}
        this.options = options
        this.pattern = pattern
        this.platform = options.platform || defaultPlatform
        this.isWindows = this.platform === 'win32'
        this.windowsPathsNoEscape =
          !!options.windowsPathsNoEscape || options.allowWindowsEscape === false
        if (this.windowsPathsNoEscape) {
          this.pattern = this.pattern.replace(/\\/g, '/')
        }
        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes
        this.regexp = null
        this.negate = false
        this.nonegate = !!options.nonegate
        this.comment = false
        this.empty = false
        this.partial = !!options.partial
        this.nocase = !!this.options.nocase
        this.windowsNoMagicRoot =
          options.windowsNoMagicRoot !== undefined
            ? options.windowsNoMagicRoot
            : !!(this.isWindows && this.nocase)
        this.globSet = []
        this.globParts = []
        this.set = []
        // make the set of regexps etc.
        this.make()
      }
      hasMagic() {
        if (this.options.magicalBraces && this.set.length > 1) {
          return true
        }
        for (const pattern of this.set) {
          for (const part of pattern) {
            if (typeof part !== 'string') return true
          }
        }
        return false
      }
      debug(..._) {}
      make() {
        const pattern = this.pattern
        const options = this.options
        // empty patterns and comments match nothing.
        if (!options.nocomment && pattern.charAt(0) === '#') {
          this.comment = true
          return
        }
        if (!pattern) {
          this.empty = true
          return
        }
        // step 1: figure out negation, etc.
        this.parseNegate()
        // step 2: expand braces
        this.globSet = [...new Set(this.braceExpand())]
        if (options.debug) {
          this.debug = (...args) => console.error(...args)
        }
        this.debug(this.pattern, this.globSet)
        // step 3: now we have a set, so turn each one into a series of
        // path-portion matching patterns.
        // These will be regexps, except in the case of "**", which is
        // set to the GLOBSTAR object for globstar behavior,
        // and will not contain any / characters
        //
        // First, we preprocess to make the glob pattern sets a bit simpler
        // and deduped.  There are some perf-killing patterns that can cause
        // problems with a glob walk, but we can simplify them down a bit.
        const rawGlobParts = this.globSet.map(s => this.slashSplit(s))
        this.globParts = this.preprocess(rawGlobParts)
        this.debug(this.pattern, this.globParts)
        // glob --> regexps
        let set = this.globParts.map((s, _, __) => {
          if (this.isWindows && this.windowsNoMagicRoot) {
            // check if it's a drive or unc path.
            const isUNC =
              s[0] === '' &&
              s[1] === '' &&
              (s[2] === '?' || !globMagic.test(s[2])) &&
              !globMagic.test(s[3])
            const isDrive = /^[a-z]:/i.test(s[0])
            if (isUNC) {
              return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))]
            } else if (isDrive) {
              return [s[0], ...s.slice(1).map(ss => this.parse(ss))]
            }
          }
          return s.map(ss => this.parse(ss))
        })
        this.debug(this.pattern, set)
        // filter out everything that didn't compile properly.
        this.set = set.filter(s => s.indexOf(false) === -1)
        // do not treat the ? in UNC paths as magic
        if (this.isWindows) {
          for (let i = 0; i < this.set.length; i++) {
            const p = this.set[i]
            if (
              p[0] === '' &&
              p[1] === '' &&
              this.globParts[i][2] === '?' &&
              typeof p[3] === 'string' &&
              /^[a-z]:$/i.test(p[3])
            ) {
              p[2] = '?'
            }
          }
        }
        this.debug(this.pattern, this.set)
      }
      // various transforms to equivalent pattern sets that are
      // faster to process in a filesystem walk.  The goal is to
      // eliminate what we can, and push all ** patterns as far
      // to the right as possible, even if it increases the number
      // of patterns that we have to process.
      preprocess(globParts) {
        // if we're not in globstar mode, then turn all ** into *
        if (this.options.noglobstar) {
          for (let i = 0; i < globParts.length; i++) {
            for (let j = 0; j < globParts[i].length; j++) {
              if (globParts[i][j] === '**') {
                globParts[i][j] = '*'
              }
            }
          }
        }
        const { optimizationLevel = 1 } = this.options
        if (optimizationLevel >= 2) {
          // aggressive optimization for the purpose of fs walking
          globParts = this.firstPhasePreProcess(globParts)
          globParts = this.secondPhasePreProcess(globParts)
        } else if (optimizationLevel >= 1) {
          // just basic optimizations to remove some .. parts
          globParts = this.levelOneOptimize(globParts)
        } else {
          // just collapse multiple ** portions into one
          globParts = this.adjascentGlobstarOptimize(globParts)
        }
        return globParts
      }
      // just get rid of adjascent ** portions
      adjascentGlobstarOptimize(globParts) {
        return globParts.map(parts => {
          let gs = -1
          while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
            let i = gs
            while (parts[i + 1] === '**') {
              i++
            }
            if (i !== gs) {
              parts.splice(gs, i - gs)
            }
          }
          return parts
        })
      }
      // get rid of adjascent ** and resolve .. portions
      levelOneOptimize(globParts) {
        return globParts.map(parts => {
          parts = parts.reduce((set, part) => {
            const prev = set[set.length - 1]
            if (part === '**' && prev === '**') {
              return set
            }
            if (part === '..') {
              if (prev && prev !== '..' && prev !== '.' && prev !== '**') {
                set.pop()
                return set
              }
            }
            set.push(part)
            return set
          }, [])
          return parts.length === 0 ? [''] : parts
        })
      }
      levelTwoFileOptimize(parts) {
        if (!Array.isArray(parts)) {
          parts = this.slashSplit(parts)
        }
        let didSomething = false
        do {
          didSomething = false
          // <pre>/<e>/<rest> -> <pre>/<rest>
          if (!this.preserveMultipleSlashes) {
            for (let i = 1; i < parts.length - 1; i++) {
              const p = parts[i]
              // don't squeeze out UNC patterns
              if (i === 1 && p === '' && parts[0] === '') continue
              if (p === '.' || p === '') {
                didSomething = true
                parts.splice(i, 1)
                i--
              }
            }
            if (
              parts[0] === '.' &&
              parts.length === 2 &&
              (parts[1] === '.' || parts[1] === '')
            ) {
              didSomething = true
              parts.pop()
            }
          }
          // <pre>/<p>/../<rest> -> <pre>/<rest>
          let dd = 0
          while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
            const p = parts[dd - 1]
            if (p && p !== '.' && p !== '..' && p !== '**') {
              didSomething = true
              parts.splice(dd - 1, 2)
              dd -= 2
            }
          }
        } while (didSomething)
        return parts.length === 0 ? [''] : parts
      }
      // First phase: single-pattern processing
      // <pre> is 1 or more portions
      // <rest> is 1 or more portions
      // <p> is any portion other than ., .., '', or **
      // <e> is . or ''
      //
      // **/.. is *brutal* for filesystem walking performance, because
      // it effectively resets the recursive walk each time it occurs,
      // and ** cannot be reduced out by a .. pattern part like a regexp
      // or most strings (other than .., ., and '') can be.
      //
      // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
      // <pre>/<e>/<rest> -> <pre>/<rest>
      // <pre>/<p>/../<rest> -> <pre>/<rest>
      // **/**/<rest> -> **/<rest>
      //
      // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
      // this WOULD be allowed if ** did follow symlinks, or * didn't
      firstPhasePreProcess(globParts) {
        let didSomething = false
        do {
          didSomething = false
          // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
          for (let parts of globParts) {
            let gs = -1
            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
              let gss = gs
              while (parts[gss + 1] === '**') {
                // <pre>/**/**/<rest> -> <pre>/**/<rest>
                gss++
              }
              // eg, if gs is 2 and gss is 4, that means we have 3 **
              // parts, and can remove 2 of them.
              if (gss > gs) {
                parts.splice(gs + 1, gss - gs)
              }
              let next = parts[gs + 1]
              const p = parts[gs + 2]
              const p2 = parts[gs + 3]
              if (next !== '..') continue
              if (
                !p ||
                p === '.' ||
                p === '..' ||
                !p2 ||
                p2 === '.' ||
                p2 === '..'
              ) {
                continue
              }
              didSomething = true
              // edit parts in place, and push the new one
              parts.splice(gs, 1)
              const other = parts.slice(0)
              other[gs] = '**'
              globParts.push(other)
              gs--
            }
            // <pre>/<e>/<rest> -> <pre>/<rest>
            if (!this.preserveMultipleSlashes) {
              for (let i = 1; i < parts.length - 1; i++) {
                const p = parts[i]
                // don't squeeze out UNC patterns
                if (i === 1 && p === '' && parts[0] === '') continue
                if (p === '.' || p === '') {
                  didSomething = true
                  parts.splice(i, 1)
                  i--
                }
              }
              if (
                parts[0] === '.' &&
                parts.length === 2 &&
                (parts[1] === '.' || parts[1] === '')
              ) {
                didSomething = true
                parts.pop()
              }
            }
            // <pre>/<p>/../<rest> -> <pre>/<rest>
            let dd = 0
            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
              const p = parts[dd - 1]
              if (p && p !== '.' && p !== '..' && p !== '**') {
                didSomething = true
                const needDot = dd === 1 && parts[dd + 1] === '**'
                const splin = needDot ? ['.'] : []
                parts.splice(dd - 1, 2, ...splin)
                if (parts.length === 0) parts.push('')
                dd -= 2
              }
            }
          }
        } while (didSomething)
        return globParts
      }
      // second phase: multi-pattern dedupes
      // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
      // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
      // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
      //
      // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
      // ^-- not valid because ** doens't follow symlinks
      secondPhasePreProcess(globParts) {
        for (let i = 0; i < globParts.length - 1; i++) {
          for (let j = i + 1; j < globParts.length; j++) {
            const matched = this.partsMatch(
              globParts[i],
              globParts[j],
              !this.preserveMultipleSlashes
            )
            if (matched) {
              globParts[i] = []
              globParts[j] = matched
              break
            }
          }
        }
        return globParts.filter(gs => gs.length)
      }
      partsMatch(a, b, emptyGSMatch = false) {
        let ai = 0
        let bi = 0
        let result = []
        let which = ''
        while (ai < a.length && bi < b.length) {
          if (a[ai] === b[bi]) {
            result.push(which === 'b' ? b[bi] : a[ai])
            ai++
            bi++
          } else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {
            result.push(a[ai])
            ai++
          } else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {
            result.push(b[bi])
            bi++
          } else if (
            a[ai] === '*' &&
            b[bi] &&
            (this.options.dot || !b[bi].startsWith('.')) &&
            b[bi] !== '**'
          ) {
            if (which === 'b') return false
            which = 'a'
            result.push(a[ai])
            ai++
            bi++
          } else if (
            b[bi] === '*' &&
            a[ai] &&
            (this.options.dot || !a[ai].startsWith('.')) &&
            a[ai] !== '**'
          ) {
            if (which === 'a') return false
            which = 'b'
            result.push(b[bi])
            ai++
            bi++
          } else {
            return false
          }
        }
        // if we fall out of the loop, it means they two are identical
        // as long as their lengths match
        return a.length === b.length && result
      }
      parseNegate() {
        if (this.nonegate) return
        const pattern = this.pattern
        let negate = false
        let negateOffset = 0
        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {
          negate = !negate
          negateOffset++
        }
        if (negateOffset) this.pattern = pattern.slice(negateOffset)
        this.negate = negate
      }
      // set partial to true to test if, for example,
      // "/a/b" matches the start of "/*/b/*/d"
      // Partial means, if you run out of file before you run
      // out of pattern, then that's fine, as long as all
      // the parts match.
      matchOne(file, pattern, partial = false) {
        const options = this.options
        // UNC paths like //?/X:/... can match X:/... and vice versa
        // Drive letters in absolute drive or unc paths are always compared
        // case-insensitively.
        if (this.isWindows) {
          const fileDrive =
            typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0])
          const fileUNC =
            !fileDrive &&
            file[0] === '' &&
            file[1] === '' &&
            file[2] === '?' &&
            /^[a-z]:$/i.test(file[3])
          const patternDrive =
            typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0])
          const patternUNC =
            !patternDrive &&
            pattern[0] === '' &&
            pattern[1] === '' &&
            pattern[2] === '?' &&
            typeof pattern[3] === 'string' &&
            /^[a-z]:$/i.test(pattern[3])
          const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined
          const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined
          if (typeof fdi === 'number' && typeof pdi === 'number') {
            const [fd, pd] = [file[fdi], pattern[pdi]]
            if (fd.toLowerCase() === pd.toLowerCase()) {
              pattern[pdi] = fd
              if (pdi > fdi) {
                pattern = pattern.slice(pdi)
              } else if (fdi > pdi) {
                file = file.slice(fdi)
              }
            }
          }
        }
        // resolve and reduce . and .. portions in the file as well.
        // dont' need to do the second phase, because it's only one string[]
        const { optimizationLevel = 1 } = this.options
        if (optimizationLevel >= 2) {
          file = this.levelTwoFileOptimize(file)
        }
        this.debug('matchOne', this, {
          file,
          pattern
        })
        this.debug('matchOne', file.length, pattern.length)
        for (
          var fi = 0, pi = 0, fl = file.length, pl = pattern.length;
          fi < fl && pi < pl;
          fi++, pi++
        ) {
          this.debug('matchOne loop')
          var p = pattern[pi]
          var f = file[fi]
          this.debug(pattern, p, f)
          // should be impossible.
          // some invalid regexp stuff in the set.
          /* c8 ignore start */
          if (p === false) {
            return false
          }
          /* c8 ignore stop */
          if (p === exports.GLOBSTAR) {
            this.debug('GLOBSTAR', [pattern, p, f])
            // "**"
            // a/**/b/**/c would match the following:
            // a/b/x/y/z/c
            // a/x/y/z/b/c
            // a/b/x/b/x/c
            // a/b/c
            // To do this, take the rest of the pattern after
            // the **, and see if it would match the file remainder.
            // If so, return success.
            // If not, the ** "swallows" a segment, and try again.
            // This is recursively awful.
            //
            // a/**/b/**/c matching a/b/x/y/z/c
            // - a matches a
            // - doublestar
            //   - matchOne(b/x/y/z/c, b/**/c)
            //     - b matches b
            //     - doublestar
            //       - matchOne(x/y/z/c, c) -> no
            //       - matchOne(y/z/c, c) -> no
            //       - matchOne(z/c, c) -> no
            //       - matchOne(c, c) yes, hit
            var fr = fi
            var pr = pi + 1
            if (pr === pl) {
              this.debug('** at the end')
              // a ** at the end will just swallow the rest.
              // We have found a match.
              // however, it will not swallow /.x, unless
              // options.dot is set.
              // . and .. are *never* matched by **, for explosively
              // exponential reasons.
              for (; fi < fl; fi++) {
                if (
                  file[fi] === '.' ||
                  file[fi] === '..' ||
                  (!options.dot && file[fi].charAt(0) === '.')
                )
                  return false
              }
              return true
            }
            // ok, let's see if we can swallow whatever we can.
            while (fr < fl) {
              var swallowee = file[fr]
              this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)
              // XXX remove this slice.  Just pass the start index.
              if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                this.debug('globstar found match!', fr, fl, swallowee)
                // found a match.
                return true
              } else {
                // can't swallow "." or ".." ever.
                // can only swallow ".foo" when explicitly asked.
                if (
                  swallowee === '.' ||
                  swallowee === '..' ||
                  (!options.dot && swallowee.charAt(0) === '.')
                ) {
                  this.debug('dot detected!', file, fr, pattern, pr)
                  break
                }
                // ** swallows a segment, and continue.
                this.debug('globstar swallow a segment, and continue')
                fr++
              }
            }
            // no match was found.
            // However, in partial mode, we can't say this is necessarily over.
            /* c8 ignore start */
            if (partial) {
              // ran out of file
              this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
              if (fr === fl) {
                return true
              }
            }
            /* c8 ignore stop */
            return false
          }
          // something other than **
          // non-magic patterns just have to match exactly
          // patterns with magic have been turned into regexps.
          let hit
          if (typeof p === 'string') {
            hit = f === p
            this.debug('string match', p, f, hit)
          } else {
            hit = p.test(f)
            this.debug('pattern match', p, f, hit)
          }
          if (!hit) return false
        }
        // Note: ending in / means that we'll get a final ""
        // at the end of the pattern.  This can only match a
        // corresponding "" at the end of the file.
        // If the file ends in /, then it can only match a
        // a pattern that ends in /, unless the pattern just
        // doesn't have any more for it. But, a/b/ should *not*
        // match "a/b/*", even though "" matches against the
        // [^/]*? pattern, except in partial mode, where it might
        // simply not be reached yet.
        // However, a/b/ should still satisfy a/*
        // now either we fell off the end of the pattern, or we're done.
        if (fi === fl && pi === pl) {
          // ran out of pattern and filename at the same time.
          // an exact hit!
          return true
        } else if (fi === fl) {
          // ran out of file, but still had pattern left.
          // this is ok if we're doing the match as part of
          // a glob fs traversal.
          return partial
        } else if (pi === pl) {
          // ran out of pattern, still have file left.
          // this is only acceptable if we're on the very last
          // empty segment of a file with a trailing slash.
          // a/* should match a/b/
          return fi === fl - 1 && file[fi] === ''
          /* c8 ignore start */
        } else {
          // should be unreachable.
          throw new Error('wtf?')
        }
        /* c8 ignore stop */
      }
      braceExpand() {
        return (0, exports.braceExpand)(this.pattern, this.options)
      }
      parse(pattern) {
        ;(0, assert_valid_pattern_js_1.assertValidPattern)(pattern)
        const options = this.options
        // shortcuts
        if (pattern === '**') return exports.GLOBSTAR
        if (pattern === '') return ''
        // far and away, the most common glob pattern parts are
        // *, *.*, and *.<ext>  Add a fast check method for those.
        let m
        let fastTest = null
        if ((m = pattern.match(starRE))) {
          fastTest = options.dot ? starTestDot : starTest
        } else if ((m = pattern.match(starDotExtRE))) {
          fastTest = (
            options.nocase
              ? options.dot
                ? starDotExtTestNocaseDot
                : starDotExtTestNocase
              : options.dot
                ? starDotExtTestDot
                : starDotExtTest
          )(m[1])
        } else if ((m = pattern.match(qmarksRE))) {
          fastTest = (
            options.nocase
              ? options.dot
                ? qmarksTestNocaseDot
                : qmarksTestNocase
              : options.dot
                ? qmarksTestDot
                : qmarksTest
          )(m)
        } else if ((m = pattern.match(starDotStarRE))) {
          fastTest = options.dot ? starDotStarTestDot : starDotStarTest
        } else if ((m = pattern.match(dotStarRE))) {
          fastTest = dotStarTest
        }
        const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern()
        if (fastTest && typeof re === 'object') {
          // Avoids overriding in frozen environments
          Reflect.defineProperty(re, 'test', {
            value: fastTest
          })
        }
        return re
      }
      makeRe() {
        if (this.regexp || this.regexp === false) return this.regexp
        // at this point, this.set is a 2d array of partial
        // pattern strings, or "**".
        //
        // It's better to use .match().  This function shouldn't
        // be used, really, but it's pretty convenient sometimes,
        // when you just want to work with a regex.
        const set = this.set
        if (!set.length) {
          this.regexp = false
          return this.regexp
        }
        const options = this.options
        const twoStar = options.noglobstar
          ? star
          : options.dot
            ? twoStarDot
            : twoStarNoDot
        const flags = new Set(options.nocase ? ['i'] : [])
        // regexpify non-globstar patterns
        // if ** is only item, then we just do one twoStar
        // if ** is first, and there are more, prepend (\/|twoStar\/)? to next
        // if ** is last, append (\/twoStar|) to previous
        // if ** is in the middle, append (\/|\/twoStar\/) to previous
        // then filter out GLOBSTAR symbols
        let re = set
          .map(pattern => {
            const pp = pattern.map(p => {
              if (p instanceof RegExp) {
                for (const f of p.flags.split('')) flags.add(f)
              }
              return typeof p === 'string'
                ? regExpEscape(p)
                : p === exports.GLOBSTAR
                  ? exports.GLOBSTAR
                  : p._src
            })
            pp.forEach((p, i) => {
              const next = pp[i + 1]
              const prev = pp[i - 1]
              if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {
                return
              }
              if (prev === undefined) {
                if (next !== undefined && next !== exports.GLOBSTAR) {
                  pp[i + 1] = '(?:\\/|' + twoStar + '\\/)?' + next
                } else {
                  pp[i] = twoStar
                }
              } else if (next === undefined) {
                pp[i - 1] = prev + '(?:\\/|' + twoStar + ')?'
              } else if (next !== exports.GLOBSTAR) {
                pp[i - 1] = prev + '(?:\\/|\\/' + twoStar + '\\/)' + next
                pp[i + 1] = exports.GLOBSTAR
              }
            })
            return pp.filter(p => p !== exports.GLOBSTAR).join('/')
          })
          .join('|')
        // need to wrap in parens if we had more than one thing with |,
        // otherwise only the first will be anchored to ^ and the last to $
        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', '']
        // must match entire pattern
        // ending in a * or ** will make it less strict.
        re = '^' + open + re + close + '$'
        // can match anything, as long as it's not this.
        if (this.negate) re = '^(?!' + re + ').+$'
        try {
          this.regexp = new RegExp(re, [...flags].join(''))
          /* c8 ignore start */
        } catch (ex) {
          // should be impossible
          this.regexp = false
        }
        /* c8 ignore stop */
        return this.regexp
      }
      slashSplit(p) {
        // if p starts with // on windows, we preserve that
        // so that UNC paths aren't broken.  Otherwise, any number of
        // / characters are coalesced into one, unless
        // preserveMultipleSlashes is set to true.
        if (this.preserveMultipleSlashes) {
          return p.split('/')
        } else if (this.isWindows && /^\/\/[^\/]+/.test(p)) {
          // add an extra '' for the one we lose
          return ['', ...p.split(/\/+/)]
        } else {
          return p.split(/\/+/)
        }
      }
      match(f, partial = this.partial) {
        this.debug('match', f, this.pattern)
        // short-circuit in the case of busted things.
        // comments, etc.
        if (this.comment) {
          return false
        }
        if (this.empty) {
          return f === ''
        }
        if (f === '/' && partial) {
          return true
        }
        const options = this.options
        // windows: need to use /, not \
        if (this.isWindows) {
          f = f.split('\\').join('/')
        }
        // treat the test path as a set of pathparts.
        const ff = this.slashSplit(f)
        this.debug(this.pattern, 'split', ff)
        // just ONE of the pattern sets in this.set needs to match
        // in order for it to be valid.  If negating, then just one
        // match means that we have failed.
        // Either way, return on the first hit.
        const set = this.set
        this.debug(this.pattern, 'set', set)
        // Find the basename of the path by looking for the last non-empty segment
        let filename = ff[ff.length - 1]
        if (!filename) {
          for (let i = ff.length - 2; !filename && i >= 0; i--) {
            filename = ff[i]
          }
        }
        for (let i = 0; i < set.length; i++) {
          const pattern = set[i]
          let file = ff
          if (options.matchBase && pattern.length === 1) {
            file = [filename]
          }
          const hit = this.matchOne(file, pattern, partial)
          if (hit) {
            if (options.flipNegate) {
              return true
            }
            return !this.negate
          }
        }
        // didn't get any hits.  this is success if it's a negative
        // pattern, failure otherwise.
        if (options.flipNegate) {
          return false
        }
        return this.negate
      }
      static defaults(def) {
        return exports.minimatch.defaults(def).Minimatch
      }
    }
    exports.Minimatch = Minimatch
    /* c8 ignore start */
    var ast_js_2 = requireAst()
    Object.defineProperty(exports, 'AST', {
      enumerable: true,
      get: function () {
        return ast_js_2.AST
      }
    })
    var escape_js_2 = require_escape()
    Object.defineProperty(exports, 'escape', {
      enumerable: true,
      get: function () {
        return escape_js_2.escape
      }
    })
    var unescape_js_2 = require_unescape()
    Object.defineProperty(exports, 'unescape', {
      enumerable: true,
      get: function () {
        return unescape_js_2.unescape
      }
    })
    /* c8 ignore stop */
    exports.minimatch.AST = ast_js_1.AST
    exports.minimatch.Minimatch = Minimatch
    exports.minimatch.escape = escape_js_1.escape
    exports.minimatch.unescape = unescape_js_1.unescape
  })(commonjs)
  return commonjs
}

var hasRequiredRole
function requireRole() {
  if (hasRequiredRole) return role
  hasRequiredRole = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(role, '__esModule', {
    value: true
  })
  role.SuccinctRoles =
    role.DelegatedRole =
    role.Role =
    role.TOP_LEVEL_ROLE_NAMES =
      void 0
  const crypto_1 = __importDefault(require$$0$d)
  const minimatch_1 = requireCommonjs()
  const util_1 = __importDefault(require$$0$e)
  const error_1 = requireError$3()
  const utils_1 = requireUtils()
  role.TOP_LEVEL_ROLE_NAMES = ['root', 'targets', 'snapshot', 'timestamp']
  /**
   * Container that defines which keys are required to sign roles metadata.
   *
   * Role defines how many keys are required to successfully sign the roles
   * metadata, and which keys are accepted.
   */
  class Role {
    constructor(options) {
      const { keyIDs, threshold, unrecognizedFields } = options
      if (hasDuplicates(keyIDs)) {
        throw new error_1.ValueError('duplicate key IDs found')
      }
      if (threshold < 1) {
        throw new error_1.ValueError('threshold must be at least 1')
      }
      this.keyIDs = keyIDs
      this.threshold = threshold
      this.unrecognizedFields = unrecognizedFields || {}
    }
    equals(other) {
      if (!(other instanceof Role)) {
        return false
      }
      return (
        this.threshold === other.threshold &&
        util_1.default.isDeepStrictEqual(this.keyIDs, other.keyIDs) &&
        util_1.default.isDeepStrictEqual(
          this.unrecognizedFields,
          other.unrecognizedFields
        )
      )
    }
    toJSON() {
      return {
        keyids: this.keyIDs,
        threshold: this.threshold,
        ...this.unrecognizedFields
      }
    }
    static fromJSON(data) {
      const { keyids, threshold, ...rest } = data
      if (!utils_1.guard.isStringArray(keyids)) {
        throw new TypeError('keyids must be an array')
      }
      if (typeof threshold !== 'number') {
        throw new TypeError('threshold must be a number')
      }
      return new Role({
        keyIDs: keyids,
        threshold,
        unrecognizedFields: rest
      })
    }
  }
  role.Role = Role
  function hasDuplicates(array) {
    return new Set(array).size !== array.length
  }
  /**
   * A container with information about a delegated role.
   *
   * A delegation can happen in two ways:
   *   - ``paths`` is set: delegates targets matching any path pattern in ``paths``
   *   - ``pathHashPrefixes`` is set: delegates targets whose target path hash
   *      starts with any of the prefixes in ``pathHashPrefixes``
   *
   *   ``paths`` and ``pathHashPrefixes`` are mutually exclusive: both cannot be
   *   set, at least one of them must be set.
   */
  class DelegatedRole extends Role {
    constructor(opts) {
      super(opts)
      const { name, terminating, paths, pathHashPrefixes } = opts
      this.name = name
      this.terminating = terminating
      if (opts.paths && opts.pathHashPrefixes) {
        throw new error_1.ValueError(
          'paths and pathHashPrefixes are mutually exclusive'
        )
      }
      this.paths = paths
      this.pathHashPrefixes = pathHashPrefixes
    }
    equals(other) {
      if (!(other instanceof DelegatedRole)) {
        return false
      }
      return (
        super.equals(other) &&
        this.name === other.name &&
        this.terminating === other.terminating &&
        util_1.default.isDeepStrictEqual(this.paths, other.paths) &&
        util_1.default.isDeepStrictEqual(
          this.pathHashPrefixes,
          other.pathHashPrefixes
        )
      )
    }
    isDelegatedPath(targetFilepath) {
      if (this.paths) {
        return this.paths.some(pathPattern =>
          isTargetInPathPattern(targetFilepath, pathPattern)
        )
      }
      if (this.pathHashPrefixes) {
        const hasher = crypto_1.default.createHash('sha256')
        const pathHash = hasher.update(targetFilepath).digest('hex')
        return this.pathHashPrefixes.some(pathHashPrefix =>
          pathHash.startsWith(pathHashPrefix)
        )
      }
      return false
    }
    toJSON() {
      const json = {
        ...super.toJSON(),
        name: this.name,
        terminating: this.terminating
      }
      if (this.paths) {
        json.paths = this.paths
      }
      if (this.pathHashPrefixes) {
        json.path_hash_prefixes = this.pathHashPrefixes
      }
      return json
    }
    static fromJSON(data) {
      const {
        keyids,
        threshold,
        name,
        terminating,
        paths,
        path_hash_prefixes,
        ...rest
      } = data
      if (!utils_1.guard.isStringArray(keyids)) {
        throw new TypeError('keyids must be an array of strings')
      }
      if (typeof threshold !== 'number') {
        throw new TypeError('threshold must be a number')
      }
      if (typeof name !== 'string') {
        throw new TypeError('name must be a string')
      }
      if (typeof terminating !== 'boolean') {
        throw new TypeError('terminating must be a boolean')
      }
      if (
        utils_1.guard.isDefined(paths) &&
        !utils_1.guard.isStringArray(paths)
      ) {
        throw new TypeError('paths must be an array of strings')
      }
      if (
        utils_1.guard.isDefined(path_hash_prefixes) &&
        !utils_1.guard.isStringArray(path_hash_prefixes)
      ) {
        throw new TypeError('path_hash_prefixes must be an array of strings')
      }
      return new DelegatedRole({
        keyIDs: keyids,
        threshold,
        name,
        terminating,
        paths,
        pathHashPrefixes: path_hash_prefixes,
        unrecognizedFields: rest
      })
    }
  }
  role.DelegatedRole = DelegatedRole
  // JS version of Ruby's Array#zip
  const zip = (a, b) => a.map((k, i) => [k, b[i]])
  function isTargetInPathPattern(target, pattern) {
    const targetParts = target.split('/')
    const patternParts = pattern.split('/')
    if (patternParts.length != targetParts.length) {
      return false
    }
    return zip(targetParts, patternParts).every(([targetPart, patternPart]) =>
      (0, minimatch_1.minimatch)(targetPart, patternPart)
    )
  }
  /**
   * Succinctly defines a hash bin delegation graph.
   *
   * A ``SuccinctRoles`` object describes a delegation graph that covers all
   * targets, distributing them uniformly over the delegated roles (i.e. bins)
   * in the graph.
   *
   * The total number of bins is 2 to the power of the passed ``bit_length``.
   *
   * Bin names are the concatenation of the passed ``name_prefix`` and a
   * zero-padded hex representation of the bin index separated by a hyphen.
   *
   * The passed ``keyids`` and ``threshold`` is used for each bin, and each bin
   * is 'terminating'.
   *
   * For details: https://github.com/theupdateframework/taps/blob/master/tap15.md
   */
  class SuccinctRoles extends Role {
    constructor(opts) {
      super(opts)
      const { bitLength, namePrefix } = opts
      if (bitLength <= 0 || bitLength > 32) {
        throw new error_1.ValueError('bitLength must be between 1 and 32')
      }
      this.bitLength = bitLength
      this.namePrefix = namePrefix
      // Calculate the suffix_len value based on the total number of bins in
      // hex. If bit_length = 10 then number_of_bins = 1024 or bin names will
      // have a suffix between "000" and "3ff" in hex and suffix_len will be 3
      // meaning the third bin will have a suffix of "003".
      this.numberOfBins = Math.pow(2, bitLength)
      // suffix_len is calculated based on "number_of_bins - 1" as the name
      // of the last bin contains the number "number_of_bins -1" as a suffix.
      this.suffixLen = (this.numberOfBins - 1).toString(16).length
    }
    equals(other) {
      if (!(other instanceof SuccinctRoles)) {
        return false
      }
      return (
        super.equals(other) &&
        this.bitLength === other.bitLength &&
        this.namePrefix === other.namePrefix
      )
    }
    /***
     * Calculates the name of the delegated role responsible for 'target_filepath'.
     *
     * The target at path ''target_filepath' is assigned to a bin by casting
     * the left-most 'bit_length' of bits of the file path hash digest to
     * int, using it as bin index between 0 and '2**bit_length - 1'.
     *
     * Args:
     *  target_filepath: URL path to a target file, relative to a base
     *  targets URL.
     */
    getRoleForTarget(targetFilepath) {
      const hasher = crypto_1.default.createHash('sha256')
      const hasherBuffer = hasher.update(targetFilepath).digest()
      // can't ever need more than 4 bytes (32 bits).
      const hashBytes = hasherBuffer.subarray(0, 4)
      // Right shift hash bytes, so that we only have the leftmost
      // bit_length bits that we care about.
      const shiftValue = 32 - this.bitLength
      const binNumber = hashBytes.readUInt32BE() >>> shiftValue
      // Add zero padding if necessary and cast to hex the suffix.
      const suffix = binNumber.toString(16).padStart(this.suffixLen, '0')
      return `${this.namePrefix}-${suffix}`
    }
    *getRoles() {
      for (let i = 0; i < this.numberOfBins; i++) {
        const suffix = i.toString(16).padStart(this.suffixLen, '0')
        yield `${this.namePrefix}-${suffix}`
      }
    }
    /***
     * Determines whether the given ``role_name`` is in one of
     * the delegated roles that ``SuccinctRoles`` represents.
     *
     * Args:
     *  role_name: The name of the role to check against.
     */
    isDelegatedRole(roleName) {
      const desiredPrefix = this.namePrefix + '-'
      if (!roleName.startsWith(desiredPrefix)) {
        return false
      }
      const suffix = roleName.slice(desiredPrefix.length, roleName.length)
      if (suffix.length != this.suffixLen) {
        return false
      }
      // make sure the suffix is a hex string
      if (!suffix.match(/^[0-9a-fA-F]+$/)) {
        return false
      }
      const num = parseInt(suffix, 16)
      return 0 <= num && num < this.numberOfBins
    }
    toJSON() {
      const json = {
        ...super.toJSON(),
        bit_length: this.bitLength,
        name_prefix: this.namePrefix
      }
      return json
    }
    static fromJSON(data) {
      const { keyids, threshold, bit_length, name_prefix, ...rest } = data
      if (!utils_1.guard.isStringArray(keyids)) {
        throw new TypeError('keyids must be an array of strings')
      }
      if (typeof threshold !== 'number') {
        throw new TypeError('threshold must be a number')
      }
      if (typeof bit_length !== 'number') {
        throw new TypeError('bit_length must be a number')
      }
      if (typeof name_prefix !== 'string') {
        throw new TypeError('name_prefix must be a string')
      }
      return new SuccinctRoles({
        keyIDs: keyids,
        threshold,
        bitLength: bit_length,
        namePrefix: name_prefix,
        unrecognizedFields: rest
      })
    }
  }
  role.SuccinctRoles = SuccinctRoles
  return role
}

var hasRequiredRoot
function requireRoot() {
  if (hasRequiredRoot) return root
  hasRequiredRoot = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(root, '__esModule', {
    value: true
  })
  root.Root = void 0
  const util_1 = __importDefault(require$$0$e)
  const base_1 = requireBase()
  const error_1 = requireError$3()
  const key_1 = requireKey$1()
  const role_1 = requireRole()
  const utils_1 = requireUtils()
  /**
   * A container for the signed part of root metadata.
   *
   * The top-level role and metadata file signed by the root keys.
   * This role specifies trusted keys for all other top-level roles, which may further delegate trust.
   */
  class Root extends base_1.Signed {
    constructor(options) {
      super(options)
      this.type = base_1.MetadataKind.Root
      this.keys = options.keys || {}
      this.consistentSnapshot = options.consistentSnapshot ?? true
      if (!options.roles) {
        this.roles = role_1.TOP_LEVEL_ROLE_NAMES.reduce(
          (acc, role) => ({
            ...acc,
            [role]: new role_1.Role({
              keyIDs: [],
              threshold: 1
            })
          }),
          {}
        )
      } else {
        const roleNames = new Set(Object.keys(options.roles))
        if (!role_1.TOP_LEVEL_ROLE_NAMES.every(role => roleNames.has(role))) {
          throw new error_1.ValueError('missing top-level role')
        }
        this.roles = options.roles
      }
    }
    addKey(key, role) {
      if (!this.roles[role]) {
        throw new error_1.ValueError(`role ${role} does not exist`)
      }
      if (!this.roles[role].keyIDs.includes(key.keyID)) {
        this.roles[role].keyIDs.push(key.keyID)
      }
      this.keys[key.keyID] = key
    }
    equals(other) {
      if (!(other instanceof Root)) {
        return false
      }
      return (
        super.equals(other) &&
        this.consistentSnapshot === other.consistentSnapshot &&
        util_1.default.isDeepStrictEqual(this.keys, other.keys) &&
        util_1.default.isDeepStrictEqual(this.roles, other.roles)
      )
    }
    toJSON() {
      return {
        _type: this.type,
        spec_version: this.specVersion,
        version: this.version,
        expires: this.expires,
        keys: keysToJSON(this.keys),
        roles: rolesToJSON(this.roles),
        consistent_snapshot: this.consistentSnapshot,
        ...this.unrecognizedFields
      }
    }
    static fromJSON(data) {
      const { unrecognizedFields, ...commonFields } =
        base_1.Signed.commonFieldsFromJSON(data)
      const { keys, roles, consistent_snapshot, ...rest } = unrecognizedFields
      if (typeof consistent_snapshot !== 'boolean') {
        throw new TypeError('consistent_snapshot must be a boolean')
      }
      return new Root({
        ...commonFields,
        keys: keysFromJSON(keys),
        roles: rolesFromJSON(roles),
        consistentSnapshot: consistent_snapshot,
        unrecognizedFields: rest
      })
    }
  }
  root.Root = Root
  function keysToJSON(keys) {
    return Object.entries(keys).reduce(
      (acc, [keyID, key]) => ({
        ...acc,
        [keyID]: key.toJSON()
      }),
      {}
    )
  }
  function rolesToJSON(roles) {
    return Object.entries(roles).reduce(
      (acc, [roleName, role]) => ({
        ...acc,
        [roleName]: role.toJSON()
      }),
      {}
    )
  }
  function keysFromJSON(data) {
    let keys
    if (utils_1.guard.isDefined(data)) {
      if (!utils_1.guard.isObjectRecord(data)) {
        throw new TypeError('keys must be an object')
      }
      keys = Object.entries(data).reduce(
        (acc, [keyID, keyData]) => ({
          ...acc,
          [keyID]: key_1.Key.fromJSON(keyID, keyData)
        }),
        {}
      )
    }
    return keys
  }
  function rolesFromJSON(data) {
    let roles
    if (utils_1.guard.isDefined(data)) {
      if (!utils_1.guard.isObjectRecord(data)) {
        throw new TypeError('roles must be an object')
      }
      roles = Object.entries(data).reduce(
        (acc, [roleName, roleData]) => ({
          ...acc,
          [roleName]: role_1.Role.fromJSON(roleData)
        }),
        {}
      )
    }
    return roles
  }
  return root
}

var signature = {}

var hasRequiredSignature
function requireSignature() {
  if (hasRequiredSignature) return signature
  hasRequiredSignature = 1
  Object.defineProperty(signature, '__esModule', {
    value: true
  })
  signature.Signature = void 0
  /**
   * A container class containing information about a signature.
   *
   * Contains a signature and the keyid uniquely identifying the key used
   * to generate the signature.
   *
   * Provide a `fromJSON` method to create a Signature from a JSON object.
   */
  class Signature {
    constructor(options) {
      const { keyID, sig } = options
      this.keyID = keyID
      this.sig = sig
    }
    toJSON() {
      return {
        keyid: this.keyID,
        sig: this.sig
      }
    }
    static fromJSON(data) {
      const { keyid, sig } = data
      if (typeof keyid !== 'string') {
        throw new TypeError('keyid must be a string')
      }
      if (typeof sig !== 'string') {
        throw new TypeError('sig must be a string')
      }
      return new Signature({
        keyID: keyid,
        sig: sig
      })
    }
  }
  signature.Signature = Signature
  return signature
}

var snapshot = {}

var hasRequiredSnapshot
function requireSnapshot() {
  if (hasRequiredSnapshot) return snapshot
  hasRequiredSnapshot = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(snapshot, '__esModule', {
    value: true
  })
  snapshot.Snapshot = void 0
  const util_1 = __importDefault(require$$0$e)
  const base_1 = requireBase()
  const file_1 = requireFile()
  const utils_1 = requireUtils()
  /**
   * A container for the signed part of snapshot metadata.
   *
   * Snapshot contains information about all target Metadata files.
   * A top-level role that specifies the latest versions of all targets metadata files,
   * and hence the latest versions of all targets (including any dependencies between them) on the repository.
   */
  class Snapshot extends base_1.Signed {
    constructor(opts) {
      super(opts)
      this.type = base_1.MetadataKind.Snapshot
      this.meta = opts.meta || {
        'targets.json': new file_1.MetaFile({
          version: 1
        })
      }
    }
    equals(other) {
      if (!(other instanceof Snapshot)) {
        return false
      }
      return (
        super.equals(other) &&
        util_1.default.isDeepStrictEqual(this.meta, other.meta)
      )
    }
    toJSON() {
      return {
        _type: this.type,
        meta: metaToJSON(this.meta),
        spec_version: this.specVersion,
        version: this.version,
        expires: this.expires,
        ...this.unrecognizedFields
      }
    }
    static fromJSON(data) {
      const { unrecognizedFields, ...commonFields } =
        base_1.Signed.commonFieldsFromJSON(data)
      const { meta, ...rest } = unrecognizedFields
      return new Snapshot({
        ...commonFields,
        meta: metaFromJSON(meta),
        unrecognizedFields: rest
      })
    }
  }
  snapshot.Snapshot = Snapshot
  function metaToJSON(meta) {
    return Object.entries(meta).reduce(
      (acc, [path, metadata]) => ({
        ...acc,
        [path]: metadata.toJSON()
      }),
      {}
    )
  }
  function metaFromJSON(data) {
    let meta
    if (utils_1.guard.isDefined(data)) {
      if (!utils_1.guard.isObjectRecord(data)) {
        throw new TypeError('meta field is malformed')
      } else {
        meta = Object.entries(data).reduce(
          (acc, [path, metadata]) => ({
            ...acc,
            [path]: file_1.MetaFile.fromJSON(metadata)
          }),
          {}
        )
      }
    }
    return meta
  }
  return snapshot
}

var targets = {}

var delegations = {}

var hasRequiredDelegations
function requireDelegations() {
  if (hasRequiredDelegations) return delegations
  hasRequiredDelegations = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(delegations, '__esModule', {
    value: true
  })
  delegations.Delegations = void 0
  const util_1 = __importDefault(require$$0$e)
  const error_1 = requireError$3()
  const key_1 = requireKey$1()
  const role_1 = requireRole()
  const utils_1 = requireUtils()
  /**
   * A container object storing information about all delegations.
   *
   * Targets roles that are trusted to provide signed metadata files
   * describing targets with designated pathnames and/or further delegations.
   */
  class Delegations {
    constructor(options) {
      this.keys = options.keys
      this.unrecognizedFields = options.unrecognizedFields || {}
      if (options.roles) {
        if (
          Object.keys(options.roles).some(roleName =>
            role_1.TOP_LEVEL_ROLE_NAMES.includes(roleName)
          )
        ) {
          throw new error_1.ValueError(
            'Delegated role name conflicts with top-level role name'
          )
        }
      }
      this.succinctRoles = options.succinctRoles
      this.roles = options.roles
    }
    equals(other) {
      if (!(other instanceof Delegations)) {
        return false
      }
      return (
        util_1.default.isDeepStrictEqual(this.keys, other.keys) &&
        util_1.default.isDeepStrictEqual(this.roles, other.roles) &&
        util_1.default.isDeepStrictEqual(
          this.unrecognizedFields,
          other.unrecognizedFields
        ) &&
        util_1.default.isDeepStrictEqual(
          this.succinctRoles,
          other.succinctRoles
        )
      )
    }
    *rolesForTarget(targetPath) {
      if (this.roles) {
        for (const role of Object.values(this.roles)) {
          if (role.isDelegatedPath(targetPath)) {
            yield {
              role: role.name,
              terminating: role.terminating
            }
          }
        }
      } else if (this.succinctRoles) {
        yield {
          role: this.succinctRoles.getRoleForTarget(targetPath),
          terminating: true
        }
      }
    }
    toJSON() {
      const json = {
        keys: keysToJSON(this.keys),
        ...this.unrecognizedFields
      }
      if (this.roles) {
        json.roles = rolesToJSON(this.roles)
      } else if (this.succinctRoles) {
        json.succinct_roles = this.succinctRoles.toJSON()
      }
      return json
    }
    static fromJSON(data) {
      const { keys, roles, succinct_roles, ...unrecognizedFields } = data
      let succinctRoles
      if (utils_1.guard.isObject(succinct_roles)) {
        succinctRoles = role_1.SuccinctRoles.fromJSON(succinct_roles)
      }
      return new Delegations({
        keys: keysFromJSON(keys),
        roles: rolesFromJSON(roles),
        unrecognizedFields,
        succinctRoles
      })
    }
  }
  delegations.Delegations = Delegations
  function keysToJSON(keys) {
    return Object.entries(keys).reduce(
      (acc, [keyId, key]) => ({
        ...acc,
        [keyId]: key.toJSON()
      }),
      {}
    )
  }
  function rolesToJSON(roles) {
    return Object.values(roles).map(role => role.toJSON())
  }
  function keysFromJSON(data) {
    if (!utils_1.guard.isObjectRecord(data)) {
      throw new TypeError('keys is malformed')
    }
    return Object.entries(data).reduce(
      (acc, [keyID, keyData]) => ({
        ...acc,
        [keyID]: key_1.Key.fromJSON(keyID, keyData)
      }),
      {}
    )
  }
  function rolesFromJSON(data) {
    let roleMap
    if (utils_1.guard.isDefined(data)) {
      if (!utils_1.guard.isObjectArray(data)) {
        throw new TypeError('roles is malformed')
      }
      roleMap = data.reduce((acc, role) => {
        const delegatedRole = role_1.DelegatedRole.fromJSON(role)
        return {
          ...acc,
          [delegatedRole.name]: delegatedRole
        }
      }, {})
    }
    return roleMap
  }
  return delegations
}

var hasRequiredTargets
function requireTargets() {
  if (hasRequiredTargets) return targets
  hasRequiredTargets = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(targets, '__esModule', {
    value: true
  })
  targets.Targets = void 0
  const util_1 = __importDefault(require$$0$e)
  const base_1 = requireBase()
  const delegations_1 = requireDelegations()
  const file_1 = requireFile()
  const utils_1 = requireUtils()
  // Container for the signed part of targets metadata.
  //
  // Targets contains verifying information about target files and also delegates
  // responsible to other Targets roles.
  class Targets extends base_1.Signed {
    constructor(options) {
      super(options)
      this.type = base_1.MetadataKind.Targets
      this.targets = options.targets || {}
      this.delegations = options.delegations
    }
    addTarget(target) {
      this.targets[target.path] = target
    }
    equals(other) {
      if (!(other instanceof Targets)) {
        return false
      }
      return (
        super.equals(other) &&
        util_1.default.isDeepStrictEqual(this.targets, other.targets) &&
        util_1.default.isDeepStrictEqual(this.delegations, other.delegations)
      )
    }
    toJSON() {
      const json = {
        _type: this.type,
        spec_version: this.specVersion,
        version: this.version,
        expires: this.expires,
        targets: targetsToJSON(this.targets),
        ...this.unrecognizedFields
      }
      if (this.delegations) {
        json.delegations = this.delegations.toJSON()
      }
      return json
    }
    static fromJSON(data) {
      const { unrecognizedFields, ...commonFields } =
        base_1.Signed.commonFieldsFromJSON(data)
      const { targets, delegations, ...rest } = unrecognizedFields
      return new Targets({
        ...commonFields,
        targets: targetsFromJSON(targets),
        delegations: delegationsFromJSON(delegations),
        unrecognizedFields: rest
      })
    }
  }
  targets.Targets = Targets
  function targetsToJSON(targets) {
    return Object.entries(targets).reduce(
      (acc, [path, target]) => ({
        ...acc,
        [path]: target.toJSON()
      }),
      {}
    )
  }
  function targetsFromJSON(data) {
    let targets
    if (utils_1.guard.isDefined(data)) {
      if (!utils_1.guard.isObjectRecord(data)) {
        throw new TypeError('targets must be an object')
      } else {
        targets = Object.entries(data).reduce(
          (acc, [path, target]) => ({
            ...acc,
            [path]: file_1.TargetFile.fromJSON(path, target)
          }),
          {}
        )
      }
    }
    return targets
  }
  function delegationsFromJSON(data) {
    let delegations
    if (utils_1.guard.isDefined(data)) {
      if (!utils_1.guard.isObject(data)) {
        throw new TypeError('delegations must be an object')
      } else {
        delegations = delegations_1.Delegations.fromJSON(data)
      }
    }
    return delegations
  }
  return targets
}

var timestamp$1 = {}

var hasRequiredTimestamp$1
function requireTimestamp$1() {
  if (hasRequiredTimestamp$1) return timestamp$1
  hasRequiredTimestamp$1 = 1
  Object.defineProperty(timestamp$1, '__esModule', {
    value: true
  })
  timestamp$1.Timestamp = void 0
  const base_1 = requireBase()
  const file_1 = requireFile()
  const utils_1 = requireUtils()
  /**
   * A container for the signed part of timestamp metadata.
   *
   * A top-level that specifies the latest version of the snapshot role metadata file,
   * and hence the latest versions of all metadata and targets on the repository.
   */
  class Timestamp extends base_1.Signed {
    constructor(options) {
      super(options)
      this.type = base_1.MetadataKind.Timestamp
      this.snapshotMeta =
        options.snapshotMeta ||
        new file_1.MetaFile({
          version: 1
        })
    }
    equals(other) {
      if (!(other instanceof Timestamp)) {
        return false
      }
      return super.equals(other) && this.snapshotMeta.equals(other.snapshotMeta)
    }
    toJSON() {
      return {
        _type: this.type,
        spec_version: this.specVersion,
        version: this.version,
        expires: this.expires,
        meta: {
          'snapshot.json': this.snapshotMeta.toJSON()
        },
        ...this.unrecognizedFields
      }
    }
    static fromJSON(data) {
      const { unrecognizedFields, ...commonFields } =
        base_1.Signed.commonFieldsFromJSON(data)
      const { meta, ...rest } = unrecognizedFields
      return new Timestamp({
        ...commonFields,
        snapshotMeta: snapshotMetaFromJSON(meta),
        unrecognizedFields: rest
      })
    }
  }
  timestamp$1.Timestamp = Timestamp
  function snapshotMetaFromJSON(data) {
    let snapshotMeta
    if (utils_1.guard.isDefined(data)) {
      const snapshotData = data['snapshot.json']
      if (
        !utils_1.guard.isDefined(snapshotData) ||
        !utils_1.guard.isObject(snapshotData)
      ) {
        throw new TypeError('missing snapshot.json in meta')
      } else {
        snapshotMeta = file_1.MetaFile.fromJSON(snapshotData)
      }
    }
    return snapshotMeta
  }
  return timestamp$1
}

var hasRequiredMetadata
function requireMetadata() {
  if (hasRequiredMetadata) return metadata
  hasRequiredMetadata = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(metadata, '__esModule', {
    value: true
  })
  metadata.Metadata = void 0
  const canonical_json_1 = requireLib$1()
  const util_1 = __importDefault(require$$0$e)
  const base_1 = requireBase()
  const error_1 = requireError$3()
  const root_1 = requireRoot()
  const signature_1 = requireSignature()
  const snapshot_1 = requireSnapshot()
  const targets_1 = requireTargets()
  const timestamp_1 = requireTimestamp$1()
  const utils_1 = requireUtils()
  /***
   * A container for signed TUF metadata.
   *
   * Provides methods to convert to and from json, read and write to and
   * from JSON and to create and verify metadata signatures.
   *
   * ``Metadata[T]`` is a generic container type where T can be any one type of
   * [``Root``, ``Timestamp``, ``Snapshot``, ``Targets``]. The purpose of this
   * is to allow static type checking of the signed attribute in code using
   * Metadata::
   *
   * root_md = Metadata[Root].fromJSON("root.json")
   * # root_md type is now Metadata[Root]. This means signed and its
   * # attributes like consistent_snapshot are now statically typed and the
   * # types can be verified by static type checkers and shown by IDEs
   *
   * Using a type constraint is not required but not doing so means T is not a
   * specific type so static typing cannot happen. Note that the type constraint
   * ``[Root]`` is not validated at runtime (as pure annotations are not available
   * then).
   *
   * Apart from ``expires`` all of the arguments to the inner constructors have
   * reasonable default values for new metadata.
   */
  class Metadata {
    constructor(signed, signatures, unrecognizedFields) {
      this.signed = signed
      this.signatures = signatures || {}
      this.unrecognizedFields = unrecognizedFields || {}
    }
    sign(signer, append = true) {
      const bytes = Buffer.from(
        (0, canonical_json_1.canonicalize)(this.signed.toJSON())
      )
      const signature = signer(bytes)
      if (!append) {
        this.signatures = {}
      }
      this.signatures[signature.keyID] = signature
    }
    verifyDelegate(delegatedRole, delegatedMetadata) {
      let role
      let keys = {}
      switch (this.signed.type) {
        case base_1.MetadataKind.Root:
          keys = this.signed.keys
          role = this.signed.roles[delegatedRole]
          break
        case base_1.MetadataKind.Targets:
          if (!this.signed.delegations) {
            throw new error_1.ValueError(
              `No delegations found for ${delegatedRole}`
            )
          }
          keys = this.signed.delegations.keys
          if (this.signed.delegations.roles) {
            role = this.signed.delegations.roles[delegatedRole]
          } else if (this.signed.delegations.succinctRoles) {
            if (
              this.signed.delegations.succinctRoles.isDelegatedRole(
                delegatedRole
              )
            ) {
              role = this.signed.delegations.succinctRoles
            }
          }
          break
        default:
          throw new TypeError('invalid metadata type')
      }
      if (!role) {
        throw new error_1.ValueError(`no delegation found for ${delegatedRole}`)
      }
      const signingKeys = new Set()
      role.keyIDs.forEach(keyID => {
        const key = keys[keyID]
        // If we dont' have the key, continue checking other keys
        if (!key) {
          return
        }
        try {
          key.verifySignature(delegatedMetadata)
          signingKeys.add(key.keyID)
        } catch (error) {
          // continue
        }
      })
      if (signingKeys.size < role.threshold) {
        throw new error_1.UnsignedMetadataError(
          `${delegatedRole} was signed by ${signingKeys.size}/${role.threshold} keys`
        )
      }
    }
    equals(other) {
      if (!(other instanceof Metadata)) {
        return false
      }
      return (
        this.signed.equals(other.signed) &&
        util_1.default.isDeepStrictEqual(this.signatures, other.signatures) &&
        util_1.default.isDeepStrictEqual(
          this.unrecognizedFields,
          other.unrecognizedFields
        )
      )
    }
    toJSON() {
      const signatures = Object.values(this.signatures).map(signature => {
        return signature.toJSON()
      })
      return {
        signatures,
        signed: this.signed.toJSON(),
        ...this.unrecognizedFields
      }
    }
    static fromJSON(type, data) {
      const { signed, signatures, ...rest } = data
      if (!utils_1.guard.isDefined(signed) || !utils_1.guard.isObject(signed)) {
        throw new TypeError('signed is not defined')
      }
      if (type !== signed._type) {
        throw new error_1.ValueError(
          `expected '${type}', got ${signed['_type']}`
        )
      }
      if (!utils_1.guard.isObjectArray(signatures)) {
        throw new TypeError('signatures is not an array')
      }
      let signedObj
      switch (type) {
        case base_1.MetadataKind.Root:
          signedObj = root_1.Root.fromJSON(signed)
          break
        case base_1.MetadataKind.Timestamp:
          signedObj = timestamp_1.Timestamp.fromJSON(signed)
          break
        case base_1.MetadataKind.Snapshot:
          signedObj = snapshot_1.Snapshot.fromJSON(signed)
          break
        case base_1.MetadataKind.Targets:
          signedObj = targets_1.Targets.fromJSON(signed)
          break
        default:
          throw new TypeError('invalid metadata type')
      }
      const sigMap = {}
      // Ensure that each signature is unique
      signatures.forEach(sigData => {
        const sig = signature_1.Signature.fromJSON(sigData)
        if (sigMap[sig.keyID]) {
          throw new error_1.ValueError(
            `multiple signatures found for keyid: ${sig.keyID}`
          )
        }
        sigMap[sig.keyID] = sig
      })
      return new Metadata(signedObj, sigMap, rest)
    }
  }
  metadata.Metadata = Metadata
  return metadata
}

var hasRequiredDist$4
function requireDist$4() {
  if (hasRequiredDist$4) return dist$1
  hasRequiredDist$4 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Timestamp =
      exports.Targets =
      exports.Snapshot =
      exports.Signature =
      exports.Root =
      exports.Metadata =
      exports.Key =
      exports.TargetFile =
      exports.MetaFile =
      exports.ValueError =
      exports.MetadataKind =
        void 0
    var base_1 = requireBase()
    Object.defineProperty(exports, 'MetadataKind', {
      enumerable: true,
      get: function () {
        return base_1.MetadataKind
      }
    })
    var error_1 = requireError$3()
    Object.defineProperty(exports, 'ValueError', {
      enumerable: true,
      get: function () {
        return error_1.ValueError
      }
    })
    var file_1 = requireFile()
    Object.defineProperty(exports, 'MetaFile', {
      enumerable: true,
      get: function () {
        return file_1.MetaFile
      }
    })
    Object.defineProperty(exports, 'TargetFile', {
      enumerable: true,
      get: function () {
        return file_1.TargetFile
      }
    })
    var key_1 = requireKey$1()
    Object.defineProperty(exports, 'Key', {
      enumerable: true,
      get: function () {
        return key_1.Key
      }
    })
    var metadata_1 = requireMetadata()
    Object.defineProperty(exports, 'Metadata', {
      enumerable: true,
      get: function () {
        return metadata_1.Metadata
      }
    })
    var root_1 = requireRoot()
    Object.defineProperty(exports, 'Root', {
      enumerable: true,
      get: function () {
        return root_1.Root
      }
    })
    var signature_1 = requireSignature()
    Object.defineProperty(exports, 'Signature', {
      enumerable: true,
      get: function () {
        return signature_1.Signature
      }
    })
    var snapshot_1 = requireSnapshot()
    Object.defineProperty(exports, 'Snapshot', {
      enumerable: true,
      get: function () {
        return snapshot_1.Snapshot
      }
    })
    var targets_1 = requireTargets()
    Object.defineProperty(exports, 'Targets', {
      enumerable: true,
      get: function () {
        return targets_1.Targets
      }
    })
    var timestamp_1 = requireTimestamp$1()
    Object.defineProperty(exports, 'Timestamp', {
      enumerable: true,
      get: function () {
        return timestamp_1.Timestamp
      }
    })
  })(dist$1)
  return dist$1
}

var fetcher$1 = {}

var error$2 = {}

var hasRequiredError$2
function requireError$2() {
  if (hasRequiredError$2) return error$2
  hasRequiredError$2 = 1
  Object.defineProperty(error$2, '__esModule', {
    value: true
  })
  error$2.DownloadHTTPError =
    error$2.DownloadLengthMismatchError =
    error$2.DownloadError =
    error$2.ExpiredMetadataError =
    error$2.EqualVersionError =
    error$2.BadVersionError =
    error$2.RepositoryError =
    error$2.PersistError =
    error$2.RuntimeError =
    error$2.ValueError =
      void 0
  // An error about insufficient values
  class ValueError extends Error {}
  error$2.ValueError = ValueError
  class RuntimeError extends Error {}
  error$2.RuntimeError = RuntimeError
  class PersistError extends Error {}
  error$2.PersistError = PersistError
  // An error with a repository's state, such as a missing file.
  // It covers all exceptions that come from the repository side when
  // looking from the perspective of users of metadata API or ngclient.
  class RepositoryError extends Error {}
  error$2.RepositoryError = RepositoryError
  // An error for metadata that contains an invalid version number.
  class BadVersionError extends RepositoryError {}
  error$2.BadVersionError = BadVersionError
  // An error for metadata containing a previously verified version number.
  class EqualVersionError extends BadVersionError {}
  error$2.EqualVersionError = EqualVersionError
  // Indicate that a TUF Metadata file has expired.
  class ExpiredMetadataError extends RepositoryError {}
  error$2.ExpiredMetadataError = ExpiredMetadataError
  //----- Download Errors -------------------------------------------------------
  // An error occurred while attempting to download a file.
  class DownloadError extends Error {}
  error$2.DownloadError = DownloadError
  // Indicate that a mismatch of lengths was seen while downloading a file
  class DownloadLengthMismatchError extends DownloadError {}
  error$2.DownloadLengthMismatchError = DownloadLengthMismatchError
  // Returned by FetcherInterface implementations for HTTP errors.
  class DownloadHTTPError extends DownloadError {
    statusCode
    constructor(message, statusCode) {
      super(message)
      this.statusCode = statusCode
    }
  }
  error$2.DownloadHTTPError = DownloadHTTPError
  return error$2
}

var tmpfile = {}

var hasRequiredTmpfile
function requireTmpfile() {
  if (hasRequiredTmpfile) return tmpfile
  hasRequiredTmpfile = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(tmpfile, '__esModule', {
    value: true
  })
  tmpfile.withTempFile = void 0
  const promises_1 = __importDefault(require$$0$7)
  const os_1 = __importDefault(require$$0$9)
  const path_1 = __importDefault(require$$1$5)
  // Invokes the given handler with the path to a temporary file. The file
  // is deleted after the handler returns.
  const withTempFile = async handler =>
    withTempDir(async dir => handler(path_1.default.join(dir, 'tempfile')))
  tmpfile.withTempFile = withTempFile
  // Invokes the given handler with a temporary directory. The directory is
  // deleted after the handler returns.
  const withTempDir = async handler => {
    const tmpDir = await promises_1.default.realpath(os_1.default.tmpdir())
    const dir = await promises_1.default.mkdtemp(tmpDir + path_1.default.sep)
    try {
      return await handler(dir)
    } finally {
      await promises_1.default.rm(dir, {
        force: true,
        recursive: true,
        maxRetries: 3
      })
    }
  }
  return tmpfile
}

var hasRequiredFetcher$1
function requireFetcher$1() {
  if (hasRequiredFetcher$1) return fetcher$1
  hasRequiredFetcher$1 = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(fetcher$1, '__esModule', {
    value: true
  })
  fetcher$1.DefaultFetcher = fetcher$1.BaseFetcher = void 0
  const debug_1 = __importDefault(requireSrc())
  const fs_1 = __importDefault(require$$0$4)
  const make_fetch_happen_1 = __importDefault(requireLib$3())
  const util_1 = __importDefault(require$$0$e)
  const error_1 = requireError$2()
  const tmpfile_1 = requireTmpfile()
  const log = (0, debug_1.default)('tuf:fetch')
  class BaseFetcher {
    // Download file from given URL. The file is downloaded to a temporary
    // location and then passed to the given handler. The handler is responsible
    // for moving the file to its final location. The temporary file is deleted
    // after the handler returns.
    async downloadFile(url, maxLength, handler) {
      return (0, tmpfile_1.withTempFile)(async tmpFile => {
        const reader = await this.fetch(url)
        let numberOfBytesReceived = 0
        const fileStream = fs_1.default.createWriteStream(tmpFile)
        // Read the stream a chunk at a time so that we can check
        // the length of the file as we go
        try {
          for await (const chunk of reader) {
            numberOfBytesReceived += chunk.length
            if (numberOfBytesReceived > maxLength) {
              throw new error_1.DownloadLengthMismatchError(
                'Max length reached'
              )
            }
            await writeBufferToStream(fileStream, chunk)
          }
        } finally {
          // Make sure we always close the stream
          // eslint-disable-next-line @typescript-eslint/unbound-method
          await util_1.default.promisify(fileStream.close).bind(fileStream)()
        }
        return handler(tmpFile)
      })
    }
    // Download bytes from given URL.
    async downloadBytes(url, maxLength) {
      return this.downloadFile(url, maxLength, async file => {
        const stream = fs_1.default.createReadStream(file)
        const chunks = []
        for await (const chunk of stream) {
          chunks.push(chunk)
        }
        return Buffer.concat(chunks)
      })
    }
  }
  fetcher$1.BaseFetcher = BaseFetcher
  class DefaultFetcher extends BaseFetcher {
    timeout
    retry
    constructor(options = {}) {
      super()
      this.timeout = options.timeout
      this.retry = options.retry
    }
    async fetch(url) {
      log('GET %s', url)
      const response = await (0, make_fetch_happen_1.default)(url, {
        timeout: this.timeout,
        retry: this.retry
      })
      if (!response.ok || !response?.body) {
        throw new error_1.DownloadHTTPError(
          'Failed to download',
          response.status
        )
      }
      return response.body
    }
  }
  fetcher$1.DefaultFetcher = DefaultFetcher
  const writeBufferToStream = async (stream, buffer) => {
    return new Promise((resolve, reject) => {
      stream.write(buffer, err => {
        if (err) {
          reject(err)
        }
        resolve(true)
      })
    })
  }
  return fetcher$1
}

var updater = {}

var config$1 = {}

var hasRequiredConfig$1
function requireConfig$1() {
  if (hasRequiredConfig$1) return config$1
  hasRequiredConfig$1 = 1
  Object.defineProperty(config$1, '__esModule', {
    value: true
  })
  config$1.defaultConfig = void 0
  config$1.defaultConfig = {
    maxRootRotations: 256,
    maxDelegations: 32,
    rootMaxLength: 512000,
    //bytes
    timestampMaxLength: 16384,
    // bytes
    snapshotMaxLength: 2000000,
    // bytes
    targetsMaxLength: 5000000,
    // bytes
    prefixTargetsWithHash: true,
    fetchTimeout: 100000,
    // milliseconds
    fetchRetries: undefined,
    fetchRetry: 2
  }
  return config$1
}

var store = {}

var hasRequiredStore
function requireStore() {
  if (hasRequiredStore) return store
  hasRequiredStore = 1
  Object.defineProperty(store, '__esModule', {
    value: true
  })
  store.TrustedMetadataStore = void 0
  const models_1 = requireDist$4()
  const error_1 = requireError$2()
  class TrustedMetadataStore {
    trustedSet = {}
    referenceTime
    constructor(rootData) {
      // Client workflow 5.1: record fixed update start time
      this.referenceTime = new Date()
      // Client workflow 5.2: load trusted root metadata
      this.loadTrustedRoot(rootData)
    }
    get root() {
      if (!this.trustedSet.root) {
        throw new ReferenceError('No trusted root metadata')
      }
      return this.trustedSet.root
    }
    get timestamp() {
      return this.trustedSet.timestamp
    }
    get snapshot() {
      return this.trustedSet.snapshot
    }
    get targets() {
      return this.trustedSet.targets
    }
    getRole(name) {
      return this.trustedSet[name]
    }
    updateRoot(bytesBuffer) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const data = JSON.parse(bytesBuffer.toString('utf8'))
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      const newRoot = models_1.Metadata.fromJSON(
        models_1.MetadataKind.Root,
        data
      )
      if (newRoot.signed.type != models_1.MetadataKind.Root) {
        throw new error_1.RepositoryError(
          `Expected 'root', got ${newRoot.signed.type}`
        )
      }
      // Client workflow 5.4: check for arbitrary software attack
      this.root.verifyDelegate(models_1.MetadataKind.Root, newRoot)
      // Client workflow 5.5: check for rollback attack
      if (newRoot.signed.version != this.root.signed.version + 1) {
        throw new error_1.BadVersionError(
          `Expected version ${this.root.signed.version + 1}, got ${newRoot.signed.version}`
        )
      }
      // Check that new root is signed by self
      newRoot.verifyDelegate(models_1.MetadataKind.Root, newRoot)
      // Client workflow 5.7: set new root as trusted root
      this.trustedSet.root = newRoot
      return newRoot
    }
    updateTimestamp(bytesBuffer) {
      if (this.snapshot) {
        throw new error_1.RuntimeError('Cannot update timestamp after snapshot')
      }
      if (this.root.signed.isExpired(this.referenceTime)) {
        throw new error_1.ExpiredMetadataError('Final root.json is expired')
      }
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const data = JSON.parse(bytesBuffer.toString('utf8'))
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      const newTimestamp = models_1.Metadata.fromJSON(
        models_1.MetadataKind.Timestamp,
        data
      )
      if (newTimestamp.signed.type != models_1.MetadataKind.Timestamp) {
        throw new error_1.RepositoryError(
          `Expected 'timestamp', got ${newTimestamp.signed.type}`
        )
      }
      // Client workflow 5.4.2: check for arbitrary software attack
      this.root.verifyDelegate(models_1.MetadataKind.Timestamp, newTimestamp)
      if (this.timestamp) {
        // Prevent rolling back timestamp version
        // Client workflow 5.4.3.1: check for rollback attack
        if (newTimestamp.signed.version < this.timestamp.signed.version) {
          throw new error_1.BadVersionError(
            `New timestamp version ${newTimestamp.signed.version} is less than current version ${this.timestamp.signed.version}`
          )
        }
        //  Keep using old timestamp if versions are equal.
        if (newTimestamp.signed.version === this.timestamp.signed.version) {
          throw new error_1.EqualVersionError(
            `New timestamp version ${newTimestamp.signed.version} is equal to current version ${this.timestamp.signed.version}`
          )
        }
        // Prevent rolling back snapshot version
        // Client workflow 5.4.3.2: check for rollback attack
        const snapshotMeta = this.timestamp.signed.snapshotMeta
        const newSnapshotMeta = newTimestamp.signed.snapshotMeta
        if (newSnapshotMeta.version < snapshotMeta.version) {
          throw new error_1.BadVersionError(
            `New snapshot version ${newSnapshotMeta.version} is less than current version ${snapshotMeta.version}`
          )
        }
      }
      // expiry not checked to allow old timestamp to be used for rollback
      // protection of new timestamp: expiry is checked in update_snapshot
      this.trustedSet.timestamp = newTimestamp
      // Client workflow 5.4.4: check for freeze attack
      this.checkFinalTimestamp()
      return newTimestamp
    }
    updateSnapshot(bytesBuffer, trusted = false) {
      if (!this.timestamp) {
        throw new error_1.RuntimeError(
          'Cannot update snapshot before timestamp'
        )
      }
      if (this.targets) {
        throw new error_1.RuntimeError('Cannot update snapshot after targets')
      }
      // Snapshot cannot be loaded if final timestamp is expired
      this.checkFinalTimestamp()
      const snapshotMeta = this.timestamp.signed.snapshotMeta
      // Verify non-trusted data against the hashes in timestamp, if any.
      // Trusted snapshot data has already been verified once.
      // Client workflow 5.5.2: check against timestamp role's snaphsot hash
      if (!trusted) {
        snapshotMeta.verify(bytesBuffer)
      }
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const data = JSON.parse(bytesBuffer.toString('utf8'))
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      const newSnapshot = models_1.Metadata.fromJSON(
        models_1.MetadataKind.Snapshot,
        data
      )
      if (newSnapshot.signed.type != models_1.MetadataKind.Snapshot) {
        throw new error_1.RepositoryError(
          `Expected 'snapshot', got ${newSnapshot.signed.type}`
        )
      }
      // Client workflow 5.5.3: check for arbitrary software attack
      this.root.verifyDelegate(models_1.MetadataKind.Snapshot, newSnapshot)
      // version check against meta version (5.5.4) is deferred to allow old
      // snapshot to be used in rollback protection
      // Client workflow 5.5.5: check for rollback attack
      if (this.snapshot) {
        Object.entries(this.snapshot.signed.meta).forEach(
          ([fileName, fileInfo]) => {
            const newFileInfo = newSnapshot.signed.meta[fileName]
            if (!newFileInfo) {
              throw new error_1.RepositoryError(
                `Missing file ${fileName} in new snapshot`
              )
            }
            if (newFileInfo.version < fileInfo.version) {
              throw new error_1.BadVersionError(
                `New version ${newFileInfo.version} of ${fileName} is less than current version ${fileInfo.version}`
              )
            }
          }
        )
      }
      this.trustedSet.snapshot = newSnapshot
      // snapshot is loaded, but we raise if it's not valid _final_ snapshot
      // Client workflow 5.5.4 & 5.5.6
      this.checkFinalSnapsnot()
      return newSnapshot
    }
    updateDelegatedTargets(bytesBuffer, roleName, delegatorName) {
      if (!this.snapshot) {
        throw new error_1.RuntimeError(
          'Cannot update delegated targets before snapshot'
        )
      }
      // Targets cannot be loaded if final snapshot is expired or its version
      // does not match meta version in timestamp.
      this.checkFinalSnapsnot()
      const delegator = this.trustedSet[delegatorName]
      if (!delegator) {
        throw new error_1.RuntimeError(`No trusted ${delegatorName} metadata`)
      }
      // Extract metadata for the delegated role from snapshot
      const meta = this.snapshot.signed.meta?.[`${roleName}.json`]
      if (!meta) {
        throw new error_1.RepositoryError(
          `Missing ${roleName}.json in snapshot`
        )
      }
      // Client workflow 5.6.2: check against snapshot role's targets hash
      meta.verify(bytesBuffer)
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const data = JSON.parse(bytesBuffer.toString('utf8'))
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      const newDelegate = models_1.Metadata.fromJSON(
        models_1.MetadataKind.Targets,
        data
      )
      if (newDelegate.signed.type != models_1.MetadataKind.Targets) {
        throw new error_1.RepositoryError(
          `Expected 'targets', got ${newDelegate.signed.type}`
        )
      }
      // Client workflow 5.6.3: check for arbitrary software attack
      delegator.verifyDelegate(roleName, newDelegate)
      // Client workflow 5.6.4: Check against snapshot role’s targets version
      const version = newDelegate.signed.version
      if (version != meta.version) {
        throw new error_1.BadVersionError(
          `Version ${version} of ${roleName} does not match snapshot version ${meta.version}`
        )
      }
      // Client workflow 5.6.5: check for a freeze attack
      if (newDelegate.signed.isExpired(this.referenceTime)) {
        throw new error_1.ExpiredMetadataError(`${roleName}.json is expired`)
      }
      this.trustedSet[roleName] = newDelegate
    }
    // Verifies and loads data as trusted root metadata.
    // Note that an expired initial root is still considered valid.
    loadTrustedRoot(bytesBuffer) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const data = JSON.parse(bytesBuffer.toString('utf8'))
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      const root = models_1.Metadata.fromJSON(models_1.MetadataKind.Root, data)
      if (root.signed.type != models_1.MetadataKind.Root) {
        throw new error_1.RepositoryError(
          `Expected 'root', got ${root.signed.type}`
        )
      }
      root.verifyDelegate(models_1.MetadataKind.Root, root)
      this.trustedSet['root'] = root
    }
    checkFinalTimestamp() {
      // Timestamp MUST be loaded
      if (!this.timestamp) {
        throw new ReferenceError('No trusted timestamp metadata')
      }
      // Client workflow 5.4.4: check for freeze attack
      if (this.timestamp.signed.isExpired(this.referenceTime)) {
        throw new error_1.ExpiredMetadataError(
          'Final timestamp.json is expired'
        )
      }
    }
    checkFinalSnapsnot() {
      // Snapshot and timestamp MUST be loaded
      if (!this.snapshot) {
        throw new ReferenceError('No trusted snapshot metadata')
      }
      if (!this.timestamp) {
        throw new ReferenceError('No trusted timestamp metadata')
      }
      // Client workflow 5.5.6: check for freeze attack
      if (this.snapshot.signed.isExpired(this.referenceTime)) {
        throw new error_1.ExpiredMetadataError('snapshot.json is expired')
      }
      // Client workflow 5.5.4: check against timestamp role’s snapshot version
      const snapshotMeta = this.timestamp.signed.snapshotMeta
      if (this.snapshot.signed.version !== snapshotMeta.version) {
        throw new error_1.BadVersionError(
          "Snapshot version doesn't match timestamp"
        )
      }
    }
  }
  store.TrustedMetadataStore = TrustedMetadataStore
  return store
}

var url = {}

var hasRequiredUrl
function requireUrl() {
  if (hasRequiredUrl) return url
  hasRequiredUrl = 1
  Object.defineProperty(url, '__esModule', {
    value: true
  })
  url.join = join
  const url_1 = require$$0$2
  function join(base, path) {
    return new url_1.URL(
      ensureTrailingSlash(base) + removeLeadingSlash(path)
    ).toString()
  }
  function ensureTrailingSlash(path) {
    return path.endsWith('/') ? path : path + '/'
  }
  function removeLeadingSlash(path) {
    return path.startsWith('/') ? path.slice(1) : path
  }
  return url
}

var hasRequiredUpdater
function requireUpdater() {
  if (hasRequiredUpdater) return updater
  hasRequiredUpdater = 1
  var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          var desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          o[k2] = m[k]
        })
  var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  var __importStar =
    (this && this.__importStar) ||
    (function () {
      var ownKeys = function (o) {
        ownKeys =
          Object.getOwnPropertyNames ||
          function (o) {
            var ar = []
            for (var k in o)
              if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k
            return ar
          }
        return ownKeys(o)
      }
      return function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k = ownKeys(mod), i = 0; i < k.length; i++)
            if (k[i] !== 'default') __createBinding(result, mod, k[i])
        __setModuleDefault(result, mod)
        return result
      }
    })()
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(updater, '__esModule', {
    value: true
  })
  updater.Updater = void 0
  const models_1 = requireDist$4()
  const debug_1 = __importDefault(requireSrc())
  const fs = __importStar(require$$0$4)
  const path = __importStar(require$$1$5)
  const config_1 = requireConfig$1()
  const error_1 = requireError$2()
  const fetcher_1 = requireFetcher$1()
  const store_1 = requireStore()
  const url = __importStar(requireUrl())
  const log = (0, debug_1.default)('tuf:cache')
  class Updater {
    dir
    metadataBaseUrl
    targetDir
    targetBaseUrl
    forceCache
    trustedSet
    config
    fetcher
    constructor(options) {
      const {
        metadataDir,
        metadataBaseUrl,
        targetDir,
        targetBaseUrl,
        fetcher,
        config
      } = options
      this.dir = metadataDir
      this.metadataBaseUrl = metadataBaseUrl
      this.targetDir = targetDir
      this.targetBaseUrl = targetBaseUrl
      this.forceCache = options.forceCache ?? false
      const data = this.loadLocalMetadata(models_1.MetadataKind.Root)
      this.trustedSet = new store_1.TrustedMetadataStore(data)
      this.config = {
        ...config_1.defaultConfig,
        ...config
      }
      this.fetcher =
        fetcher ||
        new fetcher_1.DefaultFetcher({
          timeout: this.config.fetchTimeout,
          retry: this.config.fetchRetries ?? this.config.fetchRetry
        })
    }
    // refresh and load the metadata before downloading the target
    // refresh should be called once after the client is initialized
    async refresh() {
      // If forceCache is true, try to load the timestamp from local storage
      // without fetching it from the remote. Otherwise, load the root and
      // timestamp from the remote per the TUF spec.
      if (this.forceCache) {
        // If anything fails, load the root and timestamp from the remote. This
        // should cover any situation where the local metadata is corrupted or
        // expired.
        try {
          await this.loadTimestamp({
            checkRemote: false
          })
        } catch (error) {
          await this.loadRoot()
          await this.loadTimestamp()
        }
      } else {
        await this.loadRoot()
        await this.loadTimestamp()
      }
      await this.loadSnapshot()
      await this.loadTargets(
        models_1.MetadataKind.Targets,
        models_1.MetadataKind.Root
      )
    }
    // Returns the TargetFile instance with information for the given target path.
    //
    // Implicitly calls refresh if it hasn't already been called.
    async getTargetInfo(targetPath) {
      if (!this.trustedSet.targets) {
        await this.refresh()
      }
      return this.preorderDepthFirstWalk(targetPath)
    }
    async downloadTarget(targetInfo, filePath, targetBaseUrl) {
      const targetPath = filePath || this.generateTargetPath(targetInfo)
      if (!targetBaseUrl) {
        if (!this.targetBaseUrl) {
          throw new error_1.ValueError('Target base URL not set')
        }
        targetBaseUrl = this.targetBaseUrl
      }
      let targetFilePath = targetInfo.path
      const consistentSnapshot = this.trustedSet.root.signed.consistentSnapshot
      if (consistentSnapshot && this.config.prefixTargetsWithHash) {
        const hashes = Object.values(targetInfo.hashes)
        const { dir, base } = path.parse(targetFilePath)
        const filename = `${hashes[0]}.${base}`
        targetFilePath = dir ? `${dir}/${filename}` : filename
      }
      const targetUrl = url.join(targetBaseUrl, targetFilePath)
      // Client workflow 5.7.3: download target file
      await this.fetcher.downloadFile(
        targetUrl,
        targetInfo.length,
        async fileName => {
          // Verify hashes and length of downloaded file
          await targetInfo.verify(fs.createReadStream(fileName))
          // Copy file to target path
          log('WRITE %s', targetPath)
          fs.copyFileSync(fileName, targetPath)
        }
      )
      return targetPath
    }
    async findCachedTarget(targetInfo, filePath) {
      if (!filePath) {
        filePath = this.generateTargetPath(targetInfo)
      }
      try {
        if (fs.existsSync(filePath)) {
          await targetInfo.verify(fs.createReadStream(filePath))
          return filePath
        }
      } catch (error) {
        return // File not found
      }
      return // File not found
    }
    loadLocalMetadata(fileName) {
      const filePath = path.join(this.dir, `${fileName}.json`)
      log('READ %s', filePath)
      return fs.readFileSync(filePath)
    }
    // Sequentially load and persist on local disk every newer root metadata
    // version available on the remote.
    // Client workflow 5.3: update root role
    async loadRoot() {
      // Client workflow 5.3.2: version of trusted root metadata file
      const rootVersion = this.trustedSet.root.signed.version
      const lowerBound = rootVersion + 1
      const upperBound = lowerBound + this.config.maxRootRotations
      for (let version = lowerBound; version < upperBound; version++) {
        const rootUrl = url.join(this.metadataBaseUrl, `${version}.root.json`)
        try {
          // Client workflow 5.3.3: download new root metadata file
          const bytesData = await this.fetcher.downloadBytes(
            rootUrl,
            this.config.rootMaxLength
          )
          // Client workflow 5.3.4 - 5.4.7
          this.trustedSet.updateRoot(bytesData)
          // Client workflow 5.3.8: persist root metadata file
          this.persistMetadata(models_1.MetadataKind.Root, bytesData)
        } catch (error) {
          if (error instanceof error_1.DownloadHTTPError) {
            //  404/403 means current root is newest available
            if ([403, 404].includes(error.statusCode)) {
              break
            }
          }
          throw error
        }
      }
    }
    // Load local and remote timestamp metadata.
    // Client workflow 5.4: update timestamp role
    async loadTimestamp(
      { checkRemote } = {
        checkRemote: true
      }
    ) {
      // Load local and remote timestamp metadata
      try {
        const data = this.loadLocalMetadata(models_1.MetadataKind.Timestamp)
        this.trustedSet.updateTimestamp(data)
        // If checkRemote is disabled, return here to avoid fetching the remote
        // timestamp metadata.
        if (!checkRemote) {
          return
        }
      } catch (error) {
        // continue
      }
      //Load from remote (whether local load succeeded or not)
      const timestampUrl = url.join(this.metadataBaseUrl, 'timestamp.json')
      // Client workflow 5.4.1: download timestamp metadata file
      const bytesData = await this.fetcher.downloadBytes(
        timestampUrl,
        this.config.timestampMaxLength
      )
      try {
        // Client workflow 5.4.2 - 5.4.4
        this.trustedSet.updateTimestamp(bytesData)
      } catch (error) {
        // If new timestamp version is same as current, discardd the new one.
        // This is normal and should NOT raise an error.
        if (error instanceof error_1.EqualVersionError) {
          return
        }
        // Re-raise any other error
        throw error
      }
      // Client workflow 5.4.5: persist timestamp metadata
      this.persistMetadata(models_1.MetadataKind.Timestamp, bytesData)
    }
    // Load local and remote snapshot metadata.
    // Client workflow 5.5: update snapshot role
    async loadSnapshot() {
      //Load local (and if needed remote) snapshot metadata
      try {
        const data = this.loadLocalMetadata(models_1.MetadataKind.Snapshot)
        this.trustedSet.updateSnapshot(data, true)
      } catch (error) {
        if (!this.trustedSet.timestamp) {
          throw new ReferenceError('No timestamp metadata')
        }
        const snapshotMeta = this.trustedSet.timestamp.signed.snapshotMeta
        const maxLength = snapshotMeta.length || this.config.snapshotMaxLength
        const version = this.trustedSet.root.signed.consistentSnapshot
          ? snapshotMeta.version
          : undefined
        const snapshotUrl = url.join(
          this.metadataBaseUrl,
          version ? `${version}.snapshot.json` : 'snapshot.json'
        )
        try {
          // Client workflow 5.5.1: download snapshot metadata file
          const bytesData = await this.fetcher.downloadBytes(
            snapshotUrl,
            maxLength
          )
          // Client workflow 5.5.2 - 5.5.6
          this.trustedSet.updateSnapshot(bytesData)
          // Client workflow 5.5.7: persist snapshot metadata file
          this.persistMetadata(models_1.MetadataKind.Snapshot, bytesData)
        } catch (error) {
          throw new error_1.RuntimeError(
            `Unable to load snapshot metadata error ${error}`
          )
        }
      }
    }
    // Load local and remote targets metadata.
    // Client workflow 5.6: update targets role
    async loadTargets(role, parentRole) {
      if (this.trustedSet.getRole(role)) {
        return this.trustedSet.getRole(role)
      }
      try {
        const buffer = this.loadLocalMetadata(role)
        this.trustedSet.updateDelegatedTargets(buffer, role, parentRole)
      } catch (error) {
        // Local 'role' does not exist or is invalid: update from remote
        if (!this.trustedSet.snapshot) {
          throw new ReferenceError('No snapshot metadata')
        }
        const metaInfo = this.trustedSet.snapshot.signed.meta[`${role}.json`]
        // TODO: use length for fetching
        const maxLength = metaInfo.length || this.config.targetsMaxLength
        const version = this.trustedSet.root.signed.consistentSnapshot
          ? metaInfo.version
          : undefined
        const encodedRole = encodeURIComponent(role)
        const metadataUrl = url.join(
          this.metadataBaseUrl,
          version ? `${version}.${encodedRole}.json` : `${encodedRole}.json`
        )
        try {
          // Client workflow 5.6.1: download targets metadata file
          const bytesData = await this.fetcher.downloadBytes(
            metadataUrl,
            maxLength
          )
          // Client workflow 5.6.2 - 5.6.6
          this.trustedSet.updateDelegatedTargets(bytesData, role, parentRole)
          // Client workflow 5.6.7: persist targets metadata file
          this.persistMetadata(role, bytesData)
        } catch (error) {
          throw new error_1.RuntimeError(
            `Unable to load targets error ${error}`
          )
        }
      }
      return this.trustedSet.getRole(role)
    }
    async preorderDepthFirstWalk(targetPath) {
      // Interrogates the tree of target delegations in order of appearance
      // (which implicitly order trustworthiness), and returns the matching
      // target found in the most trusted role.
      // List of delegations to be interrogated. A (role, parent role) pair
      // is needed to load and verify the delegated targets metadata.
      const delegationsToVisit = [
        {
          roleName: models_1.MetadataKind.Targets,
          parentRoleName: models_1.MetadataKind.Root
        }
      ]
      const visitedRoleNames = new Set()
      // Client workflow 5.6.7: preorder depth-first traversal of the graph of
      // target delegations
      while (
        visitedRoleNames.size <= this.config.maxDelegations &&
        delegationsToVisit.length > 0
      ) {
        //  Pop the role name from the top of the stack.
        const { roleName, parentRoleName } = delegationsToVisit.pop()
        // Skip any visited current role to prevent cycles.
        // Client workflow 5.6.7.1: skip already-visited roles
        if (visitedRoleNames.has(roleName)) {
          continue
        }
        // The metadata for 'role_name' must be downloaded/updated before
        // its targets, delegations, and child roles can be inspected.
        const targets = (await this.loadTargets(roleName, parentRoleName))
          ?.signed
        if (!targets) {
          continue
        }
        const target = targets.targets?.[targetPath]
        if (target) {
          return target
        }
        // After preorder check, add current role to set of visited roles.
        visitedRoleNames.add(roleName)
        if (targets.delegations) {
          const childRolesToVisit = []
          // NOTE: This may be a slow operation if there are many delegated roles.
          const rolesForTarget = targets.delegations.rolesForTarget(targetPath)
          for (const { role: childName, terminating } of rolesForTarget) {
            childRolesToVisit.push({
              roleName: childName,
              parentRoleName: roleName
            })
            // Client workflow 5.6.7.2.1
            if (terminating) {
              delegationsToVisit.splice(0) // empty the array
              break
            }
          }
          childRolesToVisit.reverse()
          delegationsToVisit.push(...childRolesToVisit)
        }
      }
      return // no matching target found
    }
    generateTargetPath(targetInfo) {
      if (!this.targetDir) {
        throw new error_1.ValueError('Target directory not set')
      }
      // URL encode target path
      const filePath = encodeURIComponent(targetInfo.path)
      return path.join(this.targetDir, filePath)
    }
    persistMetadata(metaDataName, bytesData) {
      const encodedName = encodeURIComponent(metaDataName)
      try {
        const filePath = path.join(this.dir, `${encodedName}.json`)
        log('WRITE %s', filePath)
        fs.writeFileSync(filePath, bytesData.toString('utf8'))
      } catch (error) {
        throw new error_1.PersistError(
          `Failed to persist metadata ${encodedName} error: ${error}`
        )
      }
    }
  }
  updater.Updater = Updater
  return updater
}

var hasRequiredDist$3
function requireDist$3() {
  if (hasRequiredDist$3) return dist$2
  hasRequiredDist$3 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Updater = exports.BaseFetcher = exports.TargetFile = void 0
    var models_1 = requireDist$4()
    Object.defineProperty(exports, 'TargetFile', {
      enumerable: true,
      get: function () {
        return models_1.TargetFile
      }
    })
    var fetcher_1 = requireFetcher$1()
    Object.defineProperty(exports, 'BaseFetcher', {
      enumerable: true,
      get: function () {
        return fetcher_1.BaseFetcher
      }
    })
    var updater_1 = requireUpdater()
    Object.defineProperty(exports, 'Updater', {
      enumerable: true,
      get: function () {
        return updater_1.Updater
      }
    })
  })(dist$2)
  return dist$2
}

var target = {}

var error$1 = {}

var hasRequiredError$1
function requireError$1() {
  if (hasRequiredError$1) return error$1
  hasRequiredError$1 = 1
  Object.defineProperty(error$1, '__esModule', {
    value: true
  })
  error$1.TUFError = void 0
  class TUFError extends Error {
    constructor({ code, message, cause }) {
      super(message)
      this.code = code
      this.cause = cause
      this.name = this.constructor.name
    }
  }
  error$1.TUFError = TUFError
  return error$1
}

var hasRequiredTarget
function requireTarget() {
  if (hasRequiredTarget) return target
  hasRequiredTarget = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(target, '__esModule', {
    value: true
  })
  target.readTarget = readTarget
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const fs_1 = __importDefault(require$$0$4)
  const error_1 = requireError$1()
  // Downloads and returns the specified target from the provided TUF Updater.
  async function readTarget(tuf, targetPath) {
    const path = await getTargetPath(tuf, targetPath)
    return new Promise((resolve, reject) => {
      fs_1.default.readFile(path, 'utf-8', (err, data) => {
        if (err) {
          reject(
            new error_1.TUFError({
              code: 'TUF_READ_TARGET_ERROR',
              message: `error reading target ${path}`,
              cause: err
            })
          )
        } else {
          resolve(data)
        }
      })
    })
  }
  // Returns the local path to the specified target. If the target is not yet
  // cached locally, the provided TUF Updater will be used to download and
  // cache the target.
  async function getTargetPath(tuf, target) {
    let targetInfo
    try {
      targetInfo = await tuf.getTargetInfo(target)
    } catch (err) {
      throw new error_1.TUFError({
        code: 'TUF_REFRESH_METADATA_ERROR',
        message: 'error refreshing TUF metadata',
        cause: err
      })
    }
    if (!targetInfo) {
      throw new error_1.TUFError({
        code: 'TUF_FIND_TARGET_ERROR',
        message: `target ${target} not found`
      })
    }
    let path = await tuf.findCachedTarget(targetInfo)
    // An empty path here means the target has not been cached locally, or is
    // out of date. In either case, we need to download it.
    if (!path) {
      try {
        path = await tuf.downloadTarget(targetInfo)
      } catch (err) {
        throw new error_1.TUFError({
          code: 'TUF_DOWNLOAD_TARGET_ERROR',
          message: `error downloading target ${path}`,
          cause: err
        })
      }
    }
    return path
  }
  return target
}

var require$$5 = {
  'https://tuf-repo-cdn.sigstore.dev': {
    'root.json':
      'ewogInNpZ25hdHVyZXMiOiBbCiAgewogICAia2V5aWQiOiAiNmYyNjAwODlkNTkyM2RhZjIwMTY2Y2E2NTdjNTQzYWY2MTgzNDZhYjk3MTg4NGE5OTk2MmIwMTk4OGJiZTBjMyIsCiAgICJzaWciOiAiIgogIH0sCiAgewogICAia2V5aWQiOiAiZTcxYTU0ZDU0MzgzNWJhODZhZGFkOTQ2MDM3OWM3NjQxZmI4NzI2ZDE2NGVhNzY2ODAxYTFjNTIyYWJhN2VhMiIsCiAgICJzaWciOiAiMzA0NTAyMjEwMGIwYmNmMTg5Y2UxYjkzZTdkYjk2NDlkNWJlNTEyYTE4ODBjMGUzNTg4NzBlMzkzM2U0MjZjNWFmYjhhNDA2MTAwMjIwNmQyMTRiZDc5YjA5ZjQ1OGNjYzUyMWEyOTBhYTk2MGM0MTcwMTRmYzE2ZTYwNmY4MjA5MWI1ZTMxODE0ODg2YSIKICB9LAogIHsKICAgImtleWlkIjogIjIyZjRjYWVjNmQ4ZTZmOTU1NWFmNjZiM2Q0YzNjYjA2YTNiYjIzZmRjN2UzOWM5MTZjNjFmNDYyZTZmNTJiMDYiLAogICAic2lnIjogIiIKICB9LAogIHsKICAgImtleWlkIjogIjYxNjQzODM4MTI1YjQ0MGI0MGRiNjk0MmY1Y2I1YTMxYzBkYzA0MzY4MzE2ZWIyYWFhNThiOTU5MDRhNTgyMjIiLAogICAic2lnIjogIjMwNDUwMjIxMDBhOWI5ZTI5NGVjMjFiNjJkZmNhNmExNmExOWQwODQxODJjMTI1NzJlMzNkOWM0ZGNhYjUzMTdmYTFlOGE0NTlkMDIyMDY5ZjY4ZTU1ZWExZjk1YzVhMzY3YWFjN2E2MWE2NTc1N2Y5M2RhNWEwMDZhNWY0ZDFjZjk5NWJlODEyZDc2MDIiCiAgfSwKICB7CiAgICJrZXlpZCI6ICJhNjg3ZTViZjRmYWI4MmIwZWU1OGQ0NmUwNWM5NTM1MTQ1YTJjOWFmYjQ1OGY0M2Q0MmI0NWNhMGZkY2UyYTcwIiwKICAgInNpZyI6ICIzMDQ0MDIyMDc4MTE3OGVjMzkxNWNiMTZhY2E3NTdkNDBlMjg0MzVhYzUzNzhkNmI0ODdhY2IxMTFkMWVlYjMzOTM5N2Y3OWEwMjIwNzgxY2NlNDhhZTQ2ZjllNDdiOTdhODQxNGZjZjQ2NmE5ODY3MjZhNTg5NmM3MmEwZTRhYmEzMTYyY2I4MjZkZCIKICB9CiBdLAogInNpZ25lZCI6IHsKICAiX3R5cGUiOiAicm9vdCIsCiAgImNvbnNpc3RlbnRfc25hcHNob3QiOiB0cnVlLAogICJleHBpcmVzIjogIjIwMjUtMDgtMTlUMTQ6MzM6MDlaIiwKICAia2V5cyI6IHsKICAgIjBjODc0MzJjM2JmMDlmZDk5MTg5ZmRjMzJmYTVlYWVkZjRlNGE1ZmFjN2JhYjczZmEwNGEyZTBmYzY0YWY2ZjUiOiB7CiAgICAia2V5aWRfaGFzaF9hbGdvcml0aG1zIjogWwogICAgICJzaGEyNTYiLAogICAgICJzaGE1MTIiCiAgICBdLAogICAgImtleXR5cGUiOiAiZWNkc2EiLAogICAgImtleXZhbCI6IHsKICAgICAicHVibGljIjogIi0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXG5NRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVXUmlHcjUraiszSjVTc0grWnRyNW5FMkgyd083XG5CVituTzNzOTNnTGNhMThxVE96SFkxb1d5QUdEeWtNU3NHVFVCU3Q5RCtBbjBLZktzRDJtZlNNNDJRPT1cbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLVxuIgogICAgfSwKICAgICJzY2hlbWUiOiAiZWNkc2Etc2hhMi1uaXN0cDI1NiIsCiAgICAieC10dWYtb24tY2ktb25saW5lLXVyaSI6ICJnY3BrbXM6cHJvamVjdHMvc2lnc3RvcmUtcm9vdC1zaWduaW5nL2xvY2F0aW9ucy9nbG9iYWwva2V5UmluZ3Mvcm9vdC9jcnlwdG9LZXlzL3RpbWVzdGFtcC9jcnlwdG9LZXlWZXJzaW9ucy8xIgogICB9LAogICAiMjJmNGNhZWM2ZDhlNmY5NTU1YWY2NmIzZDRjM2NiMDZhM2JiMjNmZGM3ZTM5YzkxNmM2MWY0NjJlNmY1MmIwNiI6IHsKICAgICJrZXlpZF9oYXNoX2FsZ29yaXRobXMiOiBbCiAgICAgInNoYTI1NiIsCiAgICAgInNoYTUxMiIKICAgIF0sCiAgICAia2V5dHlwZSI6ICJlY2RzYSIsCiAgICAia2V5dmFsIjogewogICAgICJwdWJsaWMiOiAiLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS1cbk1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXpCelZPbUhDUG9qTVZMU0kzNjRXaWlWOE5QckRcbjZJZ1J4Vmxpc2t6L3YreTNKRVI1bWNWR2NPTmxpRGNXTUM1SjJsZkhtalBOUGhiNEg3eG04THpmU0E9PVxuLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tXG4iCiAgICB9LAogICAgInNjaGVtZSI6ICJlY2RzYS1zaGEyLW5pc3RwMjU2IiwKICAgICJ4LXR1Zi1vbi1jaS1rZXlvd25lciI6ICJAc2FudGlhZ290b3JyZXMiCiAgIH0sCiAgICI2MTY0MzgzODEyNWI0NDBiNDBkYjY5NDJmNWNiNWEzMWMwZGMwNDM2ODMxNmViMmFhYTU4Yjk1OTA0YTU4MjIyIjogewogICAgImtleWlkX2hhc2hfYWxnb3JpdGhtcyI6IFsKICAgICAic2hhMjU2IiwKICAgICAic2hhNTEyIgogICAgXSwKICAgICJrZXl0eXBlIjogImVjZHNhIiwKICAgICJrZXl2YWwiOiB7CiAgICAgInB1YmxpYyI6ICItLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxuTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFaW5pa1NzQVFtWWtOZUg1ZVlxL0NuSXpMYWFjT1xueGxTYWF3UURPd3FLeS90Q3F4cTV4eFBTSmMyMUs0V0loczlHeU9rS2Z6dWVZM0dJTHpjTUpaNGNXdz09XG4tLS0tLUVORCBQVUJMSUMgS0VZLS0tLS1cbiIKICAgIH0sCiAgICAic2NoZW1lIjogImVjZHNhLXNoYTItbmlzdHAyNTYiLAogICAgIngtdHVmLW9uLWNpLWtleW93bmVyIjogIkBib2JjYWxsYXdheSIKICAgfSwKICAgIjZmMjYwMDg5ZDU5MjNkYWYyMDE2NmNhNjU3YzU0M2FmNjE4MzQ2YWI5NzE4ODRhOTk5NjJiMDE5ODhiYmUwYzMiOiB7CiAgICAia2V5aWRfaGFzaF9hbGdvcml0aG1zIjogWwogICAgICJzaGEyNTYiLAogICAgICJzaGE1MTIiCiAgICBdLAogICAgImtleXR5cGUiOiAiZWNkc2EiLAogICAgImtleXZhbCI6IHsKICAgICAicHVibGljIjogIi0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXG5NRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUV5OFhLc21oQllESThKYzBHd3pCeGVLYXgwY201XG5TVEtFVTY1SFBGdW5VbjQxc1Q4cGkwRmpNNElrSHovWVVtd21MVU8wV3Q3bHhoajZCa0xJSzRxWUF3PT1cbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLVxuIgogICAgfSwKICAgICJzY2hlbWUiOiAiZWNkc2Etc2hhMi1uaXN0cDI1NiIsCiAgICAieC10dWYtb24tY2kta2V5b3duZXIiOiAiQGRsb3JlbmMiCiAgIH0sCiAgICJhNjg3ZTViZjRmYWI4MmIwZWU1OGQ0NmUwNWM5NTM1MTQ1YTJjOWFmYjQ1OGY0M2Q0MmI0NWNhMGZkY2UyYTcwIjogewogICAgImtleWlkX2hhc2hfYWxnb3JpdGhtcyI6IFsKICAgICAic2hhMjU2IiwKICAgICAic2hhNTEyIgogICAgXSwKICAgICJrZXl0eXBlIjogImVjZHNhIiwKICAgICJrZXl2YWwiOiB7CiAgICAgInB1YmxpYyI6ICItLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxuTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFMGdocmg5Mkx3MVlyM2lkR1Y1V3FDdE1EQjhDeFxuK0Q4aGRDNHcyWkxOSXBsVlJvVkdMc2tZYTNnaGVNeU9qaUo4a1BpMTVhUTIvLzdQK29qN1V2SlBHdz09XG4tLS0tLUVORCBQVUJMSUMgS0VZLS0tLS1cbiIKICAgIH0sCiAgICAic2NoZW1lIjogImVjZHNhLXNoYTItbmlzdHAyNTYiLAogICAgIngtdHVmLW9uLWNpLWtleW93bmVyIjogIkBqb3NodWFnbCIKICAgfSwKICAgImU3MWE1NGQ1NDM4MzViYTg2YWRhZDk0NjAzNzljNzY0MWZiODcyNmQxNjRlYTc2NjgwMWExYzUyMmFiYTdlYTIiOiB7CiAgICAia2V5aWRfaGFzaF9hbGdvcml0aG1zIjogWwogICAgICJzaGEyNTYiLAogICAgICJzaGE1MTIiCiAgICBdLAogICAgImtleXR5cGUiOiAiZWNkc2EiLAogICAgImtleXZhbCI6IHsKICAgICAicHVibGljIjogIi0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXG5NRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVFWHN6M1NaWEZiOGpNVjQyajZwSmx5amJqUjhLXG5OM0J3b2NleHE2TE1JYjVxc1dLT1F2TE4xNk5VZWZMYzRIc3dPb3VtUnNWVmFhalNwUVM2Zm9ia1J3PT1cbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLVxuIgogICAgfSwKICAgICJzY2hlbWUiOiAiZWNkc2Etc2hhMi1uaXN0cDI1NiIsCiAgICAieC10dWYtb24tY2kta2V5b3duZXIiOiAiQG1ubTY3OCIKICAgfQogIH0sCiAgInJvbGVzIjogewogICAicm9vdCI6IHsKICAgICJrZXlpZHMiOiBbCiAgICAgIjZmMjYwMDg5ZDU5MjNkYWYyMDE2NmNhNjU3YzU0M2FmNjE4MzQ2YWI5NzE4ODRhOTk5NjJiMDE5ODhiYmUwYzMiLAogICAgICJlNzFhNTRkNTQzODM1YmE4NmFkYWQ5NDYwMzc5Yzc2NDFmYjg3MjZkMTY0ZWE3NjY4MDFhMWM1MjJhYmE3ZWEyIiwKICAgICAiMjJmNGNhZWM2ZDhlNmY5NTU1YWY2NmIzZDRjM2NiMDZhM2JiMjNmZGM3ZTM5YzkxNmM2MWY0NjJlNmY1MmIwNiIsCiAgICAgIjYxNjQzODM4MTI1YjQ0MGI0MGRiNjk0MmY1Y2I1YTMxYzBkYzA0MzY4MzE2ZWIyYWFhNThiOTU5MDRhNTgyMjIiLAogICAgICJhNjg3ZTViZjRmYWI4MmIwZWU1OGQ0NmUwNWM5NTM1MTQ1YTJjOWFmYjQ1OGY0M2Q0MmI0NWNhMGZkY2UyYTcwIgogICAgXSwKICAgICJ0aHJlc2hvbGQiOiAzCiAgIH0sCiAgICJzbmFwc2hvdCI6IHsKICAgICJrZXlpZHMiOiBbCiAgICAgIjBjODc0MzJjM2JmMDlmZDk5MTg5ZmRjMzJmYTVlYWVkZjRlNGE1ZmFjN2JhYjczZmEwNGEyZTBmYzY0YWY2ZjUiCiAgICBdLAogICAgInRocmVzaG9sZCI6IDEsCiAgICAieC10dWYtb24tY2ktZXhwaXJ5LXBlcmlvZCI6IDM2NTAsCiAgICAieC10dWYtb24tY2ktc2lnbmluZy1wZXJpb2QiOiAzNjUKICAgfSwKICAgInRhcmdldHMiOiB7CiAgICAia2V5aWRzIjogWwogICAgICI2ZjI2MDA4OWQ1OTIzZGFmMjAxNjZjYTY1N2M1NDNhZjYxODM0NmFiOTcxODg0YTk5OTYyYjAxOTg4YmJlMGMzIiwKICAgICAiZTcxYTU0ZDU0MzgzNWJhODZhZGFkOTQ2MDM3OWM3NjQxZmI4NzI2ZDE2NGVhNzY2ODAxYTFjNTIyYWJhN2VhMiIsCiAgICAgIjIyZjRjYWVjNmQ4ZTZmOTU1NWFmNjZiM2Q0YzNjYjA2YTNiYjIzZmRjN2UzOWM5MTZjNjFmNDYyZTZmNTJiMDYiLAogICAgICI2MTY0MzgzODEyNWI0NDBiNDBkYjY5NDJmNWNiNWEzMWMwZGMwNDM2ODMxNmViMmFhYTU4Yjk1OTA0YTU4MjIyIiwKICAgICAiYTY4N2U1YmY0ZmFiODJiMGVlNThkNDZlMDVjOTUzNTE0NWEyYzlhZmI0NThmNDNkNDJiNDVjYTBmZGNlMmE3MCIKICAgIF0sCiAgICAidGhyZXNob2xkIjogMwogICB9LAogICAidGltZXN0YW1wIjogewogICAgImtleWlkcyI6IFsKICAgICAiMGM4NzQzMmMzYmYwOWZkOTkxODlmZGMzMmZhNWVhZWRmNGU0YTVmYWM3YmFiNzNmYTA0YTJlMGZjNjRhZjZmNSIKICAgIF0sCiAgICAidGhyZXNob2xkIjogMSwKICAgICJ4LXR1Zi1vbi1jaS1leHBpcnktcGVyaW9kIjogNywKICAgICJ4LXR1Zi1vbi1jaS1zaWduaW5nLXBlcmlvZCI6IDYKICAgfQogIH0sCiAgInNwZWNfdmVyc2lvbiI6ICIxLjAiLAogICJ2ZXJzaW9uIjogMTIsCiAgIngtdHVmLW9uLWNpLWV4cGlyeS1wZXJpb2QiOiAxOTcsCiAgIngtdHVmLW9uLWNpLXNpZ25pbmctcGVyaW9kIjogNDYKIH0KfQ==',
    targets: {
      'trusted_root.json':
        'ewogICJtZWRpYVR5cGUiOiAiYXBwbGljYXRpb24vdm5kLmRldi5zaWdzdG9yZS50cnVzdGVkcm9vdCtqc29uO3ZlcnNpb249MC4xIiwKICAidGxvZ3MiOiBbCiAgICB7CiAgICAgICJiYXNlVXJsIjogImh0dHBzOi8vcmVrb3Iuc2lnc3RvcmUuZGV2IiwKICAgICAgImhhc2hBbGdvcml0aG0iOiAiU0hBMl8yNTYiLAogICAgICAicHVibGljS2V5IjogewogICAgICAgICJyYXdCeXRlcyI6ICJNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUyRzJZKzJ0YWJkVFY1QmNHaUJJeDBhOWZBRndya0JibUxTR3RrczRMM3FYNnlZWTB6dWZCbmhDOFVyL2l5NTVHaFdQLzlBL2JZMkxoQzMwTTkrUll0dz09IiwKICAgICAgICAia2V5RGV0YWlscyI6ICJQS0lYX0VDRFNBX1AyNTZfU0hBXzI1NiIsCiAgICAgICAgInZhbGlkRm9yIjogewogICAgICAgICAgInN0YXJ0IjogIjIwMjEtMDEtMTJUMTE6NTM6MjcuMDAwWiIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJsb2dJZCI6IHsKICAgICAgICAia2V5SWQiOiAid05JOWF0UUdseitWV2ZPNkxSeWdINFFVZlkvOFc0UkZ3aVQ1aTVXUmdCMD0iCiAgICAgIH0KICAgIH0KICBdLAogICJjZXJ0aWZpY2F0ZUF1dGhvcml0aWVzIjogWwogICAgewogICAgICAic3ViamVjdCI6IHsKICAgICAgICAib3JnYW5pemF0aW9uIjogInNpZ3N0b3JlLmRldiIsCiAgICAgICAgImNvbW1vbk5hbWUiOiAic2lnc3RvcmUiCiAgICAgIH0sCiAgICAgICJ1cmkiOiAiaHR0cHM6Ly9mdWxjaW8uc2lnc3RvcmUuZGV2IiwKICAgICAgImNlcnRDaGFpbiI6IHsKICAgICAgICAiY2VydGlmaWNhdGVzIjogWwogICAgICAgICAgewogICAgICAgICAgICAicmF3Qnl0ZXMiOiAiTUlJQitEQ0NBWDZnQXdJQkFnSVROVmtEWm9DaW9mUERzeTdkZm02Z2VMYnVoekFLQmdncWhrak9QUVFEQXpBcU1SVXdFd1lEVlFRS0V3eHphV2R6ZEc5eVpTNWtaWFl4RVRBUEJnTlZCQU1UQ0hOcFozTjBiM0psTUI0WERUSXhNRE13TnpBek1qQXlPVm9YRFRNeE1ESXlNekF6TWpBeU9Wb3dLakVWTUJNR0ExVUVDaE1NYzJsbmMzUnZjbVV1WkdWMk1SRXdEd1lEVlFRREV3aHphV2R6ZEc5eVpUQjJNQkFHQnlxR1NNNDlBZ0VHQlN1QkJBQWlBMklBQkxTeUE3SWk1aytwTk84WkVXWTB5bGVtV0Rvd09rTmEza0wrR1pFNVo1R1dlaEw5L0E5YlJOQTNSYnJzWjVpMEpjYXN0YVJMN1NwNWZwL2pENWR4cWMvVWRUVm5sdlMxNmFuKzJZZnN3ZS9RdUxvbFJVQ3JjT0UyKzJpQTUrdHpkNk5tTUdRd0RnWURWUjBQQVFIL0JBUURBZ0VHTUJJR0ExVWRFd0VCL3dRSU1BWUJBZjhDQVFFd0hRWURWUjBPQkJZRUZNakZIUUJCbWlRcE1sRWs2dzJ1U3UxS0J0UHNNQjhHQTFVZEl3UVlNQmFBRk1qRkhRQkJtaVFwTWxFazZ3MnVTdTFLQnRQc01Bb0dDQ3FHU000OUJBTURBMmdBTUdVQ01IOGxpV0pmTXVpNnZYWEJoakRnWTRNd3NsbU4vVEp4VmUvODNXckZvbXdtTmYwNTZ5MVg0OEY5YzRtM2Ezb3pYQUl4QUtqUmF5NS9hai9qc0tLR0lrbVFhdGpJOHV1cEhyLytDeEZ2YUpXbXBZcU5rTERHUlUrOW9yemg1aEkyUnJjdWFRPT0iCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidmFsaWRGb3IiOiB7CiAgICAgICAgInN0YXJ0IjogIjIwMjEtMDMtMDdUMDM6MjA6MjkuMDAwWiIsCiAgICAgICAgImVuZCI6ICIyMDIyLTEyLTMxVDIzOjU5OjU5Ljk5OVoiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJzdWJqZWN0IjogewogICAgICAgICJvcmdhbml6YXRpb24iOiAic2lnc3RvcmUuZGV2IiwKICAgICAgICAiY29tbW9uTmFtZSI6ICJzaWdzdG9yZSIKICAgICAgfSwKICAgICAgInVyaSI6ICJodHRwczovL2Z1bGNpby5zaWdzdG9yZS5kZXYiLAogICAgICAiY2VydENoYWluIjogewogICAgICAgICJjZXJ0aWZpY2F0ZXMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyYXdCeXRlcyI6ICJNSUlDR2pDQ0FhR2dBd0lCQWdJVUFMblZpVmZuVTBickphc21Sa0hybi9VbmZhUXdDZ1lJS29aSXpqMEVBd013S2pFVk1CTUdBMVVFQ2hNTWMybG5jM1J2Y21VdVpHVjJNUkV3RHdZRFZRUURFd2h6YVdkemRHOXlaVEFlRncweU1qQTBNVE15TURBMk1UVmFGdzB6TVRFd01EVXhNelUyTlRoYU1EY3hGVEFUQmdOVkJBb1RESE5wWjNOMGIzSmxMbVJsZGpFZU1Cd0dBMVVFQXhNVmMybG5jM1J2Y21VdGFXNTBaWEp0WldScFlYUmxNSFl3RUFZSEtvWkl6ajBDQVFZRks0RUVBQ0lEWWdBRThSVlMveXNIK05PdnVEWnlQSVp0aWxnVUY5TmxhcllwQWQ5SFAxdkJCSDFVNUNWNzdMU1M3czBaaUg0bkU3SHY3cHRTNkx2dlIvU1RrNzk4TFZnTXpMbEo0SGVJZkYzdEhTYWV4TGNZcFNBU3Ixa1MwTi9SZ0JKei85aldDaVhubzNzd2VUQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3TXdFZ1lEVlIwVEFRSC9CQWd3QmdFQi93SUJBREFkQmdOVkhRNEVGZ1FVMzlQcHoxWWtFWmI1cU5qcEtGV2l4aTRZWkQ4d0h3WURWUjBqQkJnd0ZvQVVXTUFlWDVGRnBXYXBlc3lRb1pNaTBDckZ4Zm93Q2dZSUtvWkl6ajBFQXdNRFp3QXdaQUl3UENzUUs0RFlpWllEUElhRGk1SEZLbmZ4WHg2QVNTVm1FUmZzeW5ZQmlYMlg2U0pSblpVODQvOURaZG5GdnZ4bUFqQk90NlFwQmxjNEovMER4dmtUQ3FwY2x2emlMNkJDQ1BuamRsSUIzUHUzQnhzUG15Z1VZN0lpMnpiZENkbGlpb3c9IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJhd0J5dGVzIjogIk1JSUI5ekNDQVh5Z0F3SUJBZ0lVQUxaTkFQRmR4SFB3amVEbG9Ed3lZQ2hBTy80d0NnWUlLb1pJemowRUF3TXdLakVWTUJNR0ExVUVDaE1NYzJsbmMzUnZjbVV1WkdWMk1SRXdEd1lEVlFRREV3aHphV2R6ZEc5eVpUQWVGdzB5TVRFd01EY3hNelUyTlRsYUZ3MHpNVEV3TURVeE16VTJOVGhhTUNveEZUQVRCZ05WQkFvVERITnBaM04wYjNKbExtUmxkakVSTUE4R0ExVUVBeE1JYzJsbmMzUnZjbVV3ZGpBUUJnY3Foa2pPUFFJQkJnVXJnUVFBSWdOaUFBVDdYZUZUNHJiM1BRR3dTNElhanRMazMvT2xucGdhbmdhQmNsWXBzWUJyNWkrNHluQjA3Y2ViM0xQME9JT1pkeGV4WDY5YzVpVnV5SlJRK0h6MDV5aStVRjN1QldBbEhwaVM1c2gwK0gyR0hFN1NYcmsxRUM1bTFUcjE5TDlnZzkyall6QmhNQTRHQTFVZER3RUIvd1FFQXdJQkJqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUll3QjVma1VXbFpxbDZ6SkNoa3lMUUtzWEYrakFmQmdOVkhTTUVHREFXZ0JSWXdCNWZrVVdsWnFsNnpKQ2hreUxRS3NYRitqQUtCZ2dxaGtqT1BRUURBd05wQURCbUFqRUFqMW5IZVhacCsxM05XQk5hK0VEc0RQOEcxV1dnMXRDTVdQL1dIUHFwYVZvMGpoc3dlTkZaZ1NzMGVFN3dZSTRxQWpFQTJXQjlvdDk4c0lrb0YzdlpZZGQzL1Z0V0I1YjlUTk1lYTdJeC9zdEo1VGZjTExlQUJMRTRCTkpPc1E0dm5CSEoiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAidmFsaWRGb3IiOiB7CiAgICAgICAgInN0YXJ0IjogIjIwMjItMDQtMTNUMjA6MDY6MTUuMDAwWiIKICAgICAgfQogICAgfQogIF0sCiAgImN0bG9ncyI6IFsKICAgIHsKICAgICAgImJhc2VVcmwiOiAiaHR0cHM6Ly9jdGZlLnNpZ3N0b3JlLmRldi90ZXN0IiwKICAgICAgImhhc2hBbGdvcml0aG0iOiAiU0hBMl8yNTYiLAogICAgICAicHVibGljS2V5IjogewogICAgICAgICJyYXdCeXRlcyI6ICJNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUViZndSK1JKdWRYc2NnUkJScEtYMVhGRHkzUHl1ZER4ei9TZm5SaTFmVDhla3BmQmQyTzF1b3o3anIzWjhuS3p4QTY5RVVRK2VGQ0ZJM3pldWJQV1U3dz09IiwKICAgICAgICAia2V5RGV0YWlscyI6ICJQS0lYX0VDRFNBX1AyNTZfU0hBXzI1NiIsCiAgICAgICAgInZhbGlkRm9yIjogewogICAgICAgICAgInN0YXJ0IjogIjIwMjEtMDMtMTRUMDA6MDA6MDAuMDAwWiIsCiAgICAgICAgICAiZW5kIjogIjIwMjItMTAtMzFUMjM6NTk6NTkuOTk5WiIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJsb2dJZCI6IHsKICAgICAgICAia2V5SWQiOiAiQ0dDUzhDaFMvMmhGMGRGcko0U2NSV2NZckJZOXd6alNiZWE4SWdZMmIzST0iCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJiYXNlVXJsIjogImh0dHBzOi8vY3RmZS5zaWdzdG9yZS5kZXYvMjAyMiIsCiAgICAgICJoYXNoQWxnb3JpdGhtIjogIlNIQTJfMjU2IiwKICAgICAgInB1YmxpY0tleSI6IHsKICAgICAgICAicmF3Qnl0ZXMiOiAiTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFaVBTbEZpMENtRlRmRWpDVXFGOUh1Q0VjWVhOS0FhWWFsSUptQlo4eXllelBqVHFoeHJLQnBNbmFvY1Z0TEpCSTFlTTN1WG5RelFHQUpkSjRnczlGeXc9PSIsCiAgICAgICAgImtleURldGFpbHMiOiAiUEtJWF9FQ0RTQV9QMjU2X1NIQV8yNTYiLAogICAgICAgICJ2YWxpZEZvciI6IHsKICAgICAgICAgICJzdGFydCI6ICIyMDIyLTEwLTIwVDAwOjAwOjAwLjAwMFoiCiAgICAgICAgfQogICAgICB9LAogICAgICAibG9nSWQiOiB7CiAgICAgICAgImtleUlkIjogIjNUMHdhc2JIRVRKakdSNGNtV2MzQXFKS1hyamVQSzMvaDRweWdDOHA3bzQ9IgogICAgICB9CiAgICB9CiAgXQp9Cg==',
      'registry.npmjs.org%2Fkeys.json':
        'ewogICAgImtleXMiOiBbCiAgICAgICAgewogICAgICAgICAgICAia2V5SWQiOiAiU0hBMjU2OmpsM2J3c3d1ODBQampva0NnaDBvMnc1YzJVNExoUUFFNTdnajljejFrekEiLAogICAgICAgICAgICAia2V5VXNhZ2UiOiAibnBtOnNpZ25hdHVyZXMiLAogICAgICAgICAgICAicHVibGljS2V5IjogewogICAgICAgICAgICAgICAgInJhd0J5dGVzIjogIk1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRTFPbGIzek1BRkZ4WEtIaUlrUU81Y0ozWWhsNWk2VVBwK0lodXRlQkpidUhjQTVVb2dLbzBFV3RsV3dXNktTYUtvVE5FWUw3SmxDUWlWbmtoQmt0VWdnPT0iLAogICAgICAgICAgICAgICAgImtleURldGFpbHMiOiAiUEtJWF9FQ0RTQV9QMjU2X1NIQV8yNTYiLAogICAgICAgICAgICAgICAgInZhbGlkRm9yIjogewogICAgICAgICAgICAgICAgICAgICJzdGFydCI6ICIxOTk5LTAxLTAxVDAwOjAwOjAwLjAwMFoiLAogICAgICAgICAgICAgICAgICAgICJlbmQiOiAiMjAyNS0wMS0yOVQwMDowMDowMC4wMDBaIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJrZXlJZCI6ICJTSEEyNTY6amwzYndzd3U4MFBqam9rQ2doMG8ydzVjMlU0TGhRQUU1N2dqOWN6MWt6QSIsCiAgICAgICAgICAgICJrZXlVc2FnZSI6ICJucG06YXR0ZXN0YXRpb25zIiwKICAgICAgICAgICAgInB1YmxpY0tleSI6IHsKICAgICAgICAgICAgICAgICJyYXdCeXRlcyI6ICJNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUxT2xiM3pNQUZGeFhLSGlJa1FPNWNKM1lobDVpNlVQcCtJaHV0ZUJKYnVIY0E1VW9nS28wRVd0bFd3VzZLU2FLb1RORVlMN0psQ1FpVm5raEJrdFVnZz09IiwKICAgICAgICAgICAgICAgICJrZXlEZXRhaWxzIjogIlBLSVhfRUNEU0FfUDI1Nl9TSEFfMjU2IiwKICAgICAgICAgICAgICAgICJ2YWxpZEZvciI6IHsKICAgICAgICAgICAgICAgICAgICAic3RhcnQiOiAiMjAyMi0xMi0wMVQwMDowMDowMC4wMDBaIiwKICAgICAgICAgICAgICAgICAgICAiZW5kIjogIjIwMjUtMDEtMjlUMDA6MDA6MDAuMDAwWiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAia2V5SWQiOiAiU0hBMjU2OkRoUTh3UjVBUEJ2RkhMRi8rVGMrQVl2UE9kVHBjSURxT2h4c0JIUndDN1UiLAogICAgICAgICAgICAia2V5VXNhZ2UiOiAibnBtOnNpZ25hdHVyZXMiLAogICAgICAgICAgICAicHVibGljS2V5IjogewogICAgICAgICAgICAgICAgInJhd0J5dGVzIjogIk1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVk2WWE3VysrN2FVUHp2TVRyZXpINlljeDNjK0hPS1lDY05HeWJKWlNDSnEvZmQ3UWE4dXVBS3RkSWtVUXRRaUVLRVJoQW1FNWxNTUpoUDhPa0RPYTJnPT0iLAogICAgICAgICAgICAgICAgImtleURldGFpbHMiOiAiUEtJWF9FQ0RTQV9QMjU2X1NIQV8yNTYiLAogICAgICAgICAgICAgICAgInZhbGlkRm9yIjogewogICAgICAgICAgICAgICAgICAgICJzdGFydCI6ICIyMDI1LTAxLTEzVDAwOjAwOjAwLjAwMFoiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgImtleUlkIjogIlNIQTI1NjpEaFE4d1I1QVBCdkZITEYvK1RjK0FZdlBPZFRwY0lEcU9oeHNCSFJ3QzdVIiwKICAgICAgICAgICAgImtleVVzYWdlIjogIm5wbTphdHRlc3RhdGlvbnMiLAogICAgICAgICAgICAicHVibGljS2V5IjogewogICAgICAgICAgICAgICAgInJhd0J5dGVzIjogIk1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVk2WWE3VysrN2FVUHp2TVRyZXpINlljeDNjK0hPS1lDY05HeWJKWlNDSnEvZmQ3UWE4dXVBS3RkSWtVUXRRaUVLRVJoQW1FNWxNTUpoUDhPa0RPYTJnPT0iLAogICAgICAgICAgICAgICAgImtleURldGFpbHMiOiAiUEtJWF9FQ0RTQV9QMjU2X1NIQV8yNTYiLAogICAgICAgICAgICAgICAgInZhbGlkRm9yIjogewogICAgICAgICAgICAgICAgICAgICJzdGFydCI6ICIyMDI1LTAxLTEzVDAwOjAwOjAwLjAwMFoiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICBdCn0K'
    }
  }
}

var hasRequiredClient
function requireClient() {
  if (hasRequiredClient) return client
  hasRequiredClient = 1
  var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod
          }
    }
  Object.defineProperty(client, '__esModule', {
    value: true
  })
  client.TUFClient = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const fs_1 = __importDefault(require$$0$4)
  const path_1 = __importDefault(require$$1$5)
  const tuf_js_1 = requireDist$3()
  const _1 = requireDist$2()
  const target_1 = requireTarget()
  const TARGETS_DIR_NAME = 'targets'
  class TUFClient {
    constructor(options) {
      const url = new URL(options.mirrorURL)
      const repoName = encodeURIComponent(
        url.host + url.pathname.replace(/\/$/, '')
      )
      const cachePath = path_1.default.join(options.cachePath, repoName)
      initTufCache(cachePath)
      seedCache({
        cachePath,
        mirrorURL: options.mirrorURL,
        tufRootPath: options.rootPath,
        forceInit: options.forceInit
      })
      this.updater = initClient({
        mirrorURL: options.mirrorURL,
        cachePath,
        forceCache: options.forceCache,
        retry: options.retry,
        timeout: options.timeout
      })
    }
    async refresh() {
      return this.updater.refresh()
    }
    getTarget(targetName) {
      return (0, target_1.readTarget)(this.updater, targetName)
    }
  }
  client.TUFClient = TUFClient
  // Initializes the TUF cache directory structure including the initial
  // root.json file. If the cache directory does not exist, it will be
  // created. If the targets directory does not exist, it will be created.
  // If the root.json file does not exist, it will be copied from the
  // rootPath argument.
  function initTufCache(cachePath) {
    const targetsPath = path_1.default.join(cachePath, TARGETS_DIR_NAME)
    if (!fs_1.default.existsSync(cachePath)) {
      fs_1.default.mkdirSync(cachePath, {
        recursive: true
      })
    }
    if (!fs_1.default.existsSync(targetsPath)) {
      fs_1.default.mkdirSync(targetsPath)
    }
  }
  // Populates the TUF cache with the initial root.json file. If the root.json
  // file does not exist (or we're forcing re-initialization), copy it from either
  // the rootPath argument or from one of the repo seeds.
  function seedCache({ cachePath, mirrorURL, tufRootPath, forceInit }) {
    const cachedRootPath = path_1.default.join(cachePath, 'root.json')
    // If the root.json file does not exist (or we're forcing re-initialization),
    // populate it either from the supplied rootPath or from one of the repo seeds.
    if (!fs_1.default.existsSync(cachedRootPath) || forceInit) {
      if (tufRootPath) {
        fs_1.default.copyFileSync(tufRootPath, cachedRootPath)
      } else {
        const seeds = require$$5
        const repoSeed = seeds[mirrorURL]
        if (!repoSeed) {
          throw new _1.TUFError({
            code: 'TUF_INIT_CACHE_ERROR',
            message: `No root.json found for mirror: ${mirrorURL}`
          })
        }
        fs_1.default.writeFileSync(
          cachedRootPath,
          Buffer.from(repoSeed['root.json'], 'base64')
        )
        // Copy any seed targets into the cache
        Object.entries(repoSeed.targets).forEach(([targetName, target]) => {
          fs_1.default.writeFileSync(
            path_1.default.join(cachePath, TARGETS_DIR_NAME, targetName),
            Buffer.from(target, 'base64')
          )
        })
      }
    }
  }
  function initClient(options) {
    const config = {
      fetchTimeout: options.timeout,
      fetchRetry: options.retry
    }
    return new tuf_js_1.Updater({
      metadataBaseUrl: options.mirrorURL,
      targetBaseUrl: `${options.mirrorURL}/targets`,
      metadataDir: options.cachePath,
      targetDir: path_1.default.join(options.cachePath, TARGETS_DIR_NAME),
      forceCache: options.forceCache,
      config
    })
  }
  return client
}

var hasRequiredDist$2
function requireDist$2() {
  if (hasRequiredDist$2) return dist$3
  hasRequiredDist$2 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.TUFError = exports.DEFAULT_MIRROR_URL = void 0
    exports.getTrustedRoot = getTrustedRoot
    exports.initTUF = initTUF
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const protobuf_specs_1 = requireDist$8()
    const appdata_1 = requireAppdata()
    const client_1 = requireClient()
    exports.DEFAULT_MIRROR_URL = 'https://tuf-repo-cdn.sigstore.dev'
    const DEFAULT_CACHE_DIR = 'sigstore-js'
    const DEFAULT_RETRY = {
      retries: 2
    }
    const DEFAULT_TIMEOUT = 5000
    const TRUSTED_ROOT_TARGET = 'trusted_root.json'
    async function getTrustedRoot(/* istanbul ignore next */ options = {}) {
      const client = createClient(options)
      const trustedRoot = await client.getTarget(TRUSTED_ROOT_TARGET)
      return protobuf_specs_1.TrustedRoot.fromJSON(JSON.parse(trustedRoot))
    }
    async function initTUF(/* istanbul ignore next */ options = {}) {
      const client = createClient(options)
      return client.refresh().then(() => client)
    }
    // Create a TUF client with default options
    function createClient(options) {
      /* istanbul ignore next */
      return new client_1.TUFClient({
        cachePath:
          options.cachePath || (0, appdata_1.appDataPath)(DEFAULT_CACHE_DIR),
        rootPath: options.rootPath,
        mirrorURL: options.mirrorURL || exports.DEFAULT_MIRROR_URL,
        retry: options.retry ?? DEFAULT_RETRY,
        timeout: options.timeout ?? DEFAULT_TIMEOUT,
        forceCache: options.forceCache ?? false,
        forceInit: options.forceInit ?? options.force ?? false
      })
    }
    var error_1 = requireError$1()
    Object.defineProperty(exports, 'TUFError', {
      enumerable: true,
      get: function () {
        return error_1.TUFError
      }
    })
  })(dist$3)
  return dist$3
}

var dist = {}

var bundle = {}

var dsse$1 = {}

var hasRequiredDsse$1
function requireDsse$1() {
  if (hasRequiredDsse$1) return dsse$1
  hasRequiredDsse$1 = 1
  Object.defineProperty(dsse$1, '__esModule', {
    value: true
  })
  dsse$1.DSSESignatureContent = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const core_1 = requireDist$6()
  class DSSESignatureContent {
    constructor(env) {
      this.env = env
    }
    compareDigest(digest) {
      return core_1.crypto.bufferEqual(
        digest,
        core_1.crypto.digest('sha256', this.env.payload)
      )
    }
    compareSignature(signature) {
      return core_1.crypto.bufferEqual(signature, this.signature)
    }
    verifySignature(key) {
      return core_1.crypto.verify(this.preAuthEncoding, key, this.signature)
    }
    get signature() {
      return this.env.signatures.length > 0
        ? this.env.signatures[0].sig
        : Buffer.from('')
    }
    // DSSE Pre-Authentication Encoding
    get preAuthEncoding() {
      return core_1.dsse.preAuthEncoding(this.env.payloadType, this.env.payload)
    }
  }
  dsse$1.DSSESignatureContent = DSSESignatureContent
  return dsse$1
}

var message = {}

var hasRequiredMessage
function requireMessage() {
  if (hasRequiredMessage) return message
  hasRequiredMessage = 1
  Object.defineProperty(message, '__esModule', {
    value: true
  })
  message.MessageSignatureContent = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const core_1 = requireDist$6()
  class MessageSignatureContent {
    constructor(messageSignature, artifact) {
      this.signature = messageSignature.signature
      this.messageDigest = messageSignature.messageDigest.digest
      this.artifact = artifact
    }
    compareSignature(signature) {
      return core_1.crypto.bufferEqual(signature, this.signature)
    }
    compareDigest(digest) {
      return core_1.crypto.bufferEqual(digest, this.messageDigest)
    }
    verifySignature(key) {
      return core_1.crypto.verify(this.artifact, key, this.signature)
    }
  }
  message.MessageSignatureContent = MessageSignatureContent
  return message
}

var hasRequiredBundle
function requireBundle() {
  if (hasRequiredBundle) return bundle
  hasRequiredBundle = 1
  Object.defineProperty(bundle, '__esModule', {
    value: true
  })
  bundle.toSignedEntity = toSignedEntity
  bundle.signatureContent = signatureContent
  const core_1 = requireDist$6()
  const dsse_1 = requireDsse$1()
  const message_1 = requireMessage()
  function toSignedEntity(bundle, artifact) {
    const { tlogEntries, timestampVerificationData } =
      bundle.verificationMaterial
    const timestamps = []
    for (const entry of tlogEntries) {
      timestamps.push({
        $case: 'transparency-log',
        tlogEntry: entry
      })
    }
    for (const ts of timestampVerificationData?.rfc3161Timestamps ?? []) {
      timestamps.push({
        $case: 'timestamp-authority',
        timestamp: core_1.RFC3161Timestamp.parse(ts.signedTimestamp)
      })
    }
    return {
      signature: signatureContent(bundle, artifact),
      key: key(bundle),
      tlogEntries,
      timestamps
    }
  }
  function signatureContent(bundle, artifact) {
    switch (bundle.content.$case) {
      case 'dsseEnvelope':
        return new dsse_1.DSSESignatureContent(bundle.content.dsseEnvelope)
      case 'messageSignature':
        return new message_1.MessageSignatureContent(
          bundle.content.messageSignature,
          artifact
        )
    }
  }
  function key(bundle) {
    switch (bundle.verificationMaterial.content.$case) {
      case 'publicKey':
        return {
          $case: 'public-key',
          hint: bundle.verificationMaterial.content.publicKey.hint
        }
      case 'x509CertificateChain':
        return {
          $case: 'certificate',
          certificate: core_1.X509Certificate.parse(
            bundle.verificationMaterial.content.x509CertificateChain
              .certificates[0].rawBytes
          )
        }
      case 'certificate':
        return {
          $case: 'certificate',
          certificate: core_1.X509Certificate.parse(
            bundle.verificationMaterial.content.certificate.rawBytes
          )
        }
    }
  }
  return bundle
}

var error = {}

var hasRequiredError
function requireError() {
  if (hasRequiredError) return error
  hasRequiredError = 1
  Object.defineProperty(error, '__esModule', {
    value: true
  })
  error.PolicyError = error.VerificationError = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  class BaseError extends Error {
    constructor({ code, message, cause }) {
      super(message)
      this.code = code
      this.cause = cause
      this.name = this.constructor.name
    }
  }
  class VerificationError extends BaseError {}
  error.VerificationError = VerificationError
  class PolicyError extends BaseError {}
  error.PolicyError = PolicyError
  return error
}

var trust = {}

var filter = {}

var hasRequiredFilter
function requireFilter() {
  if (hasRequiredFilter) return filter
  hasRequiredFilter = 1
  Object.defineProperty(filter, '__esModule', {
    value: true
  })
  filter.filterCertAuthorities = filterCertAuthorities
  filter.filterTLogAuthorities = filterTLogAuthorities
  function filterCertAuthorities(certAuthorities, timestamp) {
    return certAuthorities.filter(ca => {
      return ca.validFor.start <= timestamp && ca.validFor.end >= timestamp
    })
  }
  // Filter the list of tlog instances to only those which match the given log
  // ID and have public keys which are valid for the given integrated time.
  function filterTLogAuthorities(tlogAuthorities, criteria) {
    return tlogAuthorities.filter(tlog => {
      // If we're filtering by log ID and the log IDs don't match, we can't use
      // this tlog
      if (criteria.logID && !tlog.logID.equals(criteria.logID)) {
        return false
      }
      // Check that the integrated time is within the validFor range
      return (
        tlog.validFor.start <= criteria.targetDate &&
        criteria.targetDate <= tlog.validFor.end
      )
    })
  }
  return filter
}

var hasRequiredTrust
function requireTrust() {
  if (hasRequiredTrust) return trust
  hasRequiredTrust = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.filterTLogAuthorities = exports.filterCertAuthorities = void 0
    exports.toTrustMaterial = toTrustMaterial
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const core_1 = requireDist$6()
    const protobuf_specs_1 = requireDist$8()
    const error_1 = requireError()
    const BEGINNING_OF_TIME = new Date(0)
    const END_OF_TIME = new Date(8640000000000000)
    var filter_1 = requireFilter()
    Object.defineProperty(exports, 'filterCertAuthorities', {
      enumerable: true,
      get: function () {
        return filter_1.filterCertAuthorities
      }
    })
    Object.defineProperty(exports, 'filterTLogAuthorities', {
      enumerable: true,
      get: function () {
        return filter_1.filterTLogAuthorities
      }
    })
    function toTrustMaterial(root, keys) {
      const keyFinder = typeof keys === 'function' ? keys : keyLocator(keys)
      return {
        certificateAuthorities:
          root.certificateAuthorities.map(createCertAuthority),
        timestampAuthorities:
          root.timestampAuthorities.map(createCertAuthority),
        tlogs: root.tlogs.map(createTLogAuthority),
        ctlogs: root.ctlogs.map(createTLogAuthority),
        publicKey: keyFinder
      }
    }
    function createTLogAuthority(tlogInstance) {
      const keyDetails = tlogInstance.publicKey.keyDetails
      const keyType =
        keyDetails === protobuf_specs_1.PublicKeyDetails.PKCS1_RSA_PKCS1V5 ||
        keyDetails === protobuf_specs_1.PublicKeyDetails.PKIX_RSA_PKCS1V5 ||
        keyDetails ===
          protobuf_specs_1.PublicKeyDetails.PKIX_RSA_PKCS1V15_2048_SHA256 ||
        keyDetails ===
          protobuf_specs_1.PublicKeyDetails.PKIX_RSA_PKCS1V15_3072_SHA256 ||
        keyDetails ===
          protobuf_specs_1.PublicKeyDetails.PKIX_RSA_PKCS1V15_4096_SHA256
          ? 'pkcs1'
          : 'spki'
      return {
        logID: tlogInstance.logId.keyId,
        publicKey: core_1.crypto.createPublicKey(
          tlogInstance.publicKey.rawBytes,
          keyType
        ),
        validFor: {
          start: tlogInstance.publicKey.validFor?.start || BEGINNING_OF_TIME,
          end: tlogInstance.publicKey.validFor?.end || END_OF_TIME
        }
      }
    }
    function createCertAuthority(ca) {
      /* istanbul ignore next */
      return {
        certChain: ca.certChain.certificates.map(cert => {
          return core_1.X509Certificate.parse(cert.rawBytes)
        }),
        validFor: {
          start: ca.validFor?.start || BEGINNING_OF_TIME,
          end: ca.validFor?.end || END_OF_TIME
        }
      }
    }
    function keyLocator(keys) {
      return hint => {
        const key = (keys || {})[hint]
        if (!key) {
          throw new error_1.VerificationError({
            code: 'PUBLIC_KEY_ERROR',
            message: `key not found: ${hint}`
          })
        }
        return {
          publicKey: core_1.crypto.createPublicKey(key.rawBytes),
          validFor: date => {
            /* istanbul ignore next */
            return (
              (key.validFor?.start || BEGINNING_OF_TIME) <= date &&
              (key.validFor?.end || END_OF_TIME) >= date
            )
          }
        }
      }
    }
  })(trust)
  return trust
}

var verifier = {}

var key = {}

var certificate = {}

var hasRequiredCertificate
function requireCertificate() {
  if (hasRequiredCertificate) return certificate
  hasRequiredCertificate = 1
  Object.defineProperty(certificate, '__esModule', {
    value: true
  })
  certificate.CertificateChainVerifier = void 0
  certificate.verifyCertificateChain = verifyCertificateChain
  const error_1 = requireError()
  const trust_1 = requireTrust()
  function verifyCertificateChain(timestamp, leaf, certificateAuthorities) {
    // Filter list of trusted CAs to those which are valid for the given
    // timestamp
    const cas = (0, trust_1.filterCertAuthorities)(
      certificateAuthorities,
      timestamp
    )
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    let error
    for (const ca of cas) {
      try {
        const verifier = new CertificateChainVerifier({
          trustedCerts: ca.certChain,
          untrustedCert: leaf,
          timestamp
        })
        return verifier.verify()
      } catch (err) {
        error = err
      }
    }
    // If we failed to verify the certificate chain for all of the trusted
    // CAs, throw the last error we encountered.
    throw new error_1.VerificationError({
      code: 'CERTIFICATE_ERROR',
      message: 'Failed to verify certificate chain',
      cause: error
    })
  }
  class CertificateChainVerifier {
    constructor(opts) {
      this.untrustedCert = opts.untrustedCert
      this.trustedCerts = opts.trustedCerts
      this.localCerts = dedupeCertificates([
        ...opts.trustedCerts,
        opts.untrustedCert
      ])
      this.timestamp = opts.timestamp
    }
    verify() {
      // Construct certificate path from leaf to root
      const certificatePath = this.sort()
      // Perform validation checks on each certificate in the path
      this.checkPath(certificatePath)
      const validForDate = certificatePath.every(cert =>
        cert.validForDate(this.timestamp)
      )
      if (!validForDate) {
        throw new error_1.VerificationError({
          code: 'CERTIFICATE_ERROR',
          message: 'certificate is not valid or expired at the specified date'
        })
      }
      // Return verified certificate path
      return certificatePath
    }
    sort() {
      const leafCert = this.untrustedCert
      // Construct all possible paths from the leaf
      let paths = this.buildPaths(leafCert)
      // Filter for paths which contain a trusted certificate
      paths = paths.filter(path =>
        path.some(cert => this.trustedCerts.includes(cert))
      )
      if (paths.length === 0) {
        throw new error_1.VerificationError({
          code: 'CERTIFICATE_ERROR',
          message: 'no trusted certificate path found'
        })
      }
      // Find the shortest of possible paths
      /* istanbul ignore next */
      const path = paths.reduce((prev, curr) =>
        prev.length < curr.length ? prev : curr
      )
      // Construct chain from shortest path
      // Removes the last certificate in the path, which will be a second copy
      // of the root certificate given that the root is self-signed.
      return [leafCert, ...path].slice(0, -1)
    }
    // Recursively build all possible paths from the leaf to the root
    buildPaths(certificate) {
      const paths = []
      const issuers = this.findIssuer(certificate)
      if (issuers.length === 0) {
        throw new error_1.VerificationError({
          code: 'CERTIFICATE_ERROR',
          message: 'no valid certificate path found'
        })
      }
      for (let i = 0; i < issuers.length; i++) {
        const issuer = issuers[i]
        // Base case - issuer is self
        if (issuer.equals(certificate)) {
          paths.push([certificate])
          continue
        }
        // Recursively build path for the issuer
        const subPaths = this.buildPaths(issuer)
        // Construct paths by appending the issuer to each subpath
        for (let j = 0; j < subPaths.length; j++) {
          paths.push([issuer, ...subPaths[j]])
        }
      }
      return paths
    }
    // Return all possible issuers for the given certificate
    findIssuer(certificate) {
      let issuers = []
      let keyIdentifier
      // Exit early if the certificate is self-signed
      if (certificate.subject.equals(certificate.issuer)) {
        if (certificate.verify()) {
          return [certificate]
        }
      }
      // If the certificate has an authority key identifier, use that
      // to find the issuer
      if (certificate.extAuthorityKeyID) {
        keyIdentifier = certificate.extAuthorityKeyID.keyIdentifier
        // TODO: Add support for authorityCertIssuer/authorityCertSerialNumber
        // though Fulcio doesn't appear to use these
      }
      // Find possible issuers by comparing the authorityKeyID/subjectKeyID
      // or issuer/subject. Potential issuers are added to the result array.
      this.localCerts.forEach(possibleIssuer => {
        if (keyIdentifier) {
          if (possibleIssuer.extSubjectKeyID) {
            if (
              possibleIssuer.extSubjectKeyID.keyIdentifier.equals(keyIdentifier)
            ) {
              issuers.push(possibleIssuer)
            }
            return
          }
        }
        // Fallback to comparing certificate issuer and subject if
        // subjectKey/authorityKey extensions are not present
        if (possibleIssuer.subject.equals(certificate.issuer)) {
          issuers.push(possibleIssuer)
        }
      })
      // Remove any issuers which fail to verify the certificate
      issuers = issuers.filter(issuer => {
        try {
          return certificate.verify(issuer)
        } catch (ex) {
          /* istanbul ignore next - should never error */
          return false
        }
      })
      return issuers
    }
    checkPath(path) {
      /* istanbul ignore if */
      if (path.length < 1) {
        throw new error_1.VerificationError({
          code: 'CERTIFICATE_ERROR',
          message: 'certificate chain must contain at least one certificate'
        })
      }
      // Ensure that all certificates beyond the leaf are CAs
      const validCAs = path.slice(1).every(cert => cert.isCA)
      if (!validCAs) {
        throw new error_1.VerificationError({
          code: 'CERTIFICATE_ERROR',
          message: 'intermediate certificate is not a CA'
        })
      }
      // Certificate's issuer must match the subject of the next certificate
      // in the chain
      for (let i = path.length - 2; i >= 0; i--) {
        /* istanbul ignore if */
        if (!path[i].issuer.equals(path[i + 1].subject)) {
          throw new error_1.VerificationError({
            code: 'CERTIFICATE_ERROR',
            message: 'incorrect certificate name chaining'
          })
        }
      }
      // Check pathlength constraints
      for (let i = 0; i < path.length; i++) {
        const cert = path[i]
        // If the certificate is a CA, check the path length
        if (cert.extBasicConstraints?.isCA) {
          const pathLength = cert.extBasicConstraints.pathLenConstraint
          // The path length, if set, indicates how many intermediate
          // certificates (NOT including the leaf) are allowed to follow. The
          // pathLength constraint of any intermediate CA certificate MUST be
          // greater than or equal to it's own depth in the chain (with an
          // adjustment for the leaf certificate)
          if (pathLength !== undefined && pathLength < i - 1) {
            throw new error_1.VerificationError({
              code: 'CERTIFICATE_ERROR',
              message: 'path length constraint exceeded'
            })
          }
        }
      }
    }
  }
  certificate.CertificateChainVerifier = CertificateChainVerifier
  // Remove duplicate certificates from the array
  function dedupeCertificates(certs) {
    for (let i = 0; i < certs.length; i++) {
      for (let j = i + 1; j < certs.length; j++) {
        if (certs[i].equals(certs[j])) {
          certs.splice(j, 1)
          j--
        }
      }
    }
    return certs
  }
  return certificate
}

var sct = {}

var hasRequiredSct
function requireSct() {
  if (hasRequiredSct) return sct
  hasRequiredSct = 1
  Object.defineProperty(sct, '__esModule', {
    value: true
  })
  sct.verifySCTs = verifySCTs
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const core_1 = requireDist$6()
  const error_1 = requireError()
  const trust_1 = requireTrust()
  function verifySCTs(cert, issuer, ctlogs) {
    let extSCT
    // Verifying the SCT requires that we remove the SCT extension and
    // re-encode the TBS structure to DER -- this value is part of the data
    // over which the signature is calculated. Since this is a destructive action
    // we create a copy of the certificate so we can remove the SCT extension
    // without affecting the original certificate.
    const clone = cert.clone()
    // Intentionally not using the findExtension method here because we want to
    // remove the the SCT extension from the certificate before calculating the
    // PreCert structure
    for (let i = 0; i < clone.extensions.length; i++) {
      const ext = clone.extensions[i]
      if (ext.subs[0].toOID() === core_1.EXTENSION_OID_SCT) {
        extSCT = new core_1.X509SCTExtension(ext)
        // Remove the extension from the certificate
        clone.extensions.splice(i, 1)
        break
      }
    }
    // No SCT extension found to verify
    if (!extSCT) {
      return []
    }
    // Found an SCT extension but it has no SCTs
    /* istanbul ignore if -- too difficult to fabricate test case for this */
    if (extSCT.signedCertificateTimestamps.length === 0) {
      return []
    }
    // Construct the PreCert structure
    // https://www.rfc-editor.org/rfc/rfc6962#section-3.2
    const preCert = new core_1.ByteStream()
    // Calculate hash of the issuer's public key
    const issuerId = core_1.crypto.digest('sha256', issuer.publicKey)
    preCert.appendView(issuerId)
    // Re-encodes the certificate to DER after removing the SCT extension
    const tbs = clone.tbsCertificate.toDER()
    preCert.appendUint24(tbs.length)
    preCert.appendView(tbs)
    // Calculate and return the verification results for each SCT
    return extSCT.signedCertificateTimestamps.map(sct => {
      // Find the ctlog instance that corresponds to the SCT's logID
      const validCTLogs = (0, trust_1.filterTLogAuthorities)(ctlogs, {
        logID: sct.logID,
        targetDate: sct.datetime
      })
      // See if the SCT is valid for any of the CT logs
      const verified = validCTLogs.some(log =>
        sct.verify(preCert.buffer, log.publicKey)
      )
      if (!verified) {
        throw new error_1.VerificationError({
          code: 'CERTIFICATE_ERROR',
          message: 'SCT verification failed'
        })
      }
      return sct.logID
    })
  }
  return sct
}

var hasRequiredKey
function requireKey() {
  if (hasRequiredKey) return key
  hasRequiredKey = 1
  Object.defineProperty(key, '__esModule', {
    value: true
  })
  key.verifyPublicKey = verifyPublicKey
  key.verifyCertificate = verifyCertificate
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const core_1 = requireDist$6()
  const error_1 = requireError()
  const certificate_1 = requireCertificate()
  const sct_1 = requireSct()
  const OID_FULCIO_ISSUER_V1 = '1.3.6.1.4.1.57264.1.1'
  const OID_FULCIO_ISSUER_V2 = '1.3.6.1.4.1.57264.1.8'
  function verifyPublicKey(hint, timestamps, trustMaterial) {
    const key = trustMaterial.publicKey(hint)
    timestamps.forEach(timestamp => {
      if (!key.validFor(timestamp)) {
        throw new error_1.VerificationError({
          code: 'PUBLIC_KEY_ERROR',
          message: `Public key is not valid for timestamp: ${timestamp.toISOString()}`
        })
      }
    })
    return {
      key: key.publicKey
    }
  }
  function verifyCertificate(leaf, timestamps, trustMaterial) {
    // Check that leaf certificate chains to a trusted CA
    let path = []
    timestamps.forEach(timestamp => {
      path = (0, certificate_1.verifyCertificateChain)(
        timestamp,
        leaf,
        trustMaterial.certificateAuthorities
      )
    })
    return {
      scts: (0, sct_1.verifySCTs)(path[0], path[1], trustMaterial.ctlogs),
      signer: getSigner(path[0])
    }
  }
  function getSigner(cert) {
    let issuer
    const issuerExtension = cert.extension(OID_FULCIO_ISSUER_V2)
    /* istanbul ignore next */
    if (issuerExtension) {
      issuer = issuerExtension.valueObj.subs?.[0]?.value.toString('ascii')
    } else {
      issuer = cert.extension(OID_FULCIO_ISSUER_V1)?.value.toString('ascii')
    }
    const identity = {
      extensions: {
        issuer
      },
      subjectAlternativeName: cert.subjectAltName
    }
    return {
      key: core_1.crypto.createPublicKey(cert.publicKey),
      identity
    }
  }
  return key
}

var policy = {}

var hasRequiredPolicy
function requirePolicy() {
  if (hasRequiredPolicy) return policy
  hasRequiredPolicy = 1
  Object.defineProperty(policy, '__esModule', {
    value: true
  })
  policy.verifySubjectAlternativeName = verifySubjectAlternativeName
  policy.verifyExtensions = verifyExtensions
  const error_1 = requireError()
  function verifySubjectAlternativeName(policyIdentity, signerIdentity) {
    if (signerIdentity === undefined || !signerIdentity.match(policyIdentity)) {
      throw new error_1.PolicyError({
        code: 'UNTRUSTED_SIGNER_ERROR',
        message: `certificate identity error - expected ${policyIdentity}, got ${signerIdentity}`
      })
    }
  }
  function verifyExtensions(policyExtensions, signerExtensions = {}) {
    let key
    for (key in policyExtensions) {
      if (signerExtensions[key] !== policyExtensions[key]) {
        throw new error_1.PolicyError({
          code: 'UNTRUSTED_SIGNER_ERROR',
          message: `invalid certificate extension - expected ${key}=${policyExtensions[key]}, got ${key}=${signerExtensions[key]}`
        })
      }
    }
  }
  return policy
}

var timestamp = {}

var checkpoint = {}

var hasRequiredCheckpoint
function requireCheckpoint() {
  if (hasRequiredCheckpoint) return checkpoint
  hasRequiredCheckpoint = 1
  Object.defineProperty(checkpoint, '__esModule', {
    value: true
  })
  checkpoint.verifyCheckpoint = verifyCheckpoint
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const core_1 = requireDist$6()
  const error_1 = requireError()
  const trust_1 = requireTrust()
  // Separator between the note and the signatures in a checkpoint
  const CHECKPOINT_SEPARATOR = '\n\n'
  // Checkpoint signatures are of the following form:
  // "– <identity> <key_hint+signature_bytes>\n"
  // where:
  // - the prefix is an emdash (U+2014).
  // - <identity> gives a human-readable representation of the signing ID.
  // - <key_hint+signature_bytes> is the first 4 bytes of the SHA256 hash of the
  //   associated public key followed by the signature bytes.
  const SIGNATURE_REGEX = /\u2014 (\S+) (\S+)\n/g
  // Verifies the checkpoint value in the given tlog entry. There are two steps
  // to the verification:
  // 1. Verify that all signatures in the checkpoint can be verified against a
  //    trusted public key
  // 2. Verify that the root hash in the checkpoint matches the root hash in the
  //    inclusion proof
  // See: https://github.com/transparency-dev/formats/blob/main/log/README.md
  function verifyCheckpoint(entry, tlogs) {
    // Filter tlog instances to just those which were valid at the time of the
    // entry
    const validTLogs = (0, trust_1.filterTLogAuthorities)(tlogs, {
      targetDate: new Date(Number(entry.integratedTime) * 1000)
    })
    const inclusionProof = entry.inclusionProof
    const signedNote = SignedNote.fromString(inclusionProof.checkpoint.envelope)
    const checkpoint = LogCheckpoint.fromString(signedNote.note)
    // Verify that the signatures in the checkpoint are all valid
    if (!verifySignedNote(signedNote, validTLogs)) {
      throw new error_1.VerificationError({
        code: 'TLOG_INCLUSION_PROOF_ERROR',
        message: 'invalid checkpoint signature'
      })
    }
    // Verify that the root hash from the checkpoint matches the root hash in the
    // inclusion proof
    if (
      !core_1.crypto.bufferEqual(checkpoint.logHash, inclusionProof.rootHash)
    ) {
      throw new error_1.VerificationError({
        code: 'TLOG_INCLUSION_PROOF_ERROR',
        message: 'root hash mismatch'
      })
    }
  }
  // Verifies the signatures in the SignedNote. For each signature, the
  // corresponding transparency log is looked up by the key hint and the
  // signature is verified against the public key in the transparency log.
  // Throws an error if any of the signatures are invalid.
  function verifySignedNote(signedNote, tlogs) {
    const data = Buffer.from(signedNote.note, 'utf-8')
    return signedNote.signatures.every(signature => {
      // Find the transparency log instance with the matching key hint
      const tlog = tlogs.find(tlog =>
        core_1.crypto.bufferEqual(tlog.logID.subarray(0, 4), signature.keyHint)
      )
      if (!tlog) {
        return false
      }
      return core_1.crypto.verify(data, tlog.publicKey, signature.signature)
    })
  }
  // SignedNote represents a signed note from a transparency log checkpoint. Consists
  // of a body (or note) and one more signatures calculated over the body. See
  // https://github.com/transparency-dev/formats/blob/main/log/README.md#signed-envelope
  class SignedNote {
    constructor(note, signatures) {
      this.note = note
      this.signatures = signatures
    }
    // Deserialize a SignedNote from a string
    static fromString(envelope) {
      if (!envelope.includes(CHECKPOINT_SEPARATOR)) {
        throw new error_1.VerificationError({
          code: 'TLOG_INCLUSION_PROOF_ERROR',
          message: 'missing checkpoint separator'
        })
      }
      // Split the note into the header and the data portions at the separator
      const split = envelope.indexOf(CHECKPOINT_SEPARATOR)
      const header = envelope.slice(0, split + 1)
      const data = envelope.slice(split + CHECKPOINT_SEPARATOR.length)
      // Find all the signature lines in the data portion
      const matches = data.matchAll(SIGNATURE_REGEX)
      // Parse each of the matched signature lines into the name and signature.
      // The first four bytes of the signature are the key hint (should match the
      // first four bytes of the log ID), and the rest is the signature itself.
      const signatures = Array.from(matches, match => {
        const [, name, signature] = match
        const sigBytes = Buffer.from(signature, 'base64')
        if (sigBytes.length < 5) {
          throw new error_1.VerificationError({
            code: 'TLOG_INCLUSION_PROOF_ERROR',
            message: 'malformed checkpoint signature'
          })
        }
        return {
          name,
          keyHint: sigBytes.subarray(0, 4),
          signature: sigBytes.subarray(4)
        }
      })
      if (signatures.length === 0) {
        throw new error_1.VerificationError({
          code: 'TLOG_INCLUSION_PROOF_ERROR',
          message: 'no signatures found in checkpoint'
        })
      }
      return new SignedNote(header, signatures)
    }
  }
  // LogCheckpoint represents a transparency log checkpoint. Consists of the
  // following:
  //  - origin: the name of the transparency log
  //  - logSize: the size of the log at the time of the checkpoint
  //  - logHash: the root hash of the log at the time of the checkpoint
  //  - rest: the rest of the checkpoint body, which is a list of log entries
  // See:
  // https://github.com/transparency-dev/formats/blob/main/log/README.md#checkpoint-body
  class LogCheckpoint {
    constructor(origin, logSize, logHash, rest) {
      this.origin = origin
      this.logSize = logSize
      this.logHash = logHash
      this.rest = rest
    }
    static fromString(note) {
      const lines = note.trimEnd().split('\n')
      if (lines.length < 3) {
        throw new error_1.VerificationError({
          code: 'TLOG_INCLUSION_PROOF_ERROR',
          message: 'too few lines in checkpoint header'
        })
      }
      const origin = lines[0]
      const logSize = BigInt(lines[1])
      const rootHash = Buffer.from(lines[2], 'base64')
      const rest = lines.slice(3)
      return new LogCheckpoint(origin, logSize, rootHash, rest)
    }
  }
  return checkpoint
}

var merkle = {}

var hasRequiredMerkle
function requireMerkle() {
  if (hasRequiredMerkle) return merkle
  hasRequiredMerkle = 1
  Object.defineProperty(merkle, '__esModule', {
    value: true
  })
  merkle.verifyMerkleInclusion = verifyMerkleInclusion
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const core_1 = requireDist$6()
  const error_1 = requireError()
  const RFC6962_LEAF_HASH_PREFIX = Buffer.from([0x00])
  const RFC6962_NODE_HASH_PREFIX = Buffer.from([0x01])
  function verifyMerkleInclusion(entry) {
    const inclusionProof = entry.inclusionProof
    const logIndex = BigInt(inclusionProof.logIndex)
    const treeSize = BigInt(inclusionProof.treeSize)
    if (logIndex < 0n || logIndex >= treeSize) {
      throw new error_1.VerificationError({
        code: 'TLOG_INCLUSION_PROOF_ERROR',
        message: `invalid index: ${logIndex}`
      })
    }
    // Figure out which subset of hashes corresponds to the inner and border
    // nodes
    const { inner, border } = decompInclProof(logIndex, treeSize)
    if (inclusionProof.hashes.length !== inner + border) {
      throw new error_1.VerificationError({
        code: 'TLOG_INCLUSION_PROOF_ERROR',
        message: 'invalid hash count'
      })
    }
    const innerHashes = inclusionProof.hashes.slice(0, inner)
    const borderHashes = inclusionProof.hashes.slice(inner)
    // The entry's hash is the leaf hash
    const leafHash = hashLeaf(entry.canonicalizedBody)
    // Chain the hashes belonging to the inner and border portions
    const calculatedHash = chainBorderRight(
      chainInner(leafHash, innerHashes, logIndex),
      borderHashes
    )
    // Calculated hash should match the root hash in the inclusion proof
    if (!core_1.crypto.bufferEqual(calculatedHash, inclusionProof.rootHash)) {
      throw new error_1.VerificationError({
        code: 'TLOG_INCLUSION_PROOF_ERROR',
        message: 'calculated root hash does not match inclusion proof'
      })
    }
  }
  // Breaks down inclusion proof for a leaf at the specified index in a tree of
  // the specified size. The split point is where paths to the index leaf and
  // the (size - 1) leaf diverge. Returns lengths of the bottom and upper proof
  // parts.
  function decompInclProof(index, size) {
    const inner = innerProofSize(index, size)
    const border = onesCount(index >> BigInt(inner))
    return {
      inner,
      border
    }
  }
  // Computes a subtree hash for a node on or below the tree's right border.
  // Assumes the provided proof hashes are ordered from lower to higher levels
  // and seed is the initial hash of the node specified by the index.
  function chainInner(seed, hashes, index) {
    return hashes.reduce((acc, h, i) => {
      if ((index >> BigInt(i)) & BigInt(1)) {
        return hashChildren(h, acc)
      } else {
        return hashChildren(acc, h)
      }
    }, seed)
  }
  // Computes a subtree hash for nodes along the tree's right border.
  function chainBorderRight(seed, hashes) {
    return hashes.reduce((acc, h) => hashChildren(h, acc), seed)
  }
  function innerProofSize(index, size) {
    return bitLength(index ^ (size - BigInt(1)))
  }
  // Counts the number of ones in the binary representation of the given number.
  // https://en.wikipedia.org/wiki/Hamming_weight
  function onesCount(num) {
    return num.toString(2).split('1').length - 1
  }
  // Returns the number of bits necessary to represent an integer in binary.
  function bitLength(n) {
    if (n === 0n) {
      return 0
    }
    return n.toString(2).length
  }
  // Hashing logic according to RFC6962.
  // https://datatracker.ietf.org/doc/html/rfc6962#section-2
  function hashChildren(left, right) {
    return core_1.crypto.digest('sha256', RFC6962_NODE_HASH_PREFIX, left, right)
  }
  function hashLeaf(leaf) {
    return core_1.crypto.digest('sha256', RFC6962_LEAF_HASH_PREFIX, leaf)
  }
  return merkle
}

var set = {}

var hasRequiredSet
function requireSet() {
  if (hasRequiredSet) return set
  hasRequiredSet = 1
  Object.defineProperty(set, '__esModule', {
    value: true
  })
  set.verifyTLogSET = verifyTLogSET
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const core_1 = requireDist$6()
  const error_1 = requireError()
  const trust_1 = requireTrust()
  // Verifies the SET for the given entry against the list of trusted
  // transparency logs. Returns true if the SET can be verified against at least
  // one of the trusted logs; otherwise, returns false.
  function verifyTLogSET(entry, tlogs) {
    // Filter the list of tlog instances to only those which might be able to
    // verify the SET
    const validTLogs = (0, trust_1.filterTLogAuthorities)(tlogs, {
      logID: entry.logId.keyId,
      targetDate: new Date(Number(entry.integratedTime) * 1000)
    })
    // Check to see if we can verify the SET against any of the valid tlogs
    const verified = validTLogs.some(tlog => {
      // Re-create the original Rekor verification payload
      const payload = toVerificationPayload(entry)
      // Canonicalize the payload and turn into a buffer for verification
      const data = Buffer.from(core_1.json.canonicalize(payload), 'utf8')
      // Extract the SET from the tlog entry
      const signature = entry.inclusionPromise.signedEntryTimestamp
      return core_1.crypto.verify(data, tlog.publicKey, signature)
    })
    if (!verified) {
      throw new error_1.VerificationError({
        code: 'TLOG_INCLUSION_PROMISE_ERROR',
        message: 'inclusion promise could not be verified'
      })
    }
  }
  // Returns a properly formatted "VerificationPayload" for one of the
  // transaction log entires in the given bundle which can be used for SET
  // verification.
  function toVerificationPayload(entry) {
    const { integratedTime, logIndex, logId, canonicalizedBody } = entry
    return {
      body: canonicalizedBody.toString('base64'),
      integratedTime: Number(integratedTime),
      logIndex: Number(logIndex),
      logID: logId.keyId.toString('hex')
    }
  }
  return set
}

var tsa = {}

var hasRequiredTsa
function requireTsa() {
  if (hasRequiredTsa) return tsa
  hasRequiredTsa = 1
  Object.defineProperty(tsa, '__esModule', {
    value: true
  })
  tsa.verifyRFC3161Timestamp = verifyRFC3161Timestamp
  const core_1 = requireDist$6()
  const error_1 = requireError()
  const certificate_1 = requireCertificate()
  const trust_1 = requireTrust()
  function verifyRFC3161Timestamp(timestamp, data, timestampAuthorities) {
    const signingTime = timestamp.signingTime
    // Filter for CAs which were valid at the time of signing
    timestampAuthorities = (0, trust_1.filterCertAuthorities)(
      timestampAuthorities,
      signingTime
    )
    // Filter for CAs which match serial and issuer embedded in the timestamp
    timestampAuthorities = filterCAsBySerialAndIssuer(timestampAuthorities, {
      serialNumber: timestamp.signerSerialNumber,
      issuer: timestamp.signerIssuer
    })
    // Check that we can verify the timestamp with AT LEAST ONE of the remaining
    // CAs
    const verified = timestampAuthorities.some(ca => {
      try {
        verifyTimestampForCA(timestamp, data, ca)
        return true
      } catch (e) {
        return false
      }
    })
    if (!verified) {
      throw new error_1.VerificationError({
        code: 'TIMESTAMP_ERROR',
        message: 'timestamp could not be verified'
      })
    }
  }
  function verifyTimestampForCA(timestamp, data, ca) {
    const [leaf, ...cas] = ca.certChain
    const signingKey = core_1.crypto.createPublicKey(leaf.publicKey)
    const signingTime = timestamp.signingTime
    // Verify the certificate chain for the provided CA
    try {
      new certificate_1.CertificateChainVerifier({
        untrustedCert: leaf,
        trustedCerts: cas,
        timestamp: signingTime
      }).verify()
    } catch (e) {
      throw new error_1.VerificationError({
        code: 'TIMESTAMP_ERROR',
        message: 'invalid certificate chain'
      })
    }
    // Check that the signing certificate's key can be used to verify the
    // timestamp signature.
    timestamp.verify(data, signingKey)
  }
  // Filters the list of CAs to those which have a leaf signing certificate which
  // matches the given serial number and issuer.
  function filterCAsBySerialAndIssuer(timestampAuthorities, criteria) {
    return timestampAuthorities.filter(
      ca =>
        ca.certChain.length > 0 &&
        core_1.crypto.bufferEqual(
          ca.certChain[0].serialNumber,
          criteria.serialNumber
        ) &&
        core_1.crypto.bufferEqual(ca.certChain[0].issuer, criteria.issuer)
    )
  }
  return tsa
}

var hasRequiredTimestamp
function requireTimestamp() {
  if (hasRequiredTimestamp) return timestamp
  hasRequiredTimestamp = 1
  Object.defineProperty(timestamp, '__esModule', {
    value: true
  })
  timestamp.verifyTSATimestamp = verifyTSATimestamp
  timestamp.verifyTLogTimestamp = verifyTLogTimestamp
  const error_1 = requireError()
  const checkpoint_1 = requireCheckpoint()
  const merkle_1 = requireMerkle()
  const set_1 = requireSet()
  const tsa_1 = requireTsa()
  function verifyTSATimestamp(timestamp, data, timestampAuthorities) {
    ;(0, tsa_1.verifyRFC3161Timestamp)(timestamp, data, timestampAuthorities)
    return {
      type: 'timestamp-authority',
      logID: timestamp.signerSerialNumber,
      timestamp: timestamp.signingTime
    }
  }
  function verifyTLogTimestamp(entry, tlogAuthorities) {
    let inclusionVerified = false
    if (isTLogEntryWithInclusionPromise(entry)) {
      ;(0, set_1.verifyTLogSET)(entry, tlogAuthorities)
      inclusionVerified = true
    }
    if (isTLogEntryWithInclusionProof(entry)) {
      ;(0, merkle_1.verifyMerkleInclusion)(entry)
      ;(0, checkpoint_1.verifyCheckpoint)(entry, tlogAuthorities)
      inclusionVerified = true
    }
    if (!inclusionVerified) {
      throw new error_1.VerificationError({
        code: 'TLOG_MISSING_INCLUSION_ERROR',
        message: 'inclusion could not be verified'
      })
    }
    return {
      type: 'transparency-log',
      logID: entry.logId.keyId,
      timestamp: new Date(Number(entry.integratedTime) * 1000)
    }
  }
  function isTLogEntryWithInclusionPromise(entry) {
    return entry.inclusionPromise !== undefined
  }
  function isTLogEntryWithInclusionProof(entry) {
    return entry.inclusionProof !== undefined
  }
  return timestamp
}

var tlog = {}

var dsse = {}

var hasRequiredDsse
function requireDsse() {
  if (hasRequiredDsse) return dsse
  hasRequiredDsse = 1
  Object.defineProperty(dsse, '__esModule', {
    value: true
  })
  dsse.verifyDSSETLogBody = verifyDSSETLogBody
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError()
  // Compare the given intoto tlog entry to the given bundle
  function verifyDSSETLogBody(tlogEntry, content) {
    switch (tlogEntry.apiVersion) {
      case '0.0.1':
        return verifyDSSE001TLogBody(tlogEntry, content)
      default:
        throw new error_1.VerificationError({
          code: 'TLOG_BODY_ERROR',
          message: `unsupported dsse version: ${tlogEntry.apiVersion}`
        })
    }
  }
  // Compare the given dsse v0.0.1 tlog entry to the given DSSE envelope.
  function verifyDSSE001TLogBody(tlogEntry, content) {
    // Ensure the bundle's DSSE only contains a single signature
    if (tlogEntry.spec.signatures?.length !== 1) {
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: 'signature count mismatch'
      })
    }
    const tlogSig = tlogEntry.spec.signatures[0].signature
    // Ensure that the signature in the bundle's DSSE matches tlog entry
    if (!content.compareSignature(Buffer.from(tlogSig, 'base64')))
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: 'tlog entry signature mismatch'
      })
    // Ensure the digest of the bundle's DSSE payload matches the digest in the
    // tlog entry
    const tlogHash = tlogEntry.spec.payloadHash?.value || ''
    if (!content.compareDigest(Buffer.from(tlogHash, 'hex'))) {
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: 'DSSE payload hash mismatch'
      })
    }
  }
  return dsse
}

var hashedrekord = {}

var hasRequiredHashedrekord
function requireHashedrekord() {
  if (hasRequiredHashedrekord) return hashedrekord
  hasRequiredHashedrekord = 1
  Object.defineProperty(hashedrekord, '__esModule', {
    value: true
  })
  hashedrekord.verifyHashedRekordTLogBody = verifyHashedRekordTLogBody
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError()
  // Compare the given hashedrekord tlog entry to the given bundle
  function verifyHashedRekordTLogBody(tlogEntry, content) {
    switch (tlogEntry.apiVersion) {
      case '0.0.1':
        return verifyHashedrekord001TLogBody(tlogEntry, content)
      default:
        throw new error_1.VerificationError({
          code: 'TLOG_BODY_ERROR',
          message: `unsupported hashedrekord version: ${tlogEntry.apiVersion}`
        })
    }
  }
  // Compare the given hashedrekord v0.0.1 tlog entry to the given message
  // signature
  function verifyHashedrekord001TLogBody(tlogEntry, content) {
    // Ensure that the bundles message signature matches the tlog entry
    const tlogSig = tlogEntry.spec.signature.content || ''
    if (!content.compareSignature(Buffer.from(tlogSig, 'base64'))) {
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: 'signature mismatch'
      })
    }
    // Ensure that the bundle's message digest matches the tlog entry
    const tlogDigest = tlogEntry.spec.data.hash?.value || ''
    if (!content.compareDigest(Buffer.from(tlogDigest, 'hex'))) {
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: 'digest mismatch'
      })
    }
  }
  return hashedrekord
}

var intoto = {}

var hasRequiredIntoto
function requireIntoto() {
  if (hasRequiredIntoto) return intoto
  hasRequiredIntoto = 1
  Object.defineProperty(intoto, '__esModule', {
    value: true
  })
  intoto.verifyIntotoTLogBody = verifyIntotoTLogBody
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError()
  // Compare the given intoto tlog entry to the given bundle
  function verifyIntotoTLogBody(tlogEntry, content) {
    switch (tlogEntry.apiVersion) {
      case '0.0.2':
        return verifyIntoto002TLogBody(tlogEntry, content)
      default:
        throw new error_1.VerificationError({
          code: 'TLOG_BODY_ERROR',
          message: `unsupported intoto version: ${tlogEntry.apiVersion}`
        })
    }
  }
  // Compare the given intoto v0.0.2 tlog entry to the given DSSE envelope.
  function verifyIntoto002TLogBody(tlogEntry, content) {
    // Ensure the bundle's DSSE contains a single signature
    if (tlogEntry.spec.content.envelope.signatures?.length !== 1) {
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: 'signature count mismatch'
      })
    }
    // Signature is double-base64-encoded in the tlog entry
    const tlogSig = base64Decode(
      tlogEntry.spec.content.envelope.signatures[0].sig
    )
    // Ensure that the signature in the bundle's DSSE matches tlog entry
    if (!content.compareSignature(Buffer.from(tlogSig, 'base64'))) {
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: 'tlog entry signature mismatch'
      })
    }
    // Ensure the digest of the bundle's DSSE payload matches the digest in the
    // tlog entry
    const tlogHash = tlogEntry.spec.content.payloadHash?.value || ''
    if (!content.compareDigest(Buffer.from(tlogHash, 'hex'))) {
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: 'DSSE payload hash mismatch'
      })
    }
  }
  function base64Decode(str) {
    return Buffer.from(str, 'base64').toString('utf-8')
  }
  return intoto
}

var hasRequiredTlog
function requireTlog() {
  if (hasRequiredTlog) return tlog
  hasRequiredTlog = 1
  Object.defineProperty(tlog, '__esModule', {
    value: true
  })
  tlog.verifyTLogBody = verifyTLogBody
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const error_1 = requireError()
  const dsse_1 = requireDsse()
  const hashedrekord_1 = requireHashedrekord()
  const intoto_1 = requireIntoto()
  // Verifies that the given tlog entry matches the supplied signature content.
  function verifyTLogBody(entry, sigContent) {
    const { kind, version } = entry.kindVersion
    const body = JSON.parse(entry.canonicalizedBody.toString('utf8'))
    if (kind !== body.kind || version !== body.apiVersion) {
      throw new error_1.VerificationError({
        code: 'TLOG_BODY_ERROR',
        message: `kind/version mismatch - expected: ${kind}/${version}, received: ${body.kind}/${body.apiVersion}`
      })
    }
    switch (body.kind) {
      case 'dsse':
        return (0, dsse_1.verifyDSSETLogBody)(body, sigContent)
      case 'intoto':
        return (0, intoto_1.verifyIntotoTLogBody)(body, sigContent)
      case 'hashedrekord':
        return (0, hashedrekord_1.verifyHashedRekordTLogBody)(body, sigContent)
      /* istanbul ignore next */
      default:
        throw new error_1.VerificationError({
          code: 'TLOG_BODY_ERROR',
          message: `unsupported kind: ${kind}`
        })
    }
  }
  return tlog
}

var hasRequiredVerifier
function requireVerifier() {
  if (hasRequiredVerifier) return verifier
  hasRequiredVerifier = 1
  Object.defineProperty(verifier, '__esModule', {
    value: true
  })
  verifier.Verifier = void 0
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const util_1 = require$$0$e
  const error_1 = requireError()
  const key_1 = requireKey()
  const policy_1 = requirePolicy()
  const timestamp_1 = requireTimestamp()
  const tlog_1 = requireTlog()
  class Verifier {
    constructor(trustMaterial, options = {}) {
      this.trustMaterial = trustMaterial
      this.options = {
        ctlogThreshold: options.ctlogThreshold ?? 1,
        tlogThreshold: options.tlogThreshold ?? 1,
        tsaThreshold: options.tsaThreshold ?? 0
      }
    }
    verify(entity, policy) {
      const timestamps = this.verifyTimestamps(entity)
      const signer = this.verifySigningKey(entity, timestamps)
      this.verifyTLogs(entity)
      this.verifySignature(entity, signer)
      if (policy) {
        this.verifyPolicy(policy, signer.identity || {})
      }
      return signer
    }
    // Checks that all of the timestamps in the entity are valid and returns them
    verifyTimestamps(entity) {
      let tlogCount = 0
      let tsaCount = 0
      const timestamps = entity.timestamps.map(timestamp => {
        switch (timestamp.$case) {
          case 'timestamp-authority':
            tsaCount++
            return (0, timestamp_1.verifyTSATimestamp)(
              timestamp.timestamp,
              entity.signature.signature,
              this.trustMaterial.timestampAuthorities
            )
          case 'transparency-log':
            tlogCount++
            return (0, timestamp_1.verifyTLogTimestamp)(
              timestamp.tlogEntry,
              this.trustMaterial.tlogs
            )
        }
      })
      // Check for duplicate timestamps
      if (containsDupes(timestamps)) {
        throw new error_1.VerificationError({
          code: 'TIMESTAMP_ERROR',
          message: 'duplicate timestamp'
        })
      }
      if (tlogCount < this.options.tlogThreshold) {
        throw new error_1.VerificationError({
          code: 'TIMESTAMP_ERROR',
          message: `expected ${this.options.tlogThreshold} tlog timestamps, got ${tlogCount}`
        })
      }
      if (tsaCount < this.options.tsaThreshold) {
        throw new error_1.VerificationError({
          code: 'TIMESTAMP_ERROR',
          message: `expected ${this.options.tsaThreshold} tsa timestamps, got ${tsaCount}`
        })
      }
      return timestamps.map(t => t.timestamp)
    }
    // Checks that the signing key is valid for all of the the supplied timestamps
    // and returns the signer.
    verifySigningKey({ key }, timestamps) {
      switch (key.$case) {
        case 'public-key': {
          return (0, key_1.verifyPublicKey)(
            key.hint,
            timestamps,
            this.trustMaterial
          )
        }
        case 'certificate': {
          const result = (0, key_1.verifyCertificate)(
            key.certificate,
            timestamps,
            this.trustMaterial
          )
          /* istanbul ignore next - no fixture */
          if (containsDupes(result.scts)) {
            throw new error_1.VerificationError({
              code: 'CERTIFICATE_ERROR',
              message: 'duplicate SCT'
            })
          }
          if (result.scts.length < this.options.ctlogThreshold) {
            throw new error_1.VerificationError({
              code: 'CERTIFICATE_ERROR',
              message: `expected ${this.options.ctlogThreshold} SCTs, got ${result.scts.length}`
            })
          }
          return result.signer
        }
      }
    }
    // Checks that the tlog entries are valid for the supplied content
    verifyTLogs({ signature: content, tlogEntries }) {
      tlogEntries.forEach(entry => (0, tlog_1.verifyTLogBody)(entry, content))
    }
    // Checks that the signature is valid for the supplied content
    verifySignature(entity, signer) {
      if (!entity.signature.verifySignature(signer.key)) {
        throw new error_1.VerificationError({
          code: 'SIGNATURE_ERROR',
          message: 'signature verification failed'
        })
      }
    }
    verifyPolicy(policy, identity) {
      // Check the subject alternative name of the signer matches the policy
      if (policy.subjectAlternativeName) {
        ;(0, policy_1.verifySubjectAlternativeName)(
          policy.subjectAlternativeName,
          identity.subjectAlternativeName
        )
      }
      // Check that the extensions of the signer match the policy
      if (policy.extensions) {
        ;(0, policy_1.verifyExtensions)(policy.extensions, identity.extensions)
      }
    }
  }
  verifier.Verifier = Verifier
  // Checks for duplicate items in the array. Objects are compared using
  // deep equality.
  function containsDupes(arr) {
    for (let i = 0; i < arr.length; i++) {
      for (let j = i + 1; j < arr.length; j++) {
        if ((0, util_1.isDeepStrictEqual)(arr[i], arr[j])) {
          return true
        }
      }
    }
    return false
  }
  return verifier
}

var hasRequiredDist$1
function requireDist$1() {
  if (hasRequiredDist$1) return dist
  hasRequiredDist$1 = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.Verifier =
      exports.toTrustMaterial =
      exports.VerificationError =
      exports.PolicyError =
      exports.toSignedEntity =
        void 0
    /* istanbul ignore file */
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var bundle_1 = requireBundle()
    Object.defineProperty(exports, 'toSignedEntity', {
      enumerable: true,
      get: function () {
        return bundle_1.toSignedEntity
      }
    })
    var error_1 = requireError()
    Object.defineProperty(exports, 'PolicyError', {
      enumerable: true,
      get: function () {
        return error_1.PolicyError
      }
    })
    Object.defineProperty(exports, 'VerificationError', {
      enumerable: true,
      get: function () {
        return error_1.VerificationError
      }
    })
    var trust_1 = requireTrust()
    Object.defineProperty(exports, 'toTrustMaterial', {
      enumerable: true,
      get: function () {
        return trust_1.toTrustMaterial
      }
    })
    var verifier_1 = requireVerifier()
    Object.defineProperty(exports, 'Verifier', {
      enumerable: true,
      get: function () {
        return verifier_1.Verifier
      }
    })
  })(dist)
  return dist
}

var sigstore = {}

var config = {}

var hasRequiredConfig
function requireConfig() {
  if (hasRequiredConfig) return config
  hasRequiredConfig = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.DEFAULT_TIMEOUT = exports.DEFAULT_RETRY = void 0
    exports.createBundleBuilder = createBundleBuilder
    exports.createKeyFinder = createKeyFinder
    exports.createVerificationPolicy = createVerificationPolicy
    /*
    Copyright 2023 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const core_1 = requireDist$6()
    const sign_1 = requireDist$5()
    const verify_1 = requireDist$1()
    exports.DEFAULT_RETRY = {
      retries: 2
    }
    exports.DEFAULT_TIMEOUT = 5000
    function createBundleBuilder(bundleType, options) {
      const bundlerOptions = {
        signer: initSigner(options),
        witnesses: initWitnesses(options)
      }
      switch (bundleType) {
        case 'messageSignature':
          return new sign_1.MessageSignatureBundleBuilder(bundlerOptions)
        case 'dsseEnvelope':
          return new sign_1.DSSEBundleBuilder({
            ...bundlerOptions,
            certificateChain: options.legacyCompatibility
          })
      }
    }
    // Translates the public KeySelector type into the KeyFinderFunc type needed by
    // the verifier.
    function createKeyFinder(keySelector) {
      return hint => {
        const key = keySelector(hint)
        if (!key) {
          throw new verify_1.VerificationError({
            code: 'PUBLIC_KEY_ERROR',
            message: `key not found: ${hint}`
          })
        }
        return {
          publicKey: core_1.crypto.createPublicKey(key),
          validFor: () => true
        }
      }
    }
    function createVerificationPolicy(options) {
      const policy = {}
      const san =
        options.certificateIdentityEmail || options.certificateIdentityURI
      if (san) {
        policy.subjectAlternativeName = san
      }
      if (options.certificateIssuer) {
        policy.extensions = {
          issuer: options.certificateIssuer
        }
      }
      return policy
    }
    // Instantiate the FulcioSigner based on the supplied options.
    function initSigner(options) {
      return new sign_1.FulcioSigner({
        fulcioBaseURL: options.fulcioURL,
        identityProvider:
          options.identityProvider || initIdentityProvider(options),
        retry: options.retry ?? exports.DEFAULT_RETRY,
        timeout: options.timeout ?? exports.DEFAULT_TIMEOUT
      })
    }
    // Instantiate an identity provider based on the supplied options. If an
    // explicit identity token is provided, use that. Otherwise, use the CI
    // context provider.
    function initIdentityProvider(options) {
      const token = options.identityToken
      if (token) {
        /* istanbul ignore next */
        return {
          getToken: () => Promise.resolve(token)
        }
      } else {
        return new sign_1.CIContextProvider('sigstore')
      }
    }
    // Instantiate a collection of witnesses based on the supplied options.
    function initWitnesses(options) {
      const witnesses = []
      if (isRekorEnabled(options)) {
        witnesses.push(
          new sign_1.RekorWitness({
            rekorBaseURL: options.rekorURL,
            entryType: options.legacyCompatibility ? 'intoto' : 'dsse',
            fetchOnConflict: false,
            retry: options.retry ?? exports.DEFAULT_RETRY,
            timeout: options.timeout ?? exports.DEFAULT_TIMEOUT
          })
        )
      }
      if (isTSAEnabled(options)) {
        witnesses.push(
          new sign_1.TSAWitness({
            tsaBaseURL: options.tsaServerURL,
            retry: options.retry ?? exports.DEFAULT_RETRY,
            timeout: options.timeout ?? exports.DEFAULT_TIMEOUT
          })
        )
      }
      return witnesses
    }
    // Type assertion to ensure that Rekor is enabled
    function isRekorEnabled(options) {
      return options.tlogUpload !== false
    }
    // Type assertion to ensure that TSA is enabled
    function isTSAEnabled(options) {
      return options.tsaServerURL !== undefined
    }
  })(config)
  return config
}

var hasRequiredSigstore
function requireSigstore() {
  if (hasRequiredSigstore) return sigstore
  hasRequiredSigstore = 1
  var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          var desc = Object.getOwnPropertyDescriptor(m, k)
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k]
              }
            }
          }
          Object.defineProperty(o, k2, desc)
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k
          o[k2] = m[k]
        })
  var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v
          })
        }
      : function (o, v) {
          o['default'] = v
        })
  var __importStar =
    (this && this.__importStar) ||
    (function () {
      var ownKeys = function (o) {
        ownKeys =
          Object.getOwnPropertyNames ||
          function (o) {
            var ar = []
            for (var k in o)
              if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k
            return ar
          }
        return ownKeys(o)
      }
      return function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k = ownKeys(mod), i = 0; i < k.length; i++)
            if (k[i] !== 'default') __createBinding(result, mod, k[i])
        __setModuleDefault(result, mod)
        return result
      }
    })()
  Object.defineProperty(sigstore, '__esModule', {
    value: true
  })
  sigstore.sign = sign
  sigstore.attest = attest
  sigstore.verify = verify
  sigstore.createVerifier = createVerifier
  /*
  Copyright 2023 The Sigstore Authors.
  	Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  	    http://www.apache.org/licenses/LICENSE-2.0
  	Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const bundle_1 = requireDist$7()
  const tuf = __importStar(requireDist$2())
  const verify_1 = requireDist$1()
  const config = __importStar(requireConfig())
  async function sign(payload /* istanbul ignore next */, options = {}) {
    const bundler = config.createBundleBuilder('messageSignature', options)
    const bundle = await bundler.create({
      data: payload
    })
    return (0, bundle_1.bundleToJSON)(bundle)
  }
  async function attest(
    payload,
    payloadType /* istanbul ignore next */,
    options = {}
  ) {
    const bundler = config.createBundleBuilder('dsseEnvelope', options)
    const bundle = await bundler.create({
      data: payload,
      type: payloadType
    })
    return (0, bundle_1.bundleToJSON)(bundle)
  }
  async function verify(bundle, dataOrOptions, options) {
    let data
    if (Buffer.isBuffer(dataOrOptions)) {
      data = dataOrOptions
    } else {
      options = dataOrOptions
    }
    return createVerifier(options).then(verifier =>
      verifier.verify(bundle, data)
    )
  }
  async function createVerifier(/* istanbul ignore next */ options = {}) {
    const trustedRoot = await tuf.getTrustedRoot({
      mirrorURL: options.tufMirrorURL,
      rootPath: options.tufRootPath,
      cachePath: options.tufCachePath,
      forceCache: options.tufForceCache,
      retry: options.retry ?? config.DEFAULT_RETRY,
      timeout: options.timeout ?? config.DEFAULT_TIMEOUT
    })
    const keyFinder = options.keySelector
      ? config.createKeyFinder(options.keySelector)
      : undefined
    const trustMaterial = (0, verify_1.toTrustMaterial)(trustedRoot, keyFinder)
    const verifierOptions = {
      ctlogThreshold: options.ctLogThreshold,
      tlogThreshold: options.tlogThreshold
    }
    const verifier = new verify_1.Verifier(trustMaterial, verifierOptions)
    const policy = config.createVerificationPolicy(options)
    return {
      verify: (bundle, payload) => {
        const deserializedBundle = (0, bundle_1.bundleFromJSON)(bundle)
        const signedEntity = (0, verify_1.toSignedEntity)(
          deserializedBundle,
          payload
        )
        verifier.verify(signedEntity, policy)
        return
      }
    }
  }
  return sigstore
}

var hasRequiredDist
function requireDist() {
  if (hasRequiredDist) return dist$8
  hasRequiredDist = 1
  ;(function (exports) {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.verify =
      exports.sign =
      exports.createVerifier =
      exports.attest =
      exports.VerificationError =
      exports.PolicyError =
      exports.TUFError =
      exports.InternalError =
      exports.DEFAULT_REKOR_URL =
      exports.DEFAULT_FULCIO_URL =
      exports.ValidationError =
        void 0
    /*
    Copyright 2022 The Sigstore Authors.
    	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	    http://www.apache.org/licenses/LICENSE-2.0
    	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    var bundle_1 = requireDist$7()
    Object.defineProperty(exports, 'ValidationError', {
      enumerable: true,
      get: function () {
        return bundle_1.ValidationError
      }
    })
    var sign_1 = requireDist$5()
    Object.defineProperty(exports, 'DEFAULT_FULCIO_URL', {
      enumerable: true,
      get: function () {
        return sign_1.DEFAULT_FULCIO_URL
      }
    })
    Object.defineProperty(exports, 'DEFAULT_REKOR_URL', {
      enumerable: true,
      get: function () {
        return sign_1.DEFAULT_REKOR_URL
      }
    })
    Object.defineProperty(exports, 'InternalError', {
      enumerable: true,
      get: function () {
        return sign_1.InternalError
      }
    })
    var tuf_1 = requireDist$2()
    Object.defineProperty(exports, 'TUFError', {
      enumerable: true,
      get: function () {
        return tuf_1.TUFError
      }
    })
    var verify_1 = requireDist$1()
    Object.defineProperty(exports, 'PolicyError', {
      enumerable: true,
      get: function () {
        return verify_1.PolicyError
      }
    })
    Object.defineProperty(exports, 'VerificationError', {
      enumerable: true,
      get: function () {
        return verify_1.VerificationError
      }
    })
    var sigstore_1 = requireSigstore()
    Object.defineProperty(exports, 'attest', {
      enumerable: true,
      get: function () {
        return sigstore_1.attest
      }
    })
    Object.defineProperty(exports, 'createVerifier', {
      enumerable: true,
      get: function () {
        return sigstore_1.createVerifier
      }
    })
    Object.defineProperty(exports, 'sign', {
      enumerable: true,
      get: function () {
        return sigstore_1.sign
      }
    })
    Object.defineProperty(exports, 'verify', {
      enumerable: true,
      get: function () {
        return sigstore_1.verify
      }
    })
  })(dist$8)
  return dist$8
}

var registry
var hasRequiredRegistry
function requireRegistry() {
  if (hasRequiredRegistry) return registry
  hasRequiredRegistry = 1
  const crypto = require$$0$m
  const PackageJson = requireLib$k()
  const pickManifest = requireLib$m()
  const ssri = requireLib$j()
  const npa = requireNpa$1()
  const sigstore = requireDist()
  const fetch = requireLib$2()
  const Fetcher = requireFetcher()
  const RemoteFetcher = requireRemote()
  const pacoteVersion = require$$9.version
  const removeTrailingSlashes = requireTrailingSlashes()
  const _ = require_protected()

  // Corgis are cute. 🐕🐶
  const corgiDoc =
    'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*'
  const fullDoc = 'application/json'

  // Some really old packages have no time field in their packument so we need a
  // cutoff date.
  const MISSING_TIME_CUTOFF = '2015-01-01T00:00:00.000Z'
  class RegistryFetcher extends Fetcher {
    #cacheKey
    constructor(spec, opts) {
      super(spec, opts)

      // you usually don't want to fetch the same packument multiple times in
      // the span of a given script or command, no matter how many pacote calls
      // are made, so this lets us avoid doing that.  It's only relevant for
      // registry fetchers, because other types simulate their packument from
      // the manifest, which they memoize on this.package, so it's very cheap
      // already.
      this.packumentCache = this.opts.packumentCache || null
      this.registry = fetch.pickRegistry(spec, opts)
      this.packumentUrl = `${removeTrailingSlashes(this.registry)}/${this.spec.escapedName}`
      this.#cacheKey = `${this.fullMetadata ? 'full' : 'corgi'}:${this.packumentUrl}`
      const parsed = new URL(this.registry)
      const regKey = `//${parsed.host}${parsed.pathname}`
      // unlike the nerf-darted auth keys, this one does *not* allow a mismatch
      // of trailing slashes.  It must match exactly.
      if (this.opts[`${regKey}:_keys`]) {
        this.registryKeys = this.opts[`${regKey}:_keys`]
      }

      // XXX pacote <=9 has some logic to ignore opts.resolved if
      // the resolved URL doesn't go to the same registry.
      // Consider reproducing that here, to throw away this.resolved
      // in that case.
    }
    async resolve() {
      // fetching the manifest sets resolved and (if present) integrity
      await this.manifest()
      if (!this.resolved) {
        throw Object.assign(
          new Error('Invalid package manifest: no `dist.tarball` field'),
          {
            package: this.spec.toString()
          }
        )
      }
      return this.resolved
    }
    #headers() {
      return {
        // npm will override UA, but ensure that we always send *something*
        'user-agent':
          this.opts.userAgent ||
          `pacote/${pacoteVersion} node/${process.version}`,
        ...(this.opts.headers || {}),
        'pacote-version': pacoteVersion,
        'pacote-req-type': 'packument',
        'pacote-pkg-id': `registry:${this.spec.name}`,
        accept: this.fullMetadata ? fullDoc : corgiDoc
      }
    }
    async packument() {
      // note this might be either an in-flight promise for a request,
      // or the actual packument, but we never want to make more than
      // one request at a time for the same thing regardless.
      if (this.packumentCache?.has(this.#cacheKey)) {
        return this.packumentCache.get(this.#cacheKey)
      }

      // npm-registry-fetch the packument
      // set the appropriate header for corgis if fullMetadata isn't set
      // return the res.json() promise
      try {
        const res = await fetch(this.packumentUrl, {
          ...this.opts,
          headers: this.#headers(),
          spec: this.spec,
          // never check integrity for packuments themselves
          integrity: null
        })
        const packument = await res.json()
        const contentLength = res.headers.get('content-length')
        if (contentLength) {
          packument._contentLength = Number(contentLength)
        }
        this.packumentCache?.set(this.#cacheKey, packument)
        return packument
      } catch (err) {
        this.packumentCache?.delete(this.#cacheKey)
        if (err.code !== 'E404' || this.fullMetadata) {
          throw err
        }
        // possible that corgis are not supported by this registry
        this.fullMetadata = true
        return this.packument()
      }
    }
    async manifest() {
      if (this.package) {
        return this.package
      }

      // When verifying signatures, we need to fetch the full/uncompressed
      // packument to get publish time as this is not included in the
      // corgi/compressed packument.
      if (this.opts.verifySignatures) {
        this.fullMetadata = true
      }
      const packument = await this.packument()
      const steps = PackageJson.normalizeSteps.filter(s => s !== '_attributes')
      const mani = await new PackageJson()
        .fromContent(
          pickManifest(packument, this.spec.fetchSpec, {
            ...this.opts,
            defaultTag: this.defaultTag,
            before: this.before
          })
        )
        .normalize({
          steps
        })
        .then(p => p.content)

      /* XXX add ETARGET and E403 revalidation of cached packuments here */

      // add _time from packument if fetched with fullMetadata
      const time = packument.time?.[mani.version]
      if (time) {
        mani._time = time
      }

      // add _resolved and _integrity from dist object
      const { dist } = mani
      if (dist) {
        this.resolved = mani._resolved = dist.tarball
        mani._from = this.from
        const distIntegrity = dist.integrity
          ? ssri.parse(dist.integrity)
          : dist.shasum
            ? ssri.fromHex(dist.shasum, 'sha1', {
                ...this.opts
              })
            : null
        if (distIntegrity) {
          if (this.integrity && !this.integrity.match(distIntegrity)) {
            // only bork if they have algos in common.
            // otherwise we end up breaking if we have saved a sha512
            // previously for the tarball, but the manifest only
            // provides a sha1, which is possible for older publishes.
            // Otherwise, this is almost certainly a case of holding it
            // wrong, and will result in weird or insecure behavior
            // later on when building package tree.
            for (const algo of Object.keys(this.integrity)) {
              if (distIntegrity[algo]) {
                throw Object.assign(
                  new Error(
                    `Integrity checksum failed when using ${algo}: ` +
                      `wanted ${this.integrity} but got ${distIntegrity}.`
                  ),
                  {
                    code: 'EINTEGRITY'
                  }
                )
              }
            }
          }
          // made it this far, the integrity is worthwhile.  accept it.
          // the setter here will take care of merging it into what we already
          // had.
          this.integrity = distIntegrity
        }
      }
      if (this.integrity) {
        mani._integrity = String(this.integrity)
        if (dist.signatures) {
          if (this.opts.verifySignatures) {
            // validate and throw on error, then set _signatures
            const message = `${mani._id}:${mani._integrity}`
            for (const signature of dist.signatures) {
              const publicKey =
                this.registryKeys &&
                this.registryKeys.filter(
                  key => key.keyid === signature.keyid
                )[0]
              if (!publicKey) {
                throw Object.assign(
                  new Error(
                    `${mani._id} has a registry signature with keyid: ${signature.keyid} ` +
                      'but no corresponding public key can be found'
                  ),
                  {
                    code: 'EMISSINGSIGNATUREKEY'
                  }
                )
              }
              const publishedTime = Date.parse(
                mani._time || MISSING_TIME_CUTOFF
              )
              const validPublicKey =
                !publicKey.expires ||
                publishedTime < Date.parse(publicKey.expires)
              if (!validPublicKey) {
                throw Object.assign(
                  new Error(
                    `${mani._id} has a registry signature with keyid: ${signature.keyid} ` +
                      `but the corresponding public key has expired ${publicKey.expires}`
                  ),
                  {
                    code: 'EEXPIREDSIGNATUREKEY'
                  }
                )
              }
              const verifier = crypto.createVerify('SHA256')
              verifier.write(message)
              verifier.end()
              const valid = verifier.verify(
                publicKey.pemkey,
                signature.sig,
                'base64'
              )
              if (!valid) {
                throw Object.assign(
                  new Error(
                    `${mani._id} has an invalid registry signature with ` +
                      `keyid: ${publicKey.keyid} and signature: ${signature.sig}`
                  ),
                  {
                    code: 'EINTEGRITYSIGNATURE',
                    keyid: publicKey.keyid,
                    signature: signature.sig,
                    resolved: mani._resolved,
                    integrity: mani._integrity
                  }
                )
              }
            }
            mani._signatures = dist.signatures
          } else {
            mani._signatures = dist.signatures
          }
        }
        if (dist.attestations) {
          if (this.opts.verifyAttestations) {
            // Always fetch attestations from the current registry host
            const attestationsPath = new URL(dist.attestations.url).pathname
            const attestationsUrl =
              removeTrailingSlashes(this.registry) + attestationsPath
            const res = await fetch(attestationsUrl, {
              ...this.opts,
              // disable integrity check for attestations json payload, we check the
              // integrity in the verification steps below
              integrity: null
            })
            const { attestations } = await res.json()
            const bundles = attestations.map(({ predicateType, bundle }) => {
              const statement = JSON.parse(
                Buffer.from(bundle.dsseEnvelope.payload, 'base64').toString(
                  'utf8'
                )
              )
              const keyid = bundle.dsseEnvelope.signatures[0].keyid
              const signature = bundle.dsseEnvelope.signatures[0].sig
              return {
                predicateType,
                bundle,
                statement,
                keyid,
                signature
              }
            })
            const attestationKeyIds = bundles.map(b => b.keyid).filter(k => !!k)
            const attestationRegistryKeys = (this.registryKeys || []).filter(
              key => attestationKeyIds.includes(key.keyid)
            )
            if (!attestationRegistryKeys.length) {
              throw Object.assign(
                new Error(
                  `${mani._id} has attestations but no corresponding public key(s) can be found`
                ),
                {
                  code: 'EMISSINGSIGNATUREKEY'
                }
              )
            }
            for (const {
              predicateType,
              bundle,
              keyid,
              signature,
              statement
            } of bundles) {
              const publicKey = attestationRegistryKeys.find(
                key => key.keyid === keyid
              )
              // Publish attestations have a keyid set and a valid public key must be found
              if (keyid) {
                if (!publicKey) {
                  throw Object.assign(
                    new Error(
                      `${mani._id} has attestations with keyid: ${keyid} ` +
                        'but no corresponding public key can be found'
                    ),
                    {
                      code: 'EMISSINGSIGNATUREKEY'
                    }
                  )
                }
                const integratedTime = new Date(
                  Number(
                    bundle.verificationMaterial.tlogEntries[0].integratedTime
                  ) * 1000
                )
                const validPublicKey =
                  !publicKey.expires ||
                  integratedTime < Date.parse(publicKey.expires)
                if (!validPublicKey) {
                  throw Object.assign(
                    new Error(
                      `${mani._id} has attestations with keyid: ${keyid} ` +
                        `but the corresponding public key has expired ${publicKey.expires}`
                    ),
                    {
                      code: 'EEXPIREDSIGNATUREKEY'
                    }
                  )
                }
              }
              const subject = {
                name: statement.subject[0].name,
                sha512: statement.subject[0].digest.sha512
              }

              // Only type 'version' can be turned into a PURL
              const purl =
                this.spec.type === 'version' ? npa.toPurl(this.spec) : this.spec
              // Verify the statement subject matches the package, version
              if (subject.name !== purl) {
                throw Object.assign(
                  new Error(
                    `${mani._id} package name and version (PURL): ${purl} ` +
                      `doesn't match what was signed: ${subject.name}`
                  ),
                  {
                    code: 'EATTESTATIONSUBJECT'
                  }
                )
              }

              // Verify the statement subject matches the tarball integrity
              const integrityHexDigest = ssri.parse(this.integrity).hexDigest()
              if (subject.sha512 !== integrityHexDigest) {
                throw Object.assign(
                  new Error(
                    `${mani._id} package integrity (hex digest): ` +
                      `${integrityHexDigest} ` +
                      `doesn't match what was signed: ${subject.sha512}`
                  ),
                  {
                    code: 'EATTESTATIONSUBJECT'
                  }
                )
              }
              try {
                // Provenance attestations are signed with a signing certificate
                // (including the key) so we don't need to return a public key.
                //
                // Publish attestations are signed with a keyid so we need to
                // specify a public key from the keys endpoint: `registry-host.tld/-/npm/v1/keys`
                const options = {
                  tufCachePath: this.tufCache,
                  tufForceCache: true,
                  keySelector: publicKey ? () => publicKey.pemkey : undefined
                }
                await sigstore.verify(bundle, options)
              } catch (e) {
                throw Object.assign(
                  new Error(
                    `${mani._id} failed to verify attestation: ${e.message}`
                  ),
                  {
                    code: 'EATTESTATIONVERIFY',
                    predicateType,
                    keyid,
                    signature,
                    resolved: mani._resolved,
                    integrity: mani._integrity
                  }
                )
              }
            }
            mani._attestations = dist.attestations
          } else {
            mani._attestations = dist.attestations
          }
        }
      }
      this.package = mani
      return this.package
    }
    [_.tarballFromResolved]() {
      // we use a RemoteFetcher to get the actual tarball stream
      return new RemoteFetcher(this.resolved, {
        ...this.opts,
        resolved: this.resolved,
        pkgid: `registry:${this.spec.name}@${this.resolved}`
      })[_.tarballFromResolved]()
    }
    get types() {
      return ['tag', 'version', 'range']
    }
  }
  registry = RegistryFetcher
  return registry
}

var fetcher
var hasRequiredFetcher
function requireFetcher() {
  if (hasRequiredFetcher) return fetcher
  hasRequiredFetcher = 1
  // This is the base class that the other fetcher types in lib
  // all descend from.
  // It handles the unpacking and retry logic that is shared among
  // all of the other Fetcher types.

  const { basename, dirname } = require$$2$3
  const { rm, mkdir } = require$$0$5
  const PackageJson = requireLib$k()
  const cacache = requireLib$e()
  const fsm = requireLib$f()
  const getContents = requireLib$c()
  const npa = requireNpa$1()
  const retry = requirePromiseRetry()
  const ssri = requireLib$j()
  const tar = requireTar()
  const { Minipass } = requireCommonjs$7()
  const { log } = requireLib$t()
  const _ = require_protected()
  const cacheDir = requireCacheDir()
  const isPackageBin = requireIsPackageBin()
  const removeTrailingSlashes = requireTrailingSlashes()

  // Pacote is only concerned with the package.json contents
  const packageJsonPrepare = p =>
    PackageJson.prepare(p).then(pkg => pkg.content)
  const packageJsonNormalize = p =>
    PackageJson.normalize(p).then(pkg => pkg.content)
  class FetcherBase {
    constructor(spec, opts) {
      if (!opts || typeof opts !== 'object') {
        throw new TypeError('options object is required')
      }
      this.spec = npa(spec, opts.where)
      this.allowGitIgnore = !!opts.allowGitIgnore

      // a bit redundant because presumably the caller already knows this,
      // but it makes it easier to not have to keep track of the requested
      // spec when we're dispatching thousands of these at once, and normalizing
      // is nice.  saveSpec is preferred if set, because it turns stuff like
      // x/y#committish into github:x/y#committish.  use name@rawSpec for
      // registry deps so that we turn xyz and xyz@ -> xyz@
      this.from = this.spec.registry
        ? `${this.spec.name}@${this.spec.rawSpec}`
        : this.spec.saveSpec
      this.#assertType()
      // clone the opts object so that others aren't upset when we mutate it
      // by adding/modifying the integrity value.
      this.opts = {
        ...opts
      }
      this.cache = opts.cache || cacheDir().cacache
      this.tufCache = opts.tufCache || cacheDir().tufcache
      this.resolved = opts.resolved || null

      // default to caching/verifying with sha512, that's what we usually have
      // need to change this default, or start overriding it, when sha512
      // is no longer strong enough.
      this.defaultIntegrityAlgorithm =
        opts.defaultIntegrityAlgorithm || 'sha512'
      if (typeof opts.integrity === 'string') {
        this.opts.integrity = ssri.parse(opts.integrity)
      }
      this.package = null
      this.type = this.constructor.name
      this.fmode = opts.fmode || 0o666
      this.dmode = opts.dmode || 0o777
      // we don't need a default umask, because we don't chmod files coming
      // out of package tarballs.  they're forced to have a mode that is
      // valid, regardless of what's in the tarball entry, and then we let
      // the process's umask setting do its job.  but if configured, we do
      // respect it.
      this.umask = opts.umask || 0
      this.preferOnline = !!opts.preferOnline
      this.preferOffline = !!opts.preferOffline
      this.offline = !!opts.offline
      this.before = opts.before
      this.fullMetadata = this.before ? true : !!opts.fullMetadata
      this.fullReadJson = !!opts.fullReadJson
      this[_.readPackageJson] = this.fullReadJson
        ? packageJsonPrepare
        : packageJsonNormalize

      // rrh is a registry hostname or 'never' or 'always'
      // defaults to registry.npmjs.org
      this.replaceRegistryHost =
        !opts.replaceRegistryHost || opts.replaceRegistryHost === 'npmjs'
          ? 'registry.npmjs.org'
          : opts.replaceRegistryHost
      this.defaultTag = opts.defaultTag || 'latest'
      this.registry = removeTrailingSlashes(
        opts.registry || 'https://registry.npmjs.org'
      )

      // command to run 'prepare' scripts on directories and git dirs
      // To use pacote with yarn, for example, set npmBin to 'yarn'
      // and npmCliConfig with yarn's equivalents.
      this.npmBin = opts.npmBin || 'npm'

      // command to install deps for preparing
      this.npmInstallCmd = opts.npmInstallCmd || ['install', '--force']

      // XXX fill more of this in based on what we know from this.opts
      // we explicitly DO NOT fill in --tag, though, since we are often
      // going to be packing in the context of a publish, which may set
      // a dist-tag, but certainly wants to keep defaulting to latest.
      this.npmCliConfig = opts.npmCliConfig || [
        `--cache=${dirname(this.cache)}`,
        `--prefer-offline=${!!this.preferOffline}`,
        `--prefer-online=${!!this.preferOnline}`,
        `--offline=${!!this.offline}`,
        ...(this.before ? [`--before=${this.before.toISOString()}`] : []),
        '--no-progress',
        '--no-save',
        '--no-audit',
        // override any omit settings from the environment
        '--include=dev',
        '--include=peer',
        '--include=optional',
        // we need the actual things, not just the lockfile
        '--no-package-lock-only',
        '--no-dry-run'
      ]
    }
    get integrity() {
      return this.opts.integrity || null
    }
    set integrity(i) {
      if (!i) {
        return
      }
      i = ssri.parse(i)
      const current = this.opts.integrity

      // do not ever update an existing hash value, but do
      // merge in NEW algos and hashes that we don't already have.
      if (current) {
        current.merge(i)
      } else {
        this.opts.integrity = i
      }
    }
    get notImplementedError() {
      return new Error('not implemented in this fetcher type: ' + this.type)
    }

    // override in child classes
    // Returns a Promise that resolves to this.resolved string value
    resolve() {
      return this.resolved
        ? Promise.resolve(this.resolved)
        : Promise.reject(this.notImplementedError)
    }
    packument() {
      return Promise.reject(this.notImplementedError)
    }

    // override in child class
    // returns a manifest containing:
    // - name
    // - version
    // - _resolved
    // - _integrity
    // - plus whatever else was in there (corgi, full metadata, or pj file)
    manifest() {
      return Promise.reject(this.notImplementedError)
    }

    // private, should be overridden.
    // Note that they should *not* calculate or check integrity or cache,
    // but *just*  return the raw tarball data stream.
    [_.tarballFromResolved]() {
      throw this.notImplementedError
    }

    // public, should not be overridden
    tarball() {
      return this.tarballStream(stream =>
        stream.concat().then(data => {
          data.integrity = this.integrity && String(this.integrity)
          data.resolved = this.resolved
          data.from = this.from
          return data
        })
      )
    }

    // private
    // Note: cacache will raise a EINTEGRITY error if the integrity doesn't match
    #tarballFromCache() {
      const startTime = Date.now()
      const stream = cacache.get.stream.byDigest(
        this.cache,
        this.integrity,
        this.opts
      )
      const elapsedTime = Date.now() - startTime
      // cache is good, so log it as a hit in particular since there was no fetch logged
      log.http('cache', `${this.spec} ${elapsedTime}ms (cache hit)`)
      return stream
    }
    get [_.cacheFetches]() {
      return true
    }
    #istream(stream) {
      // if not caching this, just return it
      if (!this.opts.cache || !this[_.cacheFetches]) {
        // instead of creating a new integrity stream, we only piggyback on the
        // provided stream's events
        if (stream.hasIntegrityEmitter) {
          stream.on('integrity', i => (this.integrity = i))
          return stream
        }
        const istream = ssri.integrityStream(this.opts)
        istream.on('integrity', i => (this.integrity = i))
        stream.on('error', err => istream.emit('error', err))
        return stream.pipe(istream)
      }

      // we have to return a stream that gets ALL the data, and proxies errors,
      // but then pipe from the original tarball stream into the cache as well.
      // To do this without losing any data, and since the cacache put stream
      // is not a passthrough, we have to pipe from the original stream into
      // the cache AFTER we pipe into the middleStream.  Since the cache stream
      // has an asynchronous flush to write its contents to disk, we need to
      // defer the middleStream end until the cache stream ends.
      const middleStream = new Minipass()
      stream.on('error', err => middleStream.emit('error', err))
      stream.pipe(middleStream, {
        end: false
      })
      const cstream = cacache.put.stream(
        this.opts.cache,
        `pacote:tarball:${this.from}`,
        this.opts
      )
      cstream.on('integrity', i => (this.integrity = i))
      cstream.on('error', err => stream.emit('error', err))
      stream.pipe(cstream)

      // eslint-disable-next-line promise/catch-or-return
      cstream
        .promise()
        .catch(() => {})
        .then(() => middleStream.end())
      return middleStream
    }
    pickIntegrityAlgorithm() {
      return this.integrity
        ? this.integrity.pickAlgorithm(this.opts)
        : this.defaultIntegrityAlgorithm
    }

    // TODO: check error class, once those are rolled out to our deps
    isDataCorruptionError(er) {
      return er.code === 'EINTEGRITY' || er.code === 'Z_DATA_ERROR'
    }

    // override the types getter
    get types() {
      return false
    }
    #assertType() {
      if (this.types && !this.types.includes(this.spec.type)) {
        throw new TypeError(
          `Wrong spec type (${this.spec.type}) for ${this.constructor.name}. Supported types: ${this.types.join(', ')}`
        )
      }
    }

    // We allow ENOENTs from cacache, but not anywhere else.
    // An ENOENT trying to read a tgz file, for example, is Right Out.
    isRetriableError(er) {
      // TODO: check error class, once those are rolled out to our deps
      return (
        this.isDataCorruptionError(er) ||
        er.code === 'ENOENT' ||
        er.code === 'EISDIR'
      )
    }

    // Mostly internal, but has some uses
    // Pass in a function which returns a promise
    // Function will be called 1 or more times with streams that may fail.
    // Retries:
    // Function MUST handle errors on the stream by rejecting the promise,
    // so that retry logic can pick it up and either retry or fail whatever
    // promise it was making (ie, failing extraction, etc.)
    //
    // The return value of this method is a Promise that resolves the same
    // as whatever the streamHandler resolves to.
    //
    // This should never be overridden by child classes, but it is public.
    tarballStream(streamHandler) {
      // Only short-circuit via cache if we have everything else we'll need,
      // and the user has not expressed a preference for checking online.

      const fromCache =
        !this.preferOnline && this.integrity && this.resolved
          ? streamHandler(this.#tarballFromCache()).catch(er => {
              if (this.isDataCorruptionError(er)) {
                log.warn(
                  'tarball',
                  `cached data for ${this.spec} (${this.integrity}) seems to be corrupted. Refreshing cache.`
                )
                return this.cleanupCached().then(() => {
                  throw er
                })
              } else {
                throw er
              }
            })
          : null
      const fromResolved = er => {
        if (er) {
          if (!this.isRetriableError(er)) {
            throw er
          }
          log.silly(
            'tarball',
            `no local data for ${this.spec}. Extracting by manifest.`
          )
        }
        return this.resolve().then(() =>
          retry(
            tryAgain =>
              streamHandler(this.#istream(this[_.tarballFromResolved]())).catch(
                streamErr => {
                  // Most likely data integrity.  A cache ENOENT error is unlikely
                  // here, since we're definitely not reading from the cache, but it
                  // IS possible that the fetch subsystem accessed the cache, and the
                  // entry got blown away or something.  Try one more time to be sure.
                  if (this.isRetriableError(streamErr)) {
                    log.warn(
                      'tarball',
                      `tarball data for ${this.spec} (${this.integrity}) seems to be corrupted. Trying again.`
                    )
                    return this.cleanupCached().then(() => tryAgain(streamErr))
                  }
                  throw streamErr
                }
              ),
            {
              retries: 1,
              minTimeout: 0,
              maxTimeout: 0
            }
          )
        )
      }
      return fromCache ? fromCache.catch(fromResolved) : fromResolved()
    }
    cleanupCached() {
      return cacache.rm.content(this.cache, this.integrity, this.opts)
    }
    #empty(path) {
      return getContents({
        path,
        depth: 1
      }).then(contents =>
        Promise.all(
          contents.map(entry =>
            rm(entry, {
              recursive: true,
              force: true
            })
          )
        )
      )
    }
    async #mkdir(dest) {
      await this.#empty(dest)
      return await mkdir(dest, {
        recursive: true
      })
    }

    // extraction is always the same.  the only difference is where
    // the tarball comes from.
    async extract(dest) {
      await this.#mkdir(dest)
      return this.tarballStream(tarball => this.#extract(dest, tarball))
    }
    #toFile(dest) {
      return this.tarballStream(
        str =>
          new Promise((res, rej) => {
            const writer = new fsm.WriteStream(dest)
            str.on('error', er => writer.emit('error', er))
            writer.on('error', er => rej(er))
            writer.on('close', () =>
              res({
                integrity: this.integrity && String(this.integrity),
                resolved: this.resolved,
                from: this.from
              })
            )
            str.pipe(writer)
          })
      )
    }

    // don't use this.#mkdir because we don't want to rimraf anything
    async tarballFile(dest) {
      const dir = dirname(dest)
      await mkdir(dir, {
        recursive: true
      })
      return this.#toFile(dest)
    }
    #extract(dest, tarball) {
      const extractor = tar.x(
        this.#tarxOptions({
          cwd: dest
        })
      )
      const p = new Promise((resolve, reject) => {
        extractor.on('end', () => {
          resolve({
            resolved: this.resolved,
            integrity: this.integrity && String(this.integrity),
            from: this.from
          })
        })
        extractor.on('error', er => {
          log.warn('tar', er.message)
          log.silly('tar', er)
          reject(er)
        })
        tarball.on('error', er => reject(er))
      })
      tarball.pipe(extractor)
      return p
    }

    // always ensure that entries are at least as permissive as our configured
    // dmode/fmode, but never more permissive than the umask allows.
    #entryMode(path, mode, type) {
      const m = /Directory|GNUDumpDir/.test(type)
        ? this.dmode
        : /File$/.test(type)
          ? this.fmode
          : /* istanbul ignore next - should never happen in a pkg */ 0

      // make sure package bins are executable
      const exe = isPackageBin(this.package, path) ? 0o111 : 0
      // always ensure that files are read/writable by the owner
      return ((mode | m) & ~this.umask) | exe | 0o600
    }
    #tarxOptions({ cwd }) {
      const sawIgnores = new Set()
      return {
        cwd,
        noChmod: true,
        noMtime: true,
        filter: (name, entry) => {
          if (/Link$/.test(entry.type)) {
            return false
          }
          entry.mode = this.#entryMode(entry.path, entry.mode, entry.type)
          // this replicates the npm pack behavior where .gitignore files
          // are treated like .npmignore files, but only if a .npmignore
          // file is not present.
          if (/File$/.test(entry.type)) {
            const base = basename(entry.path)
            if (base === '.npmignore') {
              sawIgnores.add(entry.path)
            } else if (base === '.gitignore' && !this.allowGitIgnore) {
              // rename, but only if there's not already a .npmignore
              const ni = entry.path.replace(/\.gitignore$/, '.npmignore')
              if (sawIgnores.has(ni)) {
                return false
              }
              entry.path = ni
            }
            return true
          }
        },
        strip: 1,
        onwarn /* istanbul ignore next - we can trust that tar logs */: (
          code,
          msg,
          data
        ) => {
          log.warn('tar', code, msg)
          log.silly('tar', code, msg, data)
        },
        umask: this.umask,
        // always ignore ownership info from tarball metadata
        preserveOwner: false
      }
    }
  }
  fetcher = FetcherBase

  // Child classes
  const GitFetcher = requireGit()
  const RegistryFetcher = requireRegistry()
  const FileFetcher = requireFile$1()
  const DirFetcher = requireDir()
  const RemoteFetcher = requireRemote()

  // Get an appropriate fetcher object from a spec and options
  FetcherBase.get = (rawSpec, opts = {}) => {
    const spec = npa(rawSpec, opts.where)
    switch (spec.type) {
      case 'git':
        return new GitFetcher(spec, opts)
      case 'remote':
        return new RemoteFetcher(spec, opts)
      case 'version':
      case 'range':
      case 'tag':
      case 'alias':
        return new RegistryFetcher(spec.subSpec || spec, opts)
      case 'file':
        return new FileFetcher(spec, opts)
      case 'directory':
        return new DirFetcher(spec, opts)
      default:
        throw new TypeError('Unknown spec type: ' + spec.type)
    }
  }
  return fetcher
}

var lib
var hasRequiredLib
function requireLib() {
  if (hasRequiredLib) return lib
  hasRequiredLib = 1
  const { get } = requireFetcher()
  const GitFetcher = requireGit()
  const RegistryFetcher = requireRegistry()
  const FileFetcher = requireFile$1()
  const DirFetcher = requireDir()
  const RemoteFetcher = requireRemote()
  const tarball = (spec, opts) => get(spec, opts).tarball()
  tarball.stream = (spec, handler, opts) =>
    get(spec, opts).tarballStream(handler)
  tarball.file = (spec, dest, opts) => get(spec, opts).tarballFile(dest)
  lib = {
    GitFetcher,
    RegistryFetcher,
    FileFetcher,
    DirFetcher,
    RemoteFetcher,
    resolve: (spec, opts) => get(spec, opts).resolve(),
    extract: (spec, dest, opts) => get(spec, opts).extract(dest),
    manifest: (spec, opts) => get(spec, opts).manifest(),
    packument: (spec, opts) => get(spec, opts).packument(),
    tarball
  }
  return lib
}

var libExports = requireLib()

async function pMap(
  iterable,
  mapper,
  { concurrency = Number.POSITIVE_INFINITY, stopOnError = true, signal } = {}
) {
  return new Promise((resolve_, reject_) => {
    if (
      iterable[Symbol.iterator] === undefined &&
      iterable[Symbol.asyncIterator] === undefined
    ) {
      throw new TypeError(
        `Expected \`input\` to be either an \`Iterable\` or \`AsyncIterable\`, got (${typeof iterable})`
      )
    }
    if (typeof mapper !== 'function') {
      throw new TypeError('Mapper function is required')
    }
    if (
      !(
        (Number.isSafeInteger(concurrency) && concurrency >= 1) ||
        concurrency === Number.POSITIVE_INFINITY
      )
    ) {
      throw new TypeError(
        `Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${concurrency}\` (${typeof concurrency})`
      )
    }
    const result = []
    const errors = []
    const skippedIndexesMap = new Map()
    let isRejected = false
    let isResolved = false
    let isIterableDone = false
    let resolvingCount = 0
    let currentIndex = 0
    const iterator =
      iterable[Symbol.iterator] === undefined
        ? iterable[Symbol.asyncIterator]()
        : iterable[Symbol.iterator]()
    const signalListener = () => {
      reject(signal.reason)
    }
    const cleanup = () => {
      signal?.removeEventListener('abort', signalListener)
    }
    const resolve = value => {
      resolve_(value)
      cleanup()
    }
    const reject = reason => {
      isRejected = true
      isResolved = true
      reject_(reason)
      cleanup()
    }
    if (signal) {
      if (signal.aborted) {
        reject(signal.reason)
      }
      signal.addEventListener('abort', signalListener, {
        once: true
      })
    }
    const next = async () => {
      if (isResolved) {
        return
      }
      const nextItem = await iterator.next()
      const index = currentIndex
      currentIndex++

      // Note: `iterator.next()` can be called many times in parallel.
      // This can cause multiple calls to this `next()` function to
      // receive a `nextItem` with `done === true`.
      // The shutdown logic that rejects/resolves must be protected
      // so it runs only one time as the `skippedIndex` logic is
      // non-idempotent.
      if (nextItem.done) {
        isIterableDone = true
        if (resolvingCount === 0 && !isResolved) {
          if (!stopOnError && errors.length > 0) {
            reject(new AggregateError(errors)) // eslint-disable-line unicorn/error-message
            return
          }
          isResolved = true
          if (skippedIndexesMap.size === 0) {
            resolve(result)
            return
          }
          const pureResult = []

          // Support multiple `pMapSkip`'s.
          for (const [index, value] of result.entries()) {
            if (skippedIndexesMap.get(index) === pMapSkip) {
              continue
            }
            pureResult.push(value)
          }
          resolve(pureResult)
        }
        return
      }
      resolvingCount++

      // Intentionally detached
      ;(async () => {
        try {
          const element = await nextItem.value
          if (isResolved) {
            return
          }
          const value = await mapper(element, index)

          // Use Map to stage the index of the element.
          if (value === pMapSkip) {
            skippedIndexesMap.set(index, value)
          }
          result[index] = value
          resolvingCount--
          await next()
        } catch (error) {
          if (stopOnError) {
            reject(error)
          } else {
            errors.push(error)
            resolvingCount--

            // In that case we can't really continue regardless of `stopOnError` state
            // since an iterable is likely to continue throwing after it throws once.
            // If we continue calling `next()` indefinitely we will likely end up
            // in an infinite loop of failed iteration.
            try {
              await next()
            } catch (error) {
              reject(error)
            }
          }
        }
      })()
    }

    // Create the concurrent runners in a detached (non-awaited)
    // promise. We need this so we can await the `next()` calls
    // to stop creating runners before hitting the concurrency limit
    // if the iterable has already been marked as done.
    // NOTE: We *must* do this for async iterators otherwise we'll spin up
    // infinite `next()` calls by default and never start the event loop.
    ;(async () => {
      for (let index = 0; index < concurrency; index++) {
        try {
          // eslint-disable-next-line no-await-in-loop
          await next()
        } catch (error) {
          reject(error)
          break
        }
        if (isIterableDone || isRejected) {
          break
        }
      }
    })()
  })
}
const pMapSkip = Symbol('skip')

var index = /*#__PURE__*/ Object.freeze({
  __proto__: null,
  default: pMap,
  pMapSkip: pMapSkip
})

module.exports = libExports
