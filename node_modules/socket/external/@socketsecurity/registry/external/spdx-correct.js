'use strict'

const require$$1$1 = [
  '0BSD',
  '3D-Slicer-1.0',
  'AAL',
  'ADSL',
  'AFL-1.1',
  'AFL-1.2',
  'AFL-2.0',
  'AFL-2.1',
  'AFL-3.0',
  'AGPL-1.0-only',
  'AGPL-1.0-or-later',
  'AGPL-3.0-only',
  'AGPL-3.0-or-later',
  'AMD-newlib',
  'AMDPLPA',
  'AML',
  'AML-glslang',
  'AMPAS',
  'ANTLR-PD',
  'ANTLR-PD-fallback',
  'APAFML',
  'APL-1.0',
  'APSL-1.0',
  'APSL-1.1',
  'APSL-1.2',
  'APSL-2.0',
  'ASWF-Digital-Assets-1.0',
  'ASWF-Digital-Assets-1.1',
  'Abstyles',
  'AdaCore-doc',
  'Adobe-2006',
  'Adobe-Display-PostScript',
  'Adobe-Glyph',
  'Adobe-Utopia',
  'Afmparse',
  'Aladdin',
  'Apache-1.0',
  'Apache-1.1',
  'Apache-2.0',
  'App-s2p',
  'Arphic-1999',
  'Artistic-1.0',
  'Artistic-1.0-Perl',
  'Artistic-1.0-cl8',
  'Artistic-2.0',
  'BSD-1-Clause',
  'BSD-2-Clause',
  'BSD-2-Clause-Darwin',
  'BSD-2-Clause-Patent',
  'BSD-2-Clause-Views',
  'BSD-2-Clause-first-lines',
  'BSD-3-Clause',
  'BSD-3-Clause-Attribution',
  'BSD-3-Clause-Clear',
  'BSD-3-Clause-HP',
  'BSD-3-Clause-LBNL',
  'BSD-3-Clause-Modification',
  'BSD-3-Clause-No-Military-License',
  'BSD-3-Clause-No-Nuclear-License',
  'BSD-3-Clause-No-Nuclear-License-2014',
  'BSD-3-Clause-No-Nuclear-Warranty',
  'BSD-3-Clause-Open-MPI',
  'BSD-3-Clause-Sun',
  'BSD-3-Clause-acpica',
  'BSD-3-Clause-flex',
  'BSD-4-Clause',
  'BSD-4-Clause-Shortened',
  'BSD-4-Clause-UC',
  'BSD-4.3RENO',
  'BSD-4.3TAHOE',
  'BSD-Advertising-Acknowledgement',
  'BSD-Attribution-HPND-disclaimer',
  'BSD-Inferno-Nettverk',
  'BSD-Protection',
  'BSD-Source-Code',
  'BSD-Source-beginning-file',
  'BSD-Systemics',
  'BSD-Systemics-W3Works',
  'BSL-1.0',
  'BUSL-1.1',
  'Baekmuk',
  'Bahyph',
  'Barr',
  'Beerware',
  'BitTorrent-1.0',
  'BitTorrent-1.1',
  'Bitstream-Charter',
  'Bitstream-Vera',
  'BlueOak-1.0.0',
  'Boehm-GC',
  'Boehm-GC-without-fee',
  'Borceux',
  'Brian-Gladman-2-Clause',
  'Brian-Gladman-3-Clause',
  'C-UDA-1.0',
  'CAL-1.0',
  'CAL-1.0-Combined-Work-Exception',
  'CATOSL-1.1',
  'CC-BY-1.0',
  'CC-BY-2.0',
  'CC-BY-2.5',
  'CC-BY-2.5-AU',
  'CC-BY-3.0',
  'CC-BY-3.0-AT',
  'CC-BY-3.0-AU',
  'CC-BY-3.0-DE',
  'CC-BY-3.0-IGO',
  'CC-BY-3.0-NL',
  'CC-BY-3.0-US',
  'CC-BY-4.0',
  'CC-BY-NC-1.0',
  'CC-BY-NC-2.0',
  'CC-BY-NC-2.5',
  'CC-BY-NC-3.0',
  'CC-BY-NC-3.0-DE',
  'CC-BY-NC-4.0',
  'CC-BY-NC-ND-1.0',
  'CC-BY-NC-ND-2.0',
  'CC-BY-NC-ND-2.5',
  'CC-BY-NC-ND-3.0',
  'CC-BY-NC-ND-3.0-DE',
  'CC-BY-NC-ND-3.0-IGO',
  'CC-BY-NC-ND-4.0',
  'CC-BY-NC-SA-1.0',
  'CC-BY-NC-SA-2.0',
  'CC-BY-NC-SA-2.0-DE',
  'CC-BY-NC-SA-2.0-FR',
  'CC-BY-NC-SA-2.0-UK',
  'CC-BY-NC-SA-2.5',
  'CC-BY-NC-SA-3.0',
  'CC-BY-NC-SA-3.0-DE',
  'CC-BY-NC-SA-3.0-IGO',
  'CC-BY-NC-SA-4.0',
  'CC-BY-ND-1.0',
  'CC-BY-ND-2.0',
  'CC-BY-ND-2.5',
  'CC-BY-ND-3.0',
  'CC-BY-ND-3.0-DE',
  'CC-BY-ND-4.0',
  'CC-BY-SA-1.0',
  'CC-BY-SA-2.0',
  'CC-BY-SA-2.0-UK',
  'CC-BY-SA-2.1-JP',
  'CC-BY-SA-2.5',
  'CC-BY-SA-3.0',
  'CC-BY-SA-3.0-AT',
  'CC-BY-SA-3.0-DE',
  'CC-BY-SA-3.0-IGO',
  'CC-BY-SA-4.0',
  'CC-PDDC',
  'CC-PDM-1.0',
  'CC-SA-1.0',
  'CC0-1.0',
  'CDDL-1.0',
  'CDDL-1.1',
  'CDL-1.0',
  'CDLA-Permissive-1.0',
  'CDLA-Permissive-2.0',
  'CDLA-Sharing-1.0',
  'CECILL-1.0',
  'CECILL-1.1',
  'CECILL-2.0',
  'CECILL-2.1',
  'CECILL-B',
  'CECILL-C',
  'CERN-OHL-1.1',
  'CERN-OHL-1.2',
  'CERN-OHL-P-2.0',
  'CERN-OHL-S-2.0',
  'CERN-OHL-W-2.0',
  'CFITSIO',
  'CMU-Mach',
  'CMU-Mach-nodoc',
  'CNRI-Jython',
  'CNRI-Python',
  'CNRI-Python-GPL-Compatible',
  'COIL-1.0',
  'CPAL-1.0',
  'CPL-1.0',
  'CPOL-1.02',
  'CUA-OPL-1.0',
  'Caldera',
  'Caldera-no-preamble',
  'Catharon',
  'ClArtistic',
  'Clips',
  'Community-Spec-1.0',
  'Condor-1.1',
  'Cornell-Lossless-JPEG',
  'Cronyx',
  'Crossword',
  'CrystalStacker',
  'Cube',
  'D-FSL-1.0',
  'DEC-3-Clause',
  'DL-DE-BY-2.0',
  'DL-DE-ZERO-2.0',
  'DOC',
  'DRL-1.0',
  'DRL-1.1',
  'DSDP',
  'DocBook-Schema',
  'DocBook-Stylesheet',
  'DocBook-XML',
  'Dotseqn',
  'ECL-1.0',
  'ECL-2.0',
  'EFL-1.0',
  'EFL-2.0',
  'EPICS',
  'EPL-1.0',
  'EPL-2.0',
  'EUDatagrid',
  'EUPL-1.0',
  'EUPL-1.1',
  'EUPL-1.2',
  'Elastic-2.0',
  'Entessa',
  'ErlPL-1.1',
  'Eurosym',
  'FBM',
  'FDK-AAC',
  'FSFAP',
  'FSFAP-no-warranty-disclaimer',
  'FSFUL',
  'FSFULLR',
  'FSFULLRWD',
  'FTL',
  'Fair',
  'Ferguson-Twofish',
  'Frameworx-1.0',
  'FreeBSD-DOC',
  'FreeImage',
  'Furuseth',
  'GCR-docs',
  'GD',
  'GFDL-1.1-invariants-only',
  'GFDL-1.1-invariants-or-later',
  'GFDL-1.1-no-invariants-only',
  'GFDL-1.1-no-invariants-or-later',
  'GFDL-1.1-only',
  'GFDL-1.1-or-later',
  'GFDL-1.2-invariants-only',
  'GFDL-1.2-invariants-or-later',
  'GFDL-1.2-no-invariants-only',
  'GFDL-1.2-no-invariants-or-later',
  'GFDL-1.2-only',
  'GFDL-1.2-or-later',
  'GFDL-1.3-invariants-only',
  'GFDL-1.3-invariants-or-later',
  'GFDL-1.3-no-invariants-only',
  'GFDL-1.3-no-invariants-or-later',
  'GFDL-1.3-only',
  'GFDL-1.3-or-later',
  'GL2PS',
  'GLWTPL',
  'GPL-1.0-only',
  'GPL-1.0-or-later',
  'GPL-2.0-only',
  'GPL-2.0-or-later',
  'GPL-3.0-only',
  'GPL-3.0-or-later',
  'Giftware',
  'Glide',
  'Glulxe',
  'Graphics-Gems',
  'Gutmann',
  'HIDAPI',
  'HP-1986',
  'HP-1989',
  'HPND',
  'HPND-DEC',
  'HPND-Fenneberg-Livingston',
  'HPND-INRIA-IMAG',
  'HPND-Intel',
  'HPND-Kevlin-Henney',
  'HPND-MIT-disclaimer',
  'HPND-Markus-Kuhn',
  'HPND-Netrek',
  'HPND-Pbmplus',
  'HPND-UC',
  'HPND-UC-export-US',
  'HPND-doc',
  'HPND-doc-sell',
  'HPND-export-US',
  'HPND-export-US-acknowledgement',
  'HPND-export-US-modify',
  'HPND-export2-US',
  'HPND-merchantability-variant',
  'HPND-sell-MIT-disclaimer-xserver',
  'HPND-sell-regexpr',
  'HPND-sell-variant',
  'HPND-sell-variant-MIT-disclaimer',
  'HPND-sell-variant-MIT-disclaimer-rev',
  'HTMLTIDY',
  'HaskellReport',
  'Hippocratic-2.1',
  'IBM-pibs',
  'ICU',
  'IEC-Code-Components-EULA',
  'IJG',
  'IJG-short',
  'IPA',
  'IPL-1.0',
  'ISC',
  'ISC-Veillard',
  'ImageMagick',
  'Imlib2',
  'Info-ZIP',
  'Inner-Net-2.0',
  'InnoSetup',
  'Intel',
  'Intel-ACPI',
  'Interbase-1.0',
  'JPL-image',
  'JPNIC',
  'JSON',
  'Jam',
  'JasPer-2.0',
  'Kastrup',
  'Kazlib',
  'Knuth-CTAN',
  'LAL-1.2',
  'LAL-1.3',
  'LGPL-2.0-only',
  'LGPL-2.0-or-later',
  'LGPL-2.1-only',
  'LGPL-2.1-or-later',
  'LGPL-3.0-only',
  'LGPL-3.0-or-later',
  'LGPLLR',
  'LOOP',
  'LPD-document',
  'LPL-1.0',
  'LPL-1.02',
  'LPPL-1.0',
  'LPPL-1.1',
  'LPPL-1.2',
  'LPPL-1.3a',
  'LPPL-1.3c',
  'LZMA-SDK-9.11-to-9.20',
  'LZMA-SDK-9.22',
  'Latex2e',
  'Latex2e-translated-notice',
  'Leptonica',
  'LiLiQ-P-1.1',
  'LiLiQ-R-1.1',
  'LiLiQ-Rplus-1.1',
  'Libpng',
  'Linux-OpenIB',
  'Linux-man-pages-1-para',
  'Linux-man-pages-copyleft',
  'Linux-man-pages-copyleft-2-para',
  'Linux-man-pages-copyleft-var',
  'Lucida-Bitmap-Fonts',
  'MIPS',
  'MIT',
  'MIT-0',
  'MIT-CMU',
  'MIT-Click',
  'MIT-Festival',
  'MIT-Khronos-old',
  'MIT-Modern-Variant',
  'MIT-Wu',
  'MIT-advertising',
  'MIT-enna',
  'MIT-feh',
  'MIT-open-group',
  'MIT-testregex',
  'MITNFA',
  'MMIXware',
  'MPEG-SSG',
  'MPL-1.0',
  'MPL-1.1',
  'MPL-2.0',
  'MPL-2.0-no-copyleft-exception',
  'MS-LPL',
  'MS-PL',
  'MS-RL',
  'MTLL',
  'Mackerras-3-Clause',
  'Mackerras-3-Clause-acknowledgment',
  'MakeIndex',
  'Martin-Birgmeier',
  'McPhee-slideshow',
  'Minpack',
  'MirOS',
  'Motosoto',
  'MulanPSL-1.0',
  'MulanPSL-2.0',
  'Multics',
  'Mup',
  'NAIST-2003',
  'NASA-1.3',
  'NBPL-1.0',
  'NCBI-PD',
  'NCGL-UK-2.0',
  'NCL',
  'NCSA',
  'NGPL',
  'NICTA-1.0',
  'NIST-PD',
  'NIST-PD-fallback',
  'NIST-Software',
  'NLOD-1.0',
  'NLOD-2.0',
  'NLPL',
  'NOSL',
  'NPL-1.0',
  'NPL-1.1',
  'NPOSL-3.0',
  'NRL',
  'NTP',
  'NTP-0',
  'Naumen',
  'NetCDF',
  'Newsletr',
  'Nokia',
  'Noweb',
  'O-UDA-1.0',
  'OAR',
  'OCCT-PL',
  'OCLC-2.0',
  'ODC-By-1.0',
  'ODbL-1.0',
  'OFFIS',
  'OFL-1.0',
  'OFL-1.0-RFN',
  'OFL-1.0-no-RFN',
  'OFL-1.1',
  'OFL-1.1-RFN',
  'OFL-1.1-no-RFN',
  'OGC-1.0',
  'OGDL-Taiwan-1.0',
  'OGL-Canada-2.0',
  'OGL-UK-1.0',
  'OGL-UK-2.0',
  'OGL-UK-3.0',
  'OGTSL',
  'OLDAP-1.1',
  'OLDAP-1.2',
  'OLDAP-1.3',
  'OLDAP-1.4',
  'OLDAP-2.0',
  'OLDAP-2.0.1',
  'OLDAP-2.1',
  'OLDAP-2.2',
  'OLDAP-2.2.1',
  'OLDAP-2.2.2',
  'OLDAP-2.3',
  'OLDAP-2.4',
  'OLDAP-2.5',
  'OLDAP-2.6',
  'OLDAP-2.7',
  'OLDAP-2.8',
  'OLFL-1.3',
  'OML',
  'OPL-1.0',
  'OPL-UK-3.0',
  'OPUBL-1.0',
  'OSET-PL-2.1',
  'OSL-1.0',
  'OSL-1.1',
  'OSL-2.0',
  'OSL-2.1',
  'OSL-3.0',
  'OpenPBS-2.3',
  'OpenSSL',
  'OpenSSL-standalone',
  'OpenVision',
  'PADL',
  'PDDL-1.0',
  'PHP-3.0',
  'PHP-3.01',
  'PPL',
  'PSF-2.0',
  'Parity-6.0.0',
  'Parity-7.0.0',
  'Pixar',
  'Plexus',
  'PolyForm-Noncommercial-1.0.0',
  'PolyForm-Small-Business-1.0.0',
  'PostgreSQL',
  'Python-2.0',
  'Python-2.0.1',
  'QPL-1.0',
  'QPL-1.0-INRIA-2004',
  'Qhull',
  'RHeCos-1.1',
  'RPL-1.1',
  'RPL-1.5',
  'RPSL-1.0',
  'RSA-MD',
  'RSCPL',
  'Rdisc',
  'Ruby',
  'Ruby-pty',
  'SAX-PD',
  'SAX-PD-2.0',
  'SCEA',
  'SGI-B-1.0',
  'SGI-B-1.1',
  'SGI-B-2.0',
  'SGI-OpenGL',
  'SGP4',
  'SHL-0.5',
  'SHL-0.51',
  'SISSL',
  'SISSL-1.2',
  'SL',
  'SMAIL-GPL',
  'SMLNJ',
  'SMPPL',
  'SNIA',
  'SPL-1.0',
  'SSH-OpenSSH',
  'SSH-short',
  'SSLeay-standalone',
  'SSPL-1.0',
  'SWL',
  'Saxpath',
  'SchemeReport',
  'Sendmail',
  'Sendmail-8.23',
  'Sendmail-Open-Source-1.1',
  'SimPL-2.0',
  'Sleepycat',
  'Soundex',
  'Spencer-86',
  'Spencer-94',
  'Spencer-99',
  'SugarCRM-1.1.3',
  'Sun-PPP',
  'Sun-PPP-2000',
  'SunPro',
  'Symlinks',
  'TAPR-OHL-1.0',
  'TCL',
  'TCP-wrappers',
  'TGPPL-1.0',
  'TMate',
  'TORQUE-1.1',
  'TOSL',
  'TPDL',
  'TPL-1.0',
  'TTWL',
  'TTYP0',
  'TU-Berlin-1.0',
  'TU-Berlin-2.0',
  'TermReadKey',
  'ThirdEye',
  'TrustedQSL',
  'UCAR',
  'UCL-1.0',
  'UMich-Merit',
  'UPL-1.0',
  'URT-RLE',
  'Ubuntu-font-1.0',
  'Unicode-3.0',
  'Unicode-DFS-2015',
  'Unicode-DFS-2016',
  'Unicode-TOU',
  'UnixCrypt',
  'Unlicense',
  'VOSTROM',
  'VSL-1.0',
  'Vim',
  'W3C',
  'W3C-19980720',
  'W3C-20150513',
  'WTFPL',
  'Watcom-1.0',
  'Widget-Workshop',
  'Wsuipa',
  'X11',
  'X11-distribute-modifications-variant',
  'X11-swapped',
  'XFree86-1.1',
  'XSkat',
  'Xdebug-1.03',
  'Xerox',
  'Xfig',
  'Xnet',
  'YPL-1.0',
  'YPL-1.1',
  'ZPL-1.1',
  'ZPL-2.0',
  'ZPL-2.1',
  'Zed',
  'Zeeff',
  'Zend-2.0',
  'Zimbra-1.3',
  'Zimbra-1.4',
  'Zlib',
  'any-OSI',
  'any-OSI-perl-modules',
  'bcrypt-Solar-Designer',
  'blessing',
  'bzip2-1.0.6',
  'check-cvs',
  'checkmk',
  'copyleft-next-0.3.0',
  'copyleft-next-0.3.1',
  'curl',
  'cve-tou',
  'diffmark',
  'dtoa',
  'dvipdfm',
  'eGenix',
  'etalab-2.0',
  'fwlw',
  'gSOAP-1.3b',
  'generic-xts',
  'gnuplot',
  'gtkbook',
  'hdparm',
  'iMatix',
  'libpng-2.0',
  'libselinux-1.0',
  'libtiff',
  'libutil-David-Nugent',
  'lsof',
  'magaz',
  'mailprio',
  'metamail',
  'mpi-permissive',
  'mpich2',
  'mplus',
  'pkgconf',
  'pnmstitch',
  'psfrag',
  'psutils',
  'python-ldap',
  'radvd',
  'snprintf',
  'softSurfer',
  'ssh-keyscan',
  'swrule',
  'threeparttable',
  'ulem',
  'w3m',
  'wwl',
  'xinetd',
  'xkeyboard-config-Zinoviev',
  'xlock',
  'xpp',
  'xzoom',
  'zlib-acknowledgement'
]

const require$$1 = [
  'AGPL-1.0',
  'AGPL-3.0',
  'BSD-2-Clause-FreeBSD',
  'BSD-2-Clause-NetBSD',
  'GFDL-1.1',
  'GFDL-1.2',
  'GFDL-1.3',
  'GPL-1.0',
  'GPL-2.0',
  'GPL-2.0-with-GCC-exception',
  'GPL-2.0-with-autoconf-exception',
  'GPL-2.0-with-bison-exception',
  'GPL-2.0-with-classpath-exception',
  'GPL-2.0-with-font-exception',
  'GPL-3.0',
  'GPL-3.0-with-GCC-exception',
  'GPL-3.0-with-autoconf-exception',
  'LGPL-2.0',
  'LGPL-2.1',
  'LGPL-3.0',
  'Net-SNMP',
  'Nunit',
  'StandardML-NJ',
  'bzip2-1.0.5',
  'eCos-2.0',
  'wxWindows'
]

const require$$2 = [
  '389-exception',
  'Asterisk-exception',
  'Autoconf-exception-2.0',
  'Autoconf-exception-3.0',
  'Autoconf-exception-generic',
  'Autoconf-exception-generic-3.0',
  'Autoconf-exception-macro',
  'Bison-exception-1.24',
  'Bison-exception-2.2',
  'Bootloader-exception',
  'Classpath-exception-2.0',
  'CLISP-exception-2.0',
  'cryptsetup-OpenSSL-exception',
  'DigiRule-FOSS-exception',
  'eCos-exception-2.0',
  'Fawkes-Runtime-exception',
  'FLTK-exception',
  'fmt-exception',
  'Font-exception-2.0',
  'freertos-exception-2.0',
  'GCC-exception-2.0',
  'GCC-exception-2.0-note',
  'GCC-exception-3.1',
  'Gmsh-exception',
  'GNAT-exception',
  'GNOME-examples-exception',
  'GNU-compiler-exception',
  'gnu-javamail-exception',
  'GPL-3.0-interface-exception',
  'GPL-3.0-linking-exception',
  'GPL-3.0-linking-source-exception',
  'GPL-CC-1.0',
  'GStreamer-exception-2005',
  'GStreamer-exception-2008',
  'i2p-gpl-java-exception',
  'KiCad-libraries-exception',
  'LGPL-3.0-linking-exception',
  'libpri-OpenH323-exception',
  'Libtool-exception',
  'Linux-syscall-note',
  'LLGPL',
  'LLVM-exception',
  'LZMA-exception',
  'mif-exception',
  'OCaml-LGPL-linking-exception',
  'OCCT-exception-1.0',
  'OpenJDK-assembly-exception-1.0',
  'openvpn-openssl-exception',
  'PS-or-PDF-font-exception-20170817',
  'QPL-1.0-INRIA-2004-exception',
  'Qt-GPL-exception-1.0',
  'Qt-LGPL-exception-1.1',
  'Qwt-exception-1.0',
  'SANE-exception',
  'SHL-2.0',
  'SHL-2.1',
  'stunnel-exception',
  'SWI-exception',
  'Swift-exception',
  'Texinfo-exception',
  'u-boot-exception-2.0',
  'UBDL-exception',
  'Universal-FOSS-exception-1.0',
  'vsftpd-openssl-exception',
  'WxWindows-exception-3.1',
  'x11vnc-openssl-exception'
]

let scan
let hasRequiredScan
function requireScan() {
  if (hasRequiredScan) {
    return scan
  }
  hasRequiredScan = 1
  const licenses = [].concat(require$$1$1).concat(require$$1)
  const exceptions = require$$2
  scan = function (source) {
    let index = 0
    function hasMore() {
      return index < source.length
    }

    // `value` can be a regexp or a string.
    // If it is recognized, the matching source string is returned and
    // the index is incremented. Otherwise `undefined` is returned.
    function read(value) {
      if (value instanceof RegExp) {
        const chars = source.slice(index)
        const match = chars.match(value)
        if (match) {
          index += match[0].length
          return match[0]
        }
      } else {
        if (source.indexOf(value, index) === index) {
          index += value.length
          return value
        }
      }
    }
    function skipWhitespace() {
      read(/[ ]*/)
    }
    function operator() {
      let string
      const possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']
      for (let i = 0; i < possibilities.length; i++) {
        string = read(possibilities[i])
        if (string) {
          break
        }
      }
      if (string === '+' && index > 1 && source[index - 2] === ' ') {
        throw new Error('Space before `+`')
      }
      return (
        string && {
          type: 'OPERATOR',
          string: string
        }
      )
    }
    function idstring() {
      return read(/[A-Za-z0-9-.]+/)
    }
    function expectIdstring() {
      const string = idstring()
      if (!string) {
        throw new Error('Expected idstring at offset ' + index)
      }
      return string
    }
    function documentRef() {
      if (read('DocumentRef-')) {
        const string = expectIdstring()
        return {
          type: 'DOCUMENTREF',
          string: string
        }
      }
    }
    function licenseRef() {
      if (read('LicenseRef-')) {
        const string = expectIdstring()
        return {
          type: 'LICENSEREF',
          string: string
        }
      }
    }
    function identifier() {
      const begin = index
      const string = idstring()
      if (licenses.indexOf(string) !== -1) {
        return {
          type: 'LICENSE',
          string: string
        }
      } else if (exceptions.indexOf(string) !== -1) {
        return {
          type: 'EXCEPTION',
          string: string
        }
      }
      index = begin
    }

    // Tries to read the next token. Returns `undefined` if no token is
    // recognized.
    function parseToken() {
      // Ordering matters
      return operator() || documentRef() || licenseRef() || identifier()
    }
    const tokens = []
    while (hasMore()) {
      skipWhitespace()
      if (!hasMore()) {
        break
      }
      const token = parseToken()
      if (!token) {
        throw new Error('Unexpected `' + source[index] + '` at offset ' + index)
      }
      tokens.push(token)
    }
    return tokens
  }
  return scan
}

let parse
let hasRequiredParse
function requireParse() {
  if (hasRequiredParse) {
    return parse
  }
  hasRequiredParse = 1

  // The ABNF grammar in the spec is totally ambiguous.
  //
  // This parser follows the operator precedence defined in the
  // `Order of Precedence and Parentheses` section.

  parse = function (tokens) {
    let index = 0
    function hasMore() {
      return index < tokens.length
    }
    function token() {
      return hasMore() ? tokens[index] : null
    }
    function next() {
      if (!hasMore()) {
        throw new Error()
      }
      index++
    }
    function parseOperator(operator) {
      const t = token()
      if (t && t.type === 'OPERATOR' && operator === t.string) {
        next()
        return t.string
      }
    }
    function parseWith() {
      if (parseOperator('WITH')) {
        const t = token()
        if (t && t.type === 'EXCEPTION') {
          next()
          return t.string
        }
        throw new Error('Expected exception after `WITH`')
      }
    }
    function parseLicenseRef() {
      // TODO: Actually, everything is concatenated into one string
      // for backward-compatibility but it could be better to return
      // a nice structure.
      const begin = index
      let string = ''
      let t = token()
      if (t.type === 'DOCUMENTREF') {
        next()
        string += 'DocumentRef-' + t.string + ':'
        if (!parseOperator(':')) {
          throw new Error('Expected `:` after `DocumentRef-...`')
        }
      }
      t = token()
      if (t.type === 'LICENSEREF') {
        next()
        string += 'LicenseRef-' + t.string
        return {
          license: string
        }
      }
      index = begin
    }
    function parseLicense() {
      const t = token()
      if (t && t.type === 'LICENSE') {
        next()
        const node = {
          license: t.string
        }
        if (parseOperator('+')) {
          node.plus = true
        }
        const exception = parseWith()
        if (exception) {
          node.exception = exception
        }
        return node
      }
    }
    function parseParenthesizedExpression() {
      const left = parseOperator('(')
      if (!left) {
        return
      }
      const expr = parseExpression()
      if (!parseOperator(')')) {
        throw new Error('Expected `)`')
      }
      return expr
    }
    function parseAtom() {
      return (
        parseParenthesizedExpression() || parseLicenseRef() || parseLicense()
      )
    }
    function makeBinaryOpParser(operator, nextParser) {
      return function parseBinaryOp() {
        const left = nextParser()
        if (!left) {
          return
        }
        if (!parseOperator(operator)) {
          return left
        }
        const right = parseBinaryOp()
        if (!right) {
          throw new Error('Expected expression')
        }
        return {
          left: left,
          conjunction: operator.toLowerCase(),
          right: right
        }
      }
    }
    const parseAnd = makeBinaryOpParser('AND', parseAtom)
    const parseExpression = makeBinaryOpParser('OR', parseAnd)
    const node = parseExpression()
    if (!node || hasMore()) {
      throw new Error('Syntax error')
    }
    return node
  }
  return parse
}

let spdxExpressionParse
let hasRequiredSpdxExpressionParse
function requireSpdxExpressionParse() {
  if (hasRequiredSpdxExpressionParse) {
    return spdxExpressionParse
  }
  hasRequiredSpdxExpressionParse = 1
  const scan = requireScan()
  const parse = requireParse()
  spdxExpressionParse = function (source) {
    return parse(scan(source))
  }
  return spdxExpressionParse
}

/*
Copyright spdx-correct.js contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let spdxCorrect
let hasRequiredSpdxCorrect
function requireSpdxCorrect() {
  if (hasRequiredSpdxCorrect) {
    return spdxCorrect
  }
  hasRequiredSpdxCorrect = 1
  const parse = requireSpdxExpressionParse()
  const spdxLicenseIds = require$$1$1
  function valid(string) {
    try {
      parse(string)
      return true
    } catch (error) {
      return false
    }
  }

  // Sorting function that orders the given array of transpositions such
  // that a transposition with the longer pattern comes before a transposition
  // with a shorter pattern. This is to prevent e.g. the transposition
  // ["General Public License", "GPL"] from matching to "Lesser General Public License"
  // before a longer and more accurate transposition ["Lesser General Public License", "LGPL"]
  // has a chance to be recognized.
  function sortTranspositions(a, b) {
    const length = b[0].length - a[0].length
    if (length !== 0) {
      return length
    }
    return a[0].toUpperCase().localeCompare(b[0].toUpperCase())
  }

  // Common transpositions of license identifier acronyms
  const transpositions = [
    ['APGL', 'AGPL'],
    ['Gpl', 'GPL'],
    ['GLP', 'GPL'],
    ['APL', 'Apache'],
    ['ISD', 'ISC'],
    ['GLP', 'GPL'],
    ['IST', 'ISC'],
    ['Claude', 'Clause'],
    [' or later', '+'],
    [' International', ''],
    ['GNU', 'GPL'],
    ['GUN', 'GPL'],
    ['+', ''],
    ['GNU GPL', 'GPL'],
    ['GNU LGPL', 'LGPL'],
    ['GNU/GPL', 'GPL'],
    ['GNU GLP', 'GPL'],
    ['GNU LESSER GENERAL PUBLIC LICENSE', 'LGPL'],
    ['GNU Lesser General Public License', 'LGPL'],
    ['GNU LESSER GENERAL PUBLIC LICENSE', 'LGPL-2.1'],
    ['GNU Lesser General Public License', 'LGPL-2.1'],
    ['LESSER GENERAL PUBLIC LICENSE', 'LGPL'],
    ['Lesser General Public License', 'LGPL'],
    ['LESSER GENERAL PUBLIC LICENSE', 'LGPL-2.1'],
    ['Lesser General Public License', 'LGPL-2.1'],
    ['GNU General Public License', 'GPL'],
    ['Gnu public license', 'GPL'],
    ['GNU Public License', 'GPL'],
    ['GNU GENERAL PUBLIC LICENSE', 'GPL'],
    ['MTI', 'MIT'],
    ['Mozilla Public License', 'MPL'],
    ['Universal Permissive License', 'UPL'],
    ['WTH', 'WTF'],
    ['WTFGPL', 'WTFPL'],
    ['-License', '']
  ].sort(sortTranspositions)
  const TRANSPOSED = 0
  const CORRECT = 1

  // Simple corrections to nearly valid identifiers.
  const transforms = [
    // e.g. 'mit'
    function (argument) {
      return argument.toUpperCase()
    },
    // e.g. 'MIT '
    function (argument) {
      return argument.trim()
    },
    // e.g. 'M.I.T.'
    function (argument) {
      return argument.replace(/\./g, '')
    },
    // e.g. 'Apache- 2.0'
    function (argument) {
      return argument.replace(/\s+/g, '')
    },
    // e.g. 'CC BY 4.0''
    function (argument) {
      return argument.replace(/\s+/g, '-')
    },
    // e.g. 'LGPLv2.1'
    function (argument) {
      return argument.replace('v', '-')
    },
    // e.g. 'Apache 2.0'
    function (argument) {
      return argument.replace(/,?\s*(\d)/, '-$1')
    },
    // e.g. 'GPL 2'
    function (argument) {
      return argument.replace(/,?\s*(\d)/, '-$1.0')
    },
    // e.g. 'Apache Version 2.0'
    function (argument) {
      return argument.replace(
        /,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/,
        '-$2'
      )
    },
    // e.g. 'Apache Version 2'
    function (argument) {
      return argument.replace(
        /,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/,
        '-$2.0'
      )
    },
    // e.g. 'ZLIB'
    function (argument) {
      return argument[0].toUpperCase() + argument.slice(1)
    },
    // e.g. 'MPL/2.0'
    function (argument) {
      return argument.replace('/', '-')
    },
    // e.g. 'Apache 2'
    function (argument) {
      return argument.replace(/\s*V\s*(\d)/, '-$1').replace(/(\d)$/, '$1.0')
    },
    // e.g. 'GPL-2.0', 'GPL-3.0'
    function (argument) {
      if (argument.indexOf('3.0') !== -1) {
        return argument + '-or-later'
      } else {
        return argument + '-only'
      }
    },
    // e.g. 'GPL-2.0-'
    function (argument) {
      return argument + 'only'
    },
    // e.g. 'GPL2'
    function (argument) {
      return argument.replace(/(\d)$/, '-$1.0')
    },
    // e.g. 'BSD 3'
    function (argument) {
      return argument.replace(/(-| )?(\d)$/, '-$2-Clause')
    },
    // e.g. 'BSD clause 3'
    function (argument) {
      return argument.replace(/(-| )clause(-| )(\d)/, '-$3-Clause')
    },
    // e.g. 'New BSD license'
    function (argument) {
      return argument.replace(
        /\b(Modified|New|Revised)(-| )?BSD((-| )License)?/i,
        'BSD-3-Clause'
      )
    },
    // e.g. 'Simplified BSD license'
    function (argument) {
      return argument.replace(
        /\bSimplified(-| )?BSD((-| )License)?/i,
        'BSD-2-Clause'
      )
    },
    // e.g. 'Free BSD license'
    function (argument) {
      return argument.replace(
        /\b(Free|Net)(-| )?BSD((-| )License)?/i,
        'BSD-2-Clause-$1BSD'
      )
    },
    // e.g. 'Clear BSD license'
    function (argument) {
      return argument.replace(
        /\bClear(-| )?BSD((-| )License)?/i,
        'BSD-3-Clause-Clear'
      )
    },
    // e.g. 'Old BSD License'
    function (argument) {
      return argument.replace(
        /\b(Old|Original)(-| )?BSD((-| )License)?/i,
        'BSD-4-Clause'
      )
    },
    // e.g. 'BY-NC-4.0'
    function (argument) {
      return 'CC-' + argument
    },
    // e.g. 'BY-NC'
    function (argument) {
      return 'CC-' + argument + '-4.0'
    },
    // e.g. 'Attribution-NonCommercial'
    function (argument) {
      return argument
        .replace('Attribution', 'BY')
        .replace('NonCommercial', 'NC')
        .replace('NoDerivatives', 'ND')
        .replace(/ (\d)/, '-$1')
        .replace(/ ?International/, '')
    },
    // e.g. 'Attribution-NonCommercial'
    function (argument) {
      return (
        'CC-' +
        argument
          .replace('Attribution', 'BY')
          .replace('NonCommercial', 'NC')
          .replace('NoDerivatives', 'ND')
          .replace(/ (\d)/, '-$1')
          .replace(/ ?International/, '') +
        '-4.0'
      )
    }
  ]
  let licensesWithVersions = spdxLicenseIds
    .map(function (id) {
      const match = /^(.*)-\d+\.\d+$/.exec(id)
      return match ? [match[0], match[1]] : [id, null]
    })
    .reduce(function (objectMap, item) {
      const key = item[1]
      objectMap[key] = objectMap[key] || []
      objectMap[key].push(item[0])
      return objectMap
    }, {})
  const licensesWithOneVersion = Object.keys(licensesWithVersions)
    .map(function makeEntries(key) {
      return [key, licensesWithVersions[key]]
    })
    .filter(function identifySoleVersions(item) {
      return (
        // Licenses has just one valid version suffix.
        item[1].length === 1 &&
        item[0] !== null &&
        // APL will be considered Apache, rather than APL-1.0
        item[0] !== 'APL'
      )
    })
    .map(function createLastResorts(item) {
      return [item[0], item[1][0]]
    })
  licensesWithVersions = undefined

  // If all else fails, guess that strings containing certain substrings
  // meant to identify certain licenses.
  const lastResorts = [
    ['UNLI', 'Unlicense'],
    ['WTF', 'WTFPL'],
    ['2 CLAUSE', 'BSD-2-Clause'],
    ['2-CLAUSE', 'BSD-2-Clause'],
    ['3 CLAUSE', 'BSD-3-Clause'],
    ['3-CLAUSE', 'BSD-3-Clause'],
    ['AFFERO', 'AGPL-3.0-or-later'],
    ['AGPL', 'AGPL-3.0-or-later'],
    ['APACHE', 'Apache-2.0'],
    ['ARTISTIC', 'Artistic-2.0'],
    ['Affero', 'AGPL-3.0-or-later'],
    ['BEER', 'Beerware'],
    ['BOOST', 'BSL-1.0'],
    ['BSD', 'BSD-2-Clause'],
    ['CDDL', 'CDDL-1.1'],
    ['ECLIPSE', 'EPL-1.0'],
    ['FUCK', 'WTFPL'],
    ['GNU', 'GPL-3.0-or-later'],
    ['LGPL', 'LGPL-3.0-or-later'],
    ['GPLV1', 'GPL-1.0-only'],
    ['GPL-1', 'GPL-1.0-only'],
    ['GPLV2', 'GPL-2.0-only'],
    ['GPL-2', 'GPL-2.0-only'],
    ['GPL', 'GPL-3.0-or-later'],
    ['MIT +NO-FALSE-ATTRIBS', 'MITNFA'],
    ['MIT', 'MIT'],
    ['MPL', 'MPL-2.0'],
    ['X11', 'X11'],
    ['ZLIB', 'Zlib']
  ]
    .concat(licensesWithOneVersion)
    .sort(sortTranspositions)
  const SUBSTRING = 0
  const IDENTIFIER = 1
  const validTransformation = function (identifier) {
    for (let i = 0; i < transforms.length; i++) {
      const transformed = transforms[i](identifier).trim()
      if (transformed !== identifier && valid(transformed)) {
        return transformed
      }
    }
    return null
  }
  const validLastResort = function (identifier) {
    const upperCased = identifier.toUpperCase()
    for (let i = 0; i < lastResorts.length; i++) {
      const lastResort = lastResorts[i]
      if (upperCased.indexOf(lastResort[SUBSTRING]) > -1) {
        return lastResort[IDENTIFIER]
      }
    }
    return null
  }
  const anyCorrection = function (identifier, check) {
    for (let i = 0; i < transpositions.length; i++) {
      const transposition = transpositions[i]
      const transposed = transposition[TRANSPOSED]
      if (identifier.indexOf(transposed) > -1) {
        const corrected = identifier.replace(transposed, transposition[CORRECT])
        const checked = check(corrected)
        if (checked !== null) {
          return checked
        }
      }
    }
    return null
  }
  spdxCorrect = function (identifier, options) {
    options = options || {}
    const upgrade = options.upgrade === undefined ? true : !!options.upgrade
    function postprocess(value) {
      return upgrade ? upgradeGPLs(value) : value
    }
    const validArugment =
      typeof identifier === 'string' && identifier.trim().length !== 0
    if (!validArugment) {
      throw Error('Invalid argument. Expected non-empty string.')
    }
    identifier = identifier.trim()
    if (valid(identifier)) {
      return postprocess(identifier)
    }
    const noPlus = identifier.replace(/\+$/, '').trim()
    if (valid(noPlus)) {
      return postprocess(noPlus)
    }
    let transformed = validTransformation(identifier)
    if (transformed !== null) {
      return postprocess(transformed)
    }
    transformed = anyCorrection(identifier, function (argument) {
      if (valid(argument)) {
        return argument
      }
      return validTransformation(argument)
    })
    if (transformed !== null) {
      return postprocess(transformed)
    }
    transformed = validLastResort(identifier)
    if (transformed !== null) {
      return postprocess(transformed)
    }
    transformed = anyCorrection(identifier, validLastResort)
    if (transformed !== null) {
      return postprocess(transformed)
    }
    return null
  }
  function upgradeGPLs(value) {
    if (
      [
        'GPL-1.0',
        'LGPL-1.0',
        'AGPL-1.0',
        'GPL-2.0',
        'LGPL-2.0',
        'AGPL-2.0',
        'LGPL-2.1'
      ].indexOf(value) !== -1
    ) {
      return value + '-only'
    } else if (
      [
        'GPL-1.0+',
        'GPL-2.0+',
        'GPL-3.0+',
        'LGPL-2.0+',
        'LGPL-2.1+',
        'LGPL-3.0+',
        'AGPL-1.0+',
        'AGPL-3.0+'
      ].indexOf(value) !== -1
    ) {
      return value.replace(/\+$/, '-or-later')
    } else if (['GPL-3.0', 'LGPL-3.0', 'AGPL-3.0'].indexOf(value) !== -1) {
      return value + '-or-later'
    } else {
      return value
    }
  }
  return spdxCorrect
}

const spdxCorrectExports = requireSpdxCorrect()

module.exports = spdxCorrectExports
