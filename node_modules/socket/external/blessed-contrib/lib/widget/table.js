'use strict';

var require$$0$1 = require('blessed/lib/widgets/box');
var require$$1 = require('blessed/lib/widgets/list');
var require$$2 = require('blessed/lib/widgets/node');

function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
  var f = n.default;
  var a;
	if (typeof f == "function") {
		a = function a () {
			var isInstance = false;
      try {
        isInstance = this instanceof a;
      } catch {}
			if (isInstance) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

function ansiRegex({
  onlyFirst = false
} = {}) {
  // Valid string terminator sequences are BEL, ESC\, and 0x9c
  const ST = '(?:\\u0007|\\u001B\\u005C|\\u009C)';
  const pattern = [`[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?${ST})`, '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))'].join('|');
  return new RegExp(pattern, onlyFirst ? undefined : 'g');
}

var ansiRegex$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: ansiRegex
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(ansiRegex$1);

var stripAnsi;
var hasRequiredStripAnsi;
function requireStripAnsi() {
  if (hasRequiredStripAnsi) return stripAnsi;
  hasRequiredStripAnsi = 1;
  var ansiRegex = require$$0();
  stripAnsi = function (str) {
    return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
  };
  return stripAnsi;
}

var table;
var hasRequiredTable;
function requireTable() {
  if (hasRequiredTable) return table;
  hasRequiredTable = 1;
  var Box = require$$0$1,
    List = require$$1,
    Node = require$$2,
    stripAnsi = requireStripAnsi();
  function Table(options) {
    var self = this;
    if (!(this instanceof Node)) {
      return new Table(options);
    }
    if (Array.isArray(options.columnSpacing)) {
      throw 'Error: columnSpacing cannot be an array.\r\n' + 'Note: From release 2.0.0 use property columnWidth instead of columnSpacing.\r\n' + 'Please refere to the README or to https://github.com/yaronn/blessed-contrib/issues/39';
    }
    if (!options.columnWidth) {
      throw 'Error: A table must get columnWidth as a property. Please refer to the README.';
    }
    options = options || {};
    options.columnSpacing = options.columnSpacing == null ? 10 : options.columnSpacing;
    options.bold = true;
    options.selectedFg = options.selectedFg || 'white';
    options.selectedBg = options.selectedBg || 'blue';
    options.fg = options.fg || 'green';
    options.bg = options.bg || '';
    options.interactive = typeof options.interactive === 'undefined' ? true : options.interactive;
    this.options = options;
    Box.call(this, options);
    this.rows = new List({
      //height: 0,
      top: 2,
      width: 0,
      left: 1,
      style: {
        selected: {
          fg: options.selectedFg,
          bg: options.selectedBg
        },
        item: {
          fg: options.fg,
          bg: options.bg
        }
      },
      keys: options.keys,
      vi: options.vi,
      mouse: options.mouse,
      tags: true,
      interactive: options.interactive,
      screen: this.screen
    });
    this.append(this.rows);
    this.on('attach', function () {
      if (self.options.data) {
        self.setData(self.options.data);
      }
    });
  }
  Table.prototype = Object.create(Box.prototype);
  Table.prototype.focus = function () {
    this.rows.focus();
  };
  Table.prototype.render = function () {
    if (this.screen.focused == this.rows) this.rows.focus();
    this.rows.width = this.width - 3;
    this.rows.height = this.height - 4;
    Box.prototype.render.call(this);
  };
  Table.prototype.setData = function (table) {
    var self = this;
    var dataToString = function (d) {
      var str = '';
      d.forEach(function (r, i) {
        var colsize = self.options.columnWidth[i],
          strip = stripAnsi(r.toString()),
          ansiLen = r.toString().length - strip.length,
          spaceLength = colsize - strip.length + self.options.columnSpacing;
        r = r.toString().substring(0, colsize + ansiLen); //compensate for ansi len
        if (spaceLength < 0) {
          spaceLength = 0;
        }
        var spaces = new Array(spaceLength).join(' ');
        str += r + spaces;
      });
      return str;
    };
    var formatted = [];
    table.data.forEach(function (d) {
      var str = dataToString(d);
      formatted.push(str);
    });
    this.setContent(dataToString(table.headers));
    this.rows.setItems(formatted);
  };
  Table.prototype.getOptionsPrototype = function () {
    return {
      keys: true,
      fg: 'white',
      interactive: false,
      label: 'Active Processes',
      width: '30%',
      height: '30%',
      border: {
        type: 'line',
        fg: 'cyan'
      },
      columnSpacing: 10,
      columnWidth: [16, 12],
      data: {
        headers: ['col1', 'col2'],
        data: [['a', 'b'], ['5', 'u'], ['x', '16.1']]
      }
    };
  };
  Table.prototype.type = 'table';
  table = Table;
  return table;
}

var tableExports = requireTable();

module.exports = tableExports;
