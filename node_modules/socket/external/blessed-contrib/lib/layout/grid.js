'use strict';

var utils = {};

var x256 = {exports: {}};

var require$$0 = [
	"000000",
	"800000",
	"008000",
	"808000",
	"000080",
	"800080",
	"008080",
	"c0c0c0",
	"808080",
	"ff0000",
	"00ff00",
	"ffff00",
	"0000ff",
	"ff00ff",
	"00ffff",
	"ffffff",
	"000000",
	"00005f",
	"000087",
	"0000af",
	"0000d7",
	"0000ff",
	"005f00",
	"005f5f",
	"005f87",
	"005faf",
	"005fd7",
	"005fff",
	"008700",
	"00875f",
	"008787",
	"0087af",
	"0087d7",
	"0087ff",
	"00af00",
	"00af5f",
	"00af87",
	"00afaf",
	"00afd7",
	"00afff",
	"00d700",
	"00d75f",
	"00d787",
	"00d7af",
	"00d7d7",
	"00d7ff",
	"00ff00",
	"00ff5f",
	"00ff87",
	"00ffaf",
	"00ffd7",
	"00ffff",
	"5f0000",
	"5f005f",
	"5f0087",
	"5f00af",
	"5f00d7",
	"5f00ff",
	"5f5f00",
	"5f5f5f",
	"5f5f87",
	"5f5faf",
	"5f5fd7",
	"5f5fff",
	"5f8700",
	"5f875f",
	"5f8787",
	"5f87af",
	"5f87d7",
	"5f87ff",
	"5faf00",
	"5faf5f",
	"5faf87",
	"5fafaf",
	"5fafd7",
	"5fafff",
	"5fd700",
	"5fd75f",
	"5fd787",
	"5fd7af",
	"5fd7d7",
	"5fd7ff",
	"5fff00",
	"5fff5f",
	"5fff87",
	"5fffaf",
	"5fffd7",
	"5fffff",
	"870000",
	"87005f",
	"870087",
	"8700af",
	"8700d7",
	"8700ff",
	"875f00",
	"875f5f",
	"875f87",
	"875faf",
	"875fd7",
	"875fff",
	"878700",
	"87875f",
	"878787",
	"8787af",
	"8787d7",
	"8787ff",
	"87af00",
	"87af5f",
	"87af87",
	"87afaf",
	"87afd7",
	"87afff",
	"87d700",
	"87d75f",
	"87d787",
	"87d7af",
	"87d7d7",
	"87d7ff",
	"87ff00",
	"87ff5f",
	"87ff87",
	"87ffaf",
	"87ffd7",
	"87ffff",
	"af0000",
	"af005f",
	"af0087",
	"af00af",
	"af00d7",
	"af00ff",
	"af5f00",
	"af5f5f",
	"af5f87",
	"af5faf",
	"af5fd7",
	"af5fff",
	"af8700",
	"af875f",
	"af8787",
	"af87af",
	"af87d7",
	"af87ff",
	"afaf00",
	"afaf5f",
	"afaf87",
	"afafaf",
	"afafd7",
	"afafff",
	"afd700",
	"afd75f",
	"afd787",
	"afd7af",
	"afd7d7",
	"afd7ff",
	"afff00",
	"afff5f",
	"afff87",
	"afffaf",
	"afffd7",
	"afffff",
	"d70000",
	"d7005f",
	"d70087",
	"d700af",
	"d700d7",
	"d700ff",
	"d75f00",
	"d75f5f",
	"d75f87",
	"d75faf",
	"d75fd7",
	"d75fff",
	"d78700",
	"d7875f",
	"d78787",
	"d787af",
	"d787d7",
	"d787ff",
	"d7af00",
	"d7af5f",
	"d7af87",
	"d7afaf",
	"d7afd7",
	"d7afff",
	"d7d700",
	"d7d75f",
	"d7d787",
	"d7d7af",
	"d7d7d7",
	"d7d7ff",
	"d7ff00",
	"d7ff5f",
	"d7ff87",
	"d7ffaf",
	"d7ffd7",
	"d7ffff",
	"ff0000",
	"ff005f",
	"ff0087",
	"ff00af",
	"ff00d7",
	"ff00ff",
	"ff5f00",
	"ff5f5f",
	"ff5f87",
	"ff5faf",
	"ff5fd7",
	"ff5fff",
	"ff8700",
	"ff875f",
	"ff8787",
	"ff87af",
	"ff87d7",
	"ff87ff",
	"ffaf00",
	"ffaf5f",
	"ffaf87",
	"ffafaf",
	"ffafd7",
	"ffafff",
	"ffd700",
	"ffd75f",
	"ffd787",
	"ffd7af",
	"ffd7d7",
	"ffd7ff",
	"ffff00",
	"ffff5f",
	"ffff87",
	"ffffaf",
	"ffffd7",
	"ffffff",
	"080808",
	"121212",
	"1c1c1c",
	"262626",
	"303030",
	"3a3a3a",
	"444444",
	"4e4e4e",
	"585858",
	"606060",
	"666666",
	"767676",
	"808080",
	"8a8a8a",
	"949494",
	"9e9e9e",
	"a8a8a8",
	"b2b2b2",
	"bcbcbc",
	"c6c6c6",
	"d0d0d0",
	"dadada",
	"e4e4e4",
	"eeeeee"
];

var hasRequiredX256;
function requireX256() {
  if (hasRequiredX256) return x256.exports;
  hasRequiredX256 = 1;
  // colors scraped from
  // http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
  // %s/ *\d\+ \+#\([^ ]\+\)/\1\r/g

  var colors = require$$0.map(function (hex) {
    var r = parseInt(hex.slice(0, 2), 16);
    var g = parseInt(hex.slice(2, 4), 16);
    var b = parseInt(hex.slice(4, 6), 16);
    return [r, g, b];
  });
  var x256$1 = x256.exports = function (r, g, b) {
    var c = Array.isArray(r) ? r : [r, g, b];
    var best = null;
    for (var i = 0; i < colors.length; i++) {
      var d = distance(colors[i], c);
      if (!best || d <= best.distance) {
        best = {
          distance: d,
          index: i
        };
      }
    }
    return best.index;
  };
  x256$1.colors = colors;
  function distance(a, b) {
    return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2) + Math.pow(a[2] - b[2], 2));
  }
  return x256.exports;
}

var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils;
  hasRequiredUtils = 1;
  var x256 = requireX256();

  /*
  * Recursively merge properties of two objects
  */
  function MergeRecursive(obj1, obj2) {
    if (obj1 == null) {
      return obj2;
    }
    if (obj2 == null) {
      return obj1;
    }
    for (var p in obj2) {
      try {
        // property in destination object set; update its value
        if (obj2[p].constructor == Object) {
          obj1[p] = MergeRecursive(obj1[p], obj2[p]);
        } else {
          obj1[p] = obj2[p];
        }
      } catch (e) {
        // property in destination object not set; create it and set its value
        obj1[p] = obj2[p];
      }
    }
    return obj1;
  }
  function getTypeName(thing) {
    if (thing === null) return '[object Null]'; // special case
    return Object.prototype.toString.call(thing);
  }
  function abbreviateNumber(value) {
    var newValue = value;
    if (value >= 1000) {
      var suffixes = ['', 'k', 'm', 'b', 't'];
      var suffixNum = Math.floor(('' + value).length / 3);
      var shortValue = '';
      for (var precision = 2; precision >= 1; precision--) {
        shortValue = parseFloat((suffixNum != 0 ? value / Math.pow(1000, suffixNum) : value).toPrecision(precision));
        var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');
        if (dotLessShortValue.length <= 2) {
          break;
        }
      }
      newValue = shortValue + suffixes[suffixNum];
    }
    return newValue;
  }
  function getColorCode(color) {
    if (Array.isArray(color) && color.length == 3) {
      return x256(color[0], color[1], color[2]);
    } else {
      return color;
    }
  }
  utils.MergeRecursive = MergeRecursive;
  utils.getTypeName = getTypeName;
  utils.abbreviateNumber = abbreviateNumber;
  utils.getColorCode = getColorCode;
  return utils;
}

var grid;
var hasRequiredGrid;
function requireGrid() {
  if (hasRequiredGrid) return grid;
  hasRequiredGrid = 1;
  var utils = requireUtils();
  var widgetSpacing = 0;
  function Grid(options) {
    if (!options.screen) throw 'Error: A screen property must be specified in the grid options.\r\n' + 'Note: Release 2.0.0 has breaking changes. Please refer to the README or to https://github.com/yaronn/blessed-contrib/issues/39';
    this.options = options;
    this.options.dashboardMargin = this.options.dashboardMargin || 0;
    this.cellWidth = (100 - this.options.dashboardMargin * 2) / this.options.cols;
    this.cellHeight = (100 - this.options.dashboardMargin * 2) / this.options.rows;
  }
  Grid.prototype.set = function (row, col, rowSpan, colSpan, obj, opts) {
    if (obj instanceof Grid) {
      throw 'Error: A Grid is not allowed to be nested inside another grid.\r\n' + 'Note: Release 2.0.0 has breaking changes. Please refer to the README or to https://github.com/yaronn/blessed-contrib/issues/39';
    }
    var top = row * this.cellHeight + this.options.dashboardMargin;
    var left = col * this.cellWidth + this.options.dashboardMargin;

    //var options = JSON.parse(JSON.stringify(opts));
    var options = {};
    options = utils.MergeRecursive(options, opts);
    options.top = top + '%';
    options.left = left + '%';
    options.width = this.cellWidth * colSpan - widgetSpacing + '%';
    options.height = this.cellHeight * rowSpan - widgetSpacing + '%';
    if (!this.options.hideBorder) options.border = {
      type: 'line',
      fg: this.options.color || 'cyan'
    };
    var instance = obj(options);
    this.options.screen.append(instance);
    return instance;
  };
  grid = Grid;
  return grid;
}

var gridExports = requireGrid();

module.exports = gridExports;
