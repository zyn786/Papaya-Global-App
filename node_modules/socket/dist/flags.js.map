{"version":3,"file":"flags.js","sources":["../src/flags.mts"],"sourcesContent":["import os from 'node:os'\nimport { pathToFileURL } from 'node:url'\n\nimport meow from 'meow'\nimport terminalLink from 'terminal-link'\n\nimport constants from './constants.mts'\n\nimport type { Flag } from 'meow'\n\n// TODO: Not sure if we're missing something but meow doesn't seem to expose this?\nexport type StringFlag = Flag<'string', string> | Flag<'string', string[], true>\nexport type BooleanFlag =\n  | Flag<'boolean', boolean>\n  | Flag<'boolean', boolean[], true>\nexport type NumberFlag = Flag<'number', number> | Flag<'number', number[], true>\nexport type AnyFlag = StringFlag | BooleanFlag | NumberFlag\n\ntype RawSpaceSizeFlags = {\n  maxOldSpaceSize: number\n  maxSemiSpaceSize: number\n}\n\nlet _rawSpaceSizeFlags: RawSpaceSizeFlags | undefined\nfunction getRawSpaceSizeFlags(): RawSpaceSizeFlags {\n  if (_rawSpaceSizeFlags === undefined) {\n    const cli = meow({\n      argv: process.argv.slice(2),\n      // Prevent meow from potentially exiting early.\n      autoHelp: false,\n      autoVersion: false,\n      flags: {\n        maxOldSpaceSize: {\n          type: 'number',\n          default: 0,\n        },\n        maxSemiSpaceSize: {\n          type: 'number',\n          default: 0,\n        },\n      },\n      importMeta: { url: `${pathToFileURL(__filename)}` } as ImportMeta,\n    })\n    _rawSpaceSizeFlags = {\n      maxOldSpaceSize: cli.flags['maxOldSpaceSize'],\n      maxSemiSpaceSize: cli.flags['maxSemiSpaceSize'],\n    }\n  }\n  return _rawSpaceSizeFlags\n}\n\nlet _maxOldSpaceSizeFlag: number | undefined\nexport function getMaxOldSpaceSizeFlag(): number {\n  if (_maxOldSpaceSizeFlag === undefined) {\n    _maxOldSpaceSizeFlag = getRawSpaceSizeFlags().maxOldSpaceSize\n    if (!_maxOldSpaceSizeFlag) {\n      const match = /(?<=--max-old-space-size=)\\d+/.exec(\n        // Lazily access constants.ENV.\n        constants.ENV.NODE_OPTIONS,\n      )?.[0]\n      _maxOldSpaceSizeFlag = match ? Number(match) : 0\n    }\n    if (!_maxOldSpaceSizeFlag) {\n      // Default value determined by available system memory.\n      _maxOldSpaceSizeFlag = Math.floor(\n        // Total system memory in MiB.\n        (os.totalmem() / 1024 / 1024) *\n          // Set 75% of total memory (safe buffer to avoid system pressure).\n          0.75,\n      )\n    }\n  }\n  return _maxOldSpaceSizeFlag\n}\n// Ensure export because dist/flags.js is required in src/constants.mts.\n// eslint-disable-next-line n/exports-style\nexports.getMaxOldSpaceSizeFlag = getMaxOldSpaceSizeFlag\n\nlet _maxSemiSpaceSizeFlag: number | undefined\nexport function getMaxSemiSpaceSizeFlag(): number {\n  if (_maxSemiSpaceSizeFlag === undefined) {\n    _maxSemiSpaceSizeFlag = getRawSpaceSizeFlags().maxSemiSpaceSize\n    if (!_maxSemiSpaceSizeFlag) {\n      const match = /(?<=--max-semi-space-size=)\\d+/.exec(\n        // Lazily access constants.ENV.\n        constants.ENV.NODE_OPTIONS,\n      )?.[0]\n      _maxSemiSpaceSizeFlag = match ? Number(match) : 0\n    }\n    if (!_maxSemiSpaceSizeFlag) {\n      const maxOldSpaceSize = getMaxOldSpaceSizeFlag()\n      // Dynamically scale semi-space size based on max-old-space-size.\n      // https://nodejs.org/api/cli.html#--max-semi-space-sizesize-in-mib\n      if (maxOldSpaceSize <= 8192) {\n        // Use tiered values for smaller heaps to avoid excessive young\n        // generation size. This helps stay within safe memory limits on\n        // constrained systems or CI.\n        if (maxOldSpaceSize <= 512) {\n          _maxSemiSpaceSizeFlag = 4\n        } else if (maxOldSpaceSize <= 1024) {\n          _maxSemiSpaceSizeFlag = 8\n        } else if (maxOldSpaceSize <= 2048) {\n          _maxSemiSpaceSizeFlag = 16\n        } else if (maxOldSpaceSize <= 4096) {\n          _maxSemiSpaceSizeFlag = 32\n        } else {\n          _maxSemiSpaceSizeFlag = 64\n        }\n      } else {\n        // For large heaps (> 8 GiB), compute semi-space size using a log-scaled\n        // function.\n        //\n        // The idea:\n        //   - log2(16384 MiB) = 14  → semi = 14 * 8 = 112\n        //   - log2(32768 MiB) = 15  → semi = 15 * 8 = 120\n        //   - Scales gradually as heap increases, avoiding overly large jumps\n        //\n        // Each 1 MiB of semi-space adds ~3 MiB to the total young generation\n        // (V8 uses 3 spaces). So this keeps semi-space proportional, without\n        // over committing.\n        //\n        // Also note: V8 won’t benefit much from >256 MiB semi-space unless\n        // you’re allocating large short-lived objects very frequently\n        // (e.g. large arrays, buffers).\n        const log2OldSpace = Math.log2(maxOldSpaceSize)\n        const scaledSemiSpace = Math.floor(log2OldSpace) * 8\n        _maxSemiSpaceSizeFlag = scaledSemiSpace\n      }\n    }\n  }\n  return _maxSemiSpaceSizeFlag\n}\n// Ensure export because dist/flags.js is required in src/constants.mts.\n// eslint-disable-next-line n/exports-style\nexports.getMaxSemiSpaceSizeFlag = getMaxSemiSpaceSizeFlag\n\n// Note: we use this description in getFlagListOutput, meow doesn't care\nexport type MeowFlags = Record<\n  string,\n  AnyFlag & { description: string; hidden?: boolean }\n>\n\nexport const commonFlags: MeowFlags = {\n  config: {\n    type: 'string',\n    default: '',\n    hidden: true,\n    description: 'Override the local config with this JSON',\n  },\n  dryRun: {\n    type: 'boolean',\n    default: false,\n    hidden: true, // Only show in root command\n    description:\n      'Do input validation for a command and exit 0 when input is ok',\n  },\n  help: {\n    type: 'boolean',\n    default: false,\n    shortFlag: 'h',\n    hidden: true,\n    description: 'Print this help',\n  },\n  maxOldSpaceSize: {\n    type: 'number',\n    get default() {\n      return getMaxOldSpaceSizeFlag()\n    },\n    hidden: true,\n    description: `Set Node's V8 ${terminalLink('--max-old-space-size', 'https://nodejs.org/api/cli.html#--max-old-space-sizesize-in-mib')} option`,\n  },\n  maxSemiSpaceSize: {\n    type: 'number',\n    get default() {\n      return getMaxSemiSpaceSizeFlag()\n    },\n    hidden: true,\n    description: `Set Node's V8 ${terminalLink('--max-semi-space-size', 'https://nodejs.org/api/cli.html#--max-semi-space-sizesize-in-mib')} option`,\n  },\n  nobanner: {\n    // I know this would be `--no-banner` but that doesn't work with cdxgen.\n    // Mostly for internal usage anyways.\n    type: 'boolean',\n    default: false,\n    hidden: true,\n    description: 'Hide the Socket banner',\n  },\n}\n\nexport const outputFlags: MeowFlags = {\n  json: {\n    type: 'boolean',\n    shortFlag: 'j',\n    default: false,\n    description: 'Output result as json',\n  },\n  markdown: {\n    type: 'boolean',\n    shortFlag: 'm',\n    default: false,\n    description: 'Output result as markdown',\n  },\n}\n\nexport const validationFlags: MeowFlags = {\n  all: {\n    type: 'boolean',\n    default: false,\n    description: 'Include all issues',\n  },\n  strict: {\n    type: 'boolean',\n    default: false,\n    description: 'Exits with an error code if any matching issues are found',\n  },\n}\n"],"names":["autoHelp","autoVersion","flags","maxOldSpaceSize","type","default","maxSemiSpaceSize","importMeta","url","_rawSpaceSizeFlags","_maxOldSpaceSizeFlag","constants","os","exports","_maxSemiSpaceSizeFlag","config","hidden","description","dryRun","help","shortFlag","nobanner","json","markdown"],"mappings":";;;;;;;AAUA;;AAaA;AACA;;;;AAIM;AACAA;AACAC;AACAC;AACEC;AACEC;AACAC;;AAEFC;AACEF;AACAC;AACF;;AAEFE;AAAcC;AAAoC;AACpD;AACAC;AACEN;AACAG;;AAEJ;AACA;AACF;AAEA;AACO;;AAEHI;;AAEE;AACE;AACAC;;AAGJ;;AAEE;;AAEE;AACCC;AACC;AACA;AAEN;AACF;AACA;AACF;AACA;AACA;AACAC;AAEA;AACO;;AAEHC;;AAEE;AACE;AACAH;;AAGJ;;AAEE;AACA;AACA;;AAEE;AACA;AACA;;AAEEG;AACF;AACEA;AACF;AACEA;AACF;AACEA;AACF;AACEA;AACF;AACF;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA;AACF;AACF;AACF;AACA;AACF;AACA;AACA;AACAD;;AAEA;;AAMO;AACLE;AACEX;AACAC;AACAW;AACAC;;AAEFC;AACEd;AACAC;AACAW;AAAc;AACdC;;AAGFE;AACEf;AACAC;AACAe;AACAJ;AACAC;;AAEFd;AACEC;;;;AAIAY;AACAC;;AAEFX;AACEF;;;;AAIAY;AACAC;;AAEFI;AACE;AACA;AACAjB;AACAC;AACAW;AACAC;AACF;AACF;AAEO;AACLK;AACElB;AACAgB;AACAf;AACAY;;AAEFM;AACEnB;AACAgB;AACAf;AACAY;AACF;AACF;;;","debugId":"3f2d4a63-9b51-45c0-9746-496261669e3c"}