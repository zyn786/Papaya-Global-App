{"version":3,"file":"shadow-npm-bin.js","sources":["../src/shadow/npm/link.mts","../src/shadow/npm/bin.mts"],"sourcesContent":["import path from 'node:path'\n\nimport cmdShim from 'cmd-shim'\n\nimport constants from '../../constants.mts'\nimport {\n  getNpmBinPath,\n  getNpxBinPath,\n  isNpmBinPathShadowed,\n  isNpxBinPathShadowed,\n} from '../../utils/npm-paths.mts'\n\nexport async function installLinks(\n  realBinPath: string,\n  binName: 'npm' | 'npx',\n): Promise<string> {\n  const isNpx = binName === 'npx'\n  // Find package manager being shadowed by this process.\n  const binPath = isNpx ? getNpxBinPath() : getNpmBinPath()\n  // Lazily access constants.WIN32.\n  const { WIN32 } = constants\n  // TODO: Is this early exit needed?\n  if (WIN32 && binPath) {\n    return binPath\n  }\n  const shadowed = isNpx ? isNpxBinPathShadowed() : isNpmBinPathShadowed()\n  // Move our bin directory to front of PATH so its found first.\n  if (!shadowed) {\n    if (WIN32) {\n      await cmdShim(\n        // Lazily access constants.distPath.\n        path.join(constants.distPath, `${binName}-cli.js`),\n        path.join(realBinPath, binName),\n      )\n    }\n    const { env } = process\n    env['PATH'] = `${realBinPath}${path.delimiter}${env['PATH']}`\n  }\n  return binPath\n}\n","import { isDebug } from '@socketsecurity/registry/lib/debug'\nimport {\n  isNpmLoglevelFlag,\n  isNpmNodeOptionsFlag,\n  isNpmProgressFlag,\n} from '@socketsecurity/registry/lib/npm'\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\n\nimport { installLinks } from './link.mts'\nimport constants from '../../constants.mts'\nimport { cmdFlagsToString } from '../../utils/cmd.mts'\n\nexport default async function shadowBin(\n  binName: 'npm' | 'npx',\n  args = process.argv.slice(2),\n) {\n  process.exitCode = 1\n  const terminatorPos = args.indexOf('--')\n  const rawBinArgs = terminatorPos === -1 ? args : args.slice(0, terminatorPos)\n  const binArgs = rawBinArgs.filter(\n    a => !isNpmProgressFlag(a) && !isNpmNodeOptionsFlag(a),\n  )\n  const nodeOptionsArg = rawBinArgs.findLast(isNpmNodeOptionsFlag)\n  const progressArg = rawBinArgs.findLast(isNpmProgressFlag) !== '--no-progress'\n  const otherArgs = terminatorPos === -1 ? [] : args.slice(terminatorPos)\n  const permArgs =\n    binName === 'npm' &&\n    // Lazily access constants.SUPPORTS_NODE_PERMISSION_FLAG.\n    constants.SUPPORTS_NODE_PERMISSION_FLAG\n      ? [\n          '--permission',\n          '--allow-child-process',\n          // '--allow-addons',\n          // '--allow-wasi',\n          // Allow all reads because npm walks up directories looking for config\n          // and package.json files.\n          '--allow-fs-read=*',\n          `--allow-fs-write=${process.cwd()}/*`,\n          // Lazily access constants.npmGlobalPrefix.\n          `--allow-fs-write=${constants.npmGlobalPrefix}/*`,\n          // Lazily access constants.npmGlobalPrefix.\n          `--allow-fs-write=${constants.npmCachePath}/*`,\n        ]\n      : []\n  const useDebug = isDebug('stdio')\n  const useNodeOptions = nodeOptionsArg || permArgs.length\n  const isSilent = !useDebug && !binArgs.some(isNpmLoglevelFlag)\n  // The default value of loglevel is \"notice\". We default to \"error\" which is\n  // two levels quieter.\n  const logLevelArgs = isSilent ? ['--loglevel', 'error'] : []\n  const spawnPromise = spawn(\n    // Lazily access constants.execPath.\n    constants.execPath,\n    [\n      // Lazily access constants.nodeNoWarningsFlags.\n      ...constants.nodeNoWarningsFlags,\n      // Lazily access constants.nodeHardenFlags.\n      ...constants.nodeHardenFlags,\n      // Lazily access constants.nodeMemoryFlags.\n      ...constants.nodeMemoryFlags,\n      // Lazily access constants.ENV.INLINED_SOCKET_CLI_SENTRY_BUILD.\n      ...(constants.ENV.INLINED_SOCKET_CLI_SENTRY_BUILD\n        ? [\n            '--require',\n            // Lazily access constants.instrumentWithSentryPath.\n            constants.instrumentWithSentryPath,\n          ]\n        : []),\n      '--require',\n      // Lazily access constants.shadowNpmInjectPath.\n      constants.shadowNpmInjectPath,\n      // Lazily access constants.shadowBinPath.\n      await installLinks(constants.shadowBinPath, binName),\n      ...(useDebug ? ['--trace-uncaught', '--trace-warnings'] : []),\n      ...(useNodeOptions\n        ? [\n            `--node-options='${nodeOptionsArg ? nodeOptionsArg.slice(15) : ''}${cmdFlagsToString(permArgs)}'`,\n          ]\n        : []),\n      // Add '--no-progress' to fix input being swallowed by the npm spinner.\n      '--no-progress',\n      // Add '--loglevel=error' if a loglevel flag is not provided and the\n      // SOCKET_CLI_DEBUG environment variable is not truthy.\n      ...logLevelArgs,\n      ...binArgs,\n      ...otherArgs,\n    ],\n    {\n      env: {\n        ...process.env,\n        // Lazily access constants.processEnv.\n        ...constants.processEnv,\n      },\n      // 'inherit' + 'ipc'\n      stdio: [0, 1, 2, 'ipc'],\n    },\n  )\n  // See https://nodejs.org/api/child_process.html#event-exit.\n  spawnPromise.process.on('exit', (code, signalName) => {\n    if (signalName) {\n      process.kill(process.pid, signalName)\n    } else if (code !== null) {\n      // eslint-disable-next-line n/no-process-exit\n      process.exit(code)\n    }\n  })\n\n  spawnPromise.process.send({\n    // Lazily access constants.SOCKET_IPC_HANDSHAKE.\n    [constants.SOCKET_IPC_HANDSHAKE]: {\n      // Lazily access constants.SOCKET_CLI_SAFE_BIN.\n      [constants.SOCKET_CLI_SAFE_BIN]: binName,\n      // Lazily access constants.SOCKET_CLI_SAFE_PROGRESS.\n      [constants.SOCKET_CLI_SAFE_PROGRESS]: progressArg,\n    },\n  })\n  await spawnPromise\n}\n"],"names":["WIN32","env","constants","process","spawnPromise"],"mappings":";;;;;;;;;;AAYO;AAIL;AACA;;AAEA;;AACQA;AAAM;AACd;;AAEE;AACF;;AAEA;;AAEE;AACE;AACE;;AAIJ;;AACQC;AAAI;AACZA;AACF;AACA;AACF;;AC3Be;;AAKb;AACA;AACA;AAGA;;AAEA;AACA;AAEE;AACAC;AAIM;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAGR;AACA;;AAEA;AACA;;;AAGE;;AAGE;;AAEA;;AAEA;;AAEA;AACA;AAGM;AACAA;AAIN;AACAA;AACA;;AAQA;;AAEA;AACA;;AAMAD;;AAEE;AACA;;AAEF;;AAEF;AAEF;;AAEE;;AAEA;AACE;AACAE;AACF;AACF;AAEAC;AACE;;AAEE;AACA;AACA;;AAEF;AACF;AACA;AACF;;","debugId":"b57e835e-8355-4791-a897-fd329a01d7a8"}